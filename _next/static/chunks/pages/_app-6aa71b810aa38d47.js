(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
  [2888],
  {
    35376: function (e) {
      "use strict";
      var l = {
        single_source_shortest_paths: function (e, c, d) {
          var m,
            g,
            y,
            b,
            C,
            P,
            I,
            B = {},
            N = {};
          N[c] = 0;
          var F = l.PriorityQueue.make();
          for (F.push(c, 0); !F.empty(); )
            for (y in ((g = (m = F.pop()).value),
            (b = m.cost),
            (C = e[g] || {})))
              C.hasOwnProperty(y) &&
                ((P = b + C[y]),
                (I = N[y]),
                (void 0 === N[y] || I > P) &&
                  ((N[y] = P), F.push(y, P), (B[y] = g)));
          if (void 0 !== d && void 0 === N[d])
            throw Error(
              ["Could not find a path from ", c, " to ", d, "."].join("")
            );
          return B;
        },
        extract_shortest_path_from_predecessor_list: function (e, l) {
          for (var c = [], d = l; d; ) c.push(d), e[d], (d = e[d]);
          return c.reverse(), c;
        },
        find_path: function (e, c, d) {
          var m = l.single_source_shortest_paths(e, c, d);
          return l.extract_shortest_path_from_predecessor_list(m, d);
        },
        PriorityQueue: {
          make: function (e) {
            var c,
              d = l.PriorityQueue,
              m = {};
            for (c in ((e = e || {}), d)) d.hasOwnProperty(c) && (m[c] = d[c]);
            return (m.queue = []), (m.sorter = e.sorter || d.default_sorter), m;
          },
          default_sorter: function (e, l) {
            return e.cost - l.cost;
          },
          push: function (e, l) {
            this.queue.push({ value: e, cost: l }),
              this.queue.sort(this.sorter);
          },
          pop: function () {
            return this.queue.shift();
          },
          empty: function () {
            return 0 === this.queue.length;
          },
        },
      };
      e.exports = l;
    },
    2337: function (e) {
      "use strict";
      var l = Object.prototype.hasOwnProperty,
        c = "~";
      function Events() {}
      function EE(e, l, c) {
        (this.fn = e), (this.context = l), (this.once = c || !1);
      }
      function addListener(e, l, d, m, g) {
        if ("function" != typeof d)
          throw TypeError("The listener must be a function");
        var y = new EE(d, m || e, g),
          b = c ? c + l : l;
        return (
          e._events[b]
            ? e._events[b].fn
              ? (e._events[b] = [e._events[b], y])
              : e._events[b].push(y)
            : ((e._events[b] = y), e._eventsCount++),
          e
        );
      }
      function clearEvent(e, l) {
        0 == --e._eventsCount
          ? (e._events = new Events())
          : delete e._events[l];
      }
      function EventEmitter() {
        (this._events = new Events()), (this._eventsCount = 0);
      }
      Object.create &&
        ((Events.prototype = Object.create(null)),
        new Events().__proto__ || (c = !1)),
        (EventEmitter.prototype.eventNames = function () {
          var e,
            d,
            m = [];
          if (0 === this._eventsCount) return m;
          for (d in (e = this._events))
            l.call(e, d) && m.push(c ? d.slice(1) : d);
          return Object.getOwnPropertySymbols
            ? m.concat(Object.getOwnPropertySymbols(e))
            : m;
        }),
        (EventEmitter.prototype.listeners = function (e) {
          var l = c ? c + e : e,
            d = this._events[l];
          if (!d) return [];
          if (d.fn) return [d.fn];
          for (var m = 0, g = d.length, y = Array(g); m < g; m++)
            y[m] = d[m].fn;
          return y;
        }),
        (EventEmitter.prototype.listenerCount = function (e) {
          var l = c ? c + e : e,
            d = this._events[l];
          return d ? (d.fn ? 1 : d.length) : 0;
        }),
        (EventEmitter.prototype.emit = function (e, l, d, m, g, y) {
          var b = c ? c + e : e;
          if (!this._events[b]) return !1;
          var C,
            P,
            I = this._events[b],
            B = arguments.length;
          if (I.fn) {
            switch ((I.once && this.removeListener(e, I.fn, void 0, !0), B)) {
              case 1:
                return I.fn.call(I.context), !0;
              case 2:
                return I.fn.call(I.context, l), !0;
              case 3:
                return I.fn.call(I.context, l, d), !0;
              case 4:
                return I.fn.call(I.context, l, d, m), !0;
              case 5:
                return I.fn.call(I.context, l, d, m, g), !0;
              case 6:
                return I.fn.call(I.context, l, d, m, g, y), !0;
            }
            for (P = 1, C = Array(B - 1); P < B; P++) C[P - 1] = arguments[P];
            I.fn.apply(I.context, C);
          } else {
            var N,
              F = I.length;
            for (P = 0; P < F; P++)
              switch (
                (I[P].once && this.removeListener(e, I[P].fn, void 0, !0), B)
              ) {
                case 1:
                  I[P].fn.call(I[P].context);
                  break;
                case 2:
                  I[P].fn.call(I[P].context, l);
                  break;
                case 3:
                  I[P].fn.call(I[P].context, l, d);
                  break;
                case 4:
                  I[P].fn.call(I[P].context, l, d, m);
                  break;
                default:
                  if (!C)
                    for (N = 1, C = Array(B - 1); N < B; N++)
                      C[N - 1] = arguments[N];
                  I[P].fn.apply(I[P].context, C);
              }
          }
          return !0;
        }),
        (EventEmitter.prototype.on = function (e, l, c) {
          return addListener(this, e, l, c, !1);
        }),
        (EventEmitter.prototype.once = function (e, l, c) {
          return addListener(this, e, l, c, !0);
        }),
        (EventEmitter.prototype.removeListener = function (e, l, d, m) {
          var g = c ? c + e : e;
          if (!this._events[g]) return this;
          if (!l) return clearEvent(this, g), this;
          var y = this._events[g];
          if (y.fn)
            y.fn !== l ||
              (m && !y.once) ||
              (d && y.context !== d) ||
              clearEvent(this, g);
          else {
            for (var b = 0, C = [], P = y.length; b < P; b++)
              (y[b].fn !== l ||
                (m && !y[b].once) ||
                (d && y[b].context !== d)) &&
                C.push(y[b]);
            C.length
              ? (this._events[g] = 1 === C.length ? C[0] : C)
              : clearEvent(this, g);
          }
          return this;
        }),
        (EventEmitter.prototype.removeAllListeners = function (e) {
          var l;
          return (
            e
              ? ((l = c ? c + e : e), this._events[l] && clearEvent(this, l))
              : ((this._events = new Events()), (this._eventsCount = 0)),
            this
          );
        }),
        (EventEmitter.prototype.off = EventEmitter.prototype.removeListener),
        (EventEmitter.prototype.addListener = EventEmitter.prototype.on),
        (EventEmitter.prefixed = c),
        (EventEmitter.EventEmitter = EventEmitter),
        (e.exports = EventEmitter);
    },
    72535: function (e, l, c) {
      "use strict";
      var d = c(56237),
        m = {
          childContextTypes: !0,
          contextType: !0,
          contextTypes: !0,
          defaultProps: !0,
          displayName: !0,
          getDefaultProps: !0,
          getDerivedStateFromError: !0,
          getDerivedStateFromProps: !0,
          mixins: !0,
          propTypes: !0,
          type: !0,
        },
        g = {
          name: !0,
          length: !0,
          prototype: !0,
          caller: !0,
          callee: !0,
          arguments: !0,
          arity: !0,
        },
        y = {
          $$typeof: !0,
          compare: !0,
          defaultProps: !0,
          displayName: !0,
          propTypes: !0,
          type: !0,
        },
        b = {};
      function getStatics(e) {
        return d.isMemo(e) ? y : b[e.$$typeof] || m;
      }
      (b[d.ForwardRef] = {
        $$typeof: !0,
        render: !0,
        defaultProps: !0,
        displayName: !0,
        propTypes: !0,
      }),
        (b[d.Memo] = y);
      var C = Object.defineProperty,
        P = Object.getOwnPropertyNames,
        I = Object.getOwnPropertySymbols,
        B = Object.getOwnPropertyDescriptor,
        N = Object.getPrototypeOf,
        F = Object.prototype;
      e.exports = function hoistNonReactStatics(e, l, c) {
        if ("string" != typeof l) {
          if (F) {
            var d = N(l);
            d && d !== F && hoistNonReactStatics(e, d, c);
          }
          var m = P(l);
          I && (m = m.concat(I(l)));
          for (
            var y = getStatics(e), b = getStatics(l), V = 0;
            V < m.length;
            ++V
          ) {
            var G = m[V];
            if (!g[G] && !(c && c[G]) && !(b && b[G]) && !(y && y[G])) {
              var Q = B(l, G);
              try {
                C(e, G, Q);
              } catch (e) {}
            }
          }
        }
        return e;
      };
    },
    39838: function (e, l, c) {
      var d, m, g;
      (m = this),
        (g = function (e) {
          function forEach(e, l) {
            var c, d;
            for (c = -1, d = e.length; ++c < d; ) l(e[c], c, e);
          }
          function map(e, l) {
            var c;
            return (
              (c = Array(e.length)),
              forEach(e, function (e, d, m) {
                c[d] = l(e, d, m);
              }),
              c
            );
          }
          function reduce(e, l, c) {
            return (
              forEach(e, function (e, d, m) {
                c = l(e, d, m);
              }),
              c
            );
          }
          function Levenshtein(e, l) {
            var c, d, m;
            return ((m = this._matrix = []), e == l)
              ? (this.distance = 0)
              : "" == e
              ? (this.distance = l.length)
              : "" == l
              ? (this.distance = e.length)
              : ((c = [0]),
                forEach(e, function (e, l) {
                  c[++l] = l;
                }),
                (m[0] = c),
                forEach(l, function (g, y) {
                  (d = [++y]),
                    forEach(e, function (m, g) {
                      g++,
                        e.charAt(g - 1) == l.charAt(y - 1)
                          ? (d[g] = c[g - 1])
                          : (d[g] = Math.min(
                              c[g] + 1,
                              d[g - 1] + 1,
                              c[g - 1] + 1
                            ));
                    }),
                    (c = d),
                    (m[m.length] = c);
                }),
                (this.distance = d[d.length - 1]));
          }
          return (
            (Levenshtein.prototype.toString = Levenshtein.prototype.inspect =
              function (e) {
                var l, c, d;
                for (
                  c = Array(
                    (
                      reduce(
                        (l = this.getMatrix()),
                        function (e, l) {
                          return Math.max(e, reduce(l, Math.max, 0));
                        },
                        0
                      ) + ""
                    ).length
                  ).join(" "),
                    d = [];
                  d.length < ((l[0] && l[0].length) || 0);

                )
                  d[d.length] = Array(c.length + 1).join("-");
                return (
                  (d = d.join("-+") + "-"),
                  map(l, function (e) {
                    return (
                      map(e, function (e) {
                        return (c + e).slice(-c.length);
                      }).join(" |") + " "
                    );
                  }).join("\n" + d + "\n")
                );
              }),
            (Levenshtein.prototype.getMatrix = function () {
              return this._matrix.slice();
            }),
            (Levenshtein.prototype.valueOf = function () {
              return this.distance;
            }),
            Levenshtein
          );
        }),
        void 0 !==
          (d = function () {
            return g(m);
          }.call(l, c, l, e)) && (e.exports = d);
    },
    88299: function (e, l, c) {
      "use strict";
      c.d(l, {
        Z: function () {
          return createLucideIcon;
        },
      });
      var d = c(50959);
      /**
       * @license lucide-react v0.462.0 - ISC
       *
       * This source code is licensed under the ISC license.
       * See the LICENSE file in the root directory of this source tree.
       */ let toKebabCase = (e) =>
          e.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase(),
        mergeClasses = (...e) =>
          e
            .filter((e, l, c) => !!e && "" !== e.trim() && c.indexOf(e) === l)
            .join(" ")
            .trim();
      /**
       * @license lucide-react v0.462.0 - ISC
       *
       * This source code is licensed under the ISC license.
       * See the LICENSE file in the root directory of this source tree.
       */ var m = {
        xmlns: "http://www.w3.org/2000/svg",
        width: 24,
        height: 24,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: 2,
        strokeLinecap: "round",
        strokeLinejoin: "round",
      };
      /**
       * @license lucide-react v0.462.0 - ISC
       *
       * This source code is licensed under the ISC license.
       * See the LICENSE file in the root directory of this source tree.
       */ let g = (0, d.forwardRef)(
          (
            {
              color: e = "currentColor",
              size: l = 24,
              strokeWidth: c = 2,
              absoluteStrokeWidth: g,
              className: y = "",
              children: b,
              iconNode: C,
              ...P
            },
            I
          ) =>
            (0, d.createElement)(
              "svg",
              {
                ref: I,
                ...m,
                width: l,
                height: l,
                stroke: e,
                strokeWidth: g ? (24 * Number(c)) / Number(l) : c,
                className: mergeClasses("lucide", y),
                ...P,
              },
              [
                ...C.map(([e, l]) => (0, d.createElement)(e, l)),
                ...(Array.isArray(b) ? b : [b]),
              ]
            )
        ),
        createLucideIcon = (e, l) => {
          let c = (0, d.forwardRef)(({ className: c, ...m }, y) =>
            (0, d.createElement)(g, {
              ref: y,
              iconNode: l,
              className: mergeClasses(`lucide-${toKebabCase(e)}`, c),
              ...m,
            })
          );
          return (c.displayName = `${e}`), c;
        };
    },
    21481: function (e, l, c) {
      "use strict";
      var d, m;
      e.exports =
        (null == (d = c.g.process) ? void 0 : d.env) &&
        "object" == typeof (null == (m = c.g.process) ? void 0 : m.env)
          ? c.g.process
          : c(53309);
    },
    69329: function (e, l, c) {
      (window.__NEXT_P = window.__NEXT_P || []).push([
        "/_app",
        function () {
          return c(10097);
        },
      ]);
    },
    51386: function (e, l) {
      "use strict";
      l.Z = {
        src: "/_next/static/media/Noya.62f52985.svg",
        height: 59,
        width: 150,
        blurWidth: 0,
        blurHeight: 0,
      };
    },
    82438: function (e, l) {
      "use strict";
      l.Z = {
        src: "/_next/static/media/arrow.5f6f0b6c.svg",
        height: 8,
        width: 15,
        blurWidth: 0,
        blurHeight: 0,
      };
    },
    73909: function (e, l) {
      "use strict";
      l.Z = {
        src: "/_next/static/media/twitter.b921377b.svg",
        height: 24,
        width: 24,
        blurWidth: 0,
        blurHeight: 0,
      };
    },
    12563: function (e, l) {
      "use strict";
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "createAsyncLocalStorage", {
          enumerable: !0,
          get: function () {
            return createAsyncLocalStorage;
          },
        });
      let c = Error(
        "Invariant: AsyncLocalStorage accessed in runtime where it is not available"
      );
      let FakeAsyncLocalStorage = class FakeAsyncLocalStorage {
        disable() {
          throw c;
        }
        getStore() {}
        run() {
          throw c;
        }
        exit() {
          throw c;
        }
        enterWith() {
          throw c;
        }
      };
      let d = globalThis.AsyncLocalStorage;
      function createAsyncLocalStorage() {
        return d ? new d() : new FakeAsyncLocalStorage();
      }
      ("function" == typeof l.default ||
        ("object" == typeof l.default && null !== l.default)) &&
        void 0 === l.default.__esModule &&
        (Object.defineProperty(l.default, "__esModule", { value: !0 }),
        Object.assign(l.default, l),
        (e.exports = l.default));
    },
    5574: function (e, l, c) {
      "use strict";
      function clientHookInServerComponentError(e) {}
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "clientHookInServerComponentError", {
          enumerable: !0,
          get: function () {
            return clientHookInServerComponentError;
          },
        }),
        c(81351),
        c(50959),
        ("function" == typeof l.default ||
          ("object" == typeof l.default && null !== l.default)) &&
          void 0 === l.default.__esModule &&
          (Object.defineProperty(l.default, "__esModule", { value: !0 }),
          Object.assign(l.default, l),
          (e.exports = l.default));
    },
    14104: function (e, l, c) {
      "use strict";
      Object.defineProperty(l, "__esModule", { value: !0 }),
        (function (e, l) {
          for (var c in l)
            Object.defineProperty(e, c, { enumerable: !0, get: l[c] });
        })(l, {
          ReadonlyURLSearchParams: function () {
            return ReadonlyURLSearchParams;
          },
          useSearchParams: function () {
            return useSearchParams;
          },
          usePathname: function () {
            return usePathname;
          },
          ServerInsertedHTMLContext: function () {
            return C.ServerInsertedHTMLContext;
          },
          useServerInsertedHTML: function () {
            return C.useServerInsertedHTML;
          },
          useRouter: function () {
            return useRouter;
          },
          useParams: function () {
            return useParams;
          },
          useSelectedLayoutSegments: function () {
            return useSelectedLayoutSegments;
          },
          useSelectedLayoutSegment: function () {
            return useSelectedLayoutSegment;
          },
          redirect: function () {
            return P.redirect;
          },
          permanentRedirect: function () {
            return P.permanentRedirect;
          },
          RedirectType: function () {
            return P.RedirectType;
          },
          notFound: function () {
            return I.notFound;
          },
        });
      let d = c(50959),
        m = c(97610),
        g = c(56967),
        y = c(5574),
        b = c(73837),
        C = c(59644),
        P = c(78603),
        I = c(6119),
        B = Symbol("internal for urlsearchparams readonly");
      function readonlyURLSearchParamsError() {
        return Error("ReadonlyURLSearchParams cannot be modified");
      }
      let ReadonlyURLSearchParams = class ReadonlyURLSearchParams {
        [Symbol.iterator]() {
          return this[B][Symbol.iterator]();
        }
        append() {
          throw readonlyURLSearchParamsError();
        }
        delete() {
          throw readonlyURLSearchParamsError();
        }
        set() {
          throw readonlyURLSearchParamsError();
        }
        sort() {
          throw readonlyURLSearchParamsError();
        }
        constructor(e) {
          (this[B] = e),
            (this.entries = e.entries.bind(e)),
            (this.forEach = e.forEach.bind(e)),
            (this.get = e.get.bind(e)),
            (this.getAll = e.getAll.bind(e)),
            (this.has = e.has.bind(e)),
            (this.keys = e.keys.bind(e)),
            (this.values = e.values.bind(e)),
            (this.toString = e.toString.bind(e)),
            (this.size = e.size);
        }
      };
      function useSearchParams() {
        (0, y.clientHookInServerComponentError)("useSearchParams");
        let e = (0, d.useContext)(g.SearchParamsContext),
          l = (0, d.useMemo)(
            () => (e ? new ReadonlyURLSearchParams(e) : null),
            [e]
          );
        return l;
      }
      function usePathname() {
        return (
          (0, y.clientHookInServerComponentError)("usePathname"),
          (0, d.useContext)(g.PathnameContext)
        );
      }
      function useRouter() {
        (0, y.clientHookInServerComponentError)("useRouter");
        let e = (0, d.useContext)(m.AppRouterContext);
        if (null === e)
          throw Error("invariant expected app router to be mounted");
        return e;
      }
      function useParams() {
        (0, y.clientHookInServerComponentError)("useParams");
        let e = (0, d.useContext)(m.GlobalLayoutRouterContext),
          l = (0, d.useContext)(g.PathParamsContext);
        return (0, d.useMemo)(
          () =>
            (null == e ? void 0 : e.tree)
              ? (function getSelectedParams(e, l) {
                  void 0 === l && (l = {});
                  let c = e[1];
                  for (let e of Object.values(c)) {
                    let c = e[0],
                      d = Array.isArray(c),
                      m = d ? c[1] : c;
                    if (!m || m.startsWith("__PAGE__")) continue;
                    let g = d && ("c" === c[2] || "oc" === c[2]);
                    g ? (l[c[0]] = c[1].split("/")) : d && (l[c[0]] = c[1]),
                      (l = getSelectedParams(e, l));
                  }
                  return l;
                })(e.tree)
              : l,
          [null == e ? void 0 : e.tree, l]
        );
      }
      function useSelectedLayoutSegments(e) {
        void 0 === e && (e = "children"),
          (0, y.clientHookInServerComponentError)("useSelectedLayoutSegments");
        let { tree: l } = (0, d.useContext)(m.LayoutRouterContext);
        return (function getSelectedLayoutSegmentPath(e, l, c, d) {
          let m;
          if ((void 0 === c && (c = !0), void 0 === d && (d = []), c))
            m = e[1][l];
          else {
            var g;
            let l = e[1];
            m = null != (g = l.children) ? g : Object.values(l)[0];
          }
          if (!m) return d;
          let y = m[0],
            C = (0, b.getSegmentValue)(y);
          return !C || C.startsWith("__PAGE__")
            ? d
            : (d.push(C), getSelectedLayoutSegmentPath(m, l, !1, d));
        })(l, e);
      }
      function useSelectedLayoutSegment(e) {
        void 0 === e && (e = "children"),
          (0, y.clientHookInServerComponentError)("useSelectedLayoutSegment");
        let l = useSelectedLayoutSegments(e);
        return 0 === l.length ? null : l[0];
      }
      ("function" == typeof l.default ||
        ("object" == typeof l.default && null !== l.default)) &&
        void 0 === l.default.__esModule &&
        (Object.defineProperty(l.default, "__esModule", { value: !0 }),
        Object.assign(l.default, l),
        (e.exports = l.default));
    },
    6119: function (e, l) {
      "use strict";
      Object.defineProperty(l, "__esModule", { value: !0 }),
        (function (e, l) {
          for (var c in l)
            Object.defineProperty(e, c, { enumerable: !0, get: l[c] });
        })(l, {
          notFound: function () {
            return notFound;
          },
          isNotFoundError: function () {
            return isNotFoundError;
          },
        });
      let c = "NEXT_NOT_FOUND";
      function notFound() {
        let e = Error(c);
        throw ((e.digest = c), e);
      }
      function isNotFoundError(e) {
        return (null == e ? void 0 : e.digest) === c;
      }
      ("function" == typeof l.default ||
        ("object" == typeof l.default && null !== l.default)) &&
        void 0 === l.default.__esModule &&
        (Object.defineProperty(l.default, "__esModule", { value: !0 }),
        Object.assign(l.default, l),
        (e.exports = l.default));
    },
    78603: function (e, l, c) {
      "use strict";
      var d, m;
      Object.defineProperty(l, "__esModule", { value: !0 }),
        (function (e, l) {
          for (var c in l)
            Object.defineProperty(e, c, { enumerable: !0, get: l[c] });
        })(l, {
          RedirectType: function () {
            return d;
          },
          getRedirectError: function () {
            return getRedirectError;
          },
          redirect: function () {
            return redirect;
          },
          permanentRedirect: function () {
            return permanentRedirect;
          },
          isRedirectError: function () {
            return isRedirectError;
          },
          getURLFromRedirectError: function () {
            return getURLFromRedirectError;
          },
          getRedirectTypeFromError: function () {
            return getRedirectTypeFromError;
          },
        });
      let g = c(66485),
        y = "NEXT_REDIRECT";
      function getRedirectError(e, l, c) {
        void 0 === c && (c = !1);
        let d = Error(y);
        d.digest = y + ";" + l + ";" + e + ";" + c;
        let m = g.requestAsyncStorage.getStore();
        return m && (d.mutableCookies = m.mutableCookies), d;
      }
      function redirect(e, l) {
        throw (void 0 === l && (l = "replace"), getRedirectError(e, l, !1));
      }
      function permanentRedirect(e, l) {
        throw (void 0 === l && (l = "replace"), getRedirectError(e, l, !0));
      }
      function isRedirectError(e) {
        if ("string" != typeof (null == e ? void 0 : e.digest)) return !1;
        let [l, c, d, m] = e.digest.split(";", 4);
        return (
          l === y &&
          ("replace" === c || "push" === c) &&
          "string" == typeof d &&
          ("true" === m || "false" === m)
        );
      }
      function getURLFromRedirectError(e) {
        return isRedirectError(e) ? e.digest.split(";", 3)[2] : null;
      }
      function getRedirectTypeFromError(e) {
        if (!isRedirectError(e)) throw Error("Not a redirect error");
        return e.digest.split(";", 3)[1];
      }
      ((m = d || (d = {})).push = "push"),
        (m.replace = "replace"),
        ("function" == typeof l.default ||
          ("object" == typeof l.default && null !== l.default)) &&
          void 0 === l.default.__esModule &&
          (Object.defineProperty(l.default, "__esModule", { value: !0 }),
          Object.assign(l.default, l),
          (e.exports = l.default));
    },
    66485: function (e, l, c) {
      "use strict";
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "requestAsyncStorage", {
          enumerable: !0,
          get: function () {
            return m;
          },
        });
      let d = c(12563),
        m = (0, d.createAsyncLocalStorage)();
      ("function" == typeof l.default ||
        ("object" == typeof l.default && null !== l.default)) &&
        void 0 === l.default.__esModule &&
        (Object.defineProperty(l.default, "__esModule", { value: !0 }),
        Object.assign(l.default, l),
        (e.exports = l.default));
    },
    73837: function (e, l) {
      "use strict";
      function getSegmentValue(e) {
        return Array.isArray(e) ? e[1] : e;
      }
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "getSegmentValue", {
          enumerable: !0,
          get: function () {
            return getSegmentValue;
          },
        }),
        ("function" == typeof l.default ||
          ("object" == typeof l.default && null !== l.default)) &&
          void 0 === l.default.__esModule &&
          (Object.defineProperty(l.default, "__esModule", { value: !0 }),
          Object.assign(l.default, l),
          (e.exports = l.default));
    },
    38318: function (e, l) {
      "use strict";
      var c, d;
      Object.defineProperty(l, "__esModule", { value: !0 }),
        (function (e, l) {
          for (var c in l)
            Object.defineProperty(e, c, { enumerable: !0, get: l[c] });
        })(l, {
          PrefetchKind: function () {
            return c;
          },
          ACTION_REFRESH: function () {
            return m;
          },
          ACTION_NAVIGATE: function () {
            return g;
          },
          ACTION_RESTORE: function () {
            return y;
          },
          ACTION_SERVER_PATCH: function () {
            return b;
          },
          ACTION_PREFETCH: function () {
            return C;
          },
          ACTION_FAST_REFRESH: function () {
            return P;
          },
          ACTION_SERVER_ACTION: function () {
            return I;
          },
        });
      let m = "refresh",
        g = "navigate",
        y = "restore",
        b = "server-patch",
        C = "prefetch",
        P = "fast-refresh",
        I = "server-action";
      ((d = c || (c = {})).AUTO = "auto"),
        (d.FULL = "full"),
        (d.TEMPORARY = "temporary"),
        ("function" == typeof l.default ||
          ("object" == typeof l.default && null !== l.default)) &&
          void 0 === l.default.__esModule &&
          (Object.defineProperty(l.default, "__esModule", { value: !0 }),
          Object.assign(l.default, l),
          (e.exports = l.default));
    },
    6669: function (e, l, c) {
      "use strict";
      function getDomainLocale(e, l, c, d) {
        return !1;
      }
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "getDomainLocale", {
          enumerable: !0,
          get: function () {
            return getDomainLocale;
          },
        }),
        c(71407),
        ("function" == typeof l.default ||
          ("object" == typeof l.default && null !== l.default)) &&
          void 0 === l.default.__esModule &&
          (Object.defineProperty(l.default, "__esModule", { value: !0 }),
          Object.assign(l.default, l),
          (e.exports = l.default));
    },
    85613: function (e, l, c) {
      "use strict";
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "Image", {
          enumerable: !0,
          get: function () {
            return G;
          },
        });
      let d = c(81351),
        m = c(35815),
        g = m._(c(50959)),
        y = d._(c(10422)),
        b = d._(c(99915)),
        C = c(75708),
        P = c(49153),
        I = c(81596);
      c(46527);
      let B = c(93503),
        N = d._(c(95354)),
        F = {
          deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
          imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
          path: "/_next/image",
          loader: "default",
          dangerouslyAllowSVG: !1,
          unoptimized: !1,
        };
      function handleLoading(e, l, c, d, m, g) {
        let y = null == e ? void 0 : e.src;
        if (!e || e["data-loaded-src"] === y) return;
        e["data-loaded-src"] = y;
        let b = "decode" in e ? e.decode() : Promise.resolve();
        b.catch(() => {}).then(() => {
          if (e.parentElement && e.isConnected) {
            if (("empty" !== l && m(!0), null == c ? void 0 : c.current)) {
              let l = new Event("load");
              Object.defineProperty(l, "target", { writable: !1, value: e });
              let d = !1,
                m = !1;
              c.current({
                ...l,
                nativeEvent: l,
                currentTarget: e,
                target: e,
                isDefaultPrevented: () => d,
                isPropagationStopped: () => m,
                persist: () => {},
                preventDefault: () => {
                  (d = !0), l.preventDefault();
                },
                stopPropagation: () => {
                  (m = !0), l.stopPropagation();
                },
              });
            }
            (null == d ? void 0 : d.current) && d.current(e);
          }
        });
      }
      function getDynamicProps(e) {
        let [l, c] = g.version.split("."),
          d = parseInt(l, 10),
          m = parseInt(c, 10);
        return d > 18 || (18 === d && m >= 3)
          ? { fetchPriority: e }
          : { fetchpriority: e };
      }
      let V = (0, g.forwardRef)((e, l) => {
        let {
          src: c,
          srcSet: d,
          sizes: m,
          height: y,
          width: b,
          decoding: C,
          className: P,
          style: I,
          fetchPriority: B,
          placeholder: N,
          loading: F,
          unoptimized: V,
          fill: G,
          onLoadRef: Q,
          onLoadingCompleteRef: $,
          setBlurComplete: Z,
          setShowAltText: Y,
          onLoad: et,
          onError: en,
          ...er
        } = e;
        return g.default.createElement("img", {
          ...er,
          ...getDynamicProps(B),
          loading: F,
          width: b,
          height: y,
          decoding: C,
          "data-nimg": G ? "fill" : "1",
          className: P,
          style: I,
          sizes: m,
          srcSet: d,
          src: c,
          ref: (0, g.useCallback)(
            (e) => {
              l &&
                ("function" == typeof l
                  ? l(e)
                  : "object" == typeof l && (l.current = e)),
                e &&
                  (en && (e.src = e.src),
                  e.complete && handleLoading(e, N, Q, $, Z, V));
            },
            [c, N, Q, $, Z, en, V, l]
          ),
          onLoad: (e) => {
            let l = e.currentTarget;
            handleLoading(l, N, Q, $, Z, V);
          },
          onError: (e) => {
            Y(!0), "empty" !== N && Z(!0), en && en(e);
          },
        });
      });
      function ImagePreload(e) {
        let { isAppRouter: l, imgAttributes: c } = e,
          d = {
            as: "image",
            imageSrcSet: c.srcSet,
            imageSizes: c.sizes,
            crossOrigin: c.crossOrigin,
            referrerPolicy: c.referrerPolicy,
            ...getDynamicProps(c.fetchPriority),
          };
        return l && y.default.preload
          ? (y.default.preload(c.src, d), null)
          : g.default.createElement(
              b.default,
              null,
              g.default.createElement("link", {
                key: "__nimg-" + c.src + c.srcSet + c.sizes,
                rel: "preload",
                href: c.srcSet ? void 0 : c.src,
                ...d,
              })
            );
      }
      let G = (0, g.forwardRef)((e, l) => {
        let c = (0, g.useContext)(B.RouterContext),
          d = (0, g.useContext)(I.ImageConfigContext),
          m = (0, g.useMemo)(() => {
            let e = F || d || P.imageConfigDefault,
              l = [...e.deviceSizes, ...e.imageSizes].sort((e, l) => e - l),
              c = e.deviceSizes.sort((e, l) => e - l);
            return { ...e, allSizes: l, deviceSizes: c };
          }, [d]),
          { onLoad: y, onLoadingComplete: b } = e,
          G = (0, g.useRef)(y);
        (0, g.useEffect)(() => {
          G.current = y;
        }, [y]);
        let Q = (0, g.useRef)(b);
        (0, g.useEffect)(() => {
          Q.current = b;
        }, [b]);
        let [$, Z] = (0, g.useState)(!1),
          [Y, et] = (0, g.useState)(!1),
          { props: en, meta: er } = (0, C.getImgProps)(e, {
            defaultLoader: N.default,
            imgConf: m,
            blurComplete: $,
            showAltText: Y,
          });
        return g.default.createElement(
          g.default.Fragment,
          null,
          g.default.createElement(V, {
            ...en,
            unoptimized: er.unoptimized,
            placeholder: er.placeholder,
            fill: er.fill,
            onLoadRef: G,
            onLoadingCompleteRef: Q,
            setBlurComplete: Z,
            setShowAltText: et,
            ref: l,
          }),
          er.priority
            ? g.default.createElement(ImagePreload, {
                isAppRouter: !c,
                imgAttributes: en,
              })
            : null
        );
      });
      ("function" == typeof l.default ||
        ("object" == typeof l.default && null !== l.default)) &&
        void 0 === l.default.__esModule &&
        (Object.defineProperty(l.default, "__esModule", { value: !0 }),
        Object.assign(l.default, l),
        (e.exports = l.default));
    },
    64431: function (e, l, c) {
      "use strict";
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "default", {
          enumerable: !0,
          get: function () {
            return Z;
          },
        });
      let d = c(81351),
        m = d._(c(50959)),
        g = c(46441),
        y = c(48802),
        b = c(18683),
        C = c(93475),
        P = c(79945),
        I = c(93503),
        B = c(97610),
        N = c(67004),
        F = c(6669),
        V = c(57450),
        G = c(38318),
        Q = new Set();
      function prefetch(e, l, c, d, m, g) {
        if (!g && !(0, y.isLocalURL)(l)) return;
        if (!d.bypassPrefetchedCheck) {
          let m =
              void 0 !== d.locale
                ? d.locale
                : "locale" in e
                ? e.locale
                : void 0,
            g = l + "%" + c + "%" + m;
          if (Q.has(g)) return;
          Q.add(g);
        }
        let b = g ? e.prefetch(l, m) : e.prefetch(l, c, d);
        Promise.resolve(b).catch((e) => {});
      }
      function formatStringOrUrl(e) {
        return "string" == typeof e ? e : (0, b.formatUrl)(e);
      }
      let $ = m.default.forwardRef(function (e, l) {
          let c, d;
          let {
            href: b,
            as: Q,
            children: $,
            prefetch: Z = null,
            passHref: Y,
            replace: et,
            shallow: en,
            scroll: er,
            locale: ei,
            onClick: eo,
            onMouseEnter: ea,
            onTouchStart: es,
            legacyBehavior: el = !1,
            ...ec
          } = e;
          (c = $),
            el &&
              ("string" == typeof c || "number" == typeof c) &&
              (c = m.default.createElement("a", null, c));
          let eu = m.default.useContext(I.RouterContext),
            ed = m.default.useContext(B.AppRouterContext),
            ep = null != eu ? eu : ed,
            eh = !eu,
            ef = !1 !== Z,
            em = null === Z ? G.PrefetchKind.AUTO : G.PrefetchKind.FULL,
            { href: eg, as: ey } = m.default.useMemo(() => {
              if (!eu) {
                let e = formatStringOrUrl(b);
                return { href: e, as: Q ? formatStringOrUrl(Q) : e };
              }
              let [e, l] = (0, g.resolveHref)(eu, b, !0);
              return { href: e, as: Q ? (0, g.resolveHref)(eu, Q) : l || e };
            }, [eu, b, Q]),
            eb = m.default.useRef(eg),
            ev = m.default.useRef(ey);
          el && (d = m.default.Children.only(c));
          let ew = el ? d && "object" == typeof d && d.ref : l,
            [ex, e_, eC] = (0, N.useIntersection)({ rootMargin: "200px" }),
            eE = m.default.useCallback(
              (e) => {
                (ev.current !== ey || eb.current !== eg) &&
                  (eC(), (ev.current = ey), (eb.current = eg)),
                  ex(e),
                  ew &&
                    ("function" == typeof ew
                      ? ew(e)
                      : "object" == typeof ew && (ew.current = e));
              },
              [ey, ew, eg, eC, ex]
            );
          m.default.useEffect(() => {
            ep &&
              e_ &&
              ef &&
              prefetch(ep, eg, ey, { locale: ei }, { kind: em }, eh);
          }, [ey, eg, e_, ei, ef, null == eu ? void 0 : eu.locale, ep, eh, em]);
          let eA = {
            ref: eE,
            onClick(e) {
              el || "function" != typeof eo || eo(e),
                el &&
                  d.props &&
                  "function" == typeof d.props.onClick &&
                  d.props.onClick(e),
                ep &&
                  !e.defaultPrevented &&
                  (function (e, l, c, d, g, b, C, P, I, B) {
                    let { nodeName: N } = e.currentTarget,
                      F = "A" === N.toUpperCase();
                    if (
                      F &&
                      ((function (e) {
                        let l = e.currentTarget,
                          c = l.getAttribute("target");
                        return (
                          (c && "_self" !== c) ||
                          e.metaKey ||
                          e.ctrlKey ||
                          e.shiftKey ||
                          e.altKey ||
                          (e.nativeEvent && 2 === e.nativeEvent.which)
                        );
                      })(e) ||
                        (!I && !(0, y.isLocalURL)(c)))
                    )
                      return;
                    e.preventDefault();
                    let navigate = () => {
                      let e = null == C || C;
                      "beforePopState" in l
                        ? l[g ? "replace" : "push"](c, d, {
                            shallow: b,
                            locale: P,
                            scroll: e,
                          })
                        : l[g ? "replace" : "push"](d || c, {
                            forceOptimisticNavigation: !B,
                            scroll: e,
                          });
                    };
                    I ? m.default.startTransition(navigate) : navigate();
                  })(e, ep, eg, ey, et, en, er, ei, eh, ef);
            },
            onMouseEnter(e) {
              el || "function" != typeof ea || ea(e),
                el &&
                  d.props &&
                  "function" == typeof d.props.onMouseEnter &&
                  d.props.onMouseEnter(e),
                ep &&
                  (ef || !eh) &&
                  prefetch(
                    ep,
                    eg,
                    ey,
                    { locale: ei, priority: !0, bypassPrefetchedCheck: !0 },
                    { kind: em },
                    eh
                  );
            },
            onTouchStart(e) {
              el || "function" != typeof es || es(e),
                el &&
                  d.props &&
                  "function" == typeof d.props.onTouchStart &&
                  d.props.onTouchStart(e),
                ep &&
                  (ef || !eh) &&
                  prefetch(
                    ep,
                    eg,
                    ey,
                    { locale: ei, priority: !0, bypassPrefetchedCheck: !0 },
                    { kind: em },
                    eh
                  );
            },
          };
          if ((0, C.isAbsoluteUrl)(ey)) eA.href = ey;
          else if (!el || Y || ("a" === d.type && !("href" in d.props))) {
            let e = void 0 !== ei ? ei : null == eu ? void 0 : eu.locale,
              l =
                (null == eu ? void 0 : eu.isLocaleDomain) &&
                (0, F.getDomainLocale)(
                  ey,
                  e,
                  null == eu ? void 0 : eu.locales,
                  null == eu ? void 0 : eu.domainLocales
                );
            eA.href =
              l ||
              (0, V.addBasePath)(
                (0, P.addLocale)(ey, e, null == eu ? void 0 : eu.defaultLocale)
              );
          }
          return el
            ? m.default.cloneElement(d, eA)
            : m.default.createElement("a", { ...ec, ...eA }, c);
        }),
        Z = $;
      ("function" == typeof l.default ||
        ("object" == typeof l.default && null !== l.default)) &&
        void 0 === l.default.__esModule &&
        (Object.defineProperty(l.default, "__esModule", { value: !0 }),
        Object.assign(l.default, l),
        (e.exports = l.default));
    },
    67004: function (e, l, c) {
      "use strict";
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "useIntersection", {
          enumerable: !0,
          get: function () {
            return useIntersection;
          },
        });
      let d = c(50959),
        m = c(73741),
        g = "function" == typeof IntersectionObserver,
        y = new Map(),
        b = [];
      function useIntersection(e) {
        let { rootRef: l, rootMargin: c, disabled: C } = e,
          P = C || !g,
          [I, B] = (0, d.useState)(!1),
          N = (0, d.useRef)(null),
          F = (0, d.useCallback)((e) => {
            N.current = e;
          }, []);
        (0, d.useEffect)(() => {
          if (g) {
            if (P || I) return;
            let e = N.current;
            if (e && e.tagName) {
              let d = (function (e, l, c) {
                let {
                  id: d,
                  observer: m,
                  elements: g,
                } = (function (e) {
                  let l;
                  let c = { root: e.root || null, margin: e.rootMargin || "" },
                    d = b.find(
                      (e) => e.root === c.root && e.margin === c.margin
                    );
                  if (d && (l = y.get(d))) return l;
                  let m = new Map(),
                    g = new IntersectionObserver((e) => {
                      e.forEach((e) => {
                        let l = m.get(e.target),
                          c = e.isIntersecting || e.intersectionRatio > 0;
                        l && c && l(c);
                      });
                    }, e);
                  return (
                    (l = { id: c, observer: g, elements: m }),
                    b.push(c),
                    y.set(c, l),
                    l
                  );
                })(c);
                return (
                  g.set(e, l),
                  m.observe(e),
                  function () {
                    if ((g.delete(e), m.unobserve(e), 0 === g.size)) {
                      m.disconnect(), y.delete(d);
                      let e = b.findIndex(
                        (e) => e.root === d.root && e.margin === d.margin
                      );
                      e > -1 && b.splice(e, 1);
                    }
                  }
                );
              })(e, (e) => e && B(e), {
                root: null == l ? void 0 : l.current,
                rootMargin: c,
              });
              return d;
            }
          } else if (!I) {
            let e = (0, m.requestIdleCallback)(() => B(!0));
            return () => (0, m.cancelIdleCallback)(e);
          }
        }, [P, c, l, I, N.current]);
        let V = (0, d.useCallback)(() => {
          B(!1);
        }, []);
        return [F, I, V];
      }
      ("function" == typeof l.default ||
        ("object" == typeof l.default && null !== l.default)) &&
        void 0 === l.default.__esModule &&
        (Object.defineProperty(l.default, "__esModule", { value: !0 }),
        Object.assign(l.default, l),
        (e.exports = l.default));
    },
    75708: function (e, l, c) {
      "use strict";
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "getImgProps", {
          enumerable: !0,
          get: function () {
            return getImgProps;
          },
        }),
        c(46527);
      let d = c(86351),
        m = c(49153);
      function isStaticRequire(e) {
        return void 0 !== e.default;
      }
      function getInt(e) {
        return void 0 === e
          ? e
          : "number" == typeof e
          ? Number.isFinite(e)
            ? e
            : NaN
          : "string" == typeof e && /^[0-9]+$/.test(e)
          ? parseInt(e, 10)
          : NaN;
      }
      function getImgProps(e, l) {
        var c;
        let g,
          y,
          b,
          {
            src: C,
            sizes: P,
            unoptimized: I = !1,
            priority: B = !1,
            loading: N,
            className: F,
            quality: V,
            width: G,
            height: Q,
            fill: $ = !1,
            style: Z,
            onLoad: Y,
            onLoadingComplete: et,
            placeholder: en = "empty",
            blurDataURL: er,
            fetchPriority: ei,
            layout: eo,
            objectFit: ea,
            objectPosition: es,
            lazyBoundary: el,
            lazyRoot: ec,
            ...eu
          } = e,
          {
            imgConf: ed,
            showAltText: ep,
            blurComplete: eh,
            defaultLoader: ef,
          } = l,
          em = ed || m.imageConfigDefault;
        if ("allSizes" in em) g = em;
        else {
          let e = [...em.deviceSizes, ...em.imageSizes].sort((e, l) => e - l),
            l = em.deviceSizes.sort((e, l) => e - l);
          g = { ...em, allSizes: e, deviceSizes: l };
        }
        let eg = eu.loader || ef;
        delete eu.loader, delete eu.srcSet;
        let ey = "__next_img_default" in eg;
        if (ey) {
          if ("custom" === g.loader)
            throw Error(
              'Image with src "' +
                C +
                '" is missing "loader" prop.\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader'
            );
        } else {
          let e = eg;
          eg = (l) => {
            let { config: c, ...d } = l;
            return e(d);
          };
        }
        if (eo) {
          "fill" === eo && ($ = !0);
          let e = {
            intrinsic: { maxWidth: "100%", height: "auto" },
            responsive: { width: "100%", height: "auto" },
          }[eo];
          e && (Z = { ...Z, ...e });
          let l = { responsive: "100vw", fill: "100vw" }[eo];
          l && !P && (P = l);
        }
        let eb = "",
          ev = getInt(G),
          ew = getInt(Q);
        if (
          "object" == typeof (c = C) &&
          (isStaticRequire(c) || void 0 !== c.src)
        ) {
          let e = isStaticRequire(C) ? C.default : C;
          if (!e.src)
            throw Error(
              "An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received " +
                JSON.stringify(e)
            );
          if (!e.height || !e.width)
            throw Error(
              "An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received " +
                JSON.stringify(e)
            );
          if (
            ((y = e.blurWidth),
            (b = e.blurHeight),
            (er = er || e.blurDataURL),
            (eb = e.src),
            !$)
          ) {
            if (ev || ew) {
              if (ev && !ew) {
                let l = ev / e.width;
                ew = Math.round(e.height * l);
              } else if (!ev && ew) {
                let l = ew / e.height;
                ev = Math.round(e.width * l);
              }
            } else (ev = e.width), (ew = e.height);
          }
        }
        let ex = !B && ("lazy" === N || void 0 === N);
        (!(C = "string" == typeof C ? C : eb) ||
          C.startsWith("data:") ||
          C.startsWith("blob:")) &&
          ((I = !0), (ex = !1)),
          g.unoptimized && (I = !0),
          ey && C.endsWith(".svg") && !g.dangerouslyAllowSVG && (I = !0),
          B && (ei = "high");
        let e_ = getInt(V),
          eC = Object.assign(
            $
              ? {
                  position: "absolute",
                  height: "100%",
                  width: "100%",
                  left: 0,
                  top: 0,
                  right: 0,
                  bottom: 0,
                  objectFit: ea,
                  objectPosition: es,
                }
              : {},
            ep ? {} : { color: "transparent" },
            Z
          ),
          eE =
            eh || "empty" === en
              ? null
              : "blur" === en
              ? 'url("data:image/svg+xml;charset=utf-8,' +
                (0, d.getImageBlurSvg)({
                  widthInt: ev,
                  heightInt: ew,
                  blurWidth: y,
                  blurHeight: b,
                  blurDataURL: er || "",
                  objectFit: eC.objectFit,
                }) +
                '")'
              : 'url("' + en + '")',
          eA = eE
            ? {
                backgroundSize: eC.objectFit || "cover",
                backgroundPosition: eC.objectPosition || "50% 50%",
                backgroundRepeat: "no-repeat",
                backgroundImage: eE,
              }
            : {},
          eS = (function (e) {
            let {
              config: l,
              src: c,
              unoptimized: d,
              width: m,
              quality: g,
              sizes: y,
              loader: b,
            } = e;
            if (d) return { src: c, srcSet: void 0, sizes: void 0 };
            let { widths: C, kind: P } = (function (e, l, c) {
                let { deviceSizes: d, allSizes: m } = e;
                if (c) {
                  let e = /(^|\s)(1?\d?\d)vw/g,
                    l = [];
                  for (let d; (d = e.exec(c)); d) l.push(parseInt(d[2]));
                  if (l.length) {
                    let e = 0.01 * Math.min(...l);
                    return {
                      widths: m.filter((l) => l >= d[0] * e),
                      kind: "w",
                    };
                  }
                  return { widths: m, kind: "w" };
                }
                if ("number" != typeof l) return { widths: d, kind: "w" };
                let g = [
                  ...new Set(
                    [l, 2 * l].map(
                      (e) => m.find((l) => l >= e) || m[m.length - 1]
                    )
                  ),
                ];
                return { widths: g, kind: "x" };
              })(l, m, y),
              I = C.length - 1;
            return {
              sizes: y || "w" !== P ? y : "100vw",
              srcSet: C.map(
                (e, d) =>
                  b({ config: l, src: c, quality: g, width: e }) +
                  " " +
                  ("w" === P ? e : d + 1) +
                  P
              ).join(", "),
              src: b({ config: l, src: c, quality: g, width: C[I] }),
            };
          })({
            config: g,
            src: C,
            unoptimized: I,
            width: ev,
            quality: e_,
            sizes: P,
            loader: eg,
          }),
          ek = {
            ...eu,
            loading: ex ? "lazy" : N,
            fetchPriority: ei,
            width: ev,
            height: ew,
            decoding: "async",
            className: F,
            style: { ...eC, ...eA },
            sizes: eS.sizes,
            srcSet: eS.srcSet,
            src: eS.src,
          },
          eP = { unoptimized: I, priority: B, placeholder: en, fill: $ };
        return { props: ek, meta: eP };
      }
    },
    86351: function (e, l) {
      "use strict";
      function getImageBlurSvg(e) {
        let {
            widthInt: l,
            heightInt: c,
            blurWidth: d,
            blurHeight: m,
            blurDataURL: g,
            objectFit: y,
          } = e,
          b = d ? 40 * d : l,
          C = m ? 40 * m : c,
          P = b && C ? "viewBox='0 0 " + b + " " + C + "'" : "";
        return (
          "%3Csvg xmlns='http://www.w3.org/2000/svg' " +
          P +
          "%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='20'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='20'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='" +
          (P
            ? "none"
            : "contain" === y
            ? "xMidYMid"
            : "cover" === y
            ? "xMidYMid slice"
            : "none") +
          "' style='filter: url(%23b);' href='" +
          g +
          "'/%3E%3C/svg%3E"
        );
      }
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "getImageBlurSvg", {
          enumerable: !0,
          get: function () {
            return getImageBlurSvg;
          },
        });
    },
    37674: function (e, l, c) {
      "use strict";
      Object.defineProperty(l, "__esModule", { value: !0 }),
        (function (e, l) {
          for (var c in l)
            Object.defineProperty(e, c, { enumerable: !0, get: l[c] });
        })(l, {
          unstable_getImgProps: function () {
            return unstable_getImgProps;
          },
          default: function () {
            return C;
          },
        });
      let d = c(81351),
        m = c(75708),
        g = c(46527),
        y = c(85613),
        b = d._(c(95354)),
        unstable_getImgProps = (e) => {
          (0, g.warnOnce)(
            "Warning: unstable_getImgProps() is experimental and may change or be removed at any time. Use at your own risk."
          );
          let { props: l } = (0, m.getImgProps)(e, {
            defaultLoader: b.default,
            imgConf: {
              deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
              imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
              path: "/_next/image",
              loader: "default",
              dangerouslyAllowSVG: !1,
              unoptimized: !1,
            },
          });
          for (let [e, c] of Object.entries(l)) void 0 === c && delete l[e];
          return { props: l };
        },
        C = y.Image;
    },
    95354: function (e, l) {
      "use strict";
      function defaultLoader(e) {
        let { config: l, src: c, width: d, quality: m } = e;
        return (
          c
        );
      }
      Object.defineProperty(l, "__esModule", { value: !0 }),
        Object.defineProperty(l, "default", {
          enumerable: !0,
          get: function () {
            return c;
          },
        }),
        (defaultLoader.__next_img_default = !0);
      let c = defaultLoader;
    },
    59644: function (e, l, c) {
      "use strict";
      Object.defineProperty(l, "__esModule", { value: !0 }),
        (function (e, l) {
          for (var c in l)
            Object.defineProperty(e, c, { enumerable: !0, get: l[c] });
        })(l, {
          ServerInsertedHTMLContext: function () {
            return g;
          },
          useServerInsertedHTML: function () {
            return useServerInsertedHTML;
          },
        });
      let d = c(35815),
        m = d._(c(50959)),
        g = m.default.createContext(null);
      function useServerInsertedHTML(e) {
        let l = (0, m.useContext)(g);
        l && l(e);
      }
    },
    90733: function (e, l, c) {
      "use strict";
      c.d(l, {
        u7: function () {
          return m;
        },
        CF: function () {
          return y;
        },
        BF: function () {
          return d;
        },
        QF: function () {
          return g;
        },
        gU: function () {
          return b;
        },
      });
      var d = {
          src: "/_next/static/media/eth.a8d90e19.svg",
          height: 34,
          width: 35,
          blurWidth: 0,
          blurHeight: 0,
        },
        m = {
          src: "/_next/static/media/avax.ce8de8ca.svg",
          height: 34,
          width: 34,
          blurWidth: 0,
          blurHeight: 0,
        },
        g = {
          src: "/_next/static/media/metamask.34f6ea90.svg",
          height: 20,
          width: 20,
          blurWidth: 0,
          blurHeight: 0,
        },
        y = {
          src: "/_next/static/media/coinBase.36150252.svg",
          height: 20,
          width: 20,
          blurWidth: 0,
          blurHeight: 0,
        },
        b = {
          src: "/_next/static/media/wallet.c78961f8.svg",
          height: 12,
          width: 21,
          blurWidth: 0,
          blurHeight: 0,
        };
    },
    15215: function (e, l, c) {
      "use strict";
      var d = c(11527);
      c(50959),
        (l.Z = function (e) {
          let { className: l } = e;
          return (0, d.jsx)("svg", {
            viewBox: "0 0 17 17",
            fill: "none",
            xmlns: "http://www.w3.org/2000/svg",
            className: l,
            children: (0, d.jsx)("path", {
              d: "M0.999756 1L15.9998 16M0.999756 16L15.9998 1",
              stroke: "white",
              strokeWidth: "2",
            }),
          });
        });
    },
    88494: function (e, l, c) {
      "use strict";
      var d = c(11527),
        m = c(50959);
      l.Z = function (e) {
        let { text: l, className: c, onClick: g } = e,
          [y, b] = (0, m.useState)(!1);
        return (0, d.jsx)("div", {
          className: "w-full cursor-pointer",
          onMouseEnter: () => b(!0),
          onMouseLeave: () => b(!1),
          onClick: g,
          children: (0, d.jsx)("p", {
            className: ""
              .concat(y ? "expanding-border-auto" : "expanding-border", " ")
              .concat(c),
            children: l,
          }),
        });
      };
    },
    9737: function (e, l, c) {
      "use strict";
      c.d(l, {
        Z: function () {
          return components_HeaderPoints;
        },
      });
      var d = c(11527),
        m = c(58791),
        g = c(50959),
        y = c(6743),
        b = c(38603),
        C = c(59581),
        P = c.n(C),
        I = c(23874),
        B = c.n(I),
        N = c(49723),
        F = c(85703),
        V = c(60715),
        G = c(28254),
        currency_selector = function () {
          let [e, l] = (0, g.useState)(!1),
            c = (0, G.C)((e) => e.ModalsReducer.currency),
            m = (0, G.T)(),
            setCurrency = (e) => {
              m((0, V.Mo)(e)), handleOpen();
            },
            y = g.useRef(null),
            b = g.useRef(null),
            C = [{ opacity: 1 }, { opacity: 0 }],
            I = { duration: 250, iterations: 1 },
            handleOpen = () => {
              e && y.current
                ? (y.current.animate(C, I),
                  setTimeout(() => {
                    l(!1);
                  }, I.duration))
                : l(!0);
            };
          return (
            (0, g.useEffect)(() => {
              function handleClickOutside(e) {
                b.current &&
                  !b.current.contains(e.target) &&
                  (y.current && y.current.animate(C, I),
                  setTimeout(() => {
                    l(!1);
                  }, I.duration));
              }
              function handleEscape(e) {
                "Escape" === e.key &&
                  (y.current && y.current.animate(C, I),
                  setTimeout(() => {
                    l(!1);
                  }, I.duration));
              }
              return (
                document.addEventListener("keydown", handleEscape),
                document.addEventListener("mousedown", handleClickOutside),
                () => {
                  document.removeEventListener("mousedown", handleClickOutside),
                    document.removeEventListener("keydown", handleEscape);
                }
              );
            }, []),
            (0, d.jsxs)("div", {
              className: "relative",
              ref: b,
              children: [
                (0, d.jsxs)("button", {
                  className:
                    "flex items-center justify-center gap-2 select-none cursor-pointer bg-transparent border-none outline-none w-[50px]",
                  onClick: handleOpen,
                  children: [
                    (0, d.jsx)("p", {
                      className:
                        "font-['Montserrat'] font-semibold text-[14px] text-white",
                      children: c,
                    }),
                    (0, d.jsx)(P(), {
                      draggable: !1,
                      src: "/arrow copy.svg",
                      alt: "arrow",
                      width: 15,
                      height: 15,
                      style: {
                        transform: e ? "rotate(180deg)" : "rotate(0deg)",
                        transition: "transform 0.2s",
                      },
                    }),
                  ],
                }),
                e &&
                  (0, d.jsx)("div", {
                    ref: y,
                    className:
                      "absolute bottom-[calc(100%+10px)] lg:bottom-0 lg:top-[calc(100%+10px)] right-0 animate-fadeinReallyFast z-[100]",
                    children: (0, d.jsxs)("div", {
                      className:
                        "bg-black gradient-border-button-thick solid rounded-[5px] max-w-[calc(100vw-50px)] w-[100px] flex flex-col justify-start items-center",
                      children: [
                        (0, d.jsx)("p", {
                          className:
                            "text-white font-['Montserrat'] font-semibold text-[14px] text-center",
                          children: "Currency",
                        }),
                        (0, d.jsx)("div", {
                          className: "w-full h-px bg-[#ffffff70] my-1",
                        }),
                        (0, d.jsxs)("div", {
                          className:
                            "w-full flex items-center justify-center gap-2 flex-col mt-2 hover:[&>*]:opacity-50 [&>*]:transition-opacity [&>*]:cursor-pointer",
                          children: [
                            (0, d.jsx)("button", {
                              onClick: () => setCurrency("USD"),
                              className:
                                "bg-transparent border-none outline-none text-white text-center font-['Montserrat'] font-semibold text-[14px] w-full",
                              children: "USD",
                            }),
                            (0, d.jsx)("button", {
                              onClick: () => setCurrency("ETH"),
                              className:
                                "bg-transparent border-none outline-none text-white text-center font-['Montserrat'] font-semibold text-[14px] w-full",
                              children: "ETH",
                            }),
                            (0, d.jsx)("button", {
                              onClick: () => setCurrency("BTC"),
                              className:
                                "bg-transparent border-none outline-none text-white text-center font-['Montserrat'] font-semibold text-[14px] w-full",
                              children: "BTC",
                            }),
                          ],
                        }),
                      ],
                    }),
                  }),
              ],
            })
          );
        },
        Q = c(19202),
        components_HeaderPoints = function (e) {
          var l, c, g, C;
          let { className: I } = e,
            V = (0, y.Z)(),
            { data: G, isLoading: $ } = (0, m.Nf)({
              address: null !== (l = V.address) && void 0 !== l ? l : "",
            });
          return $
            ? (0, d.jsx)(b.Z, { className: "w-6 h-6" })
            : G
            ? (0, d.jsxs)("div", {
                className: "".concat(
                  I,
                  " flex items-start xl:items-center gap-2 xl:gap-6 sl:gap-8 flex-col xl:flex-row"
                ),
                children: [
                  (0, d.jsx)(N.u, {
                    id: "info-tooltip-text",
                    className: "chart_box_header_tooltip",
                    noArrow: !0,
                    clickable: !0,
                  }),
                  (0, d.jsx)("div", {
                    className: "flex items-center gap-2",
                    children: (0, d.jsxs)("p", {
                      className:
                        "text-white font-['Montserrat'] font-normal text-[14px] whitespace-nowrap",
                      children: [
                        "Points:",
                        " ",
                        (0, d.jsxs)("span", {
                          className:
                            "text-white font-['Montserrat'] font-semibold text-[14px]",
                          children: [
                            F.ZP.formatNumberWithAbbreviation(
                              F.ZP.roundToTwo(
                                null !== (c = null == G ? void 0 : G.points) &&
                                  void 0 !== c
                                  ? c
                                  : 0
                              )
                            ),
                            " ",
                            G.lockedPoints > 0 &&
                              (0, d.jsxs)(B(), {
                                href: "/",
                                target: "_blank",
                                "data-tooltip-id": "info-tooltip-text",
                                "data-tooltip-content":
                                  "Bond at least $".concat(
                                    Q.jM,
                                    " to unlock these points."
                                  ),
                                children: [
                                  "(+",
                                  " ",
                                  F.ZP.formatNumberWithAbbreviation(
                                    F.ZP.roundToTwo(
                                      null !==
                                        (g =
                                          null == G
                                            ? void 0
                                            : G.lockedPoints) && void 0 !== g
                                        ? g
                                        : 0
                                    )
                                  ),
                                  " ",
                                  "\uD83D\uDD12)",
                                ],
                              }),
                          ],
                        }),
                      ],
                    }),
                  }),
                  (0, d.jsxs)("div", {
                    className: "flex items-center gap-2",
                    children: [
                      (0, d.jsxs)("p", {
                        className:
                          "text-white font-['Montserrat'] font-normal text-[14px] whitespace-nowrap",
                        children: [
                          "Stars:",
                          " ",
                          (0, d.jsx)("span", {
                            className:
                              "text-white font-['Montserrat'] font-semibold text-[14px]",
                            children: F.ZP.formatNumberWithAbbreviation(
                              F.ZP.roundToTwo(
                                null !== (C = null == G ? void 0 : G.stars) &&
                                  void 0 !== C
                                  ? C
                                  : 0
                              )
                            ),
                          }),
                        ],
                      }),
                      (0, d.jsx)(P(), {
                        className:
                          "object-contain hover:animate-shakeOnceSlightly",
                        src: "/star-needed-solid.svg",
                        alt: "wallet noya",
                        width: 20,
                        height: 20,
                      }),
                    ],
                  }),
                  (0, d.jsx)(currency_selector, {}),
                ],
              })
            : null;
        };
    },
    38603: function (e, l, c) {
      "use strict";
      var d = c(11527);
      c(50959),
        (l.Z = function (e) {
          let { className: l } = e;
          return (0, d.jsxs)("svg", {
            className: "align-middle ".concat(l),
            style: { animation: "spin 1.5s linear infinite" },
            viewBox: "0 0 59 59",
            fill: "none",
            xmlns: "http://www.w3.org/2000/svg",
            children: [
              (0, d.jsx)("path", {
                d: "M3.20844 31.9271C4.76781 31.9271 6.03192 30.663 6.03192 29.1036C6.03192 27.5442 4.76781 26.2801 3.20844 26.2801C1.64907 26.2801 0.384956 27.5442 0.384956 29.1036C0.384956 30.663 1.64907 31.9271 3.20844 31.9271Z",
                fill: "white",
              }),
              (0, d.jsx)("path", {
                d: "M55.7687 31.9271C57.328 31.9271 58.5921 30.663 58.5921 29.1036C58.5921 27.5442 57.328 26.2801 55.7687 26.2801C54.2093 26.2801 52.9452 27.5442 52.9452 29.1036C52.9452 30.663 54.2093 31.9271 55.7687 31.9271Z",
                fill: "white",
              }),
              (0, d.jsx)("path", {
                d: "M10.9064 13.3449C12.4657 13.3449 13.7299 12.0808 13.7299 10.5214C13.7299 8.96206 12.4657 7.69794 10.9064 7.69794C9.34701 7.69794 8.08289 8.96206 8.08289 10.5214C8.08289 12.0808 9.34701 13.3449 10.9064 13.3449Z",
                fill: "white",
              }),
              (0, d.jsx)("path", {
                d: "M48.0707 50.5117C49.6301 50.5117 50.8942 49.2476 50.8942 47.6882C50.8942 46.1289 49.6301 44.8647 48.0707 44.8647C46.5113 44.8647 45.2472 46.1289 45.2472 47.6882C45.2472 49.2476 46.5113 50.5117 48.0707 50.5117Z",
                fill: "white",
              }),
              (0, d.jsx)("path", {
                d: "M29.4885 5.64697C31.0479 5.64697 32.312 4.38285 32.312 2.82348C32.312 1.26412 31.0479 0 29.4885 0C27.9292 0 26.6651 1.26412 26.6651 2.82348C26.6651 4.38285 27.9292 5.64697 29.4885 5.64697Z",
                fill: "white",
              }),
              (0, d.jsx)("path", {
                d: "M29.4885 58.2097C31.0479 58.2097 32.312 56.9455 32.312 55.3862C32.312 53.8268 31.0479 52.5627 29.4885 52.5627C27.9292 52.5627 26.6651 53.8268 26.6651 55.3862C26.6651 56.9455 27.9292 58.2097 29.4885 58.2097Z",
                fill: "white",
              }),
              (0, d.jsx)("path", {
                d: "M29.5009 5.64697C31.0603 5.64697 32.3244 4.38285 32.3244 2.82348C32.3244 1.26412 31.0603 0 29.5009 0C27.9415 0 26.6774 1.26412 26.6774 2.82348C26.6774 4.38285 27.9415 5.64697 29.5009 5.64697Z",
                fill: "white",
              }),
              (0, d.jsx)("path", {
                d: "M29.5009 58.2097C31.0603 58.2097 32.3244 56.9455 32.3244 55.3862C32.3244 53.8268 31.0603 52.5627 29.5009 52.5627C27.9415 52.5627 26.6774 53.8268 26.6774 55.3862C26.6774 56.9455 27.9415 58.2097 29.5009 58.2097Z",
                fill: "white",
              }),
              (0, d.jsx)("path", {
                d: "M48.7198 14.0064C50.2792 14.0064 51.5433 12.7422 51.5433 11.1829C51.5433 9.6235 50.2792 8.35938 48.7198 8.35938C47.1605 8.35938 45.8963 9.6235 45.8963 11.1829C45.8963 12.7422 47.1605 14.0064 48.7198 14.0064Z",
                fill: "white",
              }),
              (0, d.jsx)("path", {
                d: "M10.2795 49.8503C11.8389 49.8503 13.103 48.5862 13.103 47.0268C13.103 45.4674 11.8389 44.2033 10.2795 44.2033C8.72012 44.2033 7.45601 45.4674 7.45601 47.0268C7.45601 48.5862 8.72012 49.8503 10.2795 49.8503Z",
                fill: "white",
              }),
              (0, d.jsx)("path", {
                d: "M17.1481 29.1061C17.1481 22.3188 22.3805 17.2519 29.4984 17.2519C36.6164 17.2519 41.7821 22.2843 41.7821 29.1061C41.7821 35.9278 36.5497 40.9602 29.4984 40.9602C22.4471 40.9602 17.1481 35.8933 17.1481 29.1061ZM38.4724 29.1061C38.4724 23.9725 34.632 20.1988 29.4984 20.1988C24.3648 20.1988 20.4578 23.9725 20.4578 29.1061C20.4578 34.2397 24.2982 38.0134 29.4984 38.0134C34.6987 38.0134 38.4724 34.2397 38.4724 29.1061Z",
                fill: "white",
              }),
            ],
          });
        });
    },
    19202: function (e, l, c) {
      "use strict";
      c.d(l, {
        Kh: function () {
          return g;
        },
        Mh: function () {
          return m;
        },
        Sq: function () {
          return y;
        },
        jM: function () {
          return d;
        },
      });
      let d = 10,
        m = [
          { icon: "pilot", multiplier: 1, number: 1, name: "Pilot", stars: 0 },
          {
            icon: "voyager",
            multiplier: 1.2,
            number: 2,
            name: "Voyager",
            stars: 2e3,
          },
          {
            icon: "cosmonaut",
            multiplier: 1.3,
            number: 3,
            name: "Cosmonaut",
            stars: 3e3,
          },
          {
            icon: "pathfinder",
            multiplier: 1.4,
            number: 4,
            name: "Pathfinder",
            stars: 5e3,
          },
          {
            icon: "pioneer",
            multiplier: 1.5,
            number: 5,
            name: "Pioneer",
            stars: 8e3,
          },
        ],
        g = [
          {
            icon: "conqueror",
            multiplier: 1.6,
            number: 6,
            name: "Conqueror",
            perk: "Custom referral link",
            stars: 13e3,
            action: "custom-referral-link",
          },
          {
            icon: "captain",
            multiplier: 1.7,
            number: 7,
            name: "Captain",
            perk: "Private Group",
            stars: 22e3,
          },
          {
            icon: "alien_explorer",
            multiplier: 1.8,
            number: 8,
            name: "Alien Explorer",
            perk: "Merch Eligibility",
            stars: 36e3,
          },
          {
            icon: "commander",
            multiplier: 1.9,
            number: 9,
            name: "Commander",
            perk: "Elders Group",
            stars: 6e4,
          },
          {
            icon: "intergalactic",
            multiplier: 2,
            number: 10,
            name: "Intergalactic",
            perk: "TBA \uD83E\uDD2B",
            stars: 1e5,
          },
        ],
        y = 12;
    },
    42954: function (e, l, c) {
      "use strict";
      c.d(l, {
        g: function () {
          return ek;
        },
      });
      var d = c(52690),
        m = c(84335),
        g = c(11516),
        y = new Map(),
        getOrCreateWalletConnectInstance = ({
          projectId: e,
          walletConnectParameters: l,
          rkDetailsShowQrModal: c,
        }) => {
          let d = { ...(l || {}), projectId: e, showQrModal: !1 };
          c && (d = { ...d, showQrModal: !0 });
          let m = JSON.stringify(d),
            b = y.get(m);
          if (b) return b;
          let C = (0, g.a)(d);
          return y.set(m, C), C;
        };
      function getWalletConnectConnector({
        projectId: e,
        walletConnectParameters: l,
      }) {
        if (!e || "" === e)
          throw Error(
            "No projectId found. Every dApp must now provide a WalletConnect Cloud projectId to enable WalletConnect v2 https://www.rainbowkit.com/docs/installation#configure"
          );
        return (
          "YOUR_PROJECT_ID" === e && (e = "21fef48091f12692cad574a6f7753643"),
          (c) =>
            (function ({
              projectId: e,
              walletDetails: l,
              walletConnectParameters: c,
            }) {
              return (0, m.K)((d) => ({
                ...getOrCreateWalletConnectInstance({
                  projectId: e,
                  walletConnectParameters: c,
                  rkDetailsShowQrModal: l.rkDetails.showQrModal,
                })(d),
                ...l,
              }));
            })({ projectId: e, walletDetails: c, walletConnectParameters: l })
        );
      }
      function isAndroid() {
        return (
          "undefined" != typeof navigator &&
          /android/i.test(navigator.userAgent)
        );
      }
      function isIOS() {
        return (
          ("undefined" != typeof navigator &&
            /iPhone|iPod/.test(navigator.userAgent)) ||
          ("undefined" != typeof navigator &&
            (/iPad/.test(navigator.userAgent) ||
              ("MacIntel" === navigator.platform &&
                navigator.maxTouchPoints > 1)))
        );
      }
      function isMobile() {
        return isAndroid() || isIOS();
      }
      var b = c(41402);
      function getExplicitInjectedProvider(e) {
        let l = "undefined" != typeof window ? window : void 0;
        if (void 0 === l || void 0 === l.ethereum) return;
        let c = l.ethereum.providers;
        return c ? c.find((l) => l[e]) : l.ethereum[e] ? l.ethereum : void 0;
      }
      function getWindowProviderNamespace(e) {
        let providerSearch = (e, l) => {
          let [c, ...d] = l.split("."),
            m = e[c];
          if (m) return 0 === d.length ? m : providerSearch(m, d.join("."));
        };
        if ("undefined" != typeof window) return providerSearch(window, e);
      }
      function hasInjectedProvider({ flag: e, namespace: l }) {
        return (
          (!!l && void 0 !== getWindowProviderNamespace(l)) ||
          (!!e && void 0 !== getExplicitInjectedProvider(e))
        );
      }
      function getInjectedConnector({ flag: e, namespace: l, target: c }) {
        let d =
          c ||
          (function ({ flag: e, namespace: l }) {
            let c = "undefined" != typeof window ? window : void 0;
            if (void 0 === c) return;
            if (l) {
              let e = getWindowProviderNamespace(l);
              if (e) return e;
            }
            let d = c.ethereum?.providers;
            if (e) {
              let l = getExplicitInjectedProvider(e);
              if (l) return l;
            }
            return void 0 !== d && d.length > 0 ? d[0] : c.ethereum;
          })({ flag: e, namespace: l });
        return (e) => {
          let l = d
            ? {
                target: () => ({
                  id: e.rkDetails.id,
                  name: e.rkDetails.name,
                  provider: d,
                }),
              }
            : {};
          return (0, m.K)((c) => ({ ...(0, b.L)(l)(c), ...e }));
        };
      }
      function isMetaMask(e) {
        return (
          !!e?.isMetaMask &&
          (!e.isBraveWallet || !!e._events || !!e._state) &&
          !e.isApexWallet &&
          !e.isAvalanche &&
          !e.isBackpack &&
          !e.isBifrost &&
          !e.isBitKeep &&
          !e.isBitski &&
          !e.isBlockWallet &&
          !e.isCoinbaseWallet &&
          !e.isDawn &&
          !e.isEnkrypt &&
          !e.isExodus &&
          !e.isFrame &&
          !e.isFrontier &&
          !e.isGamestop &&
          !e.isHyperPay &&
          !e.isImToken &&
          !e.isKuCoinWallet &&
          !e.isMathWallet &&
          !e.isNestWallet &&
          !e.isOkxWallet &&
          !e.isOKExWallet &&
          !e.isOneInchIOSWallet &&
          !e.isOneInchAndroidWallet &&
          !e.isOpera &&
          !e.isPhantom &&
          !e.isPortal &&
          !e.isRabby &&
          !e.isRainbow &&
          !e.isStatus &&
          !e.isTalisman &&
          !e.isTally &&
          !e.isTokenPocket &&
          !e.isTokenary &&
          !e.isTrust &&
          !e.isTrustWallet &&
          !e.isXDEFI &&
          !e.isZeal &&
          !e.isZerion &&
          !e.__seif
        );
      }
      var C = c(17813),
        chunk_PNEDRY6O_coinbaseWallet = ({ appName: e, appIcon: l }) => {
          let d = isIOS();
          return {
            id: "coinbase",
            name: "Coinbase Wallet",
            shortName: "Coinbase",
            rdns: "com.coinbase.wallet",
            iconUrl: async () => (await c.e(74).then(c.bind(c, 80074))).default,
            iconAccent: "#2c5ff6",
            iconBackground: "#2c5ff6",
            installed: !0,
            downloadUrls: {
              android:
                "https://play.google.com/store/apps/details?id=org.toshi",
              ios: "https://apps.apple.com/us/app/coinbase-wallet-store-crypto/id1278383455",
              mobile: "https://coinbase.com/wallet/downloads",
              qrCode: "https://coinbase-wallet.onelink.me/q5Sx/fdb9b250",
              chrome:
                "https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad",
              browserExtension: "https://coinbase.com/wallet",
            },
            ...(d
              ? {}
              : {
                  qrCode: {
                    getUri: (e) => e,
                    instructions: {
                      learnMoreUrl:
                        "https://coinbase.com/wallet/articles/getting-started-mobile",
                      steps: [
                        {
                          description:
                            "wallet_connectors.coinbase.qr_code.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.coinbase.qr_code.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.coinbase.qr_code.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.coinbase.qr_code.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.coinbase.qr_code.step3.description",
                          step: "scan",
                          title:
                            "wallet_connectors.coinbase.qr_code.step3.title",
                        },
                      ],
                    },
                  },
                  extension: {
                    instructions: {
                      learnMoreUrl:
                        "https://coinbase.com/wallet/articles/getting-started-extension",
                      steps: [
                        {
                          description:
                            "wallet_connectors.coinbase.extension.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.coinbase.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.coinbase.extension.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.coinbase.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.coinbase.extension.step3.description",
                          step: "refresh",
                          title:
                            "wallet_connectors.coinbase.extension.step3.title",
                        },
                      ],
                    },
                  },
                }),
            createConnector: (c) => {
              let d = (0, C.D)({
                appName: e,
                appLogoUrl: l,
                preference: chunk_PNEDRY6O_coinbaseWallet.preference,
              });
              return (0, m.K)((e) => ({ ...d(e), ...c }));
            },
          };
        },
        P = c(6034),
        I = c(11654),
        B = c(47505),
        N = c(19240);
      let F = (0, N.a)({
        id: 42161,
        name: "Arbitrum One",
        nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
        rpcUrls: { default: { http: ["https://arb1.arbitrum.io/rpc"] } },
        blockExplorers: {
          default: {
            name: "Arbiscan",
            url: "https://arbiscan.io",
            apiUrl: "https://api.arbiscan.io/api",
          },
        },
        contracts: {
          multicall3: {
            address: "0xca11bde05977b3631167028862be2a173976ca11",
            blockCreated: 7654707,
          },
        },
      });
      var V = c(73662),
        G = c(48775);
      let Q = (0, N.a)({
          ...G.i,
          id: 10,
          name: "OP Mainnet",
          nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
          rpcUrls: { default: { http: ["https://mainnet.optimism.io"] } },
          blockExplorers: {
            default: {
              name: "Optimism Explorer",
              url: "https://optimistic.etherscan.io",
              apiUrl: "https://api-optimistic.etherscan.io/api",
            },
          },
          contracts: {
            ...G.i.contracts,
            disputeGameFactory: {
              1: { address: "0xe5965Ab5962eDc7477C8520243A95517CD252fA9" },
            },
            l2OutputOracle: {
              1: { address: "0xdfe97868233d1aa22e815a266982f2cf17685a27" },
            },
            multicall3: {
              address: "0xca11bde05977b3631167028862be2a173976ca11",
              blockCreated: 4286263,
            },
            portal: {
              1: { address: "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed" },
            },
            l1StandardBridge: {
              1: { address: "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1" },
            },
          },
          sourceId: 1,
        }),
        $ = (0, N.a)({
          id: 100,
          name: "Gnosis",
          nativeCurrency: { decimals: 18, name: "xDAI", symbol: "XDAI" },
          rpcUrls: {
            default: {
              http: ["https://rpc.gnosischain.com"],
              webSocket: ["wss://rpc.gnosischain.com/wss"],
            },
          },
          blockExplorers: {
            default: {
              name: "Gnosisscan",
              url: "https://gnosisscan.io",
              apiUrl: "https://api.gnosisscan.io/api",
            },
          },
          contracts: {
            multicall3: {
              address: "0xca11bde05977b3631167028862be2a173976ca11",
              blockCreated: 21022491,
            },
          },
        }),
        Z = (0, N.a)({
          id: 137,
          name: "Polygon",
          nativeCurrency: { name: "POL", symbol: "POL", decimals: 18 },
          rpcUrls: { default: { http: ["https://polygon-rpc.com"] } },
          blockExplorers: {
            default: {
              name: "PolygonScan",
              url: "https://polygonscan.com",
              apiUrl: "https://api.polygonscan.com/api",
            },
          },
          contracts: {
            multicall3: {
              address: "0xca11bde05977b3631167028862be2a173976ca11",
              blockCreated: 25770160,
            },
          },
        }),
        Y = (0, N.a)({
          id: 1101,
          name: "Polygon zkEVM",
          nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
          rpcUrls: { default: { http: ["https://zkevm-rpc.com"] } },
          blockExplorers: {
            default: {
              name: "PolygonScan",
              url: "https://zkevm.polygonscan.com",
              apiUrl: "https://api-zkevm.polygonscan.com/api",
            },
          },
          contracts: {
            multicall3: {
              address: "0xca11bde05977b3631167028862be2a173976ca11",
              blockCreated: 57746,
            },
          },
        });
      var et = c(3644),
        en = c(23279),
        er = c(1701),
        ei = c(20503),
        eo = c(51036),
        ea = c(55009),
        es = c(46134),
        el = c(36666),
        ec = c(46010);
      let eu = 32n * ec.rU,
        ed = {
          block: (0, ei.G)({
            format(e) {
              let l = e.transactions?.map((e) => {
                if ("string" == typeof e) return e;
                let l = ed.transaction?.format(e);
                return (
                  "0x71" === l.typeHex
                    ? (l.type = "eip712")
                    : "0xff" === l.typeHex && (l.type = "priority"),
                  l
                );
              });
              return {
                l1BatchNumber: e.l1BatchNumber
                  ? (0, et.y_)(e.l1BatchNumber)
                  : null,
                l1BatchTimestamp: e.l1BatchTimestamp
                  ? (0, et.y_)(e.l1BatchTimestamp)
                  : null,
                transactions: l,
              };
            },
          }),
          transaction: (0, ea.y_)({
            format(e) {
              let l = {};
              return (
                "0x71" === e.type
                  ? (l.type = "eip712")
                  : "0xff" === e.type && (l.type = "priority"),
                {
                  ...l,
                  l1BatchNumber: e.l1BatchNumber
                    ? (0, et.y_)(e.l1BatchNumber)
                    : null,
                  l1BatchTxIndex: e.l1BatchTxIndex
                    ? (0, et.y_)(e.l1BatchTxIndex)
                    : null,
                }
              );
            },
          }),
          transactionReceipt: (0, es.dI)({
            format: (e) => ({
              l1BatchNumber: e.l1BatchNumber
                ? (0, et.y_)(e.l1BatchNumber)
                : null,
              l1BatchTxIndex: e.l1BatchTxIndex
                ? (0, et.y_)(e.l1BatchTxIndex)
                : null,
              logs: e.logs.map((e) => ({
                ...(0, eo.U)(e),
                l1BatchNumber: e.l1BatchNumber
                  ? (0, et.y_)(e.l1BatchNumber)
                  : null,
                transactionLogIndex: (0, et.ly)(e.transactionLogIndex),
                logType: e.logType,
              })),
              l2ToL1Logs: e.l2ToL1Logs.map((e) => ({
                blockNumber: (0, et.y_)(e.blockHash),
                blockHash: e.blockHash,
                l1BatchNumber: e.l1BatchNumber
                  ? (0, et.y_)(e.l1BatchNumber)
                  : null,
                transactionIndex: (0, et.y_)(e.transactionIndex),
                shardId: (0, et.y_)(e.shardId),
                isService: e.isService,
                sender: e.sender,
                key: e.key,
                value: e.value,
                transactionHash: e.transactionHash,
                logIndex: (0, et.y_)(e.logIndex),
              })),
            }),
          }),
          transactionRequest: (0, el.iy)({
            exclude: [
              "customSignature",
              "factoryDeps",
              "gasPerPubdata",
              "paymaster",
              "paymasterInput",
            ],
            format: (e) =>
              e.gasPerPubdata ||
              (e.paymaster && e.paymasterInput) ||
              e.factoryDeps ||
              e.customSignature
                ? {
                    eip712Meta: {
                      ...(e.gasPerPubdata
                        ? { gasPerPubdata: (0, er.NC)(e.gasPerPubdata) }
                        : { gasPerPubdata: (0, er.NC)(50000n) }),
                      ...(e.paymaster && e.paymasterInput
                        ? {
                            paymasterParams: {
                              paymaster: e.paymaster,
                              paymasterInput: Array.from(
                                (0, en.nr)(e.paymasterInput)
                              ),
                            },
                          }
                        : {}),
                      ...(e.factoryDeps
                        ? {
                            factoryDeps: e.factoryDeps.map((e) =>
                              Array.from((0, en.nr)(e))
                            ),
                          }
                        : {}),
                      ...(e.customSignature
                        ? {
                            customSignature: Array.from(
                              (0, en.nr)(e.customSignature)
                            ),
                          }
                        : {}),
                    },
                    type: "0x71",
                  }
                : {},
          }),
        };
      var ep = c(12265),
        eh = c(10673),
        ef = c(67170),
        em = c(63964),
        eg = c(26456),
        ey = c(853),
        eb = c(87874);
      let InvalidEip712TransactionError = class InvalidEip712TransactionError extends eg.G {
        constructor() {
          super(
            'Transaction is not an EIP712 transaction.\n\nTransaction must:\n  - include `type: "eip712"`\n  - include one of the following: `customSignature`, `paymaster`, `paymasterInput`, `gasPerPubdata`, `factoryDeps`',
            { name: "InvalidEip712TransactionError" }
          );
        }
      };
      function isEIP712Transaction(e) {
        return (
          "eip712" === e.type ||
          ("customSignature" in e && !!e.customSignature) ||
          ("paymaster" in e && !!e.paymaster) ||
          ("paymasterInput" in e && !!e.paymasterInput) ||
          ("gasPerPubdata" in e && "bigint" == typeof e.gasPerPubdata) ||
          ("factoryDeps" in e && !!e.factoryDeps)
        );
      }
      function assertEip712Transaction(e) {
        let { chainId: l, to: c, from: d, paymaster: m, paymasterInput: g } = e;
        if (!isEIP712Transaction(e)) throw new InvalidEip712TransactionError();
        if (!l || l <= 0) throw new ey.hJ({ chainId: l });
        if (c && !(0, eb.U)(c)) throw new em.b({ address: c });
        if (d && !(0, eb.U)(d)) throw new em.b({ address: d });
        if (m && !(0, eb.U)(m)) throw new em.b({ address: m });
        if (m && !g)
          throw new eg.G(
            "`paymasterInput` must be provided when `paymaster` is defined"
          );
        if (!m && g)
          throw new eg.G(
            "`paymaster` must be provided when `paymasterInput` is defined"
          );
      }
      var ev = c(30498),
        ew = c(15455);
      let BytecodeLengthExceedsMaxSizeError = class BytecodeLengthExceedsMaxSizeError extends eg.G {
        constructor({ givenLength: e, maxBytecodeSize: l }) {
          super(
            `Bytecode cannot be longer than ${l} bytes. Given length: ${e}`,
            { name: "BytecodeLengthExceedsMaxSizeError" }
          );
        }
      };
      let BytecodeLengthInWordsMustBeOddError = class BytecodeLengthInWordsMustBeOddError extends eg.G {
        constructor({ givenLengthInWords: e }) {
          super(
            `Bytecode length in 32-byte words must be odd. Given length in words: ${e}`,
            { name: "BytecodeLengthInWordsMustBeOddError" }
          );
        }
      };
      let BytecodeLengthMustBeDivisibleBy32Error = class BytecodeLengthMustBeDivisibleBy32Error extends eg.G {
        constructor({ givenLength: e }) {
          super(
            `The bytecode length in bytes must be divisible by 32. Given length: ${e}`,
            { name: "BytecodeLengthMustBeDivisibleBy32Error" }
          );
        }
      };
      let ex = (0, N.a)({
          formatters: ed,
          serializers: {
            transaction: function (e, l) {
              return isEIP712Transaction(e)
                ? (function (e) {
                    let {
                      chainId: l,
                      gas: c,
                      nonce: d,
                      to: m,
                      from: g,
                      value: y,
                      maxFeePerGas: b,
                      maxPriorityFeePerGas: C,
                      customSignature: P,
                      factoryDeps: I,
                      paymaster: B,
                      paymasterInput: N,
                      gasPerPubdata: F,
                      data: V,
                    } = e;
                    assertEip712Transaction(e);
                    let G = [
                      d ? (0, er.NC)(d) : "0x",
                      C ? (0, er.NC)(C) : "0x",
                      b ? (0, er.NC)(b) : "0x",
                      c ? (0, er.NC)(c) : "0x",
                      m ?? "0x",
                      y ? (0, er.NC)(y) : "0x",
                      V ?? "0x",
                      (0, er.NC)(l),
                      (0, er.NC)(""),
                      (0, er.NC)(""),
                      (0, er.NC)(l),
                      g ?? "0x",
                      F ? (0, er.NC)(F) : (0, er.NC)(50000n),
                      I ?? [],
                      P ?? "0x",
                      B && N ? [B, N] : [],
                    ];
                    return (0, ep.SM)(["0x71", (0, eh.LV)(G)]);
                  })(e)
                : (0, ef.D)(e, l);
            },
          },
          custom: {
            getEip712Domain: (e) => {
              assertEip712Transaction(e);
              let l = (function (e) {
                let {
                  gas: l,
                  nonce: c,
                  to: d,
                  from: m,
                  value: g,
                  maxFeePerGas: y,
                  maxPriorityFeePerGas: b,
                  factoryDeps: C,
                  paymaster: P,
                  paymasterInput: I,
                  gasPerPubdata: B,
                  data: N,
                } = e;
                return {
                  txType: 113n,
                  from: BigInt(m),
                  to: d ? BigInt(d) : 0n,
                  gasLimit: l ?? 0n,
                  gasPerPubdataByteLimit: B ?? 50000n,
                  maxFeePerGas: y ?? 0n,
                  maxPriorityFeePerGas: b ?? 0n,
                  paymaster: P ? BigInt(P) : 0n,
                  nonce: c ? BigInt(c) : 0n,
                  value: g ?? 0n,
                  data: N || "0x0",
                  factoryDeps:
                    C?.map((e) =>
                      er.NC(
                        (function (e) {
                          let l = (0, en.O0)(e);
                          if (l.length % 32 != 0)
                            throw new BytecodeLengthMustBeDivisibleBy32Error({
                              givenLength: l.length,
                            });
                          if (l.length > eu)
                            throw new BytecodeLengthExceedsMaxSizeError({
                              givenLength: l.length,
                              maxBytecodeSize: eu,
                            });
                          let c = (0, ew.J)(l),
                            d = (0, en.O0)(c),
                            m = l.length / 32;
                          if (m % 2 == 0)
                            throw new BytecodeLengthInWordsMustBeOddError({
                              givenLengthInWords: m,
                            });
                          let g = (0, en.O0)(m),
                            y = (0, ev.vk)(g, { size: 2 }),
                            b = new Uint8Array([1, 0]);
                          return d.set(b, 0), d.set(y, 2), d;
                        })(e)
                      )
                    ) ?? [],
                  paymasterInput: I || "0x",
                };
              })(e);
              return {
                domain: { name: "zkSync", version: "2", chainId: e.chainId },
                types: {
                  Transaction: [
                    { name: "txType", type: "uint256" },
                    { name: "from", type: "uint256" },
                    { name: "to", type: "uint256" },
                    { name: "gasLimit", type: "uint256" },
                    { name: "gasPerPubdataByteLimit", type: "uint256" },
                    { name: "maxFeePerGas", type: "uint256" },
                    { name: "maxPriorityFeePerGas", type: "uint256" },
                    { name: "paymaster", type: "uint256" },
                    { name: "nonce", type: "uint256" },
                    { name: "value", type: "uint256" },
                    { name: "data", type: "bytes" },
                    { name: "factoryDeps", type: "bytes32[]" },
                    { name: "paymasterInput", type: "bytes" },
                  ],
                },
                primaryType: "Transaction",
                message: l,
              };
            },
          },
          id: 324,
          name: "ZKsync Era",
          network: "zksync-era",
          nativeCurrency: { decimals: 18, name: "Ether", symbol: "ETH" },
          rpcUrls: {
            default: {
              http: ["https://mainnet.era.zksync.io"],
              webSocket: ["wss://mainnet.era.zksync.io/ws"],
            },
          },
          blockExplorers: {
            default: {
              name: "Etherscan",
              url: "https://era.zksync.network/",
              apiUrl: "https://api-era.zksync.network/api",
            },
            native: {
              name: "ZKsync Explorer",
              url: "https://explorer.zksync.io/",
              apiUrl: "https://block-explorer-api.mainnet.zksync.io/api",
            },
          },
          contracts: {
            multicall3: {
              address: "0xF9cda624FBC7e059355ce98a31693d299FACd963",
            },
            universalSignatureVerifier: {
              address: "0xfB688330379976DA81eB64Fe4BF50d7401763B9C",
              blockCreated: 45659388,
            },
          },
        }),
        e_ = (0, N.a)({
          id: 43114,
          name: "Avalanche",
          nativeCurrency: { decimals: 18, name: "Avalanche", symbol: "AVAX" },
          rpcUrls: {
            default: { http: ["https://api.avax.network/ext/bc/C/rpc"] },
          },
          blockExplorers: {
            default: {
              name: "SnowTrace",
              url: "https://snowtrace.io",
              apiUrl: "https://api.snowtrace.io",
            },
          },
          contracts: {
            multicall3: {
              address: "0xca11bde05977b3631167028862be2a173976ca11",
              blockCreated: 11907934,
            },
          },
        }),
        eC = (0, N.a)({
          id: 56,
          name: "BNB Smart Chain",
          nativeCurrency: { decimals: 18, name: "BNB", symbol: "BNB" },
          rpcUrls: { default: { http: ["https://56.rpc.thirdweb.com"] } },
          blockExplorers: {
            default: {
              name: "BscScan",
              url: "https://bscscan.com",
              apiUrl: "https://api.bscscan.com/api",
            },
          },
          contracts: {
            multicall3: {
              address: "0xca11bde05977b3631167028862be2a173976ca11",
              blockCreated: 15921452,
            },
          },
        }),
        eE = (0, N.a)({
          id: 534352,
          name: "Scroll",
          nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
          rpcUrls: {
            default: {
              http: ["https://rpc.scroll.io"],
              webSocket: ["wss://wss-rpc.scroll.io/ws"],
            },
          },
          blockExplorers: {
            default: {
              name: "Scrollscan",
              url: "https://scrollscan.com",
              apiUrl: "https://api.scrollscan.com/api",
            },
          },
          contracts: {
            multicall3: {
              address: "0xca11bde05977b3631167028862be2a173976ca11",
              blockCreated: 14,
            },
          },
          testnet: !1,
        }),
        eA = [B.R, F, V.u, Q, $, Z, Y, ex, e_, eC, B.R, eE],
        eS = {
          [V.u.id]: (0, I.d)(
            "https://site1.moralis-nodes.com/base/dd3727877c80481b8751ca501d7336ae"
          ),
          [F.id]: (0, I.d)(
            "https://site1.moralis-nodes.com/arbitrum/b4d27240011c497a9d1e9e5b280d3093"
          ),
          [Q.id]: (0, I.d)(
            "https://site2.moralis-nodes.com/optimism/c9e13109d6d6411eb4bac7574984a6fb"
          ),
          [Z.id]: (0, I.d)(
            "https://site1.moralis-nodes.com/polygon/62e0a178ce574f82bd59c60fd6825c23"
          ),
          [e_.id]: (0, I.d)("https://api.avax.network/ext/bc/C/rpc"),
          [Y.id]: (0, I.d)("https://rpc.ankr.com/polygon_zkevm"),
          [eC.id]: (0, I.d)("https://binance.llamarpc.com"),
          [$.id]: (0, I.d)(
            "https://gnosis-mainnet.g.alchemy.com/v2/YTZ4co0ktED8_pxzfX77Lqg9Z2z4SCX_"
          ),
          [ex.id]: (0, I.d)("https://mainnet.era.zksync.io"),
          [B.R.id]: (0, I.d)(
            "https://site1.moralis-nodes.com/eth/44805a09c5454c499158f747fb62d344"
          ),
          [eE.id]: (0, I.d)(
            "https://scroll-mainnet.g.alchemy.com/v2/FY0tnR37N5bLNyjWsEY4IXxReJejnfQo"
          ),
        },
        ek = (0, d.vX)({
          projectId: "339b9957da9f847b05fd158e1543faae",
          appName: "NOYA",
          chains: eA,
          transports: eS,
          wallets: [
            {
              groupName: "Available Wallets",
              wallets: [
                ({ projectId: e, options: l }) => ({
                  id: "walletConnect",
                  name: "WalletConnect",
                  installed: void 0,
                  iconUrl: async () =>
                    (await c.e(1970).then(c.bind(c, 81970))).default,
                  iconBackground: "#3b99fc",
                  qrCode: { getUri: (e) => e },
                  createConnector: getWalletConnectConnector({
                    projectId: e,
                    walletConnectParameters: l,
                  }),
                }),
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d = hasInjectedProvider({ flag: "isRainbow" }),
                    m = !d,
                    getUri = (e) =>
                      isAndroid()
                        ? e
                        : isIOS()
                        ? `rainbow://wc?uri=${encodeURIComponent(
                            e
                          )}&connector=rainbowkit`
                        : `https://rnbwapp.com/wc?uri=${encodeURIComponent(
                            e
                          )}&connector=rainbowkit`;
                  return {
                    id: "rainbow",
                    name: "Rainbow",
                    rdns: "me.rainbow",
                    iconUrl: async () =>
                      (await c.e(9402).then(c.bind(c, 29402))).default,
                    iconBackground: "#0c2f78",
                    installed: m ? void 0 : d,
                    downloadUrls: {
                      android:
                        "https://play.google.com/store/apps/details?id=me.rainbow&referrer=utm_source%3Drainbowkit&utm_source=rainbowkit",
                      ios: "https://apps.apple.com/app/apple-store/id1457119021?pt=119997837&ct=rainbowkit&mt=8",
                      mobile: "https://rainbow.download?utm_source=rainbowkit",
                      qrCode:
                        "https://rainbow.download?utm_source=rainbowkit&utm_medium=qrcode",
                      browserExtension:
                        "https://rainbow.me/extension?utm_source=rainbowkit",
                    },
                    mobile: { getUri: m ? getUri : void 0 },
                    qrCode: m
                      ? {
                          getUri,
                          instructions: {
                            learnMoreUrl:
                              "https://learn.rainbow.me/connect-to-a-website-or-app?utm_source=rainbowkit&utm_medium=connector&utm_campaign=learnmore",
                            steps: [
                              {
                                description:
                                  "wallet_connectors.rainbow.qr_code.step1.description",
                                step: "install",
                                title:
                                  "wallet_connectors.rainbow.qr_code.step1.title",
                              },
                              {
                                description:
                                  "wallet_connectors.rainbow.qr_code.step2.description",
                                step: "create",
                                title:
                                  "wallet_connectors.rainbow.qr_code.step2.title",
                              },
                              {
                                description:
                                  "wallet_connectors.rainbow.qr_code.step3.description",
                                step: "scan",
                                title:
                                  "wallet_connectors.rainbow.qr_code.step3.title",
                              },
                            ],
                          },
                        }
                      : void 0,
                    createConnector: m
                      ? getWalletConnectConnector({
                          projectId: e,
                          walletConnectParameters: l,
                        })
                      : getInjectedConnector({ flag: "isRainbow" }),
                  };
                },
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d = hasInjectedProvider({ flag: "isMetaMask" }),
                    m = !d,
                    getUri = (e) =>
                      isAndroid()
                        ? e
                        : isIOS()
                        ? `metamask://wc?uri=${encodeURIComponent(e)}`
                        : `https://metamask.app.link/wc?uri=${encodeURIComponent(
                            e
                          )}`;
                  return {
                    id: "metaMask",
                    name: "MetaMask",
                    rdns: "io.metamask",
                    iconUrl: async () =>
                      (await c.e(2135).then(c.bind(c, 62135))).default,
                    iconAccent: "#f6851a",
                    iconBackground: "#fff",
                    installed: m ? void 0 : d,
                    downloadUrls: {
                      android:
                        "https://play.google.com/store/apps/details?id=io.metamask",
                      ios: "https://apps.apple.com/us/app/metamask/id1438144202",
                      mobile: "https://metamask.io/download",
                      qrCode: "https://metamask.io/download",
                      chrome:
                        "https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn",
                      edge: "https://microsoftedge.microsoft.com/addons/detail/metamask/ejbalbakoplchlghecdalmeeeajnimhm",
                      firefox:
                        "https://addons.mozilla.org/firefox/addon/ether-metamask",
                      opera:
                        "https://addons.opera.com/extensions/details/metamask-10",
                      browserExtension: "https://metamask.io/download",
                    },
                    mobile: { getUri: m ? getUri : void 0 },
                    qrCode: m
                      ? {
                          getUri,
                          instructions: {
                            learnMoreUrl: "https://metamask.io/faqs/",
                            steps: [
                              {
                                description:
                                  "wallet_connectors.metamask.qr_code.step1.description",
                                step: "install",
                                title:
                                  "wallet_connectors.metamask.qr_code.step1.title",
                              },
                              {
                                description:
                                  "wallet_connectors.metamask.qr_code.step2.description",
                                step: "create",
                                title:
                                  "wallet_connectors.metamask.qr_code.step2.title",
                              },
                              {
                                description:
                                  "wallet_connectors.metamask.qr_code.step3.description",
                                step: "refresh",
                                title:
                                  "wallet_connectors.metamask.qr_code.step3.title",
                              },
                            ],
                          },
                        }
                      : void 0,
                    extension: {
                      instructions: {
                        learnMoreUrl: "https://metamask.io/faqs/",
                        steps: [
                          {
                            description:
                              "wallet_connectors.metamask.extension.step1.description",
                            step: "install",
                            title:
                              "wallet_connectors.metamask.extension.step1.title",
                          },
                          {
                            description:
                              "wallet_connectors.metamask.extension.step2.description",
                            step: "create",
                            title:
                              "wallet_connectors.metamask.extension.step2.title",
                          },
                          {
                            description:
                              "wallet_connectors.metamask.extension.step3.description",
                            step: "refresh",
                            title:
                              "wallet_connectors.metamask.extension.step3.title",
                          },
                        ],
                      },
                    },
                    createConnector: m
                      ? getWalletConnectConnector({
                          projectId: e,
                          walletConnectParameters: l,
                        })
                      : getInjectedConnector({
                          target:
                            "undefined" != typeof window
                              ? window.ethereum?.providers?.find(isMetaMask) ??
                                window.ethereum
                              : void 0,
                        }),
                  };
                },
                chunk_PNEDRY6O_coinbaseWallet,
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d;
                  let m = isMobile()
                      ? hasInjectedProvider({ flag: "isTrust" })
                      : hasInjectedProvider({ flag: "isTrustWallet" }),
                    g = !m;
                  return (
                    g &&
                      (d = {
                        getUri: (e) => e,
                        instructions: {
                          learnMoreUrl: "https://trustwallet.com/",
                          steps: [
                            {
                              description:
                                "wallet_connectors.trust.qr_code.step1.description",
                              step: "install",
                              title:
                                "wallet_connectors.trust.qr_code.step1.title",
                            },
                            {
                              description:
                                "wallet_connectors.trust.qr_code.step2.description",
                              step: "create",
                              title:
                                "wallet_connectors.trust.qr_code.step2.title",
                            },
                            {
                              description:
                                "wallet_connectors.trust.qr_code.step3.description",
                              step: "scan",
                              title:
                                "wallet_connectors.trust.qr_code.step3.title",
                            },
                          ],
                        },
                      }),
                    {
                      id: "trust",
                      name: "Trust Wallet",
                      rdns: "com.trustwallet.app",
                      iconUrl: async () =>
                        (await c.e(5070).then(c.bind(c, 65070))).default,
                      installed: m || void 0,
                      iconAccent: "#3375BB",
                      iconBackground: "#fff",
                      downloadUrls: {
                        android:
                          "https://play.google.com/store/apps/details?id=com.wallet.crypto.trustapp",
                        ios: "https://apps.apple.com/us/app/trust-crypto-bitcoin-wallet/id1288339409",
                        mobile: "https://trustwallet.com/download",
                        qrCode: "https://trustwallet.com/download",
                        chrome:
                          "https://chrome.google.com/webstore/detail/trust-wallet/egjidjbpglichdcondbcbdnbeeppgdph",
                        browserExtension:
                          "https://trustwallet.com/browser-extension",
                      },
                      mobile: {
                        getUri: g
                          ? (e) => `trust://wc?uri=${encodeURIComponent(e)}`
                          : void 0,
                      },
                      qrCode: d,
                      extension: {
                        instructions: {
                          learnMoreUrl:
                            "https://trustwallet.com/browser-extension",
                          steps: [
                            {
                              description:
                                "wallet_connectors.trust.extension.step1.description",
                              step: "install",
                              title:
                                "wallet_connectors.trust.extension.step1.title",
                            },
                            {
                              description:
                                "wallet_connectors.trust.extension.step2.description",
                              step: "create",
                              title:
                                "wallet_connectors.trust.extension.step2.title",
                            },
                            {
                              description:
                                "wallet_connectors.trust.extension.step3.description",
                              step: "refresh",
                              title:
                                "wallet_connectors.trust.extension.step3.title",
                            },
                          ],
                        },
                      },
                      createConnector: g
                        ? getWalletConnectConnector({
                            projectId: e,
                            walletConnectParameters: l,
                          })
                        : isMobile()
                        ? getInjectedConnector({ flag: "isTrust" })
                        : getInjectedConnector({ flag: "isTrustWallet" }),
                    }
                  );
                },
                ({ projectId: e, walletConnectParameters: l }) => ({
                  id: "argent",
                  name: "Argent",
                  iconUrl: async () =>
                    (await c.e(3230).then(c.bind(c, 73230))).default,
                  iconBackground: "#fff",
                  downloadUrls: {
                    android:
                      "https://play.google.com/store/apps/details?id=im.argent.contractwalletclient",
                    ios: "https://apps.apple.com/us/app/argent/id1358741926",
                    mobile: "https://argent.xyz/download-argent",
                    qrCode: "https://argent.link/app",
                  },
                  mobile: {
                    getUri: (e) =>
                      isAndroid()
                        ? e
                        : `argent://app/wc?uri=${encodeURIComponent(e)}`,
                  },
                  qrCode: {
                    getUri: (e) => e,
                    instructions: {
                      learnMoreUrl:
                        "https://argent.xyz/learn/what-is-a-crypto-wallet/",
                      steps: [
                        {
                          description:
                            "wallet_connectors.argent.qr_code.step1.description",
                          step: "install",
                          title: "wallet_connectors.argent.qr_code.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.argent.qr_code.step2.description",
                          step: "create",
                          title: "wallet_connectors.argent.qr_code.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.argent.qr_code.step3.description",
                          step: "scan",
                          title: "wallet_connectors.argent.qr_code.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getWalletConnectConnector({
                    projectId: e,
                    walletConnectParameters: l,
                  }),
                }),
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d = hasInjectedProvider({
                      namespace: "foxwallet.ethereum",
                    }),
                    m = !d;
                  return {
                    id: "foxwallet",
                    name: "FoxWallet",
                    iconUrl: async () =>
                      (await c.e(1531).then(c.bind(c, 81531))).default,
                    iconBackground: "#fff",
                    downloadUrls: {
                      android:
                        "https://play.google.com/store/apps/details?id=com.foxwallet.play",
                      ios: "https://apps.apple.com/app/foxwallet-crypto-web3/id1590983231",
                      qrCode: "https://foxwallet.com/download",
                    },
                    mobile: {
                      getUri: m
                        ? (e) => `foxwallet://wc?uri=${encodeURIComponent(e)}`
                        : void 0,
                    },
                    qrCode: m
                      ? {
                          getUri: (e) => e,
                          instructions: {
                            learnMoreUrl: "https://foxwallet.com",
                            steps: [
                              {
                                description:
                                  "wallet_connectors.fox.qr_code.step1.description",
                                step: "install",
                                title:
                                  "wallet_connectors.fox.qr_code.step1.title",
                              },
                              {
                                description:
                                  "wallet_connectors.fox.qr_code.step2.description",
                                step: "create",
                                title:
                                  "wallet_connectors.fox.qr_code.step2.title",
                              },
                              {
                                description:
                                  "wallet_connectors.fox.qr_code.step3.description",
                                step: "scan",
                                title:
                                  "wallet_connectors.fox.qr_code.step3.title",
                              },
                            ],
                          },
                        }
                      : void 0,
                    createConnector: m
                      ? getWalletConnectConnector({
                          projectId: e,
                          walletConnectParameters: l,
                        })
                      : getInjectedConnector({
                          namespace: "foxwallet.ethereum",
                        }),
                  };
                },
                () => ({
                  id: "mew",
                  name: "MEW wallet",
                  iconUrl: async () =>
                    (await c.e(4661).then(c.bind(c, 84661))).default,
                  iconBackground: "#fff",
                  installed: hasInjectedProvider({ flag: "isMEWwallet" }),
                  downloadUrls: {
                    android:
                      "https://play.google.com/store/apps/details?id=com.myetherwallet.mewwallet&referrer=utm_source%3Drainbow",
                    ios: "https://apps.apple.com/app/apple-store/id1464614025?pt=118781877&mt=8&ct=rainbow",
                    mobile: "https://mewwallet.com",
                    qrCode: "https://mewwallet.com",
                  },
                  createConnector: getInjectedConnector({
                    flag: "isMEWwallet",
                  }),
                }),
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d = hasInjectedProvider({ flag: "isBifrost" }),
                    m = !d;
                  return {
                    id: "bifrostWallet",
                    name: "Bifrost Wallet",
                    iconUrl: async () =>
                      (await c.e(5311).then(c.bind(c, 45311))).default,
                    iconBackground: "#fff",
                    installed: m ? void 0 : d,
                    downloadUrls: {
                      android:
                        "https://play.google.com/store/apps/details?id=com.bifrostwallet.app",
                      ios: "https://apps.apple.com/us/app/bifrost-wallet/id1577198351",
                      qrCode: "https://bifrostwallet.com/#download-app",
                    },
                    mobile: {
                      getUri: m
                        ? (e) =>
                            isAndroid()
                              ? e
                              : `https://app.bifrostwallet.com/wc?uri=${encodeURIComponent(
                                  e
                                )}`
                        : void 0,
                    },
                    qrCode: m
                      ? {
                          getUri: (e) => e,
                          instructions: {
                            learnMoreUrl:
                              "https://support.bifrostwallet.com/en/articles/6886814-how-to-use-walletconnect",
                            steps: [
                              {
                                description:
                                  "wallet_connectors.bifrost.qr_code.step1.description",
                                step: "install",
                                title:
                                  "wallet_connectors.bifrost.qr_code.step1.title",
                              },
                              {
                                description:
                                  "wallet_connectors.bifrost.qr_code.step2.description",
                                step: "create",
                                title:
                                  "wallet_connectors.bifrost.qr_code.step2.title",
                              },
                              {
                                description:
                                  "wallet_connectors.bifrost.qr_code.step3.description",
                                step: "scan",
                                title:
                                  "wallet_connectors.bifrost.qr_code.step3.title",
                              },
                            ],
                          },
                        }
                      : void 0,
                    createConnector: m
                      ? getWalletConnectConnector({
                          projectId: e,
                          walletConnectParameters: l,
                        })
                      : getInjectedConnector({ flag: "isBifrost" }),
                  };
                },
                () => ({
                  id: "bitski",
                  name: "Bitski",
                  installed: hasInjectedProvider({ flag: "isBitski" }),
                  iconUrl: async () =>
                    (await c.e(4890).then(c.bind(c, 14890))).default,
                  iconBackground: "#fff",
                  downloadUrls: {
                    chrome:
                      "https://chrome.google.com/webstore/detail/bitski/feejiigddaafeojfddjjlmfkabimkell",
                    browserExtension: "https://bitski.com",
                  },
                  extension: {
                    instructions: {
                      learnMoreUrl:
                        "https://bitski.zendesk.com/hc/articles/12803972818836-How-to-install-the-Bitski-browser-extension",
                      steps: [
                        {
                          description:
                            "wallet_connectors.bitski.extension.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.bitski.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.bitski.extension.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.bitski.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.bitski.extension.step3.description",
                          step: "refresh",
                          title:
                            "wallet_connectors.bitski.extension.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getInjectedConnector({ flag: "isBitski" }),
                }),
                () => ({
                  id: "phantom",
                  name: "Phantom",
                  rdns: "app.phantom",
                  iconUrl: async () =>
                    (await c.e(5323).then(c.bind(c, 65323))).default,
                  iconBackground: "#9A8AEE",
                  installed: hasInjectedProvider({
                    namespace: "phantom.ethereum",
                  }),
                  downloadUrls: {
                    android:
                      "https://play.google.com/store/apps/details?id=app.phantom",
                    ios: "https://apps.apple.com/app/phantom-solana-wallet/1598432977",
                    mobile: "https://phantom.app/download",
                    qrCode: "https://phantom.app/download",
                    chrome:
                      "https://chrome.google.com/webstore/detail/phantom/bfnaelmomeimhlpmgjnjophhpkkoljpa",
                    firefox:
                      "https://addons.mozilla.org/firefox/addon/phantom-app/",
                    browserExtension: "https://phantom.app/download",
                  },
                  extension: {
                    instructions: {
                      steps: [
                        {
                          description:
                            "wallet_connectors.phantom.extension.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.phantom.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.phantom.extension.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.phantom.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.phantom.extension.step3.description",
                          step: "refresh",
                          title:
                            "wallet_connectors.phantom.extension.step3.title",
                        },
                      ],
                      learnMoreUrl: "https://help.phantom.app",
                    },
                  },
                  createConnector: getInjectedConnector({
                    namespace: "phantom.ethereum",
                  }),
                }),
                () => ({
                  id: "brave",
                  name: "Brave Wallet",
                  rdns: "com.brave.wallet",
                  iconUrl: async () =>
                    (await c.e(1433).then(c.bind(c, 61433))).default,
                  iconBackground: "#fff",
                  installed: hasInjectedProvider({ flag: "isBraveWallet" }),
                  downloadUrls: {},
                  createConnector: getInjectedConnector({
                    flag: "isBraveWallet",
                  }),
                }),
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d = hasInjectedProvider({
                      namespace: "coin98.provider",
                      flag: "isCoin98",
                    }),
                    m = !d;
                  return {
                    id: "coin98",
                    name: "Coin98 Wallet",
                    iconUrl: async () =>
                      (await c.e(6775).then(c.bind(c, 36775))).default,
                    installed: d,
                    iconAccent: "#CDA349",
                    iconBackground: "#fff",
                    rdns: "coin98.com",
                    downloadUrls: {
                      android:
                        "https://play.google.com/store/apps/details?id=coin98.crypto.finance.media",
                      ios: "https://apps.apple.com/vn/app/coin98-super-app/id1561969966",
                      mobile: "https://coin98.com/wallet",
                      qrCode: "https://coin98.com/wallet",
                      chrome:
                        "https://chrome.google.com/webstore/detail/coin98-wallet/aeachknmefphepccionboohckonoeemg",
                      browserExtension: "https://coin98.com/wallet",
                    },
                    mobile: { getUri: m ? (e) => e : void 0 },
                    qrCode: m
                      ? {
                          getUri: (e) => e,
                          instructions: {
                            learnMoreUrl: "https://coin98.com/wallet",
                            steps: [
                              {
                                description:
                                  "wallet_connectors.coin98.qr_code.step1.description",
                                step: "install",
                                title:
                                  "wallet_connectors.coin98.qr_code.step1.title",
                              },
                              {
                                description:
                                  "wallet_connectors.coin98.qr_code.step2.description",
                                step: "create",
                                title:
                                  "wallet_connectors.coin98.qr_code.step2.title",
                              },
                              {
                                description:
                                  "wallet_connectors.coin98.qr_code.step3.description",
                                step: "scan",
                                title:
                                  "wallet_connectors.coin98.qr_code.step3.title",
                              },
                            ],
                          },
                        }
                      : void 0,
                    extension: {
                      instructions: {
                        learnMoreUrl: "https://coin98.com/wallet",
                        steps: [
                          {
                            description:
                              "wallet_connectors.coin98.extension.step1.description",
                            step: "install",
                            title:
                              "wallet_connectors.coin98.extension.step1.title",
                          },
                          {
                            description:
                              "wallet_connectors.coin98.extension.step2.description",
                            step: "create",
                            title:
                              "wallet_connectors.coin98.extension.step2.title",
                          },
                          {
                            description:
                              "wallet_connectors.coin98.extension.step3.description",
                            step: "refresh",
                            title:
                              "wallet_connectors.coin98.extension.step3.title",
                          },
                        ],
                      },
                    },
                    createConnector: m
                      ? getWalletConnectConnector({
                          projectId: e,
                          walletConnectParameters: l,
                        })
                      : getInjectedConnector({
                          namespace: "coin98Wallet",
                          flag: "isCoin98",
                        }),
                  };
                },
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d = hasInjectedProvider({
                      namespace: "avalanche",
                      flag: "isAvalanche",
                    }),
                    m = !d;
                  return {
                    id: "core",
                    name: "Core",
                    rdns: "app.core.extension",
                    iconUrl: async () =>
                      (await c.e(8573).then(c.bind(c, 38573))).default,
                    iconBackground: "#1A1A1C",
                    installed: m ? void 0 : d,
                    downloadUrls: {
                      android:
                        "https://play.google.com/store/apps/details?id=com.avaxwallet",
                      ios: "https://apps.apple.com/us/app/core-wallet/id6443685999",
                      mobile: "https://core.app/?downloadCoreMobile=1",
                      qrCode: "https://core.app/?downloadCoreMobile=1",
                      chrome:
                        "https://chrome.google.com/webstore/detail/core-crypto-wallet-nft-ex/agoakfejjabomempkjlepdflaleeobhb",
                      browserExtension: "https://extension.core.app/",
                    },
                    mobile: { getUri: m ? (e) => e : void 0 },
                    qrCode: m
                      ? {
                          getUri: (e) => e,
                          instructions: {
                            learnMoreUrl:
                              "https://support.avax.network/en/articles/6115608-core-mobile-how-to-add-the-core-mobile-to-my-phone",
                            steps: [
                              {
                                description:
                                  "wallet_connectors.core.qr_code.step1.description",
                                step: "install",
                                title:
                                  "wallet_connectors.core.qr_code.step1.title",
                              },
                              {
                                description:
                                  "wallet_connectors.core.qr_code.step2.description",
                                step: "create",
                                title:
                                  "wallet_connectors.core.qr_code.step2.title",
                              },
                              {
                                description:
                                  "wallet_connectors.core.qr_code.step3.description",
                                step: "scan",
                                title:
                                  "wallet_connectors.core.qr_code.step3.title",
                              },
                            ],
                          },
                        }
                      : void 0,
                    extension: {
                      instructions: {
                        learnMoreUrl: "https://extension.core.app/",
                        steps: [
                          {
                            description:
                              "wallet_connectors.core.extension.step1.description",
                            step: "install",
                            title:
                              "wallet_connectors.core.extension.step1.title",
                          },
                          {
                            description:
                              "wallet_connectors.core.extension.step2.description",
                            step: "create",
                            title:
                              "wallet_connectors.core.extension.step2.title",
                          },
                          {
                            description:
                              "wallet_connectors.core.extension.step3.description",
                            step: "refresh",
                            title:
                              "wallet_connectors.core.extension.step3.title",
                          },
                        ],
                      },
                    },
                    createConnector: m
                      ? getWalletConnectConnector({
                          projectId: e,
                          walletConnectParameters: l,
                        })
                      : getInjectedConnector({
                          namespace: "avalanche",
                          flag: "isAvalanche",
                        }),
                  };
                },
                () => ({
                  id: "dawn",
                  name: "Dawn",
                  iconUrl: async () =>
                    (await c.e(4408).then(c.bind(c, 84408))).default,
                  iconBackground: "#000000",
                  installed: hasInjectedProvider({ flag: "isDawn" }),
                  hidden: () => !isIOS(),
                  downloadUrls: {
                    ios: "https://apps.apple.com/us/app/dawn-ethereum-wallet/id1673143782",
                    mobile: "https://dawnwallet.xyz",
                  },
                  createConnector: getInjectedConnector({ flag: "isDawn" }),
                }),
                () => ({
                  id: "enkrypt",
                  name: "Enkrypt Wallet",
                  rdns: "com.enkrypt",
                  installed: hasInjectedProvider({
                    namespace: "enkrypt.providers.ethereum",
                  }),
                  iconUrl: async () =>
                    (await c.e(8647).then(c.bind(c, 58647))).default,
                  iconBackground: "#FFFFFF",
                  downloadUrls: {
                    qrCode: "https://www.enkrypt.com",
                    chrome:
                      "https://chrome.google.com/webstore/detail/enkrypt-ethereum-polkadot/kkpllkodjeloidieedojogacfhpaihoh",
                    browserExtension: "https://www.enkrypt.com/",
                    edge: "https://microsoftedge.microsoft.com/addons/detail/enkrypt-ethereum-polkad/gfenajajnjjmmdojhdjmnngomkhlnfjl",
                    firefox:
                      "https://addons.mozilla.org/en-US/firefox/addon/enkrypt/",
                    opera:
                      "https://addons.opera.com/en/extensions/details/enkrypt/",
                    safari:
                      "https://apps.apple.com/app/enkrypt-web3-wallet/id1640164309",
                  },
                  extension: {
                    instructions: {
                      learnMoreUrl:
                        "https://blog.enkrypt.com/what-is-a-web3-wallet/",
                      steps: [
                        {
                          description:
                            "wallet_connectors.enkrypt.extension.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.enkrypt.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.enkrypt.extension.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.enkrypt.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.enkrypt.extension.step3.description",
                          step: "refresh",
                          title:
                            "wallet_connectors.enkrypt.extension.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getInjectedConnector({
                    namespace: "enkrypt.providers.ethereum",
                  }),
                }),
                () => ({
                  id: "frame",
                  name: "Frame",
                  rdns: "sh.frame",
                  installed: hasInjectedProvider({ flag: "isFrame" }),
                  iconUrl: async () =>
                    (await c.e(2297).then(c.bind(c, 32297))).default,
                  iconBackground: "#121C20",
                  downloadUrls: { browserExtension: "https://frame.sh/" },
                  extension: {
                    instructions: {
                      learnMoreUrl:
                        "https://docs.frame.sh/docs/Getting%20Started/Installation/",
                      steps: [
                        {
                          description:
                            "wallet_connectors.frame.extension.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.frame.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.frame.extension.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.frame.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.frame.extension.step3.description",
                          step: "refresh",
                          title:
                            "wallet_connectors.frame.extension.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getInjectedConnector({ flag: "isFrame" }),
                }),
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d = hasInjectedProvider({
                      namespace: "frontier.ethereum",
                      flag: "isFrontier",
                    }),
                    m = !d;
                  return {
                    id: "frontier",
                    name: "Frontier Wallet",
                    rdns: "xyz.frontier.wallet",
                    installed: d,
                    iconUrl: async () =>
                      (await c.e(4716).then(c.bind(c, 24716))).default,
                    iconBackground: "#CC703C",
                    downloadUrls: {
                      android:
                        "https://play.google.com/store/apps/details?id=com.frontierwallet",
                      ios: "https://apps.apple.com/us/app/frontier-crypto-defi-wallet/id1482380988",
                      qrCode: "https://www.frontier.xyz/download",
                      chrome:
                        "https://chrome.google.com/webstore/detail/frontier-wallet/kppfdiipphfccemcignhifpjkapfbihd",
                      browserExtension: "https://www.frontier.xyz/download",
                    },
                    mobile: {
                      getUri: m
                        ? (e) =>
                            isAndroid()
                              ? `frontier://wc?uri=${encodeURIComponent(e)}`
                              : e
                        : void 0,
                    },
                    qrCode: m
                      ? {
                          getUri: (e) =>
                            isAndroid()
                              ? `frontier://wc?uri=${encodeURIComponent(e)}`
                              : e,
                          instructions: {
                            learnMoreUrl: "https://help.frontier.xyz/en/",
                            steps: [
                              {
                                description:
                                  "wallet_connectors.im_token.qr_code.step1.description",
                                step: "install",
                                title:
                                  "wallet_connectors.im_token.qr_code.step1.title",
                              },
                              {
                                description:
                                  "wallet_connectors.im_token.qr_code.step2.description",
                                step: "create",
                                title:
                                  "wallet_connectors.im_token.qr_code.step2.title",
                              },
                              {
                                description:
                                  "wallet_connectors.im_token.qr_code.step3.description",
                                step: "scan",
                                title:
                                  "wallet_connectors.im_token.qr_code.step3.title",
                              },
                            ],
                          },
                        }
                      : void 0,
                    extension: {
                      instructions: {
                        learnMoreUrl:
                          "https://help.frontier.xyz/en/articles/6967236-setting-up-frontier-on-your-device",
                        steps: [
                          {
                            description:
                              "wallet_connectors.frontier.extension.step1.description",
                            step: "install",
                            title:
                              "wallet_connectors.frontier.extension.step1.title",
                          },
                          {
                            description:
                              "wallet_connectors.frontier.extension.step2.description",
                            step: "create",
                            title:
                              "wallet_connectors.frontier.extension.step2.title",
                          },
                          {
                            description:
                              "wallet_connectors.frontier.extension.step3.description",
                            step: "refresh",
                            title:
                              "wallet_connectors.frontier.extension.step3.title",
                          },
                        ],
                      },
                    },
                    createConnector: m
                      ? getWalletConnectConnector({
                          projectId: e,
                          walletConnectParameters: l,
                        })
                      : getInjectedConnector({
                          namespace: "frontier.ethereum",
                          flag: "isFrontier",
                        }),
                  };
                },
                ({ projectId: e, walletConnectParameters: l }) => ({
                  id: "imToken",
                  name: "imToken",
                  iconUrl: async () =>
                    (await c.e(3345).then(c.bind(c, 93345))).default,
                  iconBackground: "#098de6",
                  downloadUrls: {
                    android:
                      "https://play.google.com/store/apps/details?id=im.token.app",
                    ios: "https://itunes.apple.com/us/app/imtoken2/id1384798940",
                    mobile: "https://token.im/download",
                    qrCode: "https://token.im/download",
                  },
                  mobile: {
                    getUri: (e) =>
                      `imtokenv2://wc?uri=${encodeURIComponent(e)}`,
                  },
                  qrCode: {
                    getUri: (e) => e,
                    instructions: {
                      learnMoreUrl:
                        "undefined" != typeof window &&
                        window.navigator.language.includes("zh")
                          ? "https://support.token.im/hc/zh-cn/categories/360000925393"
                          : "https://support.token.im/hc/en-us/categories/360000925393",
                      steps: [
                        {
                          description:
                            "wallet_connectors.im_token.qr_code.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.im_token.qr_code.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.im_token.qr_code.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.im_token.qr_code.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.im_token.qr_code.step3.description",
                          step: "scan",
                          title:
                            "wallet_connectors.im_token.qr_code.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getWalletConnectConnector({
                    projectId: e,
                    walletConnectParameters: l,
                  }),
                }),
                () => ({
                  id: "injected",
                  name: "Browser Wallet",
                  iconUrl: async () =>
                    (await c.e(2743).then(c.bind(c, 84817))).default,
                  iconBackground: "#fff",
                  createConnector: getInjectedConnector({}),
                }),
                ({ projectId: e, walletConnectParameters: l }) => ({
                  id: "ledger",
                  iconBackground: "#000",
                  iconAccent: "#000",
                  name: "Ledger",
                  iconUrl: async () =>
                    (await c.e(110).then(c.bind(c, 60110))).default,
                  downloadUrls: {
                    android:
                      "https://play.google.com/store/apps/details?id=com.ledger.live",
                    ios: "https://apps.apple.com/us/app/ledger-live-web3-wallet/id1361671700",
                    mobile: "https://www.ledger.com/ledger-live",
                    qrCode: "https://r354.adj.st/?adj_t=t2esmlk",
                    windows: "https://www.ledger.com/ledger-live/download",
                    macos: "https://www.ledger.com/ledger-live/download",
                    linux: "https://www.ledger.com/ledger-live/download",
                    desktop: "https://www.ledger.com/ledger-live",
                  },
                  mobile: {
                    getUri: (e) =>
                      isAndroid()
                        ? e
                        : `ledgerlive://wc?uri=${encodeURIComponent(e)}`,
                  },
                  desktop: {
                    getUri: (e) =>
                      `ledgerlive://wc?uri=${encodeURIComponent(e)}`,
                    instructions: {
                      learnMoreUrl:
                        "https://support.ledger.com/hc/en-us/articles/4404389503889-Getting-started-with-Ledger-Live",
                      steps: [
                        {
                          description:
                            "wallet_connectors.ledger.desktop.step1.description",
                          step: "install",
                          title: "wallet_connectors.ledger.desktop.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.ledger.desktop.step2.description",
                          step: "create",
                          title: "wallet_connectors.ledger.desktop.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.ledger.desktop.step3.description",
                          step: "connect",
                          title: "wallet_connectors.ledger.desktop.step3.title",
                        },
                      ],
                    },
                  },
                  qrCode: {
                    getUri: (e) =>
                      `ledgerlive://wc?uri=${encodeURIComponent(e)}`,
                    instructions: {
                      learnMoreUrl:
                        "https://support.ledger.com/hc/en-us/articles/4404389503889-Getting-started-with-Ledger-Live",
                      steps: [
                        {
                          description:
                            "wallet_connectors.ledger.qr_code.step1.description",
                          step: "install",
                          title: "wallet_connectors.ledger.qr_code.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.ledger.qr_code.step2.description",
                          step: "create",
                          title: "wallet_connectors.ledger.qr_code.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.ledger.qr_code.step3.description",
                          step: "scan",
                          title: "wallet_connectors.ledger.qr_code.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getWalletConnectConnector({
                    projectId: e,
                    walletConnectParameters: l,
                  }),
                }),
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d = hasInjectedProvider({ namespace: "okxwallet" }),
                    m = !d;
                  return {
                    id: "okx",
                    name: "OKX Wallet",
                    rdns: "com.okex.wallet",
                    iconUrl: async () =>
                      (await c.e(52).then(c.bind(c, 50052))).default,
                    iconAccent: "#000",
                    iconBackground: "#000",
                    downloadUrls: {
                      android:
                        "https://play.google.com/store/apps/details?id=com.okinc.okex.gp",
                      ios: "https://itunes.apple.com/app/id1327268470?mt=8",
                      mobile: "https://okx.com/download",
                      qrCode: "https://okx.com/download",
                      chrome:
                        "https://chrome.google.com/webstore/detail/okx-wallet/mcohilncbfahbmgdjkbpemcciiolgcge",
                      edge: "https://microsoftedge.microsoft.com/addons/detail/okx-wallet/pbpjkcldjiffchgbbndmhojiacbgflha",
                      firefox:
                        "https://addons.mozilla.org/firefox/addon/okexwallet/",
                      browserExtension: "https://okx.com/download",
                    },
                    mobile: {
                      getUri: m
                        ? (e) =>
                            isAndroid()
                              ? e
                              : `okex://main/wc?uri=${encodeURIComponent(e)}`
                        : void 0,
                    },
                    qrCode: m
                      ? {
                          getUri: (e) => e,
                          instructions: {
                            learnMoreUrl: "https://okx.com/web3/",
                            steps: [
                              {
                                description:
                                  "wallet_connectors.okx.qr_code.step1.description",
                                step: "install",
                                title:
                                  "wallet_connectors.okx.qr_code.step1.title",
                              },
                              {
                                description:
                                  "wallet_connectors.okx.qr_code.step2.description",
                                step: "create",
                                title:
                                  "wallet_connectors.okx.qr_code.step2.title",
                              },
                              {
                                description:
                                  "wallet_connectors.okx.qr_code.step3.description",
                                step: "scan",
                                title:
                                  "wallet_connectors.okx.qr_code.step3.title",
                              },
                            ],
                          },
                        }
                      : void 0,
                    extension: {
                      instructions: {
                        learnMoreUrl: "https://okx.com/web3/",
                        steps: [
                          {
                            description:
                              "wallet_connectors.okx.extension.step1.description",
                            step: "install",
                            title:
                              "wallet_connectors.okx.extension.step1.title",
                          },
                          {
                            description:
                              "wallet_connectors.okx.extension.step2.description",
                            step: "create",
                            title:
                              "wallet_connectors.okx.extension.step2.title",
                          },
                          {
                            description:
                              "wallet_connectors.okx.extension.step3.description",
                            step: "refresh",
                            title:
                              "wallet_connectors.okx.extension.step3.title",
                          },
                        ],
                      },
                    },
                    createConnector: m
                      ? getWalletConnectConnector({
                          projectId: e,
                          walletConnectParameters: l,
                        })
                      : getInjectedConnector({ namespace: "okxwallet" }),
                  };
                },
                ({ projectId: e, walletConnectParameters: l }) => ({
                  id: "omni",
                  name: "Omni",
                  iconUrl: async () =>
                    (await c.e(8740).then(c.bind(c, 48740))).default,
                  iconBackground: "#000",
                  downloadUrls: {
                    android:
                      "https://play.google.com/store/apps/details?id=fi.steakwallet.app",
                    ios: "https://itunes.apple.com/us/app/id1569375204",
                    mobile: "https://omniwallet.app.link",
                    qrCode: "https://omniwallet.app.link",
                  },
                  mobile: {
                    getUri: (e) =>
                      isAndroid()
                        ? e
                        : `omni://wc?uri=${encodeURIComponent(e)}`,
                  },
                  qrCode: {
                    getUri: (e) => e,
                    instructions: {
                      learnMoreUrl: "https://omni.app/support",
                      steps: [
                        {
                          description:
                            "wallet_connectors.omni.qr_code.step1.description",
                          step: "install",
                          title: "wallet_connectors.omni.qr_code.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.omni.qr_code.step2.description",
                          step: "create",
                          title: "wallet_connectors.omni.qr_code.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.omni.qr_code.step3.description",
                          step: "scan",
                          title: "wallet_connectors.omni.qr_code.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getWalletConnectConnector({
                    projectId: e,
                    walletConnectParameters: l,
                  }),
                }),
                () => ({
                  id: "onekey",
                  name: "OneKey",
                  rdns: "so.onekey.app.wallet",
                  iconAccent: "#00B812",
                  iconBackground: "#fff",
                  iconUrl: async () =>
                    (await c.e(8032).then(c.bind(c, 18032))).default,
                  installed: hasInjectedProvider({
                    namespace: "$onekey.ethereum",
                  }),
                  downloadUrls: {
                    android:
                      "https://play.google.com/store/apps/details?id=so.onekey.app.wallet",
                    browserExtension: "https://www.onekey.so/download/",
                    chrome:
                      "https://chrome.google.com/webstore/detail/onekey/jnmbobjmhlngoefaiojfljckilhhlhcj",
                    edge: "https://microsoftedge.microsoft.com/addons/detail/onekey/obffkkagpmohennipjokmpllocnlndac",
                    ios: "https://apps.apple.com/us/app/onekey-open-source-wallet/id1609559473",
                    mobile: "https://www.onekey.so/download/",
                    qrCode: "https://www.onekey.so/download/",
                  },
                  extension: {
                    instructions: {
                      learnMoreUrl:
                        "https://help.onekey.so/hc/en-us/categories/360000170236",
                      steps: [
                        {
                          description:
                            "wallet_connectors.one_key.extension.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.one_key.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.one_key.extension.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.one_key.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.one_key.extension.step3.description",
                          step: "refresh",
                          title:
                            "wallet_connectors.one_key.extension.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getInjectedConnector({
                    namespace: "$onekey.ethereum",
                  }),
                }),
                () => ({
                  id: "rabby",
                  name: "Rabby Wallet",
                  iconUrl: async () =>
                    (await c.e(2897).then(c.bind(c, 72897))).default,
                  rdns: "io.rabby",
                  iconBackground: "#8697FF",
                  installed: hasInjectedProvider({ flag: "isRabby" }),
                  downloadUrls: {
                    chrome:
                      "https://chrome.google.com/webstore/detail/rabby-wallet/acmacodkjbdgmoleebolmdjonilkdbch",
                    browserExtension: "https://rabby.io",
                  },
                  extension: {
                    instructions: {
                      learnMoreUrl: "https://rabby.io/",
                      steps: [
                        {
                          description:
                            "wallet_connectors.rabby.extension.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.rabby.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.rabby.extension.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.rabby.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.rabby.extension.step3.description",
                          step: "refresh",
                          title:
                            "wallet_connectors.rabby.extension.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getInjectedConnector({ flag: "isRabby" }),
                }),
                () => ({
                  id: "safe",
                  name: "Safe",
                  iconAccent: "#12ff80",
                  iconBackground: "#fff",
                  iconUrl: async () =>
                    (await c.e(6890).then(c.bind(c, 96890))).default,
                  installed:
                    "undefined" != typeof window && window?.parent !== window,
                  downloadUrls: {},
                  createConnector: (e) =>
                    (0, m.K)((l) => ({ ...(0, P.T)()(l), ...e })),
                }),
                () => ({
                  id: "safeheron",
                  name: "Safeheron",
                  installed: hasInjectedProvider({
                    namespace: "safeheron",
                    flag: "isSafeheron",
                  }),
                  iconUrl: async () =>
                    (await c.e(569).then(c.bind(c, 30569))).default,
                  iconBackground: "#fff",
                  downloadUrls: {
                    chrome:
                      "https://chrome.google.com/webstore/detail/safeheron/aiaghdjafpiofpainifbgfgjfpclngoh",
                    browserExtension: "https://www.safeheron.com/",
                  },
                  extension: {
                    instructions: {
                      learnMoreUrl: "https://www.safeheron.com/",
                      steps: [
                        {
                          description:
                            "wallet_connectors.safeheron.extension.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.safeheron.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.safeheron.extension.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.safeheron.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.safeheron.extension.step3.description",
                          step: "refresh",
                          title:
                            "wallet_connectors.safeheron.extension.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getInjectedConnector({
                    namespace: "safeheron",
                    flag: "isSafeheron",
                  }),
                }),
                () => ({
                  id: "taho",
                  name: "Taho",
                  iconBackground: "#d08d57",
                  iconUrl: async () =>
                    (await c.e(9289).then(c.bind(c, 39289))).default,
                  downloadUrls: {
                    chrome:
                      "https://chrome.google.com/webstore/detail/taho/eajafomhmkipbjmfmhebemolkcicgfmd",
                    browserExtension: "https://taho.xyz",
                  },
                  installed: hasInjectedProvider({
                    namespace: "tally",
                    flag: "isTally",
                  }),
                  extension: {
                    instructions: {
                      learnMoreUrl:
                        "https://tahowallet.notion.site/Taho-Knowledge-Base-4d95ed5439c64d6db3d3d27abf1fdae5",
                      steps: [
                        {
                          description:
                            "wallet_connectors.taho.extension.step1.description",
                          step: "install",
                          title: "wallet_connectors.taho.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.taho.extension.step2.description",
                          step: "create",
                          title: "wallet_connectors.taho.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.taho.extension.step3.description",
                          step: "refresh",
                          title: "wallet_connectors.taho.extension.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getInjectedConnector({
                    namespace: "tally",
                    flag: "isTally",
                  }),
                }),
                () => ({
                  id: "talisman",
                  name: "Talisman",
                  rdns: "xyz.talisman",
                  iconUrl: async () =>
                    (await c.e(7422).then(c.bind(c, 67422))).default,
                  iconBackground: "#fff",
                  installed: hasInjectedProvider({
                    namespace: "talismanEth",
                    flag: "isTalisman",
                  }),
                  downloadUrls: {
                    chrome:
                      "https://chrome.google.com/webstore/detail/talisman-polkadot-wallet/fijngjgcjhjmmpcmkeiomlglpeiijkld",
                    firefox:
                      "https://addons.mozilla.org/en-US/firefox/addon/talisman-wallet-extension/",
                    browserExtension: "https://talisman.xyz/download",
                  },
                  extension: {
                    instructions: {
                      learnMoreUrl: "https://talisman.xyz/",
                      steps: [
                        {
                          description:
                            "wallet_connectors.talisman.extension.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.talisman.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.talisman.extension.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.talisman.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.talisman.extension.step3.description",
                          step: "refresh",
                          title:
                            "wallet_connectors.talisman.extension.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getInjectedConnector({
                    namespace: "talismanEth",
                    flag: "isTalisman",
                  }),
                }),
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d = hasInjectedProvider({ flag: "isTokenPocket" }),
                    m = !d,
                    getUri = (e) =>
                      isMobile()
                        ? `tpoutside://wc?uri=${encodeURIComponent(e)}`
                        : e;
                  return {
                    id: "tokenPocket",
                    name: "TokenPocket",
                    rdns: "pro.tokenpocket",
                    iconUrl: async () =>
                      (await c.e(8253).then(c.bind(c, 88253))).default,
                    iconBackground: "#2980FE",
                    installed: m ? void 0 : d,
                    downloadUrls: {
                      chrome:
                        "https://chrome.google.com/webstore/detail/tokenpocket/mfgccjchihfkkindfppnaooecgfneiii",
                      browserExtension: "https://extension.tokenpocket.pro/",
                      android:
                        "https://play.google.com/store/apps/details?id=vip.mytokenpocket",
                      ios: "https://apps.apple.com/us/app/tp-global-wallet/id6444625622",
                      qrCode: "https://tokenpocket.pro/en/download/app",
                      mobile: "https://tokenpocket.pro/en/download/app",
                    },
                    mobile: { getUri: m ? getUri : void 0 },
                    qrCode: m
                      ? {
                          getUri,
                          instructions: {
                            learnMoreUrl: "https://help.tokenpocket.pro/en/",
                            steps: [
                              {
                                description:
                                  "wallet_connectors.token_pocket.qr_code.step1.description",
                                step: "install",
                                title:
                                  "wallet_connectors.token_pocket.qr_code.step1.title",
                              },
                              {
                                description:
                                  "wallet_connectors.token_pocket.qr_code.step2.description",
                                step: "create",
                                title:
                                  "wallet_connectors.token_pocket.qr_code.step2.title",
                              },
                              {
                                description:
                                  "wallet_connectors.token_pocket.qr_code.step3.description",
                                step: "scan",
                                title:
                                  "wallet_connectors.token_pocket.qr_code.step3.title",
                              },
                            ],
                          },
                        }
                      : void 0,
                    extension: {
                      instructions: {
                        learnMoreUrl:
                          "https://help.tokenpocket.pro/en/extension-wallet/faq/installation-tutorial",
                        steps: [
                          {
                            description:
                              "wallet_connectors.token_pocket.extension.step1.description",
                            step: "install",
                            title:
                              "wallet_connectors.token_pocket.extension.step1.title",
                          },
                          {
                            description:
                              "wallet_connectors.token_pocket.extension.step2.description",
                            step: "create",
                            title:
                              "wallet_connectors.token_pocket.extension.step2.title",
                          },
                          {
                            description:
                              "wallet_connectors.token_pocket.extension.step3.description",
                            step: "refresh",
                            title:
                              "wallet_connectors.token_pocket.extension.step3.title",
                          },
                        ],
                      },
                    },
                    createConnector: m
                      ? getWalletConnectConnector({
                          projectId: e,
                          walletConnectParameters: l,
                        })
                      : getInjectedConnector({ flag: "isTokenPocket" }),
                  };
                },
                ({ projectId: e, walletConnectParameters: l }) => ({
                  id: "uniswap",
                  name: "Uniswap Wallet",
                  iconUrl: async () =>
                    (await c.e(449).then(c.bind(c, 50449))).default,
                  iconBackground: "#FFD8EA",
                  downloadUrls: {
                    ios: "https://apps.apple.com/app/apple-store/id6443944476",
                    mobile: "https://wallet.uniswap.org/",
                    qrCode: "https://wallet.uniswap.org/",
                  },
                  mobile: {
                    getUri: (e) => `uniswap://wc?uri=${encodeURIComponent(e)}`,
                  },
                  qrCode: {
                    getUri: (e) => e,
                    instructions: {
                      learnMoreUrl: "https://wallet.uniswap.org/",
                      steps: [
                        {
                          description:
                            "wallet_connectors.uniswap.qr_code.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.uniswap.qr_code.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.uniswap.qr_code.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.uniswap.qr_code.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.uniswap.qr_code.step3.description",
                          step: "scan",
                          title:
                            "wallet_connectors.uniswap.qr_code.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getWalletConnectConnector({
                    projectId: e,
                    walletConnectParameters: l,
                  }),
                }),
                () => ({
                  id: "xdefi",
                  name: "XDEFI Wallet",
                  rdns: "io.xdefi",
                  installed: hasInjectedProvider({ namespace: "xfi.ethereum" }),
                  iconUrl: async () =>
                    (await c.e(6394).then(c.bind(c, 26394))).default,
                  iconBackground: "#fff",
                  downloadUrls: {
                    chrome:
                      "https://chrome.google.com/webstore/detail/xdefi-wallet/hmeobnfnfcmdkdcmlblgagmfpfboieaf",
                    browserExtension: "https://xdefi.io",
                  },
                  extension: {
                    instructions: {
                      learnMoreUrl:
                        "https://xdefi.io/support-categories/xdefi-wallet/",
                      steps: [
                        {
                          description:
                            "wallet_connectors.xdefi.extension.step1.description",
                          step: "install",
                          title:
                            "wallet_connectors.xdefi.extension.step1.title",
                        },
                        {
                          description:
                            "wallet_connectors.xdefi.extension.step2.description",
                          step: "create",
                          title:
                            "wallet_connectors.xdefi.extension.step2.title",
                        },
                        {
                          description:
                            "wallet_connectors.xdefi.extension.step3.description",
                          step: "refresh",
                          title:
                            "wallet_connectors.xdefi.extension.step3.title",
                        },
                      ],
                    },
                  },
                  createConnector: getInjectedConnector({
                    namespace: "xfi.ethereum",
                  }),
                }),
                ({ projectId: e, walletConnectParameters: l }) => {
                  let d = hasInjectedProvider({
                      namespace: "zerionWallet",
                      flag: "isZerion",
                    }),
                    m = !d,
                    getUri = (e) =>
                      isIOS() ? `zerion://wc?uri=${encodeURIComponent(e)}` : e;
                  return {
                    id: "zerion",
                    name: "Zerion",
                    rdns: "io.zerion.wallet",
                    iconUrl: async () =>
                      (await c.e(2626).then(c.bind(c, 22626))).default,
                    iconAccent: "#2962ef",
                    iconBackground: "#2962ef",
                    installed: m ? void 0 : d,
                    downloadUrls: {
                      android:
                        "https://play.google.com/store/apps/details?id=io.zerion.android",
                      ios: "https://apps.apple.com/app/apple-store/id1456732565",
                      mobile: "https://link.zerion.io/pt3gdRP0njb",
                      qrCode: "https://link.zerion.io/pt3gdRP0njb",
                      chrome:
                        "https://chrome.google.com/webstore/detail/klghhnkeealcohjjanjjdaeeggmfmlpl",
                      browserExtension: "https://zerion.io/extension",
                    },
                    mobile: { getUri: m ? getUri : void 0 },
                    qrCode: m
                      ? {
                          getUri,
                          instructions: {
                            learnMoreUrl:
                              "https://zerion.io/blog/announcing-the-zerion-smart-wallet/",
                            steps: [
                              {
                                description:
                                  "wallet_connectors.zerion.qr_code.step1.description",
                                step: "install",
                                title:
                                  "wallet_connectors.zerion.qr_code.step1.title",
                              },
                              {
                                description:
                                  "wallet_connectors.zerion.qr_code.step2.description",
                                step: "create",
                                title:
                                  "wallet_connectors.zerion.qr_code.step2.title",
                              },
                              {
                                description:
                                  "wallet_connectors.zerion.qr_code.step3.description",
                                step: "scan",
                                title:
                                  "wallet_connectors.zerion.qr_code.step3.title",
                              },
                            ],
                          },
                        }
                      : void 0,
                    extension: {
                      instructions: {
                        learnMoreUrl: "https://help.zerion.io/en/",
                        steps: [
                          {
                            description:
                              "wallet_connectors.zerion.extension.step1.description",
                            step: "install",
                            title:
                              "wallet_connectors.zerion.extension.step1.title",
                          },
                          {
                            description:
                              "wallet_connectors.zerion.extension.step2.description",
                            step: "create",
                            title:
                              "wallet_connectors.zerion.extension.step2.title",
                          },
                          {
                            description:
                              "wallet_connectors.zerion.extension.step3.description",
                            step: "refresh",
                            title:
                              "wallet_connectors.zerion.extension.step3.title",
                          },
                        ],
                      },
                    },
                    createConnector: m
                      ? getWalletConnectConnector({
                          projectId: e,
                          walletConnectParameters: l,
                        })
                      : getInjectedConnector({
                          namespace: "zerionWallet",
                          flag: "isZerion",
                        }),
                  };
                },
              ],
            },
          ],
        });
    },
    41873: function (e, l, c) {
      "use strict";
      c.d(l, {
        x: function () {
          return toastAlert;
        },
      });
      var d = c(68563);
      let toastAlert = (e, l) => {
        switch (l) {
          case "warning":
            d.ZP.error(e, { duration: 4e3, icon: "⚠️" });
            break;
          case "error":
            d.ZP.error(e, { duration: 4e3, icon: "❌" });
            break;
          case "success":
            d.ZP.success(e, { duration: 4e3, icon: "✅" });
        }
      };
    },
    6743: function (e, l, c) {
      "use strict";
      var d = c(69405),
        m = c(87874),
        g = c(42561);
      l.Z = function (e) {
        let l = (0, g.m)(e),
          { get: c } = (0, d.useSearchParams)(),
          y = c("internal-testing-address");
        return y && (0, m.U)(y)
          ? {
              address: y,
              addresses: l.addresses,
              chain: l.chain,
              chainId: l.chainId,
              connector: l.connector,
              isConnected: l.isConnected,
              isConnecting: l.isConnecting,
              isDisconnected: l.isDisconnected,
              isReconnecting: l.isReconnecting,
              status: l.status,
            }
          : l;
      };
    },
    51157: function (e, l, c) {
      "use strict";
      var d = c(50959);
      l.Z = function (e, l, c) {
        let m = d.useRef(null),
          g =
            "fixed inset-0 z-[100] bg-[#000000a0] flex items-center justify-center animate-fadeinFast ".concat(
              l ? "block" : "hidden"
            ),
          y = [{ opacity: 1, offset: 0 }, { opacity: 0 }],
          b = { duration: 350, iterations: 1 },
          handleClose = () => {
            m.current && m.current.animate(y, b),
              setTimeout(() => {
                e();
              }, b.duration);
          };
        return (
          (0, d.useEffect)(() => {
            let handleKeyDown = (e) => {
                "Escape" === e.key && l && handleClose();
              },
              handleClick = (e) => {
                var c;
                (null === (c = m.current) || void 0 === c
                  ? void 0
                  : c.contains(e.target)) ||
                  !l ||
                  handleClose();
              };
            return (
              document.addEventListener("click", handleClick),
              document.addEventListener("keydown", handleKeyDown),
              () => {
                document.removeEventListener("keydown", handleKeyDown),
                  document.removeEventListener("click", handleClick);
              }
            );
          }, [handleClose]),
          (0, d.useEffect)(() => {
            c || (document.body.style.overflowY = l ? "hidden" : "auto");
          }, [l, c]),
          { dialogRef: m, handleClose, className: g }
        );
      };
    },
    55765: function (e, l, c) {
      "use strict";
      var d,
        m,
        g = c(45266),
        y = c(51021),
        b = c(41398),
        C = c(50959);
      ((d = m || (m = {})).balanceOf = "balanceOf"),
        (d.totalAssets = "totalAssets"),
        (d.totalSupply = "totalSupply"),
        (d.bondedBalance = "bondedBalance"),
        (d.minWithdrawalAmount = "minWithdrawalAmount"),
        (d.minDepositAmount = "minDepositAmount"),
        (d.withdrawFee = "withdrawFee"),
        (d.performanceFee = "performanceFee"),
        (d.managementFee = "managementFee"),
        (d.depositWaitingTime = "depositWaitingTime"),
        (d.withdrawWaitingTime = "withdrawWaitingTime"),
        (d.depositLimitTotalAmount = "depositLimitTotalAmount"),
        (d.depositLimitPerTransaction = "depositLimitPerTransaction"),
        (l.Z = function (e) {
          let { vaults: l, account: c } = e,
            d = l
              .map((e) => {
                let l = Object.values(m).map((l, d) =>
                  d < 3
                    ? {
                        abi: y,
                        address: e.accountingManagerAddress,
                        chainId: e.baseChain.chainId,
                        functionName: l,
                        args: "balanceOf" === l ? [c || "0x0"] : [],
                      }
                    : 3 === d
                    ? {
                        abi: b,
                        address: e.bondingManager,
                        chainId: e.baseChain.chainId,
                        functionName: "balanceOf",
                        args: [c || "0x0"],
                      }
                    : {
                        abi: y,
                        address: e.accountingManagerAddress,
                        chainId: e.baseChain.chainId,
                        functionName: l,
                        args: [],
                      }
                );
                return l;
              })
              .flat(),
            P = (0, g.N)({ contracts: d }),
            I = (0, C.useMemo)(() => {
              let e = P.data,
                c = {};
              if (!e) return c;
              for (let d = 0; d < l.length; d++) {
                let g = l[d],
                  y = Object.values(m).reduce((l, c, y) => {
                    var b;
                    let C;
                    let P = e[d * Object.values(m).length + y],
                      I =
                        null !== (b = P.result) && void 0 !== b ? b : BigInt(0);
                    switch (c) {
                      case "withdrawFee":
                      case "performanceFee":
                      case "managementFee":
                        C = Number(I) / 1e4;
                        break;
                      case "depositWaitingTime":
                      case "withdrawWaitingTime":
                        C = Number(I);
                        break;
                      default:
                        C = Number(I) / 10 ** g.baseToken.decimals;
                    }
                    return { ...l, [c]: { ...P, result: C } };
                  }, {});
                c[g.vaultId] = y;
              }
              return c;
            }, [P.data, l]);
          return { ...P, data: I, status: P.status, internal: P };
        });
    },
    66730: function (e, l, c) {
      "use strict";
      c.d(l, {
        B: function () {
          return useTokenSymbols;
        },
      });
      var d = c(50959),
        m = c(85188),
        g = c(45266);
      function getCacheKey(e, l) {
        return "".concat("token-symbol-").concat(e, ":").concat(l);
      }
      function getFromCache(e, l) {
        try {
          let c = getCacheKey(e, l),
            d = localStorage.getItem(c);
          if (!d) return null;
          let { symbol: m, timestamp: g } = JSON.parse(d);
          if (Date.now() - g > 864e5) return localStorage.removeItem(c), null;
          return m;
        } catch (e) {
          return null;
        }
      }
      function useTokenSymbols(e) {
        let [l, c] = (0, d.useState)({}),
          [y, b] = (0, d.useState)({});
        (0, d.useEffect)(() => {
          if (0 === e.length) return;
          let l = e.reduce((e, l) => {
            if (!l.address || !l.chainId) return e;
            let c = getFromCache(l.address, l.chainId);
            return c && (e[l.address] = c), e;
          }, {});
          c(l);
        }, [e]);
        let C = (0, d.useMemo)(
            () =>
              e.filter(
                (e) =>
                  e.address && e.chainId && !getFromCache(e.address, e.chainId)
              ),
            [e]
          ),
          P = (0, d.useMemo)(
            () =>
              C.map((e) => ({
                address: e.address,
                abi: m.Wo,
                functionName: "symbol",
                chainId: e.chainId,
              })),
            [C]
          ),
          { data: I, isLoading: B, isError: N } = (0, g.N)({ contracts: P });
        return (
          (0, d.useEffect)(() => {
            I &&
              c((e) => {
                let l = { ...e },
                  c = {};
                return (
                  C.forEach((e, d) => {
                    if (!e.address || !e.chainId) return;
                    let m = I[d];
                    "success" === m.status
                      ? ((l[e.address] = m.result),
                        (function (e, l, c) {
                          try {
                            let d = getCacheKey(e, l),
                              m = { symbol: c, timestamp: Date.now() };
                            localStorage.setItem(d, JSON.stringify(m));
                          } catch (e) {}
                        })(e.address, e.chainId, m.result))
                      : ((l[e.address] = "UNKNOWN"), (c[e.address] = !0));
                  }),
                  b(c),
                  l
                );
              });
          }, [I, C]),
          {
            symbolsMap: l,
            isLoading: B && !N,
            errors: y,
            hasErrors: Object.keys(y).length > 0,
          }
        );
      }
    },
    93622: function (e, l, c) {
      "use strict";
      c.d(l, {
        B: function () {
          return useUSD;
        },
      });
      var d = c(43829),
        m = c(50959);
      let useUSD = () => {
        let { data: e } = (0, d.Zf)(void 0, { pollingInterval: 3e5 }),
          l = (0, m.useMemo)(
            () => (l, c) => {
              var d, m, g;
              let y = l;
              switch (c) {
                case "ETH":
                  y =
                    l *
                    (null !== (d = null == e ? void 0 : e.ethPrice) &&
                    void 0 !== d
                      ? d
                      : 0);
                  break;
                case "USDC":
                  y =
                    l *
                    (null !== (m = null == e ? void 0 : e.usdcPrice) &&
                    void 0 !== m
                      ? m
                      : 0);
                  break;
                case "BTC":
                  y =
                    l *
                    (null !== (g = null == e ? void 0 : e.btcPrice) &&
                    void 0 !== g
                      ? g
                      : 0);
                  break;
                default:
                  y = l;
              }
              return y;
            },
            [e]
          );
        return { convertToUSD: l, valuation: e };
      };
    },
    64460: function (e, l, c) {
      "use strict";
      c.d(l, {
        cn: function () {
          return cn;
        },
        h: function () {
          return getVerifiedTvl;
        },
      });
      var d = c(4814),
        m = c(5761);
      function cn() {
        for (var e = arguments.length, l = Array(e), c = 0; c < e; c++)
          l[c] = arguments[c];
        return (0, m.m6)((0, d.W)(l));
      }
      function getVerifiedTvl(e, l, c) {
        var d, m;
        return e
          ? (null !==
              (m =
                null == e
                  ? void 0
                  : null === (d = e[l]) || void 0 === d
                  ? void 0
                  : d.tvl) && void 0 !== m
              ? m
              : 0) /
              10 ** c
          : 0;
      }
    },
    10097: function (e, l, c) {
      "use strict";
      let d, m;
      c.r(l),
        c.d(l, {
          default: function () {
            return App;
          },
        });
      var g,
        y,
        b,
        C,
        P,
        I,
        B = c(11527),
        N = c(32515),
        F = c.n(N),
        V = c(26870);
      /*!
       * @kurkle/color v0.3.4
       * https://github.com/kurkle/color#readme
       * (c) 2024 Jukka Kurkela
       * Released under the MIT License
       */ function round(e) {
        return (e + 0.5) | 0;
      }
      let lim = (e, l, c) => Math.max(Math.min(e, c), l);
      function p2b(e) {
        return lim(round(2.55 * e), 0, 255);
      }
      function n2b(e) {
        return lim(round(255 * e), 0, 255);
      }
      function b2n(e) {
        return lim(round(e / 2.55) / 100, 0, 1);
      }
      function n2p(e) {
        return lim(round(100 * e), 0, 100);
      }
      let G = {
          0: 0,
          1: 1,
          2: 2,
          3: 3,
          4: 4,
          5: 5,
          6: 6,
          7: 7,
          8: 8,
          9: 9,
          A: 10,
          B: 11,
          C: 12,
          D: 13,
          E: 14,
          F: 15,
          a: 10,
          b: 11,
          c: 12,
          d: 13,
          e: 14,
          f: 15,
        },
        Q = [..."0123456789ABCDEF"],
        h1 = (e) => Q[15 & e],
        h2 = (e) => Q[(240 & e) >> 4] + Q[15 & e],
        eq = (e) => (240 & e) >> 4 == (15 & e),
        isShort = (e) => eq(e.r) && eq(e.g) && eq(e.b) && eq(e.a),
        alpha = (e, l) => (e < 255 ? l(e) : ""),
        $ =
          /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
      function hsl2rgbn(e, l, c) {
        let d = l * Math.min(c, 1 - c),
          f = (l, m = (l + e / 30) % 12) =>
            c - d * Math.max(Math.min(m - 3, 9 - m, 1), -1);
        return [f(0), f(8), f(4)];
      }
      function hsv2rgbn(e, l, c) {
        let f = (d, m = (d + e / 60) % 6) =>
          c - c * l * Math.max(Math.min(m, 4 - m, 1), 0);
        return [f(5), f(3), f(1)];
      }
      function hwb2rgbn(e, l, c) {
        let d;
        let m = hsl2rgbn(e, 1, 0.5);
        for (
          l + c > 1 && ((d = 1 / (l + c)), (l *= d), (c *= d)), d = 0;
          d < 3;
          d++
        )
          (m[d] *= 1 - l - c), (m[d] += l);
        return m;
      }
      function rgb2hsl(e) {
        let l, c, d;
        let m = e.r / 255,
          g = e.g / 255,
          y = e.b / 255,
          b = Math.max(m, g, y),
          C = Math.min(m, g, y),
          P = (b + C) / 2;
        return (
          b !== C &&
            ((d = b - C),
            (c = P > 0.5 ? d / (2 - b - C) : d / (b + C)),
            (l =
              60 *
                (l =
                  m === b
                    ? (g - y) / d + (g < y ? 6 : 0)
                    : g === b
                    ? (y - m) / d + 2
                    : (m - g) / d + 4) +
              0.5)),
          [0 | l, c || 0, P]
        );
      }
      function calln(e, l, c, d) {
        return (Array.isArray(l) ? e(l[0], l[1], l[2]) : e(l, c, d)).map(n2b);
      }
      function hue(e) {
        return ((e % 360) + 360) % 360;
      }
      let Z = {
          x: "dark",
          Z: "light",
          Y: "re",
          X: "blu",
          W: "gr",
          V: "medium",
          U: "slate",
          A: "ee",
          T: "ol",
          S: "or",
          B: "ra",
          C: "lateg",
          D: "ights",
          R: "in",
          Q: "turquois",
          E: "hi",
          P: "ro",
          O: "al",
          N: "le",
          M: "de",
          L: "yello",
          F: "en",
          K: "ch",
          G: "arks",
          H: "ea",
          I: "ightg",
          J: "wh",
        },
        Y = {
          OiceXe: "f0f8ff",
          antiquewEte: "faebd7",
          aqua: "ffff",
          aquamarRe: "7fffd4",
          azuY: "f0ffff",
          beige: "f5f5dc",
          bisque: "ffe4c4",
          black: "0",
          blanKedOmond: "ffebcd",
          Xe: "ff",
          XeviTet: "8a2be2",
          bPwn: "a52a2a",
          burlywood: "deb887",
          caMtXe: "5f9ea0",
          KartYuse: "7fff00",
          KocTate: "d2691e",
          cSO: "ff7f50",
          cSnflowerXe: "6495ed",
          cSnsilk: "fff8dc",
          crimson: "dc143c",
          cyan: "ffff",
          xXe: "8b",
          xcyan: "8b8b",
          xgTMnPd: "b8860b",
          xWay: "a9a9a9",
          xgYF: "6400",
          xgYy: "a9a9a9",
          xkhaki: "bdb76b",
          xmagFta: "8b008b",
          xTivegYF: "556b2f",
          xSange: "ff8c00",
          xScEd: "9932cc",
          xYd: "8b0000",
          xsOmon: "e9967a",
          xsHgYF: "8fbc8f",
          xUXe: "483d8b",
          xUWay: "2f4f4f",
          xUgYy: "2f4f4f",
          xQe: "ced1",
          xviTet: "9400d3",
          dAppRk: "ff1493",
          dApskyXe: "bfff",
          dimWay: "696969",
          dimgYy: "696969",
          dodgerXe: "1e90ff",
          fiYbrick: "b22222",
          flSOwEte: "fffaf0",
          foYstWAn: "228b22",
          fuKsia: "ff00ff",
          gaRsbSo: "dcdcdc",
          ghostwEte: "f8f8ff",
          gTd: "ffd700",
          gTMnPd: "daa520",
          Way: "808080",
          gYF: "8000",
          gYFLw: "adff2f",
          gYy: "808080",
          honeyMw: "f0fff0",
          hotpRk: "ff69b4",
          RdianYd: "cd5c5c",
          Rdigo: "4b0082",
          ivSy: "fffff0",
          khaki: "f0e68c",
          lavFMr: "e6e6fa",
          lavFMrXsh: "fff0f5",
          lawngYF: "7cfc00",
          NmoncEffon: "fffacd",
          ZXe: "add8e6",
          ZcSO: "f08080",
          Zcyan: "e0ffff",
          ZgTMnPdLw: "fafad2",
          ZWay: "d3d3d3",
          ZgYF: "90ee90",
          ZgYy: "d3d3d3",
          ZpRk: "ffb6c1",
          ZsOmon: "ffa07a",
          ZsHgYF: "20b2aa",
          ZskyXe: "87cefa",
          ZUWay: "778899",
          ZUgYy: "778899",
          ZstAlXe: "b0c4de",
          ZLw: "ffffe0",
          lime: "ff00",
          limegYF: "32cd32",
          lRF: "faf0e6",
          magFta: "ff00ff",
          maPon: "800000",
          VaquamarRe: "66cdaa",
          VXe: "cd",
          VScEd: "ba55d3",
          VpurpN: "9370db",
          VsHgYF: "3cb371",
          VUXe: "7b68ee",
          VsprRggYF: "fa9a",
          VQe: "48d1cc",
          VviTetYd: "c71585",
          midnightXe: "191970",
          mRtcYam: "f5fffa",
          mistyPse: "ffe4e1",
          moccasR: "ffe4b5",
          navajowEte: "ffdead",
          navy: "80",
          Tdlace: "fdf5e6",
          Tive: "808000",
          TivedBb: "6b8e23",
          Sange: "ffa500",
          SangeYd: "ff4500",
          ScEd: "da70d6",
          pOegTMnPd: "eee8aa",
          pOegYF: "98fb98",
          pOeQe: "afeeee",
          pOeviTetYd: "db7093",
          papayawEp: "ffefd5",
          pHKpuff: "ffdab9",
          peru: "cd853f",
          pRk: "ffc0cb",
          plum: "dda0dd",
          powMrXe: "b0e0e6",
          purpN: "800080",
          YbeccapurpN: "663399",
          Yd: "ff0000",
          Psybrown: "bc8f8f",
          PyOXe: "4169e1",
          saddNbPwn: "8b4513",
          sOmon: "fa8072",
          sandybPwn: "f4a460",
          sHgYF: "2e8b57",
          sHshell: "fff5ee",
          siFna: "a0522d",
          silver: "c0c0c0",
          skyXe: "87ceeb",
          UXe: "6a5acd",
          UWay: "708090",
          UgYy: "708090",
          snow: "fffafa",
          sprRggYF: "ff7f",
          stAlXe: "4682b4",
          tan: "d2b48c",
          teO: "8080",
          tEstN: "d8bfd8",
          tomato: "ff6347",
          Qe: "40e0d0",
          viTet: "ee82ee",
          JHt: "f5deb3",
          wEte: "ffffff",
          wEtesmoke: "f5f5f5",
          Lw: "ffff00",
          LwgYF: "9acd32",
        },
        et =
          /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,
        to = (e) =>
          e <= 0.0031308 ? 12.92 * e : 1.055 * Math.pow(e, 1 / 2.4) - 0.055,
        from = (e) =>
          e <= 0.04045 ? e / 12.92 : Math.pow((e + 0.055) / 1.055, 2.4);
      function modHSL(e, l, c) {
        if (e) {
          let d = rgb2hsl(e);
          (d[l] = Math.max(0, Math.min(d[l] + d[l] * c, 0 === l ? 360 : 1))),
            (d = calln(hsl2rgbn, d, void 0, void 0)),
            (e.r = d[0]),
            (e.g = d[1]),
            (e.b = d[2]);
        }
      }
      function clone(e, l) {
        return e ? Object.assign(l || {}, e) : e;
      }
      function fromObject(e) {
        var l = { r: 0, g: 0, b: 0, a: 255 };
        return (
          Array.isArray(e)
            ? e.length >= 3 &&
              ((l = { r: e[0], g: e[1], b: e[2], a: 255 }),
              e.length > 3 && (l.a = n2b(e[3])))
            : ((l = clone(e, { r: 0, g: 0, b: 0, a: 1 })).a = n2b(l.a)),
          l
        );
      }
      let Color = class Color {
        constructor(e) {
          let l;
          if (e instanceof Color) return e;
          let c = typeof e;
          if ("object" === c) l = fromObject(e);
          else if ("string" === c) {
            var m, g;
            (g = e.length),
              "#" === e[0] &&
                (4 === g || 5 === g
                  ? (m = {
                      r: 255 & (17 * G[e[1]]),
                      g: 255 & (17 * G[e[2]]),
                      b: 255 & (17 * G[e[3]]),
                      a: 5 === g ? 17 * G[e[4]] : 255,
                    })
                  : (7 === g || 9 === g) &&
                    (m = {
                      r: (G[e[1]] << 4) | G[e[2]],
                      g: (G[e[3]] << 4) | G[e[4]],
                      b: (G[e[5]] << 4) | G[e[6]],
                      a: 9 === g ? (G[e[7]] << 4) | G[e[8]] : 255,
                    })),
              (l =
                m ||
                (function (e) {
                  d ||
                    ((d = (function () {
                      let e, l, c, d, m;
                      let g = {},
                        y = Object.keys(Y),
                        b = Object.keys(Z);
                      for (e = 0; e < y.length; e++) {
                        for (l = 0, d = m = y[e]; l < b.length; l++)
                          (c = b[l]), (m = m.replace(c, Z[c]));
                        (c = parseInt(Y[d], 16)),
                          (g[m] = [(c >> 16) & 255, (c >> 8) & 255, 255 & c]);
                      }
                      return g;
                    })()).transparent = [0, 0, 0, 0]);
                  let l = d[e.toLowerCase()];
                  return (
                    l && {
                      r: l[0],
                      g: l[1],
                      b: l[2],
                      a: 4 === l.length ? l[3] : 255,
                    }
                  );
                })(e) ||
                ("r" === e.charAt(0)
                  ? (function (e) {
                      let l, c, d;
                      let m = et.exec(e),
                        g = 255;
                      if (m) {
                        if (m[7] !== l) {
                          let e = +m[7];
                          g = m[8] ? p2b(e) : lim(255 * e, 0, 255);
                        }
                        return (
                          (l = +m[1]),
                          (c = +m[3]),
                          (d = +m[5]),
                          {
                            r: (l = 255 & (m[2] ? p2b(l) : lim(l, 0, 255))),
                            g: (c = 255 & (m[4] ? p2b(c) : lim(c, 0, 255))),
                            b: (d = 255 & (m[6] ? p2b(d) : lim(d, 0, 255))),
                            a: g,
                          }
                        );
                      }
                    })(e)
                  : (function (e) {
                      let l;
                      let c = $.exec(e),
                        d = 255;
                      if (!c) return;
                      c[5] !== l && (d = c[6] ? p2b(+c[5]) : n2b(+c[5]));
                      let m = hue(+c[2]),
                        g = +c[3] / 100,
                        y = +c[4] / 100;
                      return {
                        r: (l =
                          "hwb" === c[1]
                            ? calln(hwb2rgbn, m, g, y)
                            : "hsv" === c[1]
                            ? calln(hsv2rgbn, m, g, y)
                            : calln(hsl2rgbn, m, g, y))[0],
                        g: l[1],
                        b: l[2],
                        a: d,
                      };
                    })(e)));
          }
          (this._rgb = l), (this._valid = !!l);
        }
        get valid() {
          return this._valid;
        }
        get rgb() {
          var e = clone(this._rgb);
          return e && (e.a = b2n(e.a)), e;
        }
        set rgb(e) {
          this._rgb = fromObject(e);
        }
        rgbString() {
          var e;
          return this._valid
            ? (e = this._rgb) &&
                (e.a < 255
                  ? `rgba(${e.r}, ${e.g}, ${e.b}, ${b2n(e.a)})`
                  : `rgb(${e.r}, ${e.g}, ${e.b})`)
            : void 0;
        }
        hexString() {
          var e, l;
          return this._valid
            ? ((l = isShort((e = this._rgb)) ? h1 : h2),
              e ? "#" + l(e.r) + l(e.g) + l(e.b) + alpha(e.a, l) : void 0)
            : void 0;
        }
        hslString() {
          return this._valid
            ? (function (e) {
                if (!e) return;
                let l = rgb2hsl(e),
                  c = l[0],
                  d = n2p(l[1]),
                  m = n2p(l[2]);
                return e.a < 255
                  ? `hsla(${c}, ${d}%, ${m}%, ${b2n(e.a)})`
                  : `hsl(${c}, ${d}%, ${m}%)`;
              })(this._rgb)
            : void 0;
        }
        mix(e, l) {
          if (e) {
            let c;
            let d = this.rgb,
              m = e.rgb,
              g = l === c ? 0.5 : l,
              y = 2 * g - 1,
              b = d.a - m.a,
              C = ((y * b == -1 ? y : (y + b) / (1 + y * b)) + 1) / 2;
            (c = 1 - C),
              (d.r = 255 & (C * d.r + c * m.r + 0.5)),
              (d.g = 255 & (C * d.g + c * m.g + 0.5)),
              (d.b = 255 & (C * d.b + c * m.b + 0.5)),
              (d.a = g * d.a + (1 - g) * m.a),
              (this.rgb = d);
          }
          return this;
        }
        interpolate(e, l) {
          return (
            e &&
              (this._rgb = (function (e, l, c) {
                let d = from(b2n(e.r)),
                  m = from(b2n(e.g)),
                  g = from(b2n(e.b));
                return {
                  r: n2b(to(d + c * (from(b2n(l.r)) - d))),
                  g: n2b(to(m + c * (from(b2n(l.g)) - m))),
                  b: n2b(to(g + c * (from(b2n(l.b)) - g))),
                  a: e.a + c * (l.a - e.a),
                };
              })(this._rgb, e._rgb, l)),
            this
          );
        }
        clone() {
          return new Color(this.rgb);
        }
        alpha(e) {
          return (this._rgb.a = n2b(e)), this;
        }
        clearer(e) {
          let l = this._rgb;
          return (l.a *= 1 - e), this;
        }
        greyscale() {
          let e = this._rgb,
            l = round(0.3 * e.r + 0.59 * e.g + 0.11 * e.b);
          return (e.r = e.g = e.b = l), this;
        }
        opaquer(e) {
          let l = this._rgb;
          return (l.a *= 1 + e), this;
        }
        negate() {
          let e = this._rgb;
          return (e.r = 255 - e.r), (e.g = 255 - e.g), (e.b = 255 - e.b), this;
        }
        lighten(e) {
          return modHSL(this._rgb, 2, e), this;
        }
        darken(e) {
          return modHSL(this._rgb, 2, -e), this;
        }
        saturate(e) {
          return modHSL(this._rgb, 1, e), this;
        }
        desaturate(e) {
          return modHSL(this._rgb, 1, -e), this;
        }
        rotate(e) {
          var l, c;
          return (
            ((c = rgb2hsl((l = this._rgb)))[0] = hue(c[0] + e)),
            (c = calln(hsl2rgbn, c, void 0, void 0)),
            (l.r = c[0]),
            (l.g = c[1]),
            (l.b = c[2]),
            this
          );
        }
      };
      /*!
       * Chart.js v4.4.9
       * https://www.chartjs.org
       * (c) 2025 Chart.js Contributors
       * Released under the MIT License
       */ function noop() {}
      let en = ((m = 0), () => m++);
      function isNullOrUndef(e) {
        return null == e;
      }
      function isArray(e) {
        if (Array.isArray && Array.isArray(e)) return !0;
        let l = Object.prototype.toString.call(e);
        return "[object" === l.slice(0, 7) && "Array]" === l.slice(-6);
      }
      function isObject(e) {
        return (
          null !== e && "[object Object]" === Object.prototype.toString.call(e)
        );
      }
      function isNumberFinite(e) {
        return ("number" == typeof e || e instanceof Number) && isFinite(+e);
      }
      function finiteOrDefault(e, l) {
        return isNumberFinite(e) ? e : l;
      }
      function valueOrDefault(e, l) {
        return void 0 === e ? l : e;
      }
      let toPercentage = (e, l) =>
          "string" == typeof e && e.endsWith("%")
            ? parseFloat(e) / 100
            : +e / l,
        toDimension = (e, l) =>
          "string" == typeof e && e.endsWith("%")
            ? (parseFloat(e) / 100) * l
            : +e;
      function callback(e, l, c) {
        if (e && "function" == typeof e.call) return e.apply(c, l);
      }
      function each(e, l, c, d) {
        let m, g, y;
        if (isArray(e)) {
          if (((g = e.length), d))
            for (m = g - 1; m >= 0; m--) l.call(c, e[m], m);
          else for (m = 0; m < g; m++) l.call(c, e[m], m);
        } else if (isObject(e))
          for (m = 0, g = (y = Object.keys(e)).length; m < g; m++)
            l.call(c, e[y[m]], y[m]);
      }
      function _elementsEqual(e, l) {
        let c, d, m, g;
        if (!e || !l || e.length !== l.length) return !1;
        for (c = 0, d = e.length; c < d; ++c)
          if (
            ((m = e[c]),
            (g = l[c]),
            m.datasetIndex !== g.datasetIndex || m.index !== g.index)
          )
            return !1;
        return !0;
      }
      function helpers_dataset_clone(e) {
        if (isArray(e)) return e.map(helpers_dataset_clone);
        if (isObject(e)) {
          let l = Object.create(null),
            c = Object.keys(e),
            d = c.length,
            m = 0;
          for (; m < d; ++m) l[c[m]] = helpers_dataset_clone(e[c[m]]);
          return l;
        }
        return e;
      }
      function isValidKey(e) {
        return -1 === ["__proto__", "prototype", "constructor"].indexOf(e);
      }
      function _merger(e, l, c, d) {
        if (!isValidKey(e)) return;
        let m = l[e],
          g = c[e];
        isObject(m) && isObject(g)
          ? merge(m, g, d)
          : (l[e] = helpers_dataset_clone(g));
      }
      function merge(e, l, c) {
        let d;
        let m = isArray(l) ? l : [l],
          g = m.length;
        if (!isObject(e)) return e;
        c = c || {};
        let y = c.merger || _merger;
        for (let l = 0; l < g; ++l) {
          if (!isObject((d = m[l]))) continue;
          let g = Object.keys(d);
          for (let l = 0, m = g.length; l < m; ++l) y(g[l], e, d, c);
        }
        return e;
      }
      function mergeIf(e, l) {
        return merge(e, l, { merger: _mergerIf });
      }
      function _mergerIf(e, l, c) {
        if (!isValidKey(e)) return;
        let d = l[e],
          m = c[e];
        isObject(d) && isObject(m)
          ? mergeIf(d, m)
          : Object.prototype.hasOwnProperty.call(l, e) ||
            (l[e] = helpers_dataset_clone(m));
      }
      let er = { "": (e) => e, x: (e) => e.x, y: (e) => e.y };
      function resolveObjectKey(e, l) {
        let c =
          er[l] ||
          (er[l] = (function (e) {
            let l = (function (e) {
              let l = e.split("."),
                c = [],
                d = "";
              for (let e of l)
                (d += e).endsWith("\\")
                  ? (d = d.slice(0, -1) + ".")
                  : (c.push(d), (d = ""));
              return c;
            })(e);
            return (e) => {
              for (let c of l) {
                if ("" === c) break;
                e = e && e[c];
              }
              return e;
            };
          })(l));
        return c(e);
      }
      function _capitalize(e) {
        return e.charAt(0).toUpperCase() + e.slice(1);
      }
      let defined = (e) => void 0 !== e,
        isFunction = (e) => "function" == typeof e,
        setsEqual = (e, l) => {
          if (e.size !== l.size) return !1;
          for (let c of e) if (!l.has(c)) return !1;
          return !0;
        },
        ei = Math.PI,
        eo = 2 * ei,
        ea = eo + ei,
        es = Number.POSITIVE_INFINITY,
        el = ei / 180,
        ec = ei / 2,
        eu = ei / 4,
        ed = (2 * ei) / 3,
        ep = Math.log10,
        eh = Math.sign;
      function almostEquals(e, l, c) {
        return Math.abs(e - l) < c;
      }
      function niceNum(e) {
        let l = Math.round(e);
        e = almostEquals(e, l, e / 1e3) ? l : e;
        let c = Math.pow(10, Math.floor(ep(e))),
          d = e / c;
        return (d <= 1 ? 1 : d <= 2 ? 2 : d <= 5 ? 5 : 10) * c;
      }
      function isNumber(e) {
        return (
          !(
            "symbol" == typeof e ||
            ("object" == typeof e &&
              null !== e &&
              !(Symbol.toPrimitive in e || "toString" in e || "valueOf" in e))
          ) &&
          !isNaN(parseFloat(e)) &&
          isFinite(e)
        );
      }
      function _setMinAndMaxByKey(e, l, c) {
        let d, m, g;
        for (d = 0, m = e.length; d < m; d++)
          isNaN((g = e[d][c])) ||
            ((l.min = Math.min(l.min, g)), (l.max = Math.max(l.max, g)));
      }
      function toRadians(e) {
        return e * (ei / 180);
      }
      function _decimalPlaces(e) {
        if (!isNumberFinite(e)) return;
        let l = 1,
          c = 0;
        for (; Math.round(e * l) / l !== e; ) (l *= 10), c++;
        return c;
      }
      function getAngleFromPoint(e, l) {
        let c = l.x - e.x,
          d = l.y - e.y,
          m = Math.atan2(d, c);
        return (
          m < -0.5 * ei && (m += eo),
          { angle: m, distance: Math.sqrt(c * c + d * d) }
        );
      }
      function distanceBetweenPoints(e, l) {
        return Math.sqrt(Math.pow(l.x - e.x, 2) + Math.pow(l.y - e.y, 2));
      }
      function _angleDiff(e, l) {
        return ((e - l + ea) % eo) - ei;
      }
      function _normalizeAngle(e) {
        return ((e % eo) + eo) % eo;
      }
      function _angleBetween(e, l, c, d) {
        let m = _normalizeAngle(e),
          g = _normalizeAngle(l),
          y = _normalizeAngle(c),
          b = _normalizeAngle(g - m),
          C = _normalizeAngle(y - m),
          P = _normalizeAngle(m - g),
          I = _normalizeAngle(m - y);
        return m === g || m === y || (d && g === y) || (b > C && P < I);
      }
      function _limitValue(e, l, c) {
        return Math.max(l, Math.min(c, e));
      }
      function _isBetween(e, l, c, d = 1e-6) {
        return e >= Math.min(l, c) - d && e <= Math.max(l, c) + d;
      }
      function _lookup(e, l, c) {
        let d;
        c = c || ((c) => e[c] < l);
        let m = e.length - 1,
          g = 0;
        for (; m - g > 1; ) c((d = (g + m) >> 1)) ? (g = d) : (m = d);
        return { lo: g, hi: m };
      }
      let _lookupByKey = (e, l, c, d) =>
          _lookup(
            e,
            c,
            d
              ? (d) => {
                  let m = e[d][l];
                  return m < c || (m === c && e[d + 1][l] === c);
                }
              : (d) => e[d][l] < c
          ),
        _rlookupByKey = (e, l, c) => _lookup(e, c, (d) => e[d][l] >= c),
        ef = ["push", "pop", "shift", "splice", "unshift"];
      function unlistenArrayEvents(e, l) {
        let c = e._chartjs;
        if (!c) return;
        let d = c.listeners,
          m = d.indexOf(l);
        -1 !== m && d.splice(m, 1),
          d.length > 0 ||
            (ef.forEach((l) => {
              delete e[l];
            }),
            delete e._chartjs);
      }
      function _arrayUnique(e) {
        let l = new Set(e);
        return l.size === e.length ? e : Array.from(l);
      }
      let em =
        "undefined" == typeof window
          ? function (e) {
              return e();
            }
          : window.requestAnimationFrame;
      function throttled(e, l) {
        let c = [],
          d = !1;
        return function (...m) {
          (c = m),
            d ||
              ((d = !0),
              em.call(window, () => {
                (d = !1), e.apply(l, c);
              }));
        };
      }
      let _toLeftRightCenter = (e) =>
          "start" === e ? "left" : "end" === e ? "right" : "center",
        _alignStartEnd = (e, l, c) =>
          "start" === e ? l : "end" === e ? c : (l + c) / 2,
        _textX = (e, l, c, d) =>
          e === (d ? "left" : "right") ? c : "center" === e ? (l + c) / 2 : l;
      function _getStartAndCountOfVisiblePoints(e, l, c) {
        let d = l.length,
          m = 0,
          g = d;
        if (e._sorted) {
          let { iScale: y, vScale: b, _parsed: C } = e,
            P =
              e.dataset && e.dataset.options
                ? e.dataset.options.spanGaps
                : null,
            I = y.axis,
            {
              min: B,
              max: N,
              minDefined: F,
              maxDefined: V,
            } = y.getUserBounds();
          if (F) {
            if (
              ((m = Math.min(
                _lookupByKey(C, I, B).lo,
                c ? d : _lookupByKey(l, I, y.getPixelForValue(B)).lo
              )),
              P)
            ) {
              let e = C.slice(0, m + 1)
                .reverse()
                .findIndex((e) => !isNullOrUndef(e[b.axis]));
              m -= Math.max(0, e);
            }
            m = _limitValue(m, 0, d - 1);
          }
          if (V) {
            let e = Math.max(
              _lookupByKey(C, y.axis, N, !0).hi + 1,
              c ? 0 : _lookupByKey(l, I, y.getPixelForValue(N), !0).hi + 1
            );
            if (P) {
              let l = C.slice(e - 1).findIndex(
                (e) => !isNullOrUndef(e[b.axis])
              );
              e += Math.max(0, l);
            }
            g = _limitValue(e, m, d) - m;
          } else g = d - m;
        }
        return { start: m, count: g };
      }
      function _scaleRangesChanged(e) {
        let { xScale: l, yScale: c, _scaleRanges: d } = e,
          m = { xmin: l.min, xmax: l.max, ymin: c.min, ymax: c.max };
        if (!d) return (e._scaleRanges = m), !0;
        let g =
          d.xmin !== l.min ||
          d.xmax !== l.max ||
          d.ymin !== c.min ||
          d.ymax !== c.max;
        return Object.assign(d, m), g;
      }
      let atEdge = (e) => 0 === e || 1 === e,
        elasticIn = (e, l, c) =>
          -(Math.pow(2, 10 * (e -= 1)) * Math.sin(((e - l) * eo) / c)),
        elasticOut = (e, l, c) =>
          Math.pow(2, -10 * e) * Math.sin(((e - l) * eo) / c) + 1,
        eg = {
          linear: (e) => e,
          easeInQuad: (e) => e * e,
          easeOutQuad: (e) => -e * (e - 2),
          easeInOutQuad: (e) =>
            (e /= 0.5) < 1 ? 0.5 * e * e : -0.5 * (--e * (e - 2) - 1),
          easeInCubic: (e) => e * e * e,
          easeOutCubic: (e) => (e -= 1) * e * e + 1,
          easeInOutCubic: (e) =>
            (e /= 0.5) < 1 ? 0.5 * e * e * e : 0.5 * ((e -= 2) * e * e + 2),
          easeInQuart: (e) => e * e * e * e,
          easeOutQuart: (e) => -((e -= 1) * e * e * e - 1),
          easeInOutQuart: (e) =>
            (e /= 0.5) < 1
              ? 0.5 * e * e * e * e
              : -0.5 * ((e -= 2) * e * e * e - 2),
          easeInQuint: (e) => e * e * e * e * e,
          easeOutQuint: (e) => (e -= 1) * e * e * e * e + 1,
          easeInOutQuint: (e) =>
            (e /= 0.5) < 1
              ? 0.5 * e * e * e * e * e
              : 0.5 * ((e -= 2) * e * e * e * e + 2),
          easeInSine: (e) => -Math.cos(e * ec) + 1,
          easeOutSine: (e) => Math.sin(e * ec),
          easeInOutSine: (e) => -0.5 * (Math.cos(ei * e) - 1),
          easeInExpo: (e) => (0 === e ? 0 : Math.pow(2, 10 * (e - 1))),
          easeOutExpo: (e) => (1 === e ? 1 : -Math.pow(2, -10 * e) + 1),
          easeInOutExpo: (e) =>
            atEdge(e)
              ? e
              : e < 0.5
              ? 0.5 * Math.pow(2, 10 * (2 * e - 1))
              : 0.5 * (-Math.pow(2, -10 * (2 * e - 1)) + 2),
          easeInCirc: (e) => (e >= 1 ? e : -(Math.sqrt(1 - e * e) - 1)),
          easeOutCirc: (e) => Math.sqrt(1 - (e -= 1) * e),
          easeInOutCirc: (e) =>
            (e /= 0.5) < 1
              ? -0.5 * (Math.sqrt(1 - e * e) - 1)
              : 0.5 * (Math.sqrt(1 - (e -= 2) * e) + 1),
          easeInElastic: (e) => (atEdge(e) ? e : elasticIn(e, 0.075, 0.3)),
          easeOutElastic: (e) => (atEdge(e) ? e : elasticOut(e, 0.075, 0.3)),
          easeInOutElastic: (e) =>
            atEdge(e)
              ? e
              : e < 0.5
              ? 0.5 * elasticIn(2 * e, 0.1125, 0.45)
              : 0.5 + 0.5 * elasticOut(2 * e - 1, 0.1125, 0.45),
          easeInBack: (e) => e * e * (2.70158 * e - 1.70158),
          easeOutBack: (e) => (e -= 1) * e * (2.70158 * e + 1.70158) + 1,
          easeInOutBack(e) {
            let l = 1.70158;
            return (e /= 0.5) < 1
              ? 0.5 * (e * e * (((l *= 1.525) + 1) * e - l))
              : 0.5 * ((e -= 2) * e * (((l *= 1.525) + 1) * e + l) + 2);
          },
          easeInBounce: (e) => 1 - eg.easeOutBounce(1 - e),
          easeOutBounce: (e) =>
            e < 0.36363636363636365
              ? 7.5625 * e * e
              : e < 0.7272727272727273
              ? 7.5625 * (e -= 0.5454545454545454) * e + 0.75
              : e < 0.9090909090909091
              ? 7.5625 * (e -= 0.8181818181818182) * e + 0.9375
              : 7.5625 * (e -= 0.9545454545454546) * e + 0.984375,
          easeInOutBounce: (e) =>
            e < 0.5
              ? 0.5 * eg.easeInBounce(2 * e)
              : 0.5 * eg.easeOutBounce(2 * e - 1) + 0.5,
        };
      function isPatternOrGradient(e) {
        if (e && "object" == typeof e) {
          let l = e.toString();
          return (
            "[object CanvasPattern]" === l || "[object CanvasGradient]" === l
          );
        }
        return !1;
      }
      function color(e) {
        return isPatternOrGradient(e) ? e : new Color(e);
      }
      function getHoverColor(e) {
        return isPatternOrGradient(e)
          ? e
          : new Color(e).saturate(0.5).darken(0.1).hexString();
      }
      let ey = ["x", "y", "borderWidth", "radius", "tension"],
        eb = ["color", "borderColor", "backgroundColor"],
        ev = new Map();
      function formatNumber(e, l, c) {
        return (function (e, l) {
          l = l || {};
          let c = e + JSON.stringify(l),
            d = ev.get(c);
          return d || ((d = new Intl.NumberFormat(e, l)), ev.set(c, d)), d;
        })(l, c).format(e);
      }
      let ew = {
        values: (e) => (isArray(e) ? e : "" + e),
        numeric(e, l, c) {
          let d;
          if (0 === e) return "0";
          let m = this.chart.options.locale,
            g = e;
          if (c.length > 1) {
            let l;
            let m = Math.max(
              Math.abs(c[0].value),
              Math.abs(c[c.length - 1].value)
            );
            (m < 1e-4 || m > 1e15) && (d = "scientific"),
              Math.abs(
                (l =
                  c.length > 3
                    ? c[2].value - c[1].value
                    : c[1].value - c[0].value)
              ) >= 1 &&
                e !== Math.floor(e) &&
                (l = e - Math.floor(e)),
              (g = l);
          }
          let y = ep(Math.abs(g)),
            b = isNaN(y) ? 1 : Math.max(Math.min(-1 * Math.floor(y), 20), 0),
            C = {
              notation: d,
              minimumFractionDigits: b,
              maximumFractionDigits: b,
            };
          return (
            Object.assign(C, this.options.ticks.format), formatNumber(e, m, C)
          );
        },
        logarithmic(e, l, c) {
          if (0 === e) return "0";
          let d = c[l].significand || e / Math.pow(10, Math.floor(ep(e)));
          return [1, 2, 3, 5, 10, 15].includes(d) || l > 0.8 * c.length
            ? ew.numeric.call(this, e, l, c)
            : "";
        },
      };
      var ex = { formatters: ew };
      let e_ = Object.create(null),
        eC = Object.create(null);
      function getScope$1(e, l) {
        if (!l) return e;
        let c = l.split(".");
        for (let l = 0, d = c.length; l < d; ++l) {
          let d = c[l];
          e = e[d] || (e[d] = Object.create(null));
        }
        return e;
      }
      function set(e, l, c) {
        return "string" == typeof l
          ? merge(getScope$1(e, l), c)
          : merge(getScope$1(e, ""), l);
      }
      var eE = new (class {
        constructor(e, l) {
          (this.animation = void 0),
            (this.backgroundColor = "rgba(0,0,0,0.1)"),
            (this.borderColor = "rgba(0,0,0,0.1)"),
            (this.color = "#666"),
            (this.datasets = {}),
            (this.devicePixelRatio = (e) =>
              e.chart.platform.getDevicePixelRatio()),
            (this.elements = {}),
            (this.events = [
              "mousemove",
              "mouseout",
              "click",
              "touchstart",
              "touchmove",
            ]),
            (this.font = {
              family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
              size: 12,
              style: "normal",
              lineHeight: 1.2,
              weight: null,
            }),
            (this.hover = {}),
            (this.hoverBackgroundColor = (e, l) =>
              getHoverColor(l.backgroundColor)),
            (this.hoverBorderColor = (e, l) => getHoverColor(l.borderColor)),
            (this.hoverColor = (e, l) => getHoverColor(l.color)),
            (this.indexAxis = "x"),
            (this.interaction = {
              mode: "nearest",
              intersect: !0,
              includeInvisible: !1,
            }),
            (this.maintainAspectRatio = !0),
            (this.onHover = null),
            (this.onClick = null),
            (this.parsing = !0),
            (this.plugins = {}),
            (this.responsive = !0),
            (this.scale = void 0),
            (this.scales = {}),
            (this.showLine = !0),
            (this.drawActiveElementsOnTop = !0),
            this.describe(e),
            this.apply(l);
        }
        set(e, l) {
          return set(this, e, l);
        }
        get(e) {
          return getScope$1(this, e);
        }
        describe(e, l) {
          return set(eC, e, l);
        }
        override(e, l) {
          return set(e_, e, l);
        }
        route(e, l, c, d) {
          let m = getScope$1(this, e),
            g = getScope$1(this, c),
            y = "_" + l;
          Object.defineProperties(m, {
            [y]: { value: m[l], writable: !0 },
            [l]: {
              enumerable: !0,
              get() {
                let e = this[y],
                  l = g[d];
                return isObject(e)
                  ? Object.assign({}, l, e)
                  : valueOrDefault(e, l);
              },
              set(e) {
                this[y] = e;
              },
            },
          });
        }
        apply(e) {
          e.forEach((e) => e(this));
        }
      })(
        {
          _scriptable: (e) => !e.startsWith("on"),
          _indexable: (e) => "events" !== e,
          hover: { _fallback: "interaction" },
          interaction: { _scriptable: !1, _indexable: !1 },
        },
        [
          function (e) {
            e.set("animation", {
              delay: void 0,
              duration: 1e3,
              easing: "easeOutQuart",
              fn: void 0,
              from: void 0,
              loop: void 0,
              to: void 0,
              type: void 0,
            }),
              e.describe("animation", {
                _fallback: !1,
                _indexable: !1,
                _scriptable: (e) =>
                  "onProgress" !== e && "onComplete" !== e && "fn" !== e,
              }),
              e.set("animations", {
                colors: { type: "color", properties: eb },
                numbers: { type: "number", properties: ey },
              }),
              e.describe("animations", { _fallback: "animation" }),
              e.set("transitions", {
                active: { animation: { duration: 400 } },
                resize: { animation: { duration: 0 } },
                show: {
                  animations: {
                    colors: { from: "transparent" },
                    visible: { type: "boolean", duration: 0 },
                  },
                },
                hide: {
                  animations: {
                    colors: { to: "transparent" },
                    visible: {
                      type: "boolean",
                      easing: "linear",
                      fn: (e) => 0 | e,
                    },
                  },
                },
              });
          },
          function (e) {
            e.set("layout", {
              autoPadding: !0,
              padding: { top: 0, right: 0, bottom: 0, left: 0 },
            });
          },
          function (e) {
            e.set("scale", {
              display: !0,
              offset: !1,
              reverse: !1,
              beginAtZero: !1,
              bounds: "ticks",
              clip: !0,
              grace: 0,
              grid: {
                display: !0,
                lineWidth: 1,
                drawOnChartArea: !0,
                drawTicks: !0,
                tickLength: 8,
                tickWidth: (e, l) => l.lineWidth,
                tickColor: (e, l) => l.color,
                offset: !1,
              },
              border: { display: !0, dash: [], dashOffset: 0, width: 1 },
              title: { display: !1, text: "", padding: { top: 4, bottom: 4 } },
              ticks: {
                minRotation: 0,
                maxRotation: 50,
                mirror: !1,
                textStrokeWidth: 0,
                textStrokeColor: "",
                padding: 3,
                display: !0,
                autoSkip: !0,
                autoSkipPadding: 3,
                labelOffset: 0,
                callback: ex.formatters.values,
                minor: {},
                major: {},
                align: "center",
                crossAlign: "near",
                showLabelBackdrop: !1,
                backdropColor: "rgba(255, 255, 255, 0.75)",
                backdropPadding: 2,
              },
            }),
              e.route("scale.ticks", "color", "", "color"),
              e.route("scale.grid", "color", "", "borderColor"),
              e.route("scale.border", "color", "", "borderColor"),
              e.route("scale.title", "color", "", "color"),
              e.describe("scale", {
                _fallback: !1,
                _scriptable: (e) =>
                  !e.startsWith("before") &&
                  !e.startsWith("after") &&
                  "callback" !== e &&
                  "parser" !== e,
                _indexable: (e) =>
                  "borderDash" !== e && "tickBorderDash" !== e && "dash" !== e,
              }),
              e.describe("scales", { _fallback: "scale" }),
              e.describe("scale.ticks", {
                _scriptable: (e) => "backdropPadding" !== e && "callback" !== e,
                _indexable: (e) => "backdropPadding" !== e,
              });
          },
        ]
      );
      function _measureText(e, l, c, d, m) {
        let g = l[m];
        return (
          g || ((g = l[m] = e.measureText(m).width), c.push(m)),
          g > d && (d = g),
          d
        );
      }
      function _alignPixel(e, l, c) {
        let d = e.currentDevicePixelRatio,
          m = 0 !== c ? Math.max(c / 2, 0.5) : 0;
        return Math.round((l - m) * d) / d + m;
      }
      function clearCanvas(e, l) {
        (l || e) &&
          ((l = l || e.getContext("2d")).save(),
          l.resetTransform(),
          l.clearRect(0, 0, e.width, e.height),
          l.restore());
      }
      function drawPoint(e, l, c, d) {
        drawPointLegend(e, l, c, d, null);
      }
      function drawPointLegend(e, l, c, d, m) {
        let g, y, b, C, P, I, B, N;
        let F = l.pointStyle,
          V = l.rotation,
          G = l.radius,
          Q = (V || 0) * el;
        if (
          F &&
          "object" == typeof F &&
          ("[object HTMLImageElement]" === (g = F.toString()) ||
            "[object HTMLCanvasElement]" === g)
        ) {
          e.save(),
            e.translate(c, d),
            e.rotate(Q),
            e.drawImage(F, -F.width / 2, -F.height / 2, F.width, F.height),
            e.restore();
          return;
        }
        if (!isNaN(G) && !(G <= 0)) {
          switch ((e.beginPath(), F)) {
            default:
              m ? e.ellipse(c, d, m / 2, G, 0, 0, eo) : e.arc(c, d, G, 0, eo),
                e.closePath();
              break;
            case "triangle":
              (I = m ? m / 2 : G),
                e.moveTo(c + Math.sin(Q) * I, d - Math.cos(Q) * G),
                (Q += ed),
                e.lineTo(c + Math.sin(Q) * I, d - Math.cos(Q) * G),
                (Q += ed),
                e.lineTo(c + Math.sin(Q) * I, d - Math.cos(Q) * G),
                e.closePath();
              break;
            case "rectRounded":
              (P = 0.516 * G),
                (y = Math.cos(Q + eu) * (C = G - P)),
                (B = Math.cos(Q + eu) * (m ? m / 2 - P : C)),
                (b = Math.sin(Q + eu) * C),
                (N = Math.sin(Q + eu) * (m ? m / 2 - P : C)),
                e.arc(c - B, d - b, P, Q - ei, Q - ec),
                e.arc(c + N, d - y, P, Q - ec, Q),
                e.arc(c + B, d + b, P, Q, Q + ec),
                e.arc(c - N, d + y, P, Q + ec, Q + ei),
                e.closePath();
              break;
            case "rect":
              if (!V) {
                (C = Math.SQRT1_2 * G),
                  (I = m ? m / 2 : C),
                  e.rect(c - I, d - C, 2 * I, 2 * C);
                break;
              }
              Q += eu;
            case "rectRot":
              (B = Math.cos(Q) * (m ? m / 2 : G)),
                (y = Math.cos(Q) * G),
                (b = Math.sin(Q) * G),
                (N = Math.sin(Q) * (m ? m / 2 : G)),
                e.moveTo(c - B, d - b),
                e.lineTo(c + N, d - y),
                e.lineTo(c + B, d + b),
                e.lineTo(c - N, d + y),
                e.closePath();
              break;
            case "crossRot":
              Q += eu;
            case "cross":
              (B = Math.cos(Q) * (m ? m / 2 : G)),
                (y = Math.cos(Q) * G),
                (b = Math.sin(Q) * G),
                (N = Math.sin(Q) * (m ? m / 2 : G)),
                e.moveTo(c - B, d - b),
                e.lineTo(c + B, d + b),
                e.moveTo(c + N, d - y),
                e.lineTo(c - N, d + y);
              break;
            case "star":
              (B = Math.cos(Q) * (m ? m / 2 : G)),
                (y = Math.cos(Q) * G),
                (b = Math.sin(Q) * G),
                (N = Math.sin(Q) * (m ? m / 2 : G)),
                e.moveTo(c - B, d - b),
                e.lineTo(c + B, d + b),
                e.moveTo(c + N, d - y),
                e.lineTo(c - N, d + y),
                (Q += eu),
                (B = Math.cos(Q) * (m ? m / 2 : G)),
                (y = Math.cos(Q) * G),
                (b = Math.sin(Q) * G),
                (N = Math.sin(Q) * (m ? m / 2 : G)),
                e.moveTo(c - B, d - b),
                e.lineTo(c + B, d + b),
                e.moveTo(c + N, d - y),
                e.lineTo(c - N, d + y);
              break;
            case "line":
              (y = m ? m / 2 : Math.cos(Q) * G),
                (b = Math.sin(Q) * G),
                e.moveTo(c - y, d - b),
                e.lineTo(c + y, d + b);
              break;
            case "dash":
              e.moveTo(c, d),
                e.lineTo(
                  c + Math.cos(Q) * (m ? m / 2 : G),
                  d + Math.sin(Q) * G
                );
              break;
            case !1:
              e.closePath();
          }
          e.fill(), l.borderWidth > 0 && e.stroke();
        }
      }
      function _isPointInArea(e, l, c) {
        return (
          (c = c || 0.5),
          !l ||
            (e &&
              e.x > l.left - c &&
              e.x < l.right + c &&
              e.y > l.top - c &&
              e.y < l.bottom + c)
        );
      }
      function clipArea(e, l) {
        e.save(),
          e.beginPath(),
          e.rect(l.left, l.top, l.right - l.left, l.bottom - l.top),
          e.clip();
      }
      function unclipArea(e) {
        e.restore();
      }
      function _steppedLineTo(e, l, c, d, m) {
        if (!l) return e.lineTo(c.x, c.y);
        if ("middle" === m) {
          let d = (l.x + c.x) / 2;
          e.lineTo(d, l.y), e.lineTo(d, c.y);
        } else ("after" === m) != !!d ? e.lineTo(l.x, c.y) : e.lineTo(c.x, l.y);
        e.lineTo(c.x, c.y);
      }
      function _bezierCurveTo(e, l, c, d) {
        if (!l) return e.lineTo(c.x, c.y);
        e.bezierCurveTo(
          d ? l.cp1x : l.cp2x,
          d ? l.cp1y : l.cp2y,
          d ? c.cp2x : c.cp1x,
          d ? c.cp2y : c.cp1y,
          c.x,
          c.y
        );
      }
      function renderText(e, l, c, d, m, g = {}) {
        let y, b;
        let C = isArray(l) ? l : [l],
          P = g.strokeWidth > 0 && "" !== g.strokeColor;
        for (
          e.save(),
            e.font = m.string,
            g.translation && e.translate(g.translation[0], g.translation[1]),
            isNullOrUndef(g.rotation) || e.rotate(g.rotation),
            g.color && (e.fillStyle = g.color),
            g.textAlign && (e.textAlign = g.textAlign),
            g.textBaseline && (e.textBaseline = g.textBaseline),
            y = 0;
          y < C.length;
          ++y
        )
          (b = C[y]),
            g.backdrop &&
              (function (e, l) {
                let c = e.fillStyle;
                (e.fillStyle = l.color),
                  e.fillRect(l.left, l.top, l.width, l.height),
                  (e.fillStyle = c);
              })(e, g.backdrop),
            P &&
              (g.strokeColor && (e.strokeStyle = g.strokeColor),
              isNullOrUndef(g.strokeWidth) || (e.lineWidth = g.strokeWidth),
              e.strokeText(b, c, d, g.maxWidth)),
            e.fillText(b, c, d, g.maxWidth),
            (function (e, l, c, d, m) {
              if (m.strikethrough || m.underline) {
                let g = e.measureText(d),
                  y = l - g.actualBoundingBoxLeft,
                  b = l + g.actualBoundingBoxRight,
                  C = c - g.actualBoundingBoxAscent,
                  P = c + g.actualBoundingBoxDescent,
                  I = m.strikethrough ? (C + P) / 2 : P;
                (e.strokeStyle = e.fillStyle),
                  e.beginPath(),
                  (e.lineWidth = m.decorationWidth || 2),
                  e.moveTo(y, I),
                  e.lineTo(b, I),
                  e.stroke();
              }
            })(e, c, d, b, g),
            (d += Number(m.lineHeight));
        e.restore();
      }
      function addRoundedRectPath(e, l) {
        let { x: c, y: d, w: m, h: g, radius: y } = l;
        e.arc(c + y.topLeft, d + y.topLeft, y.topLeft, 1.5 * ei, ei, !0),
          e.lineTo(c, d + g - y.bottomLeft),
          e.arc(
            c + y.bottomLeft,
            d + g - y.bottomLeft,
            y.bottomLeft,
            ei,
            ec,
            !0
          ),
          e.lineTo(c + m - y.bottomRight, d + g),
          e.arc(
            c + m - y.bottomRight,
            d + g - y.bottomRight,
            y.bottomRight,
            ec,
            0,
            !0
          ),
          e.lineTo(c + m, d + y.topRight),
          e.arc(c + m - y.topRight, d + y.topRight, y.topRight, 0, -ec, !0),
          e.lineTo(c + y.topLeft, d);
      }
      let eA = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,
        eS =
          /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/,
        numberOrZero = (e) => +e || 0;
      function _readValueToProps(e, l) {
        let c = {},
          d = isObject(l),
          m = d ? Object.keys(l) : l,
          g = isObject(e)
            ? d
              ? (c) => valueOrDefault(e[c], e[l[c]])
              : (l) => e[l]
            : () => e;
        for (let e of m) c[e] = numberOrZero(g(e));
        return c;
      }
      function toTRBL(e) {
        return _readValueToProps(e, {
          top: "y",
          right: "x",
          bottom: "y",
          left: "x",
        });
      }
      function toTRBLCorners(e) {
        return _readValueToProps(e, [
          "topLeft",
          "topRight",
          "bottomLeft",
          "bottomRight",
        ]);
      }
      function toPadding(e) {
        let l = toTRBL(e);
        return (l.width = l.left + l.right), (l.height = l.top + l.bottom), l;
      }
      function toFont(e, l) {
        (e = e || {}), (l = l || eE.font);
        let c = valueOrDefault(e.size, l.size);
        "string" == typeof c && (c = parseInt(c, 10));
        let d = valueOrDefault(e.style, l.style);
        d &&
          !("" + d).match(eS) &&
          (console.warn('Invalid font style specified: "' + d + '"'),
          (d = void 0));
        let m = {
          family: valueOrDefault(e.family, l.family),
          lineHeight: (function (e, l) {
            let c = ("" + e).match(eA);
            if (!c || "normal" === c[1]) return 1.2 * l;
            switch (((e = +c[2]), c[3])) {
              case "px":
                return e;
              case "%":
                e /= 100;
            }
            return l * e;
          })(valueOrDefault(e.lineHeight, l.lineHeight), c),
          size: c,
          style: d,
          weight: valueOrDefault(e.weight, l.weight),
          string: "",
        };
        return (
          (m.string =
            !m || isNullOrUndef(m.size) || isNullOrUndef(m.family)
              ? null
              : (m.style ? m.style + " " : "") +
                (m.weight ? m.weight + " " : "") +
                m.size +
                "px " +
                m.family),
          m
        );
      }
      function resolve(e, l, c, d) {
        let m,
          g,
          y,
          b = !0;
        for (m = 0, g = e.length; m < g; ++m)
          if (
            void 0 !== (y = e[m]) &&
            (void 0 !== l && "function" == typeof y && ((y = y(l)), (b = !1)),
            void 0 !== c && isArray(y) && ((y = y[c % y.length]), (b = !1)),
            void 0 !== y)
          )
            return d && !b && (d.cacheable = !1), y;
      }
      function createContext(e, l) {
        return Object.assign(Object.create(e), l);
      }
      function _createResolver(e, l = [""], c, d, m = () => e[0]) {
        let g = c || e;
        void 0 === d && (d = _resolve("_fallback", e));
        let y = {
          [Symbol.toStringTag]: "Object",
          _cacheable: !0,
          _scopes: e,
          _rootScopes: g,
          _fallback: d,
          _getTarget: m,
          override: (c) => _createResolver([c, ...e], l, g, d),
        };
        return new Proxy(y, {
          deleteProperty: (l, c) => (
            delete l[c], delete l._keys, delete e[0][c], !0
          ),
          get: (c, d) =>
            _cached(c, d, () =>
              (function (e, l, c, d) {
                let m;
                for (let g of l)
                  if (void 0 !== (m = _resolve(readKey(g, e), c)))
                    return needsSubResolver(e, m)
                      ? createSubResolver(c, d, e, m)
                      : m;
              })(d, l, e, c)
            ),
          getOwnPropertyDescriptor: (e, l) =>
            Reflect.getOwnPropertyDescriptor(e._scopes[0], l),
          getPrototypeOf: () => Reflect.getPrototypeOf(e[0]),
          has: (e, l) => getKeysFromAllScopes(e).includes(l),
          ownKeys: (e) => getKeysFromAllScopes(e),
          set(e, l, c) {
            let d = e._storage || (e._storage = m());
            return (e[l] = d[l] = c), delete e._keys, !0;
          },
        });
      }
      function _attachContext(e, l, c, d) {
        let m = {
          _cacheable: !1,
          _proxy: e,
          _context: l,
          _subProxy: c,
          _stack: new Set(),
          _descriptors: _descriptors(e, d),
          setContext: (l) => _attachContext(e, l, c, d),
          override: (m) => _attachContext(e.override(m), l, c, d),
        };
        return new Proxy(m, {
          deleteProperty: (l, c) => (delete l[c], delete e[c], !0),
          get: (e, l, c) =>
            _cached(e, l, () =>
              (function (e, l, c) {
                let {
                    _proxy: d,
                    _context: m,
                    _subProxy: g,
                    _descriptors: y,
                  } = e,
                  b = d[l];
                return (
                  isFunction(b) &&
                    y.isScriptable(l) &&
                    (b = (function (e, l, c, d) {
                      let {
                        _proxy: m,
                        _context: g,
                        _subProxy: y,
                        _stack: b,
                      } = c;
                      if (b.has(e))
                        throw Error(
                          "Recursion detected: " +
                            Array.from(b).join("->") +
                            "->" +
                            e
                        );
                      b.add(e);
                      let C = l(g, y || d);
                      return (
                        b.delete(e),
                        needsSubResolver(e, C) &&
                          (C = createSubResolver(m._scopes, m, e, C)),
                        C
                      );
                    })(l, b, e, c)),
                  isArray(b) &&
                    b.length &&
                    (b = (function (e, l, c, d) {
                      let {
                        _proxy: m,
                        _context: g,
                        _subProxy: y,
                        _descriptors: b,
                      } = c;
                      if (void 0 !== g.index && d(e))
                        return l[g.index % l.length];
                      if (isObject(l[0])) {
                        let c = l,
                          d = m._scopes.filter((e) => e !== c);
                        for (let C of ((l = []), c)) {
                          let c = createSubResolver(d, m, e, C);
                          l.push(_attachContext(c, g, y && y[e], b));
                        }
                      }
                      return l;
                    })(l, b, e, y.isIndexable)),
                  needsSubResolver(l, b) &&
                    (b = _attachContext(b, m, g && g[l], y)),
                  b
                );
              })(e, l, c)
            ),
          getOwnPropertyDescriptor: (l, c) =>
            l._descriptors.allKeys
              ? Reflect.has(e, c)
                ? { enumerable: !0, configurable: !0 }
                : void 0
              : Reflect.getOwnPropertyDescriptor(e, c),
          getPrototypeOf: () => Reflect.getPrototypeOf(e),
          has: (l, c) => Reflect.has(e, c),
          ownKeys: () => Reflect.ownKeys(e),
          set: (l, c, d) => ((e[c] = d), delete l[c], !0),
        });
      }
      function _descriptors(e, l = { scriptable: !0, indexable: !0 }) {
        let {
          _scriptable: c = l.scriptable,
          _indexable: d = l.indexable,
          _allKeys: m = l.allKeys,
        } = e;
        return {
          allKeys: m,
          scriptable: c,
          indexable: d,
          isScriptable: isFunction(c) ? c : () => c,
          isIndexable: isFunction(d) ? d : () => d,
        };
      }
      let readKey = (e, l) => (e ? e + _capitalize(l) : l),
        needsSubResolver = (e, l) =>
          isObject(l) &&
          "adapters" !== e &&
          (null === Object.getPrototypeOf(l) || l.constructor === Object);
      function _cached(e, l, c) {
        if (Object.prototype.hasOwnProperty.call(e, l) || "constructor" === l)
          return e[l];
        let d = c();
        return (e[l] = d), d;
      }
      let getScope = (e, l) =>
        !0 === e ? l : "string" == typeof e ? resolveObjectKey(l, e) : void 0;
      function createSubResolver(e, l, c, d) {
        var m;
        let g = l._rootScopes,
          y = isFunction((m = l._fallback)) ? m(c, d) : m,
          b = [...e, ...g],
          C = new Set();
        C.add(d);
        let P = addScopesFromKey(C, b, c, y || c, d);
        return (
          null !== P &&
          (void 0 === y ||
            y === c ||
            null !== (P = addScopesFromKey(C, b, y, P, d))) &&
          _createResolver(Array.from(C), [""], g, y, () =>
            (function (e, l, c) {
              let d = e._getTarget();
              l in d || (d[l] = {});
              let m = d[l];
              return isArray(m) && isObject(c) ? c : m || {};
            })(l, c, d)
          )
        );
      }
      function addScopesFromKey(e, l, c, d, m) {
        for (; c; )
          c = (function (e, l, c, d, m) {
            for (let y of l) {
              let l = getScope(c, y);
              if (l) {
                var g;
                e.add(l);
                let y = isFunction((g = l._fallback)) ? g(c, m) : g;
                if (void 0 !== y && y !== c && y !== d) return y;
              } else if (!1 === l && void 0 !== d && c !== d) return null;
            }
            return !1;
          })(e, l, c, d, m);
        return c;
      }
      function _resolve(e, l) {
        for (let c of l) {
          if (!c) continue;
          let l = c[e];
          if (void 0 !== l) return l;
        }
      }
      function getKeysFromAllScopes(e) {
        let l = e._keys;
        return (
          l ||
            (l = e._keys =
              (function (e) {
                let l = new Set();
                for (let c of e)
                  for (let e of Object.keys(c).filter(
                    (e) => !e.startsWith("_")
                  ))
                    l.add(e);
                return Array.from(l);
              })(e._scopes)),
          l
        );
      }
      function _parseObjectDataRadialScale(e, l, c, d) {
        let m, g, y;
        let { iScale: b } = e,
          { key: C = "r" } = this._parsing,
          P = Array(d);
        for (m = 0; m < d; ++m)
          (y = l[(g = m + c)]),
            (P[m] = { r: b.parse(resolveObjectKey(y, C), g) });
        return P;
      }
      let ek = Number.EPSILON || 1e-14,
        getPoint = (e, l) => l < e.length && !e[l].skip && e[l],
        getValueAxis = (e) => ("x" === e ? "y" : "x");
      function capControlPoint(e, l, c) {
        return Math.max(Math.min(e, c), l);
      }
      function _isDomSupported() {
        return "undefined" != typeof window && "undefined" != typeof document;
      }
      function _getParentNode(e) {
        let l = e.parentNode;
        return l && "[object ShadowRoot]" === l.toString() && (l = l.host), l;
      }
      function parseMaxStyle(e, l, c) {
        let d;
        return (
          "string" == typeof e
            ? ((d = parseInt(e, 10)),
              -1 !== e.indexOf("%") && (d = (d / 100) * l.parentNode[c]))
            : (d = e),
          d
        );
      }
      let getComputedStyle = (e) =>
          e.ownerDocument.defaultView.getComputedStyle(e, null),
        eP = ["top", "right", "bottom", "left"];
      function getPositionedStyle(e, l, c) {
        let d = {};
        c = c ? "-" + c : "";
        for (let m = 0; m < 4; m++) {
          let g = eP[m];
          d[g] = parseFloat(e[l + "-" + g + c]) || 0;
        }
        return (d.width = d.left + d.right), (d.height = d.top + d.bottom), d;
      }
      let useOffsetPos = (e, l, c) => (e > 0 || l > 0) && (!c || !c.shadowRoot);
      function getRelativePosition(e, l) {
        if ("native" in e) return e;
        let { canvas: c, currentDevicePixelRatio: d } = l,
          m = getComputedStyle(c),
          g = "border-box" === m.boxSizing,
          y = getPositionedStyle(m, "padding"),
          b = getPositionedStyle(m, "border", "width"),
          {
            x: C,
            y: P,
            box: I,
          } = (function (e, l) {
            let c, d;
            let m = e.touches,
              g = m && m.length ? m[0] : e,
              { offsetX: y, offsetY: b } = g,
              C = !1;
            if (useOffsetPos(y, b, e.target)) (c = y), (d = b);
            else {
              let e = l.getBoundingClientRect();
              (c = g.clientX - e.left), (d = g.clientY - e.top), (C = !0);
            }
            return { x: c, y: d, box: C };
          })(e, c),
          B = y.left + (I && b.left),
          N = y.top + (I && b.top),
          { width: F, height: V } = l;
        return (
          g && ((F -= y.width + b.width), (V -= y.height + b.height)),
          {
            x: Math.round((((C - B) / F) * c.width) / d),
            y: Math.round((((P - N) / V) * c.height) / d),
          }
        );
      }
      let round1 = (e) => Math.round(10 * e) / 10;
      function retinaScale(e, l, c) {
        let d = l || 1,
          m = Math.floor(e.height * d),
          g = Math.floor(e.width * d);
        (e.height = Math.floor(e.height)), (e.width = Math.floor(e.width));
        let y = e.canvas;
        return (
          y.style &&
            (c || (!y.style.height && !y.style.width)) &&
            ((y.style.height = `${e.height}px`),
            (y.style.width = `${e.width}px`)),
          (e.currentDevicePixelRatio !== d ||
            y.height !== m ||
            y.width !== g) &&
            ((e.currentDevicePixelRatio = d),
            (y.height = m),
            (y.width = g),
            e.ctx.setTransform(d, 0, 0, d, 0, 0),
            !0)
        );
      }
      let eM = (function () {
        let e = !1;
        try {
          let l = {
            get passive() {
              return (e = !0), !1;
            },
          };
          _isDomSupported() &&
            (window.addEventListener("test", null, l),
            window.removeEventListener("test", null, l));
        } catch (e) {}
        return e;
      })();
      function readUsedSize(e, l) {
        let c = getComputedStyle(e).getPropertyValue(l),
          d = c && c.match(/^(\d+)(\.\d+)?px$/);
        return d ? +d[1] : void 0;
      }
      function _pointInLine(e, l, c, d) {
        return { x: e.x + c * (l.x - e.x), y: e.y + c * (l.y - e.y) };
      }
      function _steppedInterpolation(e, l, c, d) {
        return {
          x: e.x + c * (l.x - e.x),
          y:
            "middle" === d
              ? c < 0.5
                ? e.y
                : l.y
              : "after" === d
              ? c < 1
                ? e.y
                : l.y
              : c > 0
              ? l.y
              : e.y,
        };
      }
      function _bezierInterpolation(e, l, c, d) {
        let m = { x: e.cp2x, y: e.cp2y },
          g = { x: l.cp1x, y: l.cp1y },
          y = _pointInLine(e, m, c),
          b = _pointInLine(m, g, c),
          C = _pointInLine(g, l, c),
          P = _pointInLine(y, b, c),
          I = _pointInLine(b, C, c);
        return _pointInLine(P, I, c);
      }
      function getRtlAdapter(e, l, c) {
        var d;
        return e
          ? ((d = c),
            {
              x: (e) => l + l + d - e,
              setWidth(e) {
                d = e;
              },
              textAlign: (e) =>
                "center" === e ? e : "right" === e ? "left" : "right",
              xPlus: (e, l) => e - l,
              leftForLtr: (e, l) => e - l,
            })
          : {
              x: (e) => e,
              setWidth(e) {},
              textAlign: (e) => e,
              xPlus: (e, l) => e + l,
              leftForLtr: (e, l) => e,
            };
      }
      function overrideTextDirection(e, l) {
        let c, d;
        ("ltr" === l || "rtl" === l) &&
          ((d = [
            (c = e.canvas.style).getPropertyValue("direction"),
            c.getPropertyPriority("direction"),
          ]),
          c.setProperty("direction", l, "important"),
          (e.prevTextDirection = d));
      }
      function restoreTextDirection(e, l) {
        void 0 !== l &&
          (delete e.prevTextDirection,
          e.canvas.style.setProperty("direction", l[0], l[1]));
      }
      function propertyFn(e) {
        return "angle" === e
          ? {
              between: _angleBetween,
              compare: _angleDiff,
              normalize: _normalizeAngle,
            }
          : {
              between: _isBetween,
              compare: (e, l) => e - l,
              normalize: (e) => e,
            };
      }
      function normalizeSegment({
        start: e,
        end: l,
        count: c,
        loop: d,
        style: m,
      }) {
        return {
          start: e % c,
          end: l % c,
          loop: d && (l - e + 1) % c == 0,
          style: m,
        };
      }
      function _boundSegment(e, l, c) {
        let d, m, g;
        if (!c) return [e];
        let { property: y, start: b, end: C } = c,
          P = l.length,
          { compare: I, between: B, normalize: N } = propertyFn(y),
          {
            start: F,
            end: V,
            loop: G,
            style: Q,
          } = (function (e, l, c) {
            let d;
            let { property: m, start: g, end: y } = c,
              { between: b, normalize: C } = propertyFn(m),
              P = l.length,
              { start: I, end: B, loop: N } = e;
            if (N) {
              for (I += P, B += P, d = 0; d < P && b(C(l[I % P][m]), g, y); ++d)
                I--, B--;
              (I %= P), (B %= P);
            }
            return (
              B < I && (B += P), { start: I, end: B, loop: N, style: e.style }
            );
          })(e, l, c),
          $ = [],
          Z = !1,
          Y = null,
          startIsBefore = () => B(b, g, d) && 0 !== I(b, g),
          endIsBefore = () => 0 === I(C, d) || B(C, g, d),
          shouldStart = () => Z || startIsBefore(),
          shouldStop = () => !Z || endIsBefore();
        for (let e = F, c = F; e <= V; ++e)
          (m = l[e % P]).skip ||
            (d = N(m[y])) === g ||
            ((Z = B(d, b, C)),
            null === Y && shouldStart() && (Y = 0 === I(d, b) ? e : c),
            null !== Y &&
              shouldStop() &&
              ($.push(
                normalizeSegment({
                  start: Y,
                  end: e,
                  loop: G,
                  count: P,
                  style: Q,
                })
              ),
              (Y = null)),
            (c = e),
            (g = d));
        return (
          null !== Y &&
            $.push(
              normalizeSegment({
                start: Y,
                end: V,
                loop: G,
                count: P,
                style: Q,
              })
            ),
          $
        );
      }
      function _boundSegments(e, l) {
        let c = [],
          d = e.segments;
        for (let m = 0; m < d.length; m++) {
          let g = _boundSegment(d[m], e.points, l);
          g.length && c.push(...g);
        }
        return c;
      }
      function splitByStyles(e, l, c, d) {
        return d && d.setContext && c
          ? (function (e, l, c, d) {
              let m = e._chart.getContext(),
                g = readStyle(e.options),
                {
                  _datasetIndex: y,
                  options: { spanGaps: b },
                } = e,
                C = c.length,
                P = [],
                I = g,
                B = l[0].start,
                N = B;
              function addStyle(e, l, d, m) {
                let g = b ? -1 : 1;
                if (e !== l) {
                  for (e += C; c[e % C].skip; ) e -= g;
                  for (; c[l % C].skip; ) l += g;
                  e % C != l % C &&
                    (P.push({ start: e % C, end: l % C, loop: d, style: m }),
                    (I = m),
                    (B = l % C));
                }
              }
              for (let e of l) {
                let l;
                let g = c[(B = b ? B : e.start) % C];
                for (N = B + 1; N <= e.end; N++) {
                  let b = c[N % C];
                  (function (e, l) {
                    if (!l) return !1;
                    let c = [],
                      replacer = function (e, l) {
                        return isPatternOrGradient(l)
                          ? (c.includes(l) || c.push(l), c.indexOf(l))
                          : l;
                      };
                    return (
                      JSON.stringify(e, replacer) !==
                      JSON.stringify(l, replacer)
                    );
                  })(
                    (l = readStyle(
                      d.setContext(
                        createContext(m, {
                          type: "segment",
                          p0: g,
                          p1: b,
                          p0DataIndex: (N - 1) % C,
                          p1DataIndex: N % C,
                          datasetIndex: y,
                        })
                      )
                    )),
                    I
                  ) && addStyle(B, N - 1, e.loop, I),
                    (g = b),
                    (I = l);
                }
                B < N - 1 && addStyle(B, N - 1, e.loop, I);
              }
              return P;
            })(e, l, c, d)
          : l;
      }
      function readStyle(e) {
        return {
          backgroundColor: e.backgroundColor,
          borderCapStyle: e.borderCapStyle,
          borderDash: e.borderDash,
          borderDashOffset: e.borderDashOffset,
          borderJoinStyle: e.borderJoinStyle,
          borderWidth: e.borderWidth,
          borderColor: e.borderColor,
        };
      }
      function getSizeForArea(e, l, c) {
        return e.options.clip ? e[c] : l[c];
      }
      function getDatasetClipArea(e, l) {
        let c = l._clip;
        if (c.disabled) return !1;
        let d = (function (e, l) {
          let { xScale: c, yScale: d } = e;
          return c && d
            ? {
                left: getSizeForArea(c, l, "left"),
                right: getSizeForArea(c, l, "right"),
                top: getSizeForArea(d, l, "top"),
                bottom: getSizeForArea(d, l, "bottom"),
              }
            : l;
        })(l, e.chartArea);
        return {
          left: !1 === c.left ? 0 : d.left - (!0 === c.left ? 0 : c.left),
          right:
            !1 === c.right ? e.width : d.right + (!0 === c.right ? 0 : c.right),
          top: !1 === c.top ? 0 : d.top - (!0 === c.top ? 0 : c.top),
          bottom:
            !1 === c.bottom
              ? e.height
              : d.bottom + (!0 === c.bottom ? 0 : c.bottom),
        };
      }
      var eT = new /*!
       * Chart.js v4.4.9
       * https://www.chartjs.org
       * (c) 2025 Chart.js Contributors
       * Released under the MIT License
       */ (class {
        constructor() {
          (this._request = null),
            (this._charts = new Map()),
            (this._running = !1),
            (this._lastDate = void 0);
        }
        _notify(e, l, c, d) {
          let m = l.listeners[d],
            g = l.duration;
          m.forEach((d) =>
            d({
              chart: e,
              initial: l.initial,
              numSteps: g,
              currentStep: Math.min(c - l.start, g),
            })
          );
        }
        _refresh() {
          this._request ||
            ((this._running = !0),
            (this._request = em.call(window, () => {
              this._update(),
                (this._request = null),
                this._running && this._refresh();
            })));
        }
        _update(e = Date.now()) {
          let l = 0;
          this._charts.forEach((c, d) => {
            let m;
            if (!c.running || !c.items.length) return;
            let g = c.items,
              y = g.length - 1,
              b = !1;
            for (; y >= 0; --y)
              (m = g[y])._active
                ? (m._total > c.duration && (c.duration = m._total),
                  m.tick(e),
                  (b = !0))
                : ((g[y] = g[g.length - 1]), g.pop());
            b && (d.draw(), this._notify(d, c, e, "progress")),
              g.length ||
                ((c.running = !1),
                this._notify(d, c, e, "complete"),
                (c.initial = !1)),
              (l += g.length);
          }),
            (this._lastDate = e),
            0 === l && (this._running = !1);
        }
        _getAnims(e) {
          let l = this._charts,
            c = l.get(e);
          return (
            c ||
              ((c = {
                running: !1,
                initial: !0,
                items: [],
                listeners: { complete: [], progress: [] },
              }),
              l.set(e, c)),
            c
          );
        }
        listen(e, l, c) {
          this._getAnims(e).listeners[l].push(c);
        }
        add(e, l) {
          l && l.length && this._getAnims(e).items.push(...l);
        }
        has(e) {
          return this._getAnims(e).items.length > 0;
        }
        start(e) {
          let l = this._charts.get(e);
          l &&
            ((l.running = !0),
            (l.start = Date.now()),
            (l.duration = l.items.reduce(
              (e, l) => Math.max(e, l._duration),
              0
            )),
            this._refresh());
        }
        running(e) {
          if (!this._running) return !1;
          let l = this._charts.get(e);
          return !!l && !!l.running && !!l.items.length;
        }
        stop(e) {
          let l = this._charts.get(e);
          if (!l || !l.items.length) return;
          let c = l.items,
            d = c.length - 1;
          for (; d >= 0; --d) c[d].cancel();
          (l.items = []), this._notify(e, l, Date.now(), "complete");
        }
        remove(e) {
          return this._charts.delete(e);
        }
      })();
      let eI = "transparent",
        ej = {
          boolean: (e, l, c) => (c > 0.5 ? l : e),
          color(e, l, c) {
            let d = color(e || eI),
              m = d.valid && color(l || eI);
            return m && m.valid ? m.mix(d, c).hexString() : l;
          },
          number: (e, l, c) => e + (l - e) * c,
        };
      let Animation = class Animation {
        constructor(e, l, c, d) {
          let m = l[c];
          d = resolve([e.to, d, m, e.from]);
          let g = resolve([e.from, m, d]);
          (this._active = !0),
            (this._fn = e.fn || ej[e.type || typeof g]),
            (this._easing = eg[e.easing] || eg.linear),
            (this._start = Math.floor(Date.now() + (e.delay || 0))),
            (this._duration = this._total = Math.floor(e.duration)),
            (this._loop = !!e.loop),
            (this._target = l),
            (this._prop = c),
            (this._from = g),
            (this._to = d),
            (this._promises = void 0);
        }
        active() {
          return this._active;
        }
        update(e, l, c) {
          if (this._active) {
            this._notify(!1);
            let d = this._target[this._prop],
              m = c - this._start,
              g = this._duration - m;
            (this._start = c),
              (this._duration = Math.floor(Math.max(g, e.duration))),
              (this._total += m),
              (this._loop = !!e.loop),
              (this._to = resolve([e.to, l, d, e.from])),
              (this._from = resolve([e.from, d, l]));
          }
        }
        cancel() {
          this._active &&
            (this.tick(Date.now()), (this._active = !1), this._notify(!1));
        }
        tick(e) {
          let l;
          let c = e - this._start,
            d = this._duration,
            m = this._prop,
            g = this._from,
            y = this._loop,
            b = this._to;
          if (((this._active = g !== b && (y || c < d)), !this._active)) {
            (this._target[m] = b), this._notify(!0);
            return;
          }
          if (c < 0) {
            this._target[m] = g;
            return;
          }
          (l = (c / d) % 2),
            (l = y && l > 1 ? 2 - l : l),
            (l = this._easing(Math.min(1, Math.max(0, l)))),
            (this._target[m] = this._fn(g, b, l));
        }
        wait() {
          let e = this._promises || (this._promises = []);
          return new Promise((l, c) => {
            e.push({ res: l, rej: c });
          });
        }
        _notify(e) {
          let l = e ? "res" : "rej",
            c = this._promises || [];
          for (let e = 0; e < c.length; e++) c[e][l]();
        }
      };
      let Animations = class Animations {
        constructor(e, l) {
          (this._chart = e), (this._properties = new Map()), this.configure(l);
        }
        configure(e) {
          if (!isObject(e)) return;
          let l = Object.keys(eE.animation),
            c = this._properties;
          Object.getOwnPropertyNames(e).forEach((d) => {
            let m = e[d];
            if (!isObject(m)) return;
            let g = {};
            for (let e of l) g[e] = m[e];
            ((isArray(m.properties) && m.properties) || [d]).forEach((e) => {
              (e !== d && c.has(e)) || c.set(e, g);
            });
          });
        }
        _animateOptions(e, l) {
          let c = l.options,
            d = (function (e, l) {
              if (!l) return;
              let c = e.options;
              if (!c) {
                e.options = l;
                return;
              }
              return (
                c.$shared &&
                  (e.options = c =
                    Object.assign({}, c, { $shared: !1, $animations: {} })),
                c
              );
            })(e, c);
          if (!d) return [];
          let m = this._createAnimations(d, c);
          return (
            c.$shared &&
              (function (e, l) {
                let c = [],
                  d = Object.keys(l);
                for (let l = 0; l < d.length; l++) {
                  let m = e[d[l]];
                  m && m.active() && c.push(m.wait());
                }
                return Promise.all(c);
              })(e.options.$animations, c).then(
                () => {
                  e.options = c;
                },
                () => {}
              ),
            m
          );
        }
        _createAnimations(e, l) {
          let c;
          let d = this._properties,
            m = [],
            g = e.$animations || (e.$animations = {}),
            y = Object.keys(l),
            b = Date.now();
          for (c = y.length - 1; c >= 0; --c) {
            let C = y[c];
            if ("$" === C.charAt(0)) continue;
            if ("options" === C) {
              m.push(...this._animateOptions(e, l));
              continue;
            }
            let P = l[C],
              I = g[C],
              B = d.get(C);
            if (I) {
              if (B && I.active()) {
                I.update(B, P, b);
                continue;
              }
              I.cancel();
            }
            if (!B || !B.duration) {
              e[C] = P;
              continue;
            }
            (g[C] = I = new Animation(B, e, C, P)), m.push(I);
          }
          return m;
        }
        update(e, l) {
          if (0 === this._properties.size) {
            Object.assign(e, l);
            return;
          }
          let c = this._createAnimations(e, l);
          if (c.length) return eT.add(this._chart, c), !0;
        }
      };
      function scaleClip(e, l) {
        let c = (e && e.options) || {},
          d = c.reverse,
          m = void 0 === c.min ? l : 0,
          g = void 0 === c.max ? l : 0;
        return { start: d ? g : m, end: d ? m : g };
      }
      function getSortedDatasetIndices(e, l) {
        let c, d;
        let m = [],
          g = e._getSortedDatasetMetas(l);
        for (c = 0, d = g.length; c < d; ++c) m.push(g[c].index);
        return m;
      }
      function applyStack(e, l, c, d = {}) {
        let m, g, y, b;
        let C = e.keys,
          P = "single" === d.mode;
        if (null === l) return;
        let I = !1;
        for (m = 0, g = C.length; m < g; ++m) {
          if ((y = +C[m]) === c) {
            if (((I = !0), d.all)) continue;
            break;
          }
          isNumberFinite((b = e.values[y])) &&
            (P || 0 === l || eh(l) === eh(b)) &&
            (l += b);
        }
        return I || d.all ? l : 0;
      }
      function isStacked(e, l) {
        let c = e && e.options.stacked;
        return c || (void 0 === c && void 0 !== l.stack);
      }
      function getLastIndexInStack(e, l, c, d) {
        for (let m of l.getMatchingVisibleMetas(d).reverse()) {
          let l = e[m.index];
          if ((c && l > 0) || (!c && l < 0)) return m.index;
        }
        return null;
      }
      function updateStacks(e, l) {
        let c;
        let { chart: d, _cachedMeta: m } = e,
          g = d._stacks || (d._stacks = {}),
          { iScale: y, vScale: b, index: C } = m,
          P = y.axis,
          I = b.axis,
          B = `${y.id}.${b.id}.${m.stack || m.type}`,
          N = l.length;
        for (let e = 0; e < N; ++e) {
          let d = l[e],
            { [P]: y, [I]: N } = d,
            F = d._stacks || (d._stacks = {});
          ((c = F[I] =
            (function (e, l, c) {
              let d = e[l] || (e[l] = {});
              return d[c] || (d[c] = {});
            })(g, B, y))[C] = N),
            (c._top = getLastIndexInStack(c, b, !0, m.type)),
            (c._bottom = getLastIndexInStack(c, b, !1, m.type));
          let V = c._visualValues || (c._visualValues = {});
          V[C] = N;
        }
      }
      function getFirstScaleId(e, l) {
        let c = e.scales;
        return Object.keys(c)
          .filter((e) => c[e].axis === l)
          .shift();
      }
      function clearStacks(e, l) {
        let c = e.controller.index,
          d = e.vScale && e.vScale.axis;
        if (d)
          for (let m of (l = l || e._parsed)) {
            let e = m._stacks;
            if (!e || void 0 === e[d] || void 0 === e[d][c]) return;
            delete e[d][c],
              void 0 !== e[d]._visualValues &&
                void 0 !== e[d]._visualValues[c] &&
                delete e[d]._visualValues[c];
          }
      }
      let isDirectUpdateMode = (e) => "reset" === e || "none" === e,
        cloneIfNotShared = (e, l) => (l ? e : Object.assign({}, e)),
        createStack = (e, l, c) =>
          e &&
          !l.hidden &&
          l._stacked && { keys: getSortedDatasetIndices(c, !0), values: null };
      let DatasetController = class DatasetController {
        static defaults = {};
        static datasetElementType = null;
        static dataElementType = null;
        constructor(e, l) {
          (this.chart = e),
            (this._ctx = e.ctx),
            (this.index = l),
            (this._cachedDataOpts = {}),
            (this._cachedMeta = this.getMeta()),
            (this._type = this._cachedMeta.type),
            (this.options = void 0),
            (this._parsing = !1),
            (this._data = void 0),
            (this._objectData = void 0),
            (this._sharedOptions = void 0),
            (this._drawStart = void 0),
            (this._drawCount = void 0),
            (this.enableOptionSharing = !1),
            (this.supportsDecimation = !1),
            (this.$context = void 0),
            (this._syncList = []),
            (this.datasetElementType = new.target.datasetElementType),
            (this.dataElementType = new.target.dataElementType),
            this.initialize();
        }
        initialize() {
          let e = this._cachedMeta;
          this.configure(),
            this.linkScales(),
            (e._stacked = isStacked(e.vScale, e)),
            this.addElements(),
            this.options.fill &&
              !this.chart.isPluginEnabled("filler") &&
              console.warn(
                "Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options"
              );
        }
        updateIndex(e) {
          this.index !== e && clearStacks(this._cachedMeta), (this.index = e);
        }
        linkScales() {
          let e = this.chart,
            l = this._cachedMeta,
            c = this.getDataset(),
            chooseId = (e, l, c, d) => ("x" === e ? l : "r" === e ? d : c),
            d = (l.xAxisID = valueOrDefault(
              c.xAxisID,
              getFirstScaleId(e, "x")
            )),
            m = (l.yAxisID = valueOrDefault(
              c.yAxisID,
              getFirstScaleId(e, "y")
            )),
            g = (l.rAxisID = valueOrDefault(
              c.rAxisID,
              getFirstScaleId(e, "r")
            )),
            y = l.indexAxis,
            b = (l.iAxisID = chooseId(y, d, m, g)),
            C = (l.vAxisID = chooseId(y, m, d, g));
          (l.xScale = this.getScaleForId(d)),
            (l.yScale = this.getScaleForId(m)),
            (l.rScale = this.getScaleForId(g)),
            (l.iScale = this.getScaleForId(b)),
            (l.vScale = this.getScaleForId(C));
        }
        getDataset() {
          return this.chart.data.datasets[this.index];
        }
        getMeta() {
          return this.chart.getDatasetMeta(this.index);
        }
        getScaleForId(e) {
          return this.chart.scales[e];
        }
        _getOtherScale(e) {
          let l = this._cachedMeta;
          return e === l.iScale ? l.vScale : l.iScale;
        }
        reset() {
          this._update("reset");
        }
        _destroy() {
          let e = this._cachedMeta;
          this._data && unlistenArrayEvents(this._data, this),
            e._stacked && clearStacks(e);
        }
        _dataCheck() {
          let e = this.getDataset(),
            l = e.data || (e.data = []),
            c = this._data;
          if (isObject(l)) {
            let e = this._cachedMeta;
            this._data = (function (e, l) {
              let c, d, m;
              let { iScale: g, vScale: y } = l,
                b = "x" === g.axis ? "x" : "y",
                C = "x" === y.axis ? "x" : "y",
                P = Object.keys(e),
                I = Array(P.length);
              for (c = 0, d = P.length; c < d; ++c)
                (m = P[c]), (I[c] = { [b]: m, [C]: e[m] });
              return I;
            })(l, e);
          } else if (c !== l) {
            if (c) {
              unlistenArrayEvents(c, this);
              let e = this._cachedMeta;
              clearStacks(e), (e._parsed = []);
            }
            l &&
              Object.isExtensible(l) &&
              (function (e, l) {
                if (e._chartjs) {
                  e._chartjs.listeners.push(l);
                  return;
                }
                Object.defineProperty(e, "_chartjs", {
                  configurable: !0,
                  enumerable: !1,
                  value: { listeners: [l] },
                }),
                  ef.forEach((l) => {
                    let c = "_onData" + _capitalize(l),
                      d = e[l];
                    Object.defineProperty(e, l, {
                      configurable: !0,
                      enumerable: !1,
                      value(...l) {
                        let m = d.apply(this, l);
                        return (
                          e._chartjs.listeners.forEach((e) => {
                            "function" == typeof e[c] && e[c](...l);
                          }),
                          m
                        );
                      },
                    });
                  });
              })(l, this),
              (this._syncList = []),
              (this._data = l);
          }
        }
        addElements() {
          let e = this._cachedMeta;
          this._dataCheck(),
            this.datasetElementType &&
              (e.dataset = new this.datasetElementType());
        }
        buildOrUpdateElements(e) {
          let l = this._cachedMeta,
            c = this.getDataset(),
            d = !1;
          this._dataCheck();
          let m = l._stacked;
          (l._stacked = isStacked(l.vScale, l)),
            l.stack !== c.stack &&
              ((d = !0), clearStacks(l), (l.stack = c.stack)),
            this._resyncElements(e),
            (d || m !== l._stacked) &&
              (updateStacks(this, l._parsed),
              (l._stacked = isStacked(l.vScale, l)));
        }
        configure() {
          let e = this.chart.config,
            l = e.datasetScopeKeys(this._type),
            c = e.getOptionScopes(this.getDataset(), l, !0);
          (this.options = e.createResolver(c, this.getContext())),
            (this._parsing = this.options.parsing),
            (this._cachedDataOpts = {});
        }
        parse(e, l) {
          let c, d, m;
          let { _cachedMeta: g, _data: y } = this,
            { iScale: b, _stacked: C } = g,
            P = b.axis,
            I = (0 === e && l === y.length) || g._sorted,
            B = e > 0 && g._parsed[e - 1];
          if (!1 === this._parsing) (g._parsed = y), (g._sorted = !0), (m = y);
          else {
            m = isArray(y[e])
              ? this.parseArrayData(g, y, e, l)
              : isObject(y[e])
              ? this.parseObjectData(g, y, e, l)
              : this.parsePrimitiveData(g, y, e, l);
            let isNotInOrderComparedToPrev = () =>
              null === d[P] || (B && d[P] < B[P]);
            for (c = 0; c < l; ++c)
              (g._parsed[c + e] = d = m[c]),
                I && (isNotInOrderComparedToPrev() && (I = !1), (B = d));
            g._sorted = I;
          }
          C && updateStacks(this, m);
        }
        parsePrimitiveData(e, l, c, d) {
          let m, g;
          let { iScale: y, vScale: b } = e,
            C = y.axis,
            P = b.axis,
            I = y.getLabels(),
            B = y === b,
            N = Array(d);
          for (m = 0; m < d; ++m)
            (g = m + c),
              (N[m] = { [C]: B || y.parse(I[g], g), [P]: b.parse(l[g], g) });
          return N;
        }
        parseArrayData(e, l, c, d) {
          let m, g, y;
          let { xScale: b, yScale: C } = e,
            P = Array(d);
          for (m = 0; m < d; ++m)
            (y = l[(g = m + c)]),
              (P[m] = { x: b.parse(y[0], g), y: C.parse(y[1], g) });
          return P;
        }
        parseObjectData(e, l, c, d) {
          let m, g, y;
          let { xScale: b, yScale: C } = e,
            { xAxisKey: P = "x", yAxisKey: I = "y" } = this._parsing,
            B = Array(d);
          for (m = 0; m < d; ++m)
            (y = l[(g = m + c)]),
              (B[m] = {
                x: b.parse(resolveObjectKey(y, P), g),
                y: C.parse(resolveObjectKey(y, I), g),
              });
          return B;
        }
        getParsed(e) {
          return this._cachedMeta._parsed[e];
        }
        getDataElement(e) {
          return this._cachedMeta.data[e];
        }
        applyStack(e, l, c) {
          let d = this.chart,
            m = this._cachedMeta,
            g = l[e.axis],
            y = {
              keys: getSortedDatasetIndices(d, !0),
              values: l._stacks[e.axis]._visualValues,
            };
          return applyStack(y, g, m.index, { mode: c });
        }
        updateRangeFromParsed(e, l, c, d) {
          let m = c[l.axis],
            g = null === m ? NaN : m,
            y = d && c._stacks[l.axis];
          d &&
            y &&
            ((d.values = y), (g = applyStack(d, m, this._cachedMeta.index))),
            (e.min = Math.min(e.min, g)),
            (e.max = Math.max(e.max, g));
        }
        getMinMax(e, l) {
          let c, d;
          let m = this._cachedMeta,
            g = m._parsed,
            y = m._sorted && e === m.iScale,
            b = g.length,
            C = this._getOtherScale(e),
            P = createStack(l, m, this.chart),
            I = {
              min: Number.POSITIVE_INFINITY,
              max: Number.NEGATIVE_INFINITY,
            },
            { min: B, max: N } = (function (e) {
              let {
                min: l,
                max: c,
                minDefined: d,
                maxDefined: m,
              } = e.getUserBounds();
              return {
                min: d ? l : Number.NEGATIVE_INFINITY,
                max: m ? c : Number.POSITIVE_INFINITY,
              };
            })(C);
          function _skip() {
            d = g[c];
            let l = d[C.axis];
            return !isNumberFinite(d[e.axis]) || B > l || N < l;
          }
          for (
            c = 0;
            c < b && (_skip() || (this.updateRangeFromParsed(I, e, d, P), !y));
            ++c
          );
          if (y) {
            for (c = b - 1; c >= 0; --c)
              if (!_skip()) {
                this.updateRangeFromParsed(I, e, d, P);
                break;
              }
          }
          return I;
        }
        getAllParsedValues(e) {
          let l, c, d;
          let m = this._cachedMeta._parsed,
            g = [];
          for (l = 0, c = m.length; l < c; ++l)
            isNumberFinite((d = m[l][e.axis])) && g.push(d);
          return g;
        }
        getMaxOverflow() {
          return !1;
        }
        getLabelAndValue(e) {
          let l = this._cachedMeta,
            c = l.iScale,
            d = l.vScale,
            m = this.getParsed(e);
          return {
            label: c ? "" + c.getLabelForValue(m[c.axis]) : "",
            value: d ? "" + d.getLabelForValue(m[d.axis]) : "",
          };
        }
        _update(e) {
          var l;
          let c, d, m, g;
          let y = this._cachedMeta;
          this.update(e || "default"),
            (y._clip =
              (isObject(
                (l = valueOrDefault(
                  this.options.clip,
                  (function (e, l, c) {
                    if (!1 === c) return !1;
                    let d = scaleClip(e, c),
                      m = scaleClip(l, c);
                    return {
                      top: m.end,
                      right: d.end,
                      bottom: m.start,
                      left: d.start,
                    };
                  })(y.xScale, y.yScale, this.getMaxOverflow())
                ))
              )
                ? ((c = l.top), (d = l.right), (m = l.bottom), (g = l.left))
                : (c = d = m = g = l),
              { top: c, right: d, bottom: m, left: g, disabled: !1 === l }));
        }
        update(e) {}
        draw() {
          let e;
          let l = this._ctx,
            c = this.chart,
            d = this._cachedMeta,
            m = d.data || [],
            g = c.chartArea,
            y = [],
            b = this._drawStart || 0,
            C = this._drawCount || m.length - b,
            P = this.options.drawActiveElementsOnTop;
          for (d.dataset && d.dataset.draw(l, g, b, C), e = b; e < b + C; ++e) {
            let c = m[e];
            c.hidden || (c.active && P ? y.push(c) : c.draw(l, g));
          }
          for (e = 0; e < y.length; ++e) y[e].draw(l, g);
        }
        getStyle(e, l) {
          let c = l ? "active" : "default";
          return void 0 === e && this._cachedMeta.dataset
            ? this.resolveDatasetElementOptions(c)
            : this.resolveDataElementOptions(e || 0, c);
        }
        getContext(e, l, c) {
          var d;
          let m;
          let g = this.getDataset();
          if (e >= 0 && e < this._cachedMeta.data.length) {
            let l = this._cachedMeta.data[e];
            ((m =
              l.$context ||
              (l.$context = createContext(this.getContext(), {
                active: !1,
                dataIndex: e,
                parsed: void 0,
                raw: void 0,
                element: l,
                index: e,
                mode: "default",
                type: "data",
              }))).parsed = this.getParsed(e)),
              (m.raw = g.data[e]),
              (m.index = m.dataIndex = e);
          } else
            ((m =
              this.$context ||
              (this.$context = createContext(this.chart.getContext(), {
                active: !1,
                dataset: void 0,
                datasetIndex: (d = this.index),
                index: d,
                mode: "default",
                type: "dataset",
              }))).dataset = g),
              (m.index = m.datasetIndex = this.index);
          return (m.active = !!l), (m.mode = c), m;
        }
        resolveDatasetElementOptions(e) {
          return this._resolveElementOptions(this.datasetElementType.id, e);
        }
        resolveDataElementOptions(e, l) {
          return this._resolveElementOptions(this.dataElementType.id, l, e);
        }
        _resolveElementOptions(e, l = "default", c) {
          let d = "active" === l,
            m = this._cachedDataOpts,
            g = e + "-" + l,
            y = m[g],
            b = this.enableOptionSharing && defined(c);
          if (y) return cloneIfNotShared(y, b);
          let C = this.chart.config,
            P = C.datasetElementScopeKeys(this._type, e),
            I = d ? [`${e}Hover`, "hover", e, ""] : [e, ""],
            B = C.getOptionScopes(this.getDataset(), P),
            N = Object.keys(eE.elements[e]),
            F = C.resolveNamedOptions(B, N, () => this.getContext(c, d, l), I);
          return (
            F.$shared &&
              ((F.$shared = b), (m[g] = Object.freeze(cloneIfNotShared(F, b)))),
            F
          );
        }
        _resolveAnimations(e, l, c) {
          let d;
          let m = this.chart,
            g = this._cachedDataOpts,
            y = `animation-${l}`,
            b = g[y];
          if (b) return b;
          if (!1 !== m.options.animation) {
            let m = this.chart.config,
              g = m.datasetAnimationScopeKeys(this._type, l),
              y = m.getOptionScopes(this.getDataset(), g);
            d = m.createResolver(y, this.getContext(e, c, l));
          }
          let C = new Animations(m, d && d.animations);
          return d && d._cacheable && (g[y] = Object.freeze(C)), C;
        }
        getSharedOptions(e) {
          if (e.$shared)
            return (
              this._sharedOptions ||
              (this._sharedOptions = Object.assign({}, e))
            );
        }
        includeOptions(e, l) {
          return !l || isDirectUpdateMode(e) || this.chart._animationsDisabled;
        }
        _getSharedOptions(e, l) {
          let c = this.resolveDataElementOptions(e, l),
            d = this._sharedOptions,
            m = this.getSharedOptions(c),
            g = this.includeOptions(l, m) || m !== d;
          return (
            this.updateSharedOptions(m, l, c),
            { sharedOptions: m, includeOptions: g }
          );
        }
        updateElement(e, l, c, d) {
          isDirectUpdateMode(d)
            ? Object.assign(e, c)
            : this._resolveAnimations(l, d).update(e, c);
        }
        updateSharedOptions(e, l, c) {
          e &&
            !isDirectUpdateMode(l) &&
            this._resolveAnimations(void 0, l).update(e, c);
        }
        _setStyle(e, l, c, d) {
          e.active = d;
          let m = this.getStyle(l, d);
          this._resolveAnimations(l, c, d).update(e, {
            options: (!d && this.getSharedOptions(m)) || m,
          });
        }
        removeHoverStyle(e, l, c) {
          this._setStyle(e, c, "active", !1);
        }
        setHoverStyle(e, l, c) {
          this._setStyle(e, c, "active", !0);
        }
        _removeDatasetHoverStyle() {
          let e = this._cachedMeta.dataset;
          e && this._setStyle(e, void 0, "active", !1);
        }
        _setDatasetHoverStyle() {
          let e = this._cachedMeta.dataset;
          e && this._setStyle(e, void 0, "active", !0);
        }
        _resyncElements(e) {
          let l = this._data,
            c = this._cachedMeta.data;
          for (let [e, l, c] of this._syncList) this[e](l, c);
          this._syncList = [];
          let d = c.length,
            m = l.length,
            g = Math.min(m, d);
          g && this.parse(0, g),
            m > d
              ? this._insertElements(d, m - d, e)
              : m < d && this._removeElements(m, d - m);
        }
        _insertElements(e, l, c = !0) {
          let d;
          let m = this._cachedMeta,
            g = m.data,
            y = e + l,
            move = (e) => {
              for (e.length += l, d = e.length - 1; d >= y; d--)
                e[d] = e[d - l];
            };
          for (move(g), d = e; d < y; ++d) g[d] = new this.dataElementType();
          this._parsing && move(m._parsed),
            this.parse(e, l),
            c && this.updateElements(g, e, l, "reset");
        }
        updateElements(e, l, c, d) {}
        _removeElements(e, l) {
          let c = this._cachedMeta;
          if (this._parsing) {
            let d = c._parsed.splice(e, l);
            c._stacked && clearStacks(c, d);
          }
          c.data.splice(e, l);
        }
        _sync(e) {
          if (this._parsing) this._syncList.push(e);
          else {
            let [l, c, d] = e;
            this[l](c, d);
          }
          this.chart._dataChanges.push([this.index, ...e]);
        }
        _onDataPush() {
          let e = arguments.length;
          this._sync(["_insertElements", this.getDataset().data.length - e, e]);
        }
        _onDataPop() {
          this._sync(["_removeElements", this._cachedMeta.data.length - 1, 1]);
        }
        _onDataShift() {
          this._sync(["_removeElements", 0, 1]);
        }
        _onDataSplice(e, l) {
          l && this._sync(["_removeElements", e, l]);
          let c = arguments.length - 2;
          c && this._sync(["_insertElements", e, c]);
        }
        _onDataUnshift() {
          this._sync(["_insertElements", 0, arguments.length]);
        }
      };
      function parseValue(e, l, c, d) {
        return (
          isArray(e)
            ? (function (e, l, c, d) {
                let m = c.parse(e[0], d),
                  g = c.parse(e[1], d),
                  y = Math.min(m, g),
                  b = Math.max(m, g),
                  C = y,
                  P = b;
                Math.abs(y) > Math.abs(b) && ((C = b), (P = y)),
                  (l[c.axis] = P),
                  (l._custom = {
                    barStart: C,
                    barEnd: P,
                    start: m,
                    end: g,
                    min: y,
                    max: b,
                  });
              })(e, l, c, d)
            : (l[c.axis] = c.parse(e, d)),
          l
        );
      }
      function parseArrayOrPrimitive(e, l, c, d) {
        let m, g, y, b;
        let C = e.iScale,
          P = e.vScale,
          I = C.getLabels(),
          B = C === P,
          N = [];
        for (m = c, g = c + d; m < g; ++m)
          (b = l[m]),
            ((y = {})[C.axis] = B || C.parse(I[m], m)),
            N.push(parseValue(b, y, P, m));
        return N;
      }
      function isFloatBar(e) {
        return e && void 0 !== e.barStart && void 0 !== e.barEnd;
      }
      function parseEdge(e, l, c, d) {
        var m;
        return (e = d
          ? startEnd((e = (m = e) === l ? c : m === c ? l : m), c, l)
          : startEnd(e, l, c));
      }
      function startEnd(e, l, c) {
        return "start" === e ? l : "end" === e ? c : e;
      }
      let DoughnutController = class DoughnutController extends DatasetController {
        static id = "doughnut";
        static defaults = {
          datasetElementType: !1,
          dataElementType: "arc",
          animation: { animateRotate: !0, animateScale: !1 },
          animations: {
            numbers: {
              type: "number",
              properties: [
                "circumference",
                "endAngle",
                "innerRadius",
                "outerRadius",
                "startAngle",
                "x",
                "y",
                "offset",
                "borderWidth",
                "spacing",
              ],
            },
          },
          cutout: "50%",
          rotation: 0,
          circumference: 360,
          radius: "100%",
          spacing: 0,
          indexAxis: "r",
        };
        static descriptors = {
          _scriptable: (e) => "spacing" !== e,
          _indexable: (e) =>
            "spacing" !== e &&
            !e.startsWith("borderDash") &&
            !e.startsWith("hoverBorderDash"),
        };
        static overrides = {
          aspectRatio: 1,
          plugins: {
            legend: {
              labels: {
                generateLabels(e) {
                  let l = e.data;
                  if (l.labels.length && l.datasets.length) {
                    let {
                      labels: { pointStyle: c, color: d },
                    } = e.legend.options;
                    return l.labels.map((l, m) => {
                      let g = e.getDatasetMeta(0),
                        y = g.controller.getStyle(m);
                      return {
                        text: l,
                        fillStyle: y.backgroundColor,
                        strokeStyle: y.borderColor,
                        fontColor: d,
                        lineWidth: y.borderWidth,
                        pointStyle: c,
                        hidden: !e.getDataVisibility(m),
                        index: m,
                      };
                    });
                  }
                  return [];
                },
              },
              onClick(e, l, c) {
                c.chart.toggleDataVisibility(l.index), c.chart.update();
              },
            },
          },
        };
        constructor(e, l) {
          super(e, l),
            (this.enableOptionSharing = !0),
            (this.innerRadius = void 0),
            (this.outerRadius = void 0),
            (this.offsetX = void 0),
            (this.offsetY = void 0);
        }
        linkScales() {}
        parse(e, l) {
          let c = this.getDataset().data,
            d = this._cachedMeta;
          if (!1 === this._parsing) d._parsed = c;
          else {
            let m,
              g,
              getter = (e) => +c[e];
            if (isObject(c[e])) {
              let { key: e = "value" } = this._parsing;
              getter = (l) => +resolveObjectKey(c[l], e);
            }
            for (m = e, g = e + l; m < g; ++m) d._parsed[m] = getter(m);
          }
        }
        _getRotation() {
          return toRadians(this.options.rotation - 90);
        }
        _getCircumference() {
          return toRadians(this.options.circumference);
        }
        _getRotationExtents() {
          let e = eo,
            l = -eo;
          for (let c = 0; c < this.chart.data.datasets.length; ++c)
            if (
              this.chart.isDatasetVisible(c) &&
              this.chart.getDatasetMeta(c).type === this._type
            ) {
              let d = this.chart.getDatasetMeta(c).controller,
                m = d._getRotation(),
                g = d._getCircumference();
              (e = Math.min(e, m)), (l = Math.max(l, m + g));
            }
          return { rotation: e, circumference: l - e };
        }
        update(e) {
          let l = this.chart,
            { chartArea: c } = l,
            d = this._cachedMeta,
            m = d.data,
            g =
              this.getMaxBorderWidth() +
              this.getMaxOffset(m) +
              this.options.spacing,
            y = Math.max((Math.min(c.width, c.height) - g) / 2, 0),
            b = Math.min(toPercentage(this.options.cutout, y), 1),
            C = this._getRingWeight(this.index),
            { circumference: P, rotation: I } = this._getRotationExtents(),
            {
              ratioX: B,
              ratioY: N,
              offsetX: F,
              offsetY: V,
            } = (function (e, l, c) {
              let d = 1,
                m = 1,
                g = 0,
                y = 0;
              if (l < eo) {
                let b = e + l,
                  C = Math.cos(e),
                  P = Math.sin(e),
                  I = Math.cos(b),
                  B = Math.sin(b),
                  calcMax = (l, d, m) =>
                    _angleBetween(l, e, b, !0)
                      ? 1
                      : Math.max(d, d * c, m, m * c),
                  calcMin = (l, d, m) =>
                    _angleBetween(l, e, b, !0)
                      ? -1
                      : Math.min(d, d * c, m, m * c),
                  N = calcMax(0, C, I),
                  F = calcMax(ec, P, B),
                  V = calcMin(ei, C, I),
                  G = calcMin(ei + ec, P, B);
                (d = (N - V) / 2),
                  (m = (F - G) / 2),
                  (g = -(N + V) / 2),
                  (y = -(F + G) / 2);
              }
              return { ratioX: d, ratioY: m, offsetX: g, offsetY: y };
            })(I, P, b),
            G = (c.width - g) / B,
            Q = (c.height - g) / N,
            $ = toDimension(
              this.options.radius,
              Math.max(Math.min(G, Q) / 2, 0)
            ),
            Z = Math.max($ * b, 0),
            Y = ($ - Z) / this._getVisibleDatasetWeightTotal();
          (this.offsetX = F * $),
            (this.offsetY = V * $),
            (d.total = this.calculateTotal()),
            (this.outerRadius = $ - Y * this._getRingWeightOffset(this.index)),
            (this.innerRadius = Math.max(this.outerRadius - Y * C, 0)),
            this.updateElements(m, 0, m.length, e);
        }
        _circumference(e, l) {
          let c = this.options,
            d = this._cachedMeta,
            m = this._getCircumference();
          return (l && c.animation.animateRotate) ||
            !this.chart.getDataVisibility(e) ||
            null === d._parsed[e] ||
            d.data[e].hidden
            ? 0
            : this.calculateCircumference((d._parsed[e] * m) / eo);
        }
        updateElements(e, l, c, d) {
          let m;
          let g = "reset" === d,
            y = this.chart,
            b = y.chartArea,
            C = y.options,
            P = C.animation,
            I = (b.left + b.right) / 2,
            B = (b.top + b.bottom) / 2,
            N = g && P.animateScale,
            F = N ? 0 : this.innerRadius,
            V = N ? 0 : this.outerRadius,
            { sharedOptions: G, includeOptions: Q } = this._getSharedOptions(
              l,
              d
            ),
            $ = this._getRotation();
          for (m = 0; m < l; ++m) $ += this._circumference(m, g);
          for (m = l; m < l + c; ++m) {
            let l = this._circumference(m, g),
              c = e[m],
              y = {
                x: I + this.offsetX,
                y: B + this.offsetY,
                startAngle: $,
                endAngle: $ + l,
                circumference: l,
                outerRadius: V,
                innerRadius: F,
              };
            Q &&
              (y.options =
                G ||
                this.resolveDataElementOptions(m, c.active ? "active" : d)),
              ($ += l),
              this.updateElement(c, m, y, d);
          }
        }
        calculateTotal() {
          let e;
          let l = this._cachedMeta,
            c = l.data,
            d = 0;
          for (e = 0; e < c.length; e++) {
            let m = l._parsed[e];
            null !== m &&
              !isNaN(m) &&
              this.chart.getDataVisibility(e) &&
              !c[e].hidden &&
              (d += Math.abs(m));
          }
          return d;
        }
        calculateCircumference(e) {
          let l = this._cachedMeta.total;
          return l > 0 && !isNaN(e) ? eo * (Math.abs(e) / l) : 0;
        }
        getLabelAndValue(e) {
          let l = this._cachedMeta,
            c = this.chart,
            d = c.data.labels || [],
            m = formatNumber(l._parsed[e], c.options.locale);
          return { label: d[e] || "", value: m };
        }
        getMaxBorderWidth(e) {
          let l,
            c,
            d,
            m,
            g,
            y = 0,
            b = this.chart;
          if (!e) {
            for (l = 0, c = b.data.datasets.length; l < c; ++l)
              if (b.isDatasetVisible(l)) {
                (e = (d = b.getDatasetMeta(l)).data), (m = d.controller);
                break;
              }
          }
          if (!e) return 0;
          for (l = 0, c = e.length; l < c; ++l)
            "inner" !== (g = m.resolveDataElementOptions(l)).borderAlign &&
              (y = Math.max(y, g.borderWidth || 0, g.hoverBorderWidth || 0));
          return y;
        }
        getMaxOffset(e) {
          let l = 0;
          for (let c = 0, d = e.length; c < d; ++c) {
            let e = this.resolveDataElementOptions(c);
            l = Math.max(l, e.offset || 0, e.hoverOffset || 0);
          }
          return l;
        }
        _getRingWeightOffset(e) {
          let l = 0;
          for (let c = 0; c < e; ++c)
            this.chart.isDatasetVisible(c) && (l += this._getRingWeight(c));
          return l;
        }
        _getRingWeight(e) {
          return Math.max(
            valueOrDefault(this.chart.data.datasets[e].weight, 1),
            0
          );
        }
        _getVisibleDatasetWeightTotal() {
          return (
            this._getRingWeightOffset(this.chart.data.datasets.length) || 1
          );
        }
      };
      let PolarAreaController = class PolarAreaController extends DatasetController {
        static id = "polarArea";
        static defaults = {
          dataElementType: "arc",
          animation: { animateRotate: !0, animateScale: !0 },
          animations: {
            numbers: {
              type: "number",
              properties: [
                "x",
                "y",
                "startAngle",
                "endAngle",
                "innerRadius",
                "outerRadius",
              ],
            },
          },
          indexAxis: "r",
          startAngle: 0,
        };
        static overrides = {
          aspectRatio: 1,
          plugins: {
            legend: {
              labels: {
                generateLabels(e) {
                  let l = e.data;
                  if (l.labels.length && l.datasets.length) {
                    let {
                      labels: { pointStyle: c, color: d },
                    } = e.legend.options;
                    return l.labels.map((l, m) => {
                      let g = e.getDatasetMeta(0),
                        y = g.controller.getStyle(m);
                      return {
                        text: l,
                        fillStyle: y.backgroundColor,
                        strokeStyle: y.borderColor,
                        fontColor: d,
                        lineWidth: y.borderWidth,
                        pointStyle: c,
                        hidden: !e.getDataVisibility(m),
                        index: m,
                      };
                    });
                  }
                  return [];
                },
              },
              onClick(e, l, c) {
                c.chart.toggleDataVisibility(l.index), c.chart.update();
              },
            },
          },
          scales: {
            r: {
              type: "radialLinear",
              angleLines: { display: !1 },
              beginAtZero: !0,
              grid: { circular: !0 },
              pointLabels: { display: !1 },
              startAngle: 0,
            },
          },
        };
        constructor(e, l) {
          super(e, l), (this.innerRadius = void 0), (this.outerRadius = void 0);
        }
        getLabelAndValue(e) {
          let l = this._cachedMeta,
            c = this.chart,
            d = c.data.labels || [],
            m = formatNumber(l._parsed[e].r, c.options.locale);
          return { label: d[e] || "", value: m };
        }
        parseObjectData(e, l, c, d) {
          return _parseObjectDataRadialScale.bind(this)(e, l, c, d);
        }
        update(e) {
          let l = this._cachedMeta.data;
          this._updateRadius(), this.updateElements(l, 0, l.length, e);
        }
        getMinMax() {
          let e = this._cachedMeta,
            l = {
              min: Number.POSITIVE_INFINITY,
              max: Number.NEGATIVE_INFINITY,
            };
          return (
            e.data.forEach((e, c) => {
              let d = this.getParsed(c).r;
              !isNaN(d) &&
                this.chart.getDataVisibility(c) &&
                (d < l.min && (l.min = d), d > l.max && (l.max = d));
            }),
            l
          );
        }
        _updateRadius() {
          let e = this.chart,
            l = e.chartArea,
            c = e.options,
            d = Math.min(l.right - l.left, l.bottom - l.top),
            m = Math.max(d / 2, 0),
            g = Math.max(
              c.cutoutPercentage ? (m / 100) * c.cutoutPercentage : 1,
              0
            ),
            y = (m - g) / e.getVisibleDatasetCount();
          (this.outerRadius = m - y * this.index),
            (this.innerRadius = this.outerRadius - y);
        }
        updateElements(e, l, c, d) {
          let m;
          let g = "reset" === d,
            y = this.chart,
            b = y.options,
            C = b.animation,
            P = this._cachedMeta.rScale,
            I = P.xCenter,
            B = P.yCenter,
            N = P.getIndexAngle(0) - 0.5 * ei,
            F = N,
            V = 360 / this.countVisibleElements();
          for (m = 0; m < l; ++m) F += this._computeAngle(m, d, V);
          for (m = l; m < l + c; m++) {
            let l = e[m],
              c = F,
              b = F + this._computeAngle(m, d, V),
              G = y.getDataVisibility(m)
                ? P.getDistanceFromCenterForValue(this.getParsed(m).r)
                : 0;
            (F = b),
              g && (C.animateScale && (G = 0), C.animateRotate && (c = b = N));
            let Q = {
              x: I,
              y: B,
              innerRadius: 0,
              outerRadius: G,
              startAngle: c,
              endAngle: b,
              options: this.resolveDataElementOptions(
                m,
                l.active ? "active" : d
              ),
            };
            this.updateElement(l, m, Q, d);
          }
        }
        countVisibleElements() {
          let e = this._cachedMeta,
            l = 0;
          return (
            e.data.forEach((e, c) => {
              !isNaN(this.getParsed(c).r) &&
                this.chart.getDataVisibility(c) &&
                l++;
            }),
            l
          );
        }
        _computeAngle(e, l, c) {
          return this.chart.getDataVisibility(e)
            ? toRadians(this.resolveDataElementOptions(e, l).angle || c)
            : 0;
        }
      };
      var eO = Object.freeze({
        __proto__: null,
        BarController: class extends DatasetController {
          static id = "bar";
          static defaults = {
            datasetElementType: !1,
            dataElementType: "bar",
            categoryPercentage: 0.8,
            barPercentage: 0.9,
            grouped: !0,
            animations: {
              numbers: {
                type: "number",
                properties: ["x", "y", "base", "width", "height"],
              },
            },
          };
          static overrides = {
            scales: {
              _index_: { type: "category", offset: !0, grid: { offset: !0 } },
              _value_: { type: "linear", beginAtZero: !0 },
            },
          };
          parsePrimitiveData(e, l, c, d) {
            return parseArrayOrPrimitive(e, l, c, d);
          }
          parseArrayData(e, l, c, d) {
            return parseArrayOrPrimitive(e, l, c, d);
          }
          parseObjectData(e, l, c, d) {
            let m, g, y, b;
            let { iScale: C, vScale: P } = e,
              { xAxisKey: I = "x", yAxisKey: B = "y" } = this._parsing,
              N = "x" === C.axis ? I : B,
              F = "x" === P.axis ? I : B,
              V = [];
            for (m = c, g = c + d; m < g; ++m)
              (b = l[m]),
                ((y = {})[C.axis] = C.parse(resolveObjectKey(b, N), m)),
                V.push(parseValue(resolveObjectKey(b, F), y, P, m));
            return V;
          }
          updateRangeFromParsed(e, l, c, d) {
            super.updateRangeFromParsed(e, l, c, d);
            let m = c._custom;
            m &&
              l === this._cachedMeta.vScale &&
              ((e.min = Math.min(e.min, m.min)),
              (e.max = Math.max(e.max, m.max)));
          }
          getMaxOverflow() {
            return 0;
          }
          getLabelAndValue(e) {
            let l = this._cachedMeta,
              { iScale: c, vScale: d } = l,
              m = this.getParsed(e),
              g = m._custom,
              y = isFloatBar(g)
                ? "[" + g.start + ", " + g.end + "]"
                : "" + d.getLabelForValue(m[d.axis]);
            return { label: "" + c.getLabelForValue(m[c.axis]), value: y };
          }
          initialize() {
            (this.enableOptionSharing = !0), super.initialize();
            let e = this._cachedMeta;
            e.stack = this.getDataset().stack;
          }
          update(e) {
            let l = this._cachedMeta;
            this.updateElements(l.data, 0, l.data.length, e);
          }
          updateElements(e, l, c, d) {
            let m = "reset" === d,
              {
                index: g,
                _cachedMeta: { vScale: y },
              } = this,
              b = y.getBasePixel(),
              C = y.isHorizontal(),
              P = this._getRuler(),
              { sharedOptions: I, includeOptions: B } = this._getSharedOptions(
                l,
                d
              );
            for (let N = l; N < l + c; N++) {
              let l = this.getParsed(N),
                c =
                  m || isNullOrUndef(l[y.axis])
                    ? { base: b, head: b }
                    : this._calculateBarValuePixels(N),
                F = this._calculateBarIndexPixels(N, P),
                V = (l._stacks || {})[y.axis],
                G = {
                  horizontal: C,
                  base: c.base,
                  enableBorderRadius:
                    !V ||
                    isFloatBar(l._custom) ||
                    g === V._top ||
                    g === V._bottom,
                  x: C ? c.head : F.center,
                  y: C ? F.center : c.head,
                  height: C ? F.size : Math.abs(c.size),
                  width: C ? Math.abs(c.size) : F.size,
                };
              B &&
                (G.options =
                  I ||
                  this.resolveDataElementOptions(
                    N,
                    e[N].active ? "active" : d
                  ));
              let Q = G.options || e[N].options;
              !(function (e, l, c, d) {
                let m,
                  g,
                  y,
                  b,
                  C,
                  P = l.borderSkipped,
                  I = {};
                if (!P) {
                  e.borderSkipped = I;
                  return;
                }
                if (!0 === P) {
                  e.borderSkipped = {
                    top: !0,
                    right: !0,
                    bottom: !0,
                    left: !0,
                  };
                  return;
                }
                let {
                  start: B,
                  end: N,
                  reverse: F,
                  top: V,
                  bottom: G,
                } = (e.horizontal
                  ? ((m = e.base > e.x), (g = "left"), (y = "right"))
                  : ((m = e.base < e.y), (g = "bottom"), (y = "top")),
                m ? ((b = "end"), (C = "start")) : ((b = "start"), (C = "end")),
                { start: g, end: y, reverse: m, top: b, bottom: C });
                "middle" === P &&
                  c &&
                  ((e.enableBorderRadius = !0),
                  (c._top || 0) === d
                    ? (P = V)
                    : (c._bottom || 0) === d
                    ? (P = G)
                    : ((I[parseEdge(G, B, N, F)] = !0), (P = V))),
                  (I[parseEdge(P, B, N, F)] = !0),
                  (e.borderSkipped = I);
              })(G, Q, V, g),
                (function (e, { inflateAmount: l }, c) {
                  e.inflateAmount = "auto" === l ? (1 === c ? 0.33 : 0) : l;
                })(G, Q, P.ratio),
                this.updateElement(e[N], N, G, d);
            }
          }
          _getStacks(e, l) {
            let { iScale: c } = this._cachedMeta,
              d = c
                .getMatchingVisibleMetas(this._type)
                .filter((e) => e.controller.options.grouped),
              m = c.options.stacked,
              g = [],
              y = this._cachedMeta.controller.getParsed(l),
              b = y && y[c.axis],
              skipNull = (e) => {
                let l = e._parsed.find((e) => e[c.axis] === b),
                  d = l && l[e.vScale.axis];
                if (isNullOrUndef(d) || isNaN(d)) return !0;
              };
            for (let c of d)
              if (
                !(void 0 !== l && skipNull(c)) &&
                ((!1 === m ||
                  -1 === g.indexOf(c.stack) ||
                  (void 0 === m && void 0 === c.stack)) &&
                  g.push(c.stack),
                c.index === e)
              )
                break;
            return g.length || g.push(void 0), g;
          }
          _getStackCount(e) {
            return this._getStacks(void 0, e).length;
          }
          _getStackIndex(e, l, c) {
            let d = this._getStacks(e, c),
              m = void 0 !== l ? d.indexOf(l) : -1;
            return -1 === m ? d.length - 1 : m;
          }
          _getRuler() {
            let e, l;
            let c = this.options,
              d = this._cachedMeta,
              m = d.iScale,
              g = [];
            for (e = 0, l = d.data.length; e < l; ++e)
              g.push(m.getPixelForValue(this.getParsed(e)[m.axis], e));
            let y = c.barThickness,
              b =
                y ||
                (function (e) {
                  let l, c, d, m;
                  let g = e.iScale,
                    y = (function (e, l) {
                      if (!e._cache.$bar) {
                        let c = e.getMatchingVisibleMetas(l),
                          d = [];
                        for (let l = 0, m = c.length; l < m; l++)
                          d = d.concat(c[l].controller.getAllParsedValues(e));
                        e._cache.$bar = _arrayUnique(d.sort((e, l) => e - l));
                      }
                      return e._cache.$bar;
                    })(g, e.type),
                    b = g._length,
                    updateMinAndPrev = () => {
                      32767 !== d &&
                        -32768 !== d &&
                        (defined(m) && (b = Math.min(b, Math.abs(d - m) || b)),
                        (m = d));
                    };
                  for (l = 0, c = y.length; l < c; ++l)
                    (d = g.getPixelForValue(y[l])), updateMinAndPrev();
                  for (l = 0, m = void 0, c = g.ticks.length; l < c; ++l)
                    (d = g.getPixelForTick(l)), updateMinAndPrev();
                  return b;
                })(d);
            return {
              min: b,
              pixels: g,
              start: m._startPixel,
              end: m._endPixel,
              stackCount: this._getStackCount(),
              scale: m,
              grouped: c.grouped,
              ratio: y ? 1 : c.categoryPercentage * c.barPercentage,
            };
          }
          _calculateBarValuePixels(e) {
            let l, c;
            let {
                _cachedMeta: { vScale: d, _stacked: m, index: g },
                options: { base: y, minBarLength: b },
              } = this,
              C = y || 0,
              P = this.getParsed(e),
              I = P._custom,
              B = isFloatBar(I),
              N = P[d.axis],
              F = 0,
              V = m ? this.applyStack(d, P, m) : N;
            V !== N && ((F = V - N), (V = N)),
              B &&
                ((N = I.barStart),
                (V = I.barEnd - I.barStart),
                0 !== N && eh(N) !== eh(I.barEnd) && (F = 0),
                (F += N));
            let G = isNullOrUndef(y) || B ? F : y,
              Q = d.getPixelForValue(G);
            if (
              Math.abs(
                (c =
                  (l = this.chart.getDataVisibility(e)
                    ? d.getPixelForValue(F + V)
                    : Q) - Q)
              ) < b
            ) {
              var $;
              (c =
                (0 !== ($ = c)
                  ? eh($)
                  : (d.isHorizontal() ? 1 : -1) * (d.min >= C ? 1 : -1)) * b),
                N === C && (Q -= c / 2);
              let e = d.getPixelForDecimal(0),
                y = d.getPixelForDecimal(1);
              (l =
                (Q = Math.max(Math.min(Q, Math.max(e, y)), Math.min(e, y))) +
                c),
                m &&
                  !B &&
                  (P._stacks[d.axis]._visualValues[g] =
                    d.getValueForPixel(l) - d.getValueForPixel(Q));
            }
            if (Q === d.getPixelForValue(C)) {
              let e = (eh(c) * d.getLineWidthForValue(C)) / 2;
              (Q += e), (c -= e);
            }
            return { size: c, base: Q, head: l, center: l + c / 2 };
          }
          _calculateBarIndexPixels(e, l) {
            let c, d;
            let m = l.scale,
              g = this.options,
              y = g.skipNull,
              b = valueOrDefault(g.maxBarThickness, 1 / 0);
            if (l.grouped) {
              let m = y ? this._getStackCount(e) : l.stackCount,
                C =
                  "flex" === g.barThickness
                    ? (function (e, l, c, d) {
                        let m = l.pixels,
                          g = m[e],
                          y = e > 0 ? m[e - 1] : null,
                          b = e < m.length - 1 ? m[e + 1] : null,
                          C = c.categoryPercentage;
                        null === y &&
                          (y = g - (null === b ? l.end - l.start : b - g)),
                          null === b && (b = g + g - y);
                        let P = g - ((g - Math.min(y, b)) / 2) * C,
                          I = (Math.abs(b - y) / 2) * C;
                        return {
                          chunk: I / d,
                          ratio: c.barPercentage,
                          start: P,
                        };
                      })(e, l, g, m)
                    : (function (e, l, c, d) {
                        let m, g;
                        let y = c.barThickness;
                        return (
                          isNullOrUndef(y)
                            ? ((m = l.min * c.categoryPercentage),
                              (g = c.barPercentage))
                            : ((m = y * d), (g = 1)),
                          { chunk: m / d, ratio: g, start: l.pixels[e] - m / 2 }
                        );
                      })(e, l, g, m),
                P = this._getStackIndex(
                  this.index,
                  this._cachedMeta.stack,
                  y ? e : void 0
                );
              (c = C.start + C.chunk * P + C.chunk / 2),
                (d = Math.min(b, C.chunk * C.ratio));
            } else
              (c = m.getPixelForValue(this.getParsed(e)[m.axis], e)),
                (d = Math.min(b, l.min * l.ratio));
            return { base: c - d / 2, head: c + d / 2, center: c, size: d };
          }
          draw() {
            let e = this._cachedMeta,
              l = e.vScale,
              c = e.data,
              d = c.length,
              m = 0;
            for (; m < d; ++m)
              null === this.getParsed(m)[l.axis] ||
                c[m].hidden ||
                c[m].draw(this._ctx);
          }
        },
        BubbleController: class extends DatasetController {
          static id = "bubble";
          static defaults = {
            datasetElementType: !1,
            dataElementType: "point",
            animations: {
              numbers: {
                type: "number",
                properties: ["x", "y", "borderWidth", "radius"],
              },
            },
          };
          static overrides = {
            scales: { x: { type: "linear" }, y: { type: "linear" } },
          };
          initialize() {
            (this.enableOptionSharing = !0), super.initialize();
          }
          parsePrimitiveData(e, l, c, d) {
            let m = super.parsePrimitiveData(e, l, c, d);
            for (let e = 0; e < m.length; e++)
              m[e]._custom = this.resolveDataElementOptions(e + c).radius;
            return m;
          }
          parseArrayData(e, l, c, d) {
            let m = super.parseArrayData(e, l, c, d);
            for (let e = 0; e < m.length; e++) {
              let d = l[c + e];
              m[e]._custom = valueOrDefault(
                d[2],
                this.resolveDataElementOptions(e + c).radius
              );
            }
            return m;
          }
          parseObjectData(e, l, c, d) {
            let m = super.parseObjectData(e, l, c, d);
            for (let e = 0; e < m.length; e++) {
              let d = l[c + e];
              m[e]._custom = valueOrDefault(
                d && d.r && +d.r,
                this.resolveDataElementOptions(e + c).radius
              );
            }
            return m;
          }
          getMaxOverflow() {
            let e = this._cachedMeta.data,
              l = 0;
            for (let c = e.length - 1; c >= 0; --c)
              l = Math.max(l, e[c].size(this.resolveDataElementOptions(c)) / 2);
            return l > 0 && l;
          }
          getLabelAndValue(e) {
            let l = this._cachedMeta,
              c = this.chart.data.labels || [],
              { xScale: d, yScale: m } = l,
              g = this.getParsed(e),
              y = d.getLabelForValue(g.x),
              b = m.getLabelForValue(g.y),
              C = g._custom;
            return {
              label: c[e] || "",
              value: "(" + y + ", " + b + (C ? ", " + C : "") + ")",
            };
          }
          update(e) {
            let l = this._cachedMeta.data;
            this.updateElements(l, 0, l.length, e);
          }
          updateElements(e, l, c, d) {
            let m = "reset" === d,
              { iScale: g, vScale: y } = this._cachedMeta,
              { sharedOptions: b, includeOptions: C } = this._getSharedOptions(
                l,
                d
              ),
              P = g.axis,
              I = y.axis;
            for (let B = l; B < l + c; B++) {
              let l = e[B],
                c = !m && this.getParsed(B),
                N = {},
                F = (N[P] = m
                  ? g.getPixelForDecimal(0.5)
                  : g.getPixelForValue(c[P])),
                V = (N[I] = m ? y.getBasePixel() : y.getPixelForValue(c[I]));
              (N.skip = isNaN(F) || isNaN(V)),
                C &&
                  ((N.options =
                    b ||
                    this.resolveDataElementOptions(B, l.active ? "active" : d)),
                  m && (N.options.radius = 0)),
                this.updateElement(l, B, N, d);
            }
          }
          resolveDataElementOptions(e, l) {
            let c = this.getParsed(e),
              d = super.resolveDataElementOptions(e, l);
            d.$shared && (d = Object.assign({}, d, { $shared: !1 }));
            let m = d.radius;
            return (
              "active" !== l && (d.radius = 0),
              (d.radius += valueOrDefault(c && c._custom, m)),
              d
            );
          }
        },
        DoughnutController: DoughnutController,
        LineController: class extends DatasetController {
          static id = "line";
          static defaults = {
            datasetElementType: "line",
            dataElementType: "point",
            showLine: !0,
            spanGaps: !1,
          };
          static overrides = {
            scales: {
              _index_: { type: "category" },
              _value_: { type: "linear" },
            },
          };
          initialize() {
            (this.enableOptionSharing = !0),
              (this.supportsDecimation = !0),
              super.initialize();
          }
          update(e) {
            let l = this._cachedMeta,
              { dataset: c, data: d = [], _dataset: m } = l,
              g = this.chart._animationsDisabled,
              { start: y, count: b } = _getStartAndCountOfVisiblePoints(
                l,
                d,
                g
              );
            (this._drawStart = y),
              (this._drawCount = b),
              _scaleRangesChanged(l) && ((y = 0), (b = d.length)),
              (c._chart = this.chart),
              (c._datasetIndex = this.index),
              (c._decimated = !!m._decimated),
              (c.points = d);
            let C = this.resolveDatasetElementOptions(e);
            this.options.showLine || (C.borderWidth = 0),
              (C.segment = this.options.segment),
              this.updateElement(c, void 0, { animated: !g, options: C }, e),
              this.updateElements(d, y, b, e);
          }
          updateElements(e, l, c, d) {
            let m = "reset" === d,
              {
                iScale: g,
                vScale: y,
                _stacked: b,
                _dataset: C,
              } = this._cachedMeta,
              { sharedOptions: P, includeOptions: I } = this._getSharedOptions(
                l,
                d
              ),
              B = g.axis,
              N = y.axis,
              { spanGaps: F, segment: V } = this.options,
              G = isNumber(F) ? F : Number.POSITIVE_INFINITY,
              Q = this.chart._animationsDisabled || m || "none" === d,
              $ = l + c,
              Z = e.length,
              Y = l > 0 && this.getParsed(l - 1);
            for (let c = 0; c < Z; ++c) {
              let F = e[c],
                Z = Q ? F : {};
              if (c < l || c >= $) {
                Z.skip = !0;
                continue;
              }
              let et = this.getParsed(c),
                en = isNullOrUndef(et[N]),
                er = (Z[B] = g.getPixelForValue(et[B], c)),
                ei = (Z[N] =
                  m || en
                    ? y.getBasePixel()
                    : y.getPixelForValue(
                        b ? this.applyStack(y, et, b) : et[N],
                        c
                      ));
              (Z.skip = isNaN(er) || isNaN(ei) || en),
                (Z.stop = c > 0 && Math.abs(et[B] - Y[B]) > G),
                V && ((Z.parsed = et), (Z.raw = C.data[c])),
                I &&
                  (Z.options =
                    P ||
                    this.resolveDataElementOptions(c, F.active ? "active" : d)),
                Q || this.updateElement(F, c, Z, d),
                (Y = et);
            }
          }
          getMaxOverflow() {
            let e = this._cachedMeta,
              l = e.dataset,
              c = (l.options && l.options.borderWidth) || 0,
              d = e.data || [];
            if (!d.length) return c;
            let m = d[0].size(this.resolveDataElementOptions(0)),
              g = d[d.length - 1].size(
                this.resolveDataElementOptions(d.length - 1)
              );
            return Math.max(c, m, g) / 2;
          }
          draw() {
            let e = this._cachedMeta;
            e.dataset.updateControlPoints(this.chart.chartArea, e.iScale.axis),
              super.draw();
          }
        },
        PieController: class extends DoughnutController {
          static id = "pie";
          static defaults = {
            cutout: 0,
            rotation: 0,
            circumference: 360,
            radius: "100%",
          };
        },
        PolarAreaController: PolarAreaController,
        RadarController: class extends DatasetController {
          static id = "radar";
          static defaults = {
            datasetElementType: "line",
            dataElementType: "point",
            indexAxis: "r",
            showLine: !0,
            elements: { line: { fill: "start" } },
          };
          static overrides = {
            aspectRatio: 1,
            scales: { r: { type: "radialLinear" } },
          };
          getLabelAndValue(e) {
            let l = this._cachedMeta.vScale,
              c = this.getParsed(e);
            return {
              label: l.getLabels()[e],
              value: "" + l.getLabelForValue(c[l.axis]),
            };
          }
          parseObjectData(e, l, c, d) {
            return _parseObjectDataRadialScale.bind(this)(e, l, c, d);
          }
          update(e) {
            let l = this._cachedMeta,
              c = l.dataset,
              d = l.data || [],
              m = l.iScale.getLabels();
            if (((c.points = d), "resize" !== e)) {
              let l = this.resolveDatasetElementOptions(e);
              this.options.showLine || (l.borderWidth = 0);
              let g = {
                _loop: !0,
                _fullLoop: m.length === d.length,
                options: l,
              };
              this.updateElement(c, void 0, g, e);
            }
            this.updateElements(d, 0, d.length, e);
          }
          updateElements(e, l, c, d) {
            let m = this._cachedMeta.rScale,
              g = "reset" === d;
            for (let y = l; y < l + c; y++) {
              let l = e[y],
                c = this.resolveDataElementOptions(y, l.active ? "active" : d),
                b = m.getPointPositionForValue(y, this.getParsed(y).r),
                C = g ? m.xCenter : b.x,
                P = g ? m.yCenter : b.y,
                I = {
                  x: C,
                  y: P,
                  angle: b.angle,
                  skip: isNaN(C) || isNaN(P),
                  options: c,
                };
              this.updateElement(l, y, I, d);
            }
          }
        },
        ScatterController: class extends DatasetController {
          static id = "scatter";
          static defaults = {
            datasetElementType: !1,
            dataElementType: "point",
            showLine: !1,
            fill: !1,
          };
          static overrides = {
            interaction: { mode: "point" },
            scales: { x: { type: "linear" }, y: { type: "linear" } },
          };
          getLabelAndValue(e) {
            let l = this._cachedMeta,
              c = this.chart.data.labels || [],
              { xScale: d, yScale: m } = l,
              g = this.getParsed(e),
              y = d.getLabelForValue(g.x),
              b = m.getLabelForValue(g.y);
            return { label: c[e] || "", value: "(" + y + ", " + b + ")" };
          }
          update(e) {
            let l = this._cachedMeta,
              { data: c = [] } = l,
              d = this.chart._animationsDisabled,
              { start: m, count: g } = _getStartAndCountOfVisiblePoints(
                l,
                c,
                d
              );
            if (
              ((this._drawStart = m),
              (this._drawCount = g),
              _scaleRangesChanged(l) && ((m = 0), (g = c.length)),
              this.options.showLine)
            ) {
              this.datasetElementType || this.addElements();
              let { dataset: m, _dataset: g } = l;
              (m._chart = this.chart),
                (m._datasetIndex = this.index),
                (m._decimated = !!g._decimated),
                (m.points = c);
              let y = this.resolveDatasetElementOptions(e);
              (y.segment = this.options.segment),
                this.updateElement(m, void 0, { animated: !d, options: y }, e);
            } else
              this.datasetElementType &&
                (delete l.dataset, (this.datasetElementType = !1));
            this.updateElements(c, m, g, e);
          }
          addElements() {
            let { showLine: e } = this.options;
            !this.datasetElementType &&
              e &&
              (this.datasetElementType =
                this.chart.registry.getElement("line")),
              super.addElements();
          }
          updateElements(e, l, c, d) {
            let m = "reset" === d,
              {
                iScale: g,
                vScale: y,
                _stacked: b,
                _dataset: C,
              } = this._cachedMeta,
              P = this.resolveDataElementOptions(l, d),
              I = this.getSharedOptions(P),
              B = this.includeOptions(d, I),
              N = g.axis,
              F = y.axis,
              { spanGaps: V, segment: G } = this.options,
              Q = isNumber(V) ? V : Number.POSITIVE_INFINITY,
              $ = this.chart._animationsDisabled || m || "none" === d,
              Z = l > 0 && this.getParsed(l - 1);
            for (let P = l; P < l + c; ++P) {
              let l = e[P],
                c = this.getParsed(P),
                V = $ ? l : {},
                Y = isNullOrUndef(c[F]),
                et = (V[N] = g.getPixelForValue(c[N], P)),
                en = (V[F] =
                  m || Y
                    ? y.getBasePixel()
                    : y.getPixelForValue(
                        b ? this.applyStack(y, c, b) : c[F],
                        P
                      ));
              (V.skip = isNaN(et) || isNaN(en) || Y),
                (V.stop = P > 0 && Math.abs(c[N] - Z[N]) > Q),
                G && ((V.parsed = c), (V.raw = C.data[P])),
                B &&
                  (V.options =
                    I ||
                    this.resolveDataElementOptions(P, l.active ? "active" : d)),
                $ || this.updateElement(l, P, V, d),
                (Z = c);
            }
            this.updateSharedOptions(I, d, P);
          }
          getMaxOverflow() {
            let e = this._cachedMeta,
              l = e.data || [];
            if (!this.options.showLine) {
              let e = 0;
              for (let c = l.length - 1; c >= 0; --c)
                e = Math.max(
                  e,
                  l[c].size(this.resolveDataElementOptions(c)) / 2
                );
              return e > 0 && e;
            }
            let c = e.dataset,
              d = (c.options && c.options.borderWidth) || 0;
            if (!l.length) return d;
            let m = l[0].size(this.resolveDataElementOptions(0)),
              g = l[l.length - 1].size(
                this.resolveDataElementOptions(l.length - 1)
              );
            return Math.max(d, m, g) / 2;
          }
        },
      });
      function chart_abstract() {
        throw Error(
          "This method is not implemented: Check that a complete date adapter is provided."
        );
      }
      let DateAdapterBase = class DateAdapterBase {
        static override(e) {
          Object.assign(DateAdapterBase.prototype, e);
        }
        options;
        constructor(e) {
          this.options = e || {};
        }
        init() {}
        formats() {
          return chart_abstract();
        }
        parse() {
          return chart_abstract();
        }
        format() {
          return chart_abstract();
        }
        add() {
          return chart_abstract();
        }
        diff() {
          return chart_abstract();
        }
        startOf() {
          return chart_abstract();
        }
        endOf() {
          return chart_abstract();
        }
      };
      var eB = { _date: DateAdapterBase };
      function evaluateInteractionItems(e, l, c, d, m) {
        let g = e.getSortedVisibleDatasetMetas(),
          y = c[l];
        for (let e = 0, c = g.length; e < c; ++e) {
          let { index: c, data: b } = g[e],
            { lo: C, hi: P } = (function (e, l, c, d) {
              let { controller: m, data: g, _sorted: y } = e,
                b = m._cachedMeta.iScale,
                C =
                  e.dataset && e.dataset.options
                    ? e.dataset.options.spanGaps
                    : null;
              if (b && l === b.axis && "r" !== l && y && g.length) {
                let y = b._reversePixels ? _rlookupByKey : _lookupByKey;
                if (d) {
                  if (m._sharedOptions) {
                    let e = g[0],
                      d = "function" == typeof e.getRange && e.getRange(l);
                    if (d) {
                      let e = y(g, l, c - d),
                        m = y(g, l, c + d);
                      return { lo: e.lo, hi: m.hi };
                    }
                  }
                } else {
                  let d = y(g, l, c);
                  if (C) {
                    let { vScale: l } = m._cachedMeta,
                      { _parsed: c } = e,
                      g = c
                        .slice(0, d.lo + 1)
                        .reverse()
                        .findIndex((e) => !isNullOrUndef(e[l.axis]));
                    d.lo -= Math.max(0, g);
                    let y = c
                      .slice(d.hi)
                      .findIndex((e) => !isNullOrUndef(e[l.axis]));
                    d.hi += Math.max(0, y);
                  }
                  return d;
                }
              }
              return { lo: 0, hi: g.length - 1 };
            })(g[e], l, y, m);
          for (let e = C; e <= P; ++e) {
            let l = b[e];
            l.skip || d(l, c, e);
          }
        }
      }
      function getIntersectItems(e, l, c, d, m) {
        let g = [];
        return (
          (m || e.isPointInArea(l)) &&
            evaluateInteractionItems(
              e,
              c,
              l,
              function (c, y, b) {
                (m || _isPointInArea(c, e.chartArea, 0)) &&
                  c.inRange(l.x, l.y, d) &&
                  g.push({ element: c, datasetIndex: y, index: b });
              },
              !0
            ),
          g
        );
      }
      function getNearestItems(e, l, c, d, m, g) {
        let y;
        return g || e.isPointInArea(l)
          ? "r" !== c || d
            ? (function (e, l, c, d, m, g) {
                let y = [],
                  b = (function (e) {
                    let l = -1 !== e.indexOf("x"),
                      c = -1 !== e.indexOf("y");
                    return function (e, d) {
                      let m = l ? Math.abs(e.x - d.x) : 0,
                        g = c ? Math.abs(e.y - d.y) : 0;
                      return Math.sqrt(Math.pow(m, 2) + Math.pow(g, 2));
                    };
                  })(c),
                  C = Number.POSITIVE_INFINITY;
                return (
                  evaluateInteractionItems(e, c, l, function (c, P, I) {
                    let B = c.inRange(l.x, l.y, m);
                    if (d && !B) return;
                    let N = c.getCenterPoint(m),
                      F = !!g || e.isPointInArea(N);
                    if (!F && !B) return;
                    let V = b(l, N);
                    V < C
                      ? ((y = [{ element: c, datasetIndex: P, index: I }]),
                        (C = V))
                      : V === C &&
                        y.push({ element: c, datasetIndex: P, index: I });
                  }),
                  y
                );
              })(e, l, c, d, m, g)
            : ((y = []),
              evaluateInteractionItems(e, c, l, function (e, c, d) {
                let { startAngle: g, endAngle: b } = e.getProps(
                    ["startAngle", "endAngle"],
                    m
                  ),
                  { angle: C } = getAngleFromPoint(e, { x: l.x, y: l.y });
                _angleBetween(C, g, b) &&
                  y.push({ element: e, datasetIndex: c, index: d });
              }),
              y)
          : [];
      }
      function getAxisItems(e, l, c, d, m) {
        let g = [],
          y = "x" === c ? "inXRange" : "inYRange",
          b = !1;
        return (evaluateInteractionItems(e, c, l, (e, d, C) => {
          e[y] &&
            e[y](l[c], m) &&
            (g.push({ element: e, datasetIndex: d, index: C }),
            (b = b || e.inRange(l.x, l.y, m)));
        }),
        d && !b)
          ? []
          : g;
      }
      var eD = {
        modes: {
          index(e, l, c, d) {
            let m = getRelativePosition(l, e),
              g = c.axis || "x",
              y = c.includeInvisible || !1,
              b = c.intersect
                ? getIntersectItems(e, m, g, d, y)
                : getNearestItems(e, m, g, !1, d, y),
              C = [];
            return b.length
              ? (e.getSortedVisibleDatasetMetas().forEach((e) => {
                  let l = b[0].index,
                    c = e.data[l];
                  c &&
                    !c.skip &&
                    C.push({ element: c, datasetIndex: e.index, index: l });
                }),
                C)
              : [];
          },
          dataset(e, l, c, d) {
            let m = getRelativePosition(l, e),
              g = c.axis || "xy",
              y = c.includeInvisible || !1,
              b = c.intersect
                ? getIntersectItems(e, m, g, d, y)
                : getNearestItems(e, m, g, !1, d, y);
            if (b.length > 0) {
              let l = b[0].datasetIndex,
                c = e.getDatasetMeta(l).data;
              b = [];
              for (let e = 0; e < c.length; ++e)
                b.push({ element: c[e], datasetIndex: l, index: e });
            }
            return b;
          },
          point(e, l, c, d) {
            let m = getRelativePosition(l, e),
              g = c.axis || "xy",
              y = c.includeInvisible || !1;
            return getIntersectItems(e, m, g, d, y);
          },
          nearest(e, l, c, d) {
            let m = getRelativePosition(l, e),
              g = c.axis || "xy",
              y = c.includeInvisible || !1;
            return getNearestItems(e, m, g, c.intersect, d, y);
          },
          x(e, l, c, d) {
            let m = getRelativePosition(l, e);
            return getAxisItems(e, m, "x", c.intersect, d);
          },
          y(e, l, c, d) {
            let m = getRelativePosition(l, e);
            return getAxisItems(e, m, "y", c.intersect, d);
          },
        },
      };
      let eN = ["left", "top", "right", "bottom"];
      function filterByPosition(e, l) {
        return e.filter((e) => e.pos === l);
      }
      function filterDynamicPositionByAxis(e, l) {
        return e.filter((e) => -1 === eN.indexOf(e.pos) && e.box.axis === l);
      }
      function sortByWeight(e, l) {
        return e.sort((e, c) => {
          let d = l ? c : e,
            m = l ? e : c;
          return d.weight === m.weight
            ? d.index - m.index
            : d.weight - m.weight;
        });
      }
      function getCombinedMax(e, l, c, d) {
        return Math.max(e[c], l[c]) + Math.max(e[d], l[d]);
      }
      function updateMaxPadding(e, l) {
        (e.top = Math.max(e.top, l.top)),
          (e.left = Math.max(e.left, l.left)),
          (e.bottom = Math.max(e.bottom, l.bottom)),
          (e.right = Math.max(e.right, l.right));
      }
      function fitBoxes(e, l, c, d) {
        let m, g, y, b, C, P;
        let I = [];
        for (m = 0, g = e.length, C = 0; m < g; ++m) {
          (b = (y = e[m]).box).update(
            y.width || l.w,
            y.height || l.h,
            (function (e, l) {
              let c = l.maxPadding;
              return (function (e) {
                let d = { left: 0, top: 0, right: 0, bottom: 0 };
                return (
                  e.forEach((e) => {
                    d[e] = Math.max(l[e], c[e]);
                  }),
                  d
                );
              })(e ? ["left", "right"] : ["top", "bottom"]);
            })(y.horizontal, l)
          );
          let { same: g, other: B } = (function (e, l, c, d) {
            let { pos: m, box: g } = c,
              y = e.maxPadding;
            if (!isObject(m)) {
              c.size && (e[m] -= c.size);
              let l = d[c.stack] || { size: 0, count: 1 };
              (l.size = Math.max(l.size, c.horizontal ? g.height : g.width)),
                (c.size = l.size / l.count),
                (e[m] += c.size);
            }
            g.getPadding && updateMaxPadding(y, g.getPadding());
            let b = Math.max(
                0,
                l.outerWidth - getCombinedMax(y, e, "left", "right")
              ),
              C = Math.max(
                0,
                l.outerHeight - getCombinedMax(y, e, "top", "bottom")
              ),
              P = b !== e.w,
              I = C !== e.h;
            return (
              (e.w = b),
              (e.h = C),
              c.horizontal ? { same: P, other: I } : { same: I, other: P }
            );
          })(l, c, y, d);
          (C |= g && I.length), (P = P || B), b.fullSize || I.push(y);
        }
        return (C && fitBoxes(I, l, c, d)) || P;
      }
      function setBoxDims(e, l, c, d, m) {
        (e.top = c),
          (e.left = l),
          (e.right = l + d),
          (e.bottom = c + m),
          (e.width = d),
          (e.height = m);
      }
      function placeBoxes(e, l, c, d) {
        let m = c.padding,
          { x: g, y } = l;
        for (let b of e) {
          let e = b.box,
            C = d[b.stack] || { count: 1, placed: 0, weight: 1 },
            P = b.stackWeight / C.weight || 1;
          if (b.horizontal) {
            let d = l.w * P,
              g = C.size || e.height;
            defined(C.start) && (y = C.start),
              e.fullSize
                ? setBoxDims(e, m.left, y, c.outerWidth - m.right - m.left, g)
                : setBoxDims(e, l.left + C.placed, y, d, g),
              (C.start = y),
              (C.placed += d),
              (y = e.bottom);
          } else {
            let d = l.h * P,
              y = C.size || e.width;
            defined(C.start) && (g = C.start),
              e.fullSize
                ? setBoxDims(e, g, m.top, y, c.outerHeight - m.bottom - m.top)
                : setBoxDims(e, g, l.top + C.placed, y, d),
              (C.start = g),
              (C.placed += d),
              (g = e.right);
          }
        }
        (l.x = g), (l.y = y);
      }
      var eR = {
        addBox(e, l) {
          e.boxes || (e.boxes = []),
            (l.fullSize = l.fullSize || !1),
            (l.position = l.position || "top"),
            (l.weight = l.weight || 0),
            (l._layers =
              l._layers ||
              function () {
                return [
                  {
                    z: 0,
                    draw(e) {
                      l.draw(e);
                    },
                  },
                ];
              }),
            e.boxes.push(l);
        },
        removeBox(e, l) {
          let c = e.boxes ? e.boxes.indexOf(l) : -1;
          -1 !== c && e.boxes.splice(c, 1);
        },
        configure(e, l, c) {
          (l.fullSize = c.fullSize),
            (l.position = c.position),
            (l.weight = c.weight);
        },
        update(e, l, c, d) {
          if (!e) return;
          let m = toPadding(e.options.layout.padding),
            g = Math.max(l - m.width, 0),
            y = Math.max(c - m.height, 0),
            b = (function (e) {
              let l = (function (e) {
                  let l, c, d, m, g, y;
                  let b = [];
                  for (l = 0, c = (e || []).length; l < c; ++l)
                    (d = e[l]),
                      ({
                        position: m,
                        options: { stack: g, stackWeight: y = 1 },
                      } = d),
                      b.push({
                        index: l,
                        box: d,
                        pos: m,
                        horizontal: d.isHorizontal(),
                        weight: d.weight,
                        stack: g && m + g,
                        stackWeight: y,
                      });
                  return b;
                })(e),
                c = sortByWeight(
                  l.filter((e) => e.box.fullSize),
                  !0
                ),
                d = sortByWeight(filterByPosition(l, "left"), !0),
                m = sortByWeight(filterByPosition(l, "right")),
                g = sortByWeight(filterByPosition(l, "top"), !0),
                y = sortByWeight(filterByPosition(l, "bottom")),
                b = filterDynamicPositionByAxis(l, "x"),
                C = filterDynamicPositionByAxis(l, "y");
              return {
                fullSize: c,
                leftAndTop: d.concat(g),
                rightAndBottom: m.concat(C).concat(y).concat(b),
                chartArea: filterByPosition(l, "chartArea"),
                vertical: d.concat(m).concat(C),
                horizontal: g.concat(y).concat(b),
              };
            })(e.boxes),
            C = b.vertical,
            P = b.horizontal;
          each(e.boxes, (e) => {
            "function" == typeof e.beforeLayout && e.beforeLayout();
          });
          let I =
              C.reduce(
                (e, l) =>
                  l.box.options && !1 === l.box.options.display ? e : e + 1,
                0
              ) || 1,
            B = Object.freeze({
              outerWidth: l,
              outerHeight: c,
              padding: m,
              availableWidth: g,
              availableHeight: y,
              vBoxMaxWidth: g / 2 / I,
              hBoxMaxHeight: y / 2,
            }),
            N = Object.assign({}, m);
          updateMaxPadding(N, toPadding(d));
          let F = Object.assign(
              { maxPadding: N, w: g, h: y, x: m.left, y: m.top },
              m
            ),
            V = (function (e, l) {
              let c, d, m;
              let g = (function (e) {
                  let l = {};
                  for (let c of e) {
                    let { stack: e, pos: d, stackWeight: m } = c;
                    if (!e || !eN.includes(d)) continue;
                    let g =
                      l[e] ||
                      (l[e] = { count: 0, placed: 0, weight: 0, size: 0 });
                    g.count++, (g.weight += m);
                  }
                  return l;
                })(e),
                { vBoxMaxWidth: y, hBoxMaxHeight: b } = l;
              for (c = 0, d = e.length; c < d; ++c) {
                m = e[c];
                let { fullSize: d } = m.box,
                  C = g[m.stack],
                  P = C && m.stackWeight / C.weight;
                m.horizontal
                  ? ((m.width = P ? P * y : d && l.availableWidth),
                    (m.height = b))
                  : ((m.width = y),
                    (m.height = P ? P * b : d && l.availableHeight));
              }
              return g;
            })(C.concat(P), B);
          fitBoxes(b.fullSize, F, B, V),
            fitBoxes(C, F, B, V),
            fitBoxes(P, F, B, V) && fitBoxes(C, F, B, V),
            (function (e) {
              let l = e.maxPadding;
              function updatePos(c) {
                let d = Math.max(l[c] - e[c], 0);
                return (e[c] += d), d;
              }
              (e.y += updatePos("top")),
                (e.x += updatePos("left")),
                updatePos("right"),
                updatePos("bottom");
            })(F),
            placeBoxes(b.leftAndTop, F, B, V),
            (F.x += F.w),
            (F.y += F.h),
            placeBoxes(b.rightAndBottom, F, B, V),
            (e.chartArea = {
              left: F.left,
              top: F.top,
              right: F.left + F.w,
              bottom: F.top + F.h,
              height: F.h,
              width: F.w,
            }),
            each(b.chartArea, (l) => {
              let c = l.box;
              Object.assign(c, e.chartArea),
                c.update(F.w, F.h, { left: 0, top: 0, right: 0, bottom: 0 });
            });
        },
      };
      let BasePlatform = class BasePlatform {
        acquireContext(e, l) {}
        releaseContext(e) {
          return !1;
        }
        addEventListener(e, l, c) {}
        removeEventListener(e, l, c) {}
        getDevicePixelRatio() {
          return 1;
        }
        getMaximumSize(e, l, c, d) {
          return (
            (l = Math.max(0, l || e.width)),
            (c = c || e.height),
            { width: l, height: Math.max(0, d ? Math.floor(l / d) : c) }
          );
        }
        isAttached(e) {
          return !0;
        }
        updateConfig(e) {}
      };
      let BasicPlatform = class BasicPlatform extends BasePlatform {
        acquireContext(e) {
          return (e && e.getContext && e.getContext("2d")) || null;
        }
        updateConfig(e) {
          e.options.animation = !1;
        }
      };
      let eF = "$chartjs",
        eL = {
          touchstart: "mousedown",
          touchmove: "mousemove",
          touchend: "mouseup",
          pointerenter: "mouseenter",
          pointerdown: "mousedown",
          pointermove: "mousemove",
          pointerup: "mouseup",
          pointerleave: "mouseout",
          pointerout: "mouseout",
        },
        isNullOrEmpty = (e) => null === e || "" === e,
        eU = !!eM && { passive: !0 };
      function removeListener(e, l, c) {
        e && e.canvas && e.canvas.removeEventListener(l, c, eU);
      }
      function nodeListContains(e, l) {
        for (let c of e) if (c === l || c.contains(l)) return !0;
      }
      function createAttachObserver(e, l, c) {
        let d = e.canvas,
          m = new MutationObserver((e) => {
            let l = !1;
            for (let c of e)
              l =
                (l = l || nodeListContains(c.addedNodes, d)) &&
                !nodeListContains(c.removedNodes, d);
            l && c();
          });
        return m.observe(document, { childList: !0, subtree: !0 }), m;
      }
      function createDetachObserver(e, l, c) {
        let d = e.canvas,
          m = new MutationObserver((e) => {
            let l = !1;
            for (let c of e)
              l =
                (l = l || nodeListContains(c.removedNodes, d)) &&
                !nodeListContains(c.addedNodes, d);
            l && c();
          });
        return m.observe(document, { childList: !0, subtree: !0 }), m;
      }
      let ez = new Map(),
        eW = 0;
      function onWindowResize() {
        let e = window.devicePixelRatio;
        e !== eW &&
          ((eW = e),
          ez.forEach((l, c) => {
            c.currentDevicePixelRatio !== e && l();
          }));
      }
      function createResizeObserver(e, l, c) {
        let d = e.canvas,
          m = d && _getParentNode(d);
        if (!m) return;
        let g = throttled((e, l) => {
            let d = m.clientWidth;
            c(e, l), d < m.clientWidth && c();
          }, window),
          y = new ResizeObserver((e) => {
            let l = e[0],
              c = l.contentRect.width,
              d = l.contentRect.height;
            (0 !== c || 0 !== d) && g(c, d);
          });
        return (
          y.observe(m),
          ez.size || window.addEventListener("resize", onWindowResize),
          ez.set(e, g),
          y
        );
      }
      function releaseObserver(e, l, c) {
        c && c.disconnect(),
          "resize" === l &&
            (ez.delete(e),
            ez.size || window.removeEventListener("resize", onWindowResize));
      }
      function createProxyAndListen(e, l, c) {
        let d = e.canvas,
          m = throttled((l) => {
            null !== e.ctx &&
              c(
                (function (e, l) {
                  let c = eL[e.type] || e.type,
                    { x: d, y: m } = getRelativePosition(e, l);
                  return {
                    type: c,
                    chart: l,
                    native: e,
                    x: void 0 !== d ? d : null,
                    y: void 0 !== m ? m : null,
                  };
                })(l, e)
              );
          }, e);
        return d && d.addEventListener(l, m, eU), m;
      }
      let DomPlatform = class DomPlatform extends BasePlatform {
        acquireContext(e, l) {
          let c = e && e.getContext && e.getContext("2d");
          return c && c.canvas === e
            ? (!(function (e, l) {
                let c = e.style,
                  d = e.getAttribute("height"),
                  m = e.getAttribute("width");
                if (
                  ((e[eF] = {
                    initial: {
                      height: d,
                      width: m,
                      style: {
                        display: c.display,
                        height: c.height,
                        width: c.width,
                      },
                    },
                  }),
                  (c.display = c.display || "block"),
                  (c.boxSizing = c.boxSizing || "border-box"),
                  isNullOrEmpty(m))
                ) {
                  let l = readUsedSize(e, "width");
                  void 0 !== l && (e.width = l);
                }
                if (isNullOrEmpty(d)) {
                  if ("" === e.style.height) e.height = e.width / (l || 2);
                  else {
                    let l = readUsedSize(e, "height");
                    void 0 !== l && (e.height = l);
                  }
                }
              })(e, l),
              c)
            : null;
        }
        releaseContext(e) {
          let l = e.canvas;
          if (!l[eF]) return !1;
          let c = l[eF].initial;
          ["height", "width"].forEach((e) => {
            let d = c[e];
            isNullOrUndef(d) ? l.removeAttribute(e) : l.setAttribute(e, d);
          });
          let d = c.style || {};
          return (
            Object.keys(d).forEach((e) => {
              l.style[e] = d[e];
            }),
            (l.width = l.width),
            delete l[eF],
            !0
          );
        }
        addEventListener(e, l, c) {
          this.removeEventListener(e, l);
          let d = e.$proxies || (e.$proxies = {}),
            m =
              {
                attach: createAttachObserver,
                detach: createDetachObserver,
                resize: createResizeObserver,
              }[l] || createProxyAndListen;
          d[l] = m(e, l, c);
        }
        removeEventListener(e, l) {
          let c = e.$proxies || (e.$proxies = {}),
            d = c[l];
          if (!d) return;
          let m =
            {
              attach: releaseObserver,
              detach: releaseObserver,
              resize: releaseObserver,
            }[l] || removeListener;
          m(e, l, d), (c[l] = void 0);
        }
        getDevicePixelRatio() {
          return window.devicePixelRatio;
        }
        getMaximumSize(e, l, c, d) {
          return (function (e, l, c, d) {
            let m = getComputedStyle(e),
              g = getPositionedStyle(m, "margin"),
              y = parseMaxStyle(m.maxWidth, e, "clientWidth") || es,
              b = parseMaxStyle(m.maxHeight, e, "clientHeight") || es,
              C = (function (e, l, c) {
                let d, m;
                if (void 0 === l || void 0 === c) {
                  let g = e && _getParentNode(e);
                  if (g) {
                    let e = g.getBoundingClientRect(),
                      y = getComputedStyle(g),
                      b = getPositionedStyle(y, "border", "width"),
                      C = getPositionedStyle(y, "padding");
                    (l = e.width - C.width - b.width),
                      (c = e.height - C.height - b.height),
                      (d = parseMaxStyle(y.maxWidth, g, "clientWidth")),
                      (m = parseMaxStyle(y.maxHeight, g, "clientHeight"));
                  } else (l = e.clientWidth), (c = e.clientHeight);
                }
                return {
                  width: l,
                  height: c,
                  maxWidth: d || es,
                  maxHeight: m || es,
                };
              })(e, l, c),
              { width: P, height: I } = C;
            if ("content-box" === m.boxSizing) {
              let e = getPositionedStyle(m, "border", "width"),
                l = getPositionedStyle(m, "padding");
              (P -= l.width + e.width), (I -= l.height + e.height);
            }
            (P = Math.max(0, P - g.width)),
              (I = Math.max(0, d ? P / d : I - g.height)),
              (P = round1(Math.min(P, y, C.maxWidth))),
              (I = round1(Math.min(I, b, C.maxHeight))),
              P && !I && (I = round1(P / 2));
            let B = void 0 !== l || void 0 !== c;
            return (
              B &&
                d &&
                C.height &&
                I > C.height &&
                (P = round1(Math.floor((I = C.height) * d))),
              { width: P, height: I }
            );
          })(e, l, c, d);
        }
        isAttached(e) {
          let l = e && _getParentNode(e);
          return !!(l && l.isConnected);
        }
      };
      let Element = class Element {
        static defaults = {};
        static defaultRoutes = void 0;
        x;
        y;
        active = !1;
        options;
        $animations;
        tooltipPosition(e) {
          let { x: l, y: c } = this.getProps(["x", "y"], e);
          return { x: l, y: c };
        }
        hasValue() {
          return isNumber(this.x) && isNumber(this.y);
        }
        getProps(e, l) {
          let c = this.$animations;
          if (!l || !c) return this;
          let d = {};
          return (
            e.forEach((e) => {
              d[e] = c[e] && c[e].active() ? c[e]._to : this[e];
            }),
            d
          );
        }
      };
      function skip(e, l, c, d, m) {
        let g, y, b;
        let C = valueOrDefault(d, 0),
          P = Math.min(valueOrDefault(m, e.length), e.length),
          I = 0;
        for (
          c = Math.ceil(c), m && (c = (g = m - d) / Math.floor(g / c)), b = C;
          b < 0;

        )
          b = Math.round(C + ++I * c);
        for (y = Math.max(C, 0); y < P; y++)
          y === b && (l.push(e[y]), (b = Math.round(C + ++I * c)));
      }
      let reverseAlign = (e) =>
          "left" === e ? "right" : "right" === e ? "left" : e,
        offsetFromEdge = (e, l, c) =>
          "top" === l || "left" === l ? e[l] + c : e[l] - c,
        getTicksLimit = (e, l) => Math.min(l || e, e);
      function sample(e, l) {
        let c = [],
          d = e.length / l,
          m = e.length,
          g = 0;
        for (; g < m; g += d) c.push(e[Math.floor(g)]);
        return c;
      }
      function getTickMarkLength(e) {
        return e.drawTicks ? e.tickLength : 0;
      }
      function getTitleHeight(e, l) {
        if (!e.display) return 0;
        let c = toFont(e.font, l),
          d = toPadding(e.padding),
          m = isArray(e.text) ? e.text.length : 1;
        return m * c.lineHeight + d.height;
      }
      let Scale = class Scale extends Element {
        constructor(e) {
          super(),
            (this.id = e.id),
            (this.type = e.type),
            (this.options = void 0),
            (this.ctx = e.ctx),
            (this.chart = e.chart),
            (this.top = void 0),
            (this.bottom = void 0),
            (this.left = void 0),
            (this.right = void 0),
            (this.width = void 0),
            (this.height = void 0),
            (this._margins = { left: 0, right: 0, top: 0, bottom: 0 }),
            (this.maxWidth = void 0),
            (this.maxHeight = void 0),
            (this.paddingTop = void 0),
            (this.paddingBottom = void 0),
            (this.paddingLeft = void 0),
            (this.paddingRight = void 0),
            (this.axis = void 0),
            (this.labelRotation = void 0),
            (this.min = void 0),
            (this.max = void 0),
            (this._range = void 0),
            (this.ticks = []),
            (this._gridLineItems = null),
            (this._labelItems = null),
            (this._labelSizes = null),
            (this._length = 0),
            (this._maxLength = 0),
            (this._longestTextCache = {}),
            (this._startPixel = void 0),
            (this._endPixel = void 0),
            (this._reversePixels = !1),
            (this._userMax = void 0),
            (this._userMin = void 0),
            (this._suggestedMax = void 0),
            (this._suggestedMin = void 0),
            (this._ticksLength = 0),
            (this._borderValue = 0),
            (this._cache = {}),
            (this._dataLimitsCached = !1),
            (this.$context = void 0);
        }
        init(e) {
          (this.options = e.setContext(this.getContext())),
            (this.axis = e.axis),
            (this._userMin = this.parse(e.min)),
            (this._userMax = this.parse(e.max)),
            (this._suggestedMin = this.parse(e.suggestedMin)),
            (this._suggestedMax = this.parse(e.suggestedMax));
        }
        parse(e, l) {
          return e;
        }
        getUserBounds() {
          let {
            _userMin: e,
            _userMax: l,
            _suggestedMin: c,
            _suggestedMax: d,
          } = this;
          return (
            (e = finiteOrDefault(e, Number.POSITIVE_INFINITY)),
            (l = finiteOrDefault(l, Number.NEGATIVE_INFINITY)),
            (c = finiteOrDefault(c, Number.POSITIVE_INFINITY)),
            (d = finiteOrDefault(d, Number.NEGATIVE_INFINITY)),
            {
              min: finiteOrDefault(e, c),
              max: finiteOrDefault(l, d),
              minDefined: isNumberFinite(e),
              maxDefined: isNumberFinite(l),
            }
          );
        }
        getMinMax(e) {
          let l,
            {
              min: c,
              max: d,
              minDefined: m,
              maxDefined: g,
            } = this.getUserBounds();
          if (m && g) return { min: c, max: d };
          let y = this.getMatchingVisibleMetas();
          for (let b = 0, C = y.length; b < C; ++b)
            (l = y[b].controller.getMinMax(this, e)),
              m || (c = Math.min(c, l.min)),
              g || (d = Math.max(d, l.max));
          return (
            (c = g && c > d ? d : c),
            (d = m && c > d ? c : d),
            {
              min: finiteOrDefault(c, finiteOrDefault(d, c)),
              max: finiteOrDefault(d, finiteOrDefault(c, d)),
            }
          );
        }
        getPadding() {
          return {
            left: this.paddingLeft || 0,
            top: this.paddingTop || 0,
            right: this.paddingRight || 0,
            bottom: this.paddingBottom || 0,
          };
        }
        getTicks() {
          return this.ticks;
        }
        getLabels() {
          let e = this.chart.data;
          return (
            this.options.labels ||
            (this.isHorizontal() ? e.xLabels : e.yLabels) ||
            e.labels ||
            []
          );
        }
        getLabelItems(e = this.chart.chartArea) {
          let l =
            this._labelItems || (this._labelItems = this._computeLabelItems(e));
          return l;
        }
        beforeLayout() {
          (this._cache = {}), (this._dataLimitsCached = !1);
        }
        beforeUpdate() {
          callback(this.options.beforeUpdate, [this]);
        }
        update(e, l, c) {
          let { beginAtZero: d, grace: m, ticks: g } = this.options,
            y = g.sampleSize;
          this.beforeUpdate(),
            (this.maxWidth = e),
            (this.maxHeight = l),
            (this._margins = c =
              Object.assign({ left: 0, right: 0, top: 0, bottom: 0 }, c)),
            (this.ticks = null),
            (this._labelSizes = null),
            (this._gridLineItems = null),
            (this._labelItems = null),
            this.beforeSetDimensions(),
            this.setDimensions(),
            this.afterSetDimensions(),
            (this._maxLength = this.isHorizontal()
              ? this.width + c.left + c.right
              : this.height + c.top + c.bottom),
            this._dataLimitsCached ||
              (this.beforeDataLimits(),
              this.determineDataLimits(),
              this.afterDataLimits(),
              (this._range = (function (e, l, c) {
                let { min: d, max: m } = e,
                  g = toDimension(l, (m - d) / 2),
                  keepZero = (e, l) => (c && 0 === e ? 0 : e + l);
                return { min: keepZero(d, -Math.abs(g)), max: keepZero(m, g) };
              })(this, m, d)),
              (this._dataLimitsCached = !0)),
            this.beforeBuildTicks(),
            (this.ticks = this.buildTicks() || []),
            this.afterBuildTicks();
          let b = y < this.ticks.length;
          this._convertTicksToLabels(b ? sample(this.ticks, y) : this.ticks),
            this.configure(),
            this.beforeCalculateLabelRotation(),
            this.calculateLabelRotation(),
            this.afterCalculateLabelRotation(),
            g.display &&
              (g.autoSkip || "auto" === g.source) &&
              ((this.ticks = (function (e, l) {
                let c = e.options.ticks,
                  d = (function (e) {
                    let l = e.options.offset,
                      c = e._tickSize(),
                      d = e._length / c + (l ? 0 : 1),
                      m = e._maxLength / c;
                    return Math.floor(Math.min(d, m));
                  })(e),
                  m = Math.min(c.maxTicksLimit || d, d),
                  g = c.major.enabled
                    ? (function (e) {
                        let l, c;
                        let d = [];
                        for (l = 0, c = e.length; l < c; l++)
                          e[l].major && d.push(l);
                        return d;
                      })(l)
                    : [],
                  y = g.length,
                  b = g[0],
                  C = g[y - 1],
                  P = [];
                if (y > m)
                  return (
                    (function (e, l, c, d) {
                      let m,
                        g = 0,
                        y = c[0];
                      for (m = 0, d = Math.ceil(d); m < e.length; m++)
                        m === y && (l.push(e[m]), (y = c[++g * d]));
                    })(l, P, g, y / m),
                    P
                  );
                let I = (function (e, l, c) {
                  let d = (function (e) {
                      let l, c;
                      let d = e.length;
                      if (d < 2) return !1;
                      for (c = e[0], l = 1; l < d; ++l)
                        if (e[l] - e[l - 1] !== c) return !1;
                      return c;
                    })(e),
                    m = l.length / c;
                  if (!d) return Math.max(m, 1);
                  let g = (function (e) {
                    let l;
                    let c = [],
                      d = Math.sqrt(e);
                    for (l = 1; l < d; l++)
                      e % l == 0 && (c.push(l), c.push(e / l));
                    return (
                      d === (0 | d) && c.push(d),
                      c.sort((e, l) => e - l).pop(),
                      c
                    );
                  })(d);
                  for (let e = 0, l = g.length - 1; e < l; e++) {
                    let l = g[e];
                    if (l > m) return l;
                  }
                  return Math.max(m, 1);
                })(g, l, m);
                if (y > 0) {
                  let e, c;
                  let d = y > 1 ? Math.round((C - b) / (y - 1)) : null;
                  for (
                    skip(l, P, I, isNullOrUndef(d) ? 0 : b - d, b),
                      e = 0,
                      c = y - 1;
                    e < c;
                    e++
                  )
                    skip(l, P, I, g[e], g[e + 1]);
                  return (
                    skip(l, P, I, C, isNullOrUndef(d) ? l.length : C + d), P
                  );
                }
                return skip(l, P, I), P;
              })(this, this.ticks)),
              (this._labelSizes = null),
              this.afterAutoSkip()),
            b && this._convertTicksToLabels(this.ticks),
            this.beforeFit(),
            this.fit(),
            this.afterFit(),
            this.afterUpdate();
        }
        configure() {
          let e,
            l,
            c = this.options.reverse;
          this.isHorizontal()
            ? ((e = this.left), (l = this.right))
            : ((e = this.top), (l = this.bottom), (c = !c)),
            (this._startPixel = e),
            (this._endPixel = l),
            (this._reversePixels = c),
            (this._length = l - e),
            (this._alignToPixels = this.options.alignToPixels);
        }
        afterUpdate() {
          callback(this.options.afterUpdate, [this]);
        }
        beforeSetDimensions() {
          callback(this.options.beforeSetDimensions, [this]);
        }
        setDimensions() {
          this.isHorizontal()
            ? ((this.width = this.maxWidth),
              (this.left = 0),
              (this.right = this.width))
            : ((this.height = this.maxHeight),
              (this.top = 0),
              (this.bottom = this.height)),
            (this.paddingLeft = 0),
            (this.paddingTop = 0),
            (this.paddingRight = 0),
            (this.paddingBottom = 0);
        }
        afterSetDimensions() {
          callback(this.options.afterSetDimensions, [this]);
        }
        _callHooks(e) {
          this.chart.notifyPlugins(e, this.getContext()),
            callback(this.options[e], [this]);
        }
        beforeDataLimits() {
          this._callHooks("beforeDataLimits");
        }
        determineDataLimits() {}
        afterDataLimits() {
          this._callHooks("afterDataLimits");
        }
        beforeBuildTicks() {
          this._callHooks("beforeBuildTicks");
        }
        buildTicks() {
          return [];
        }
        afterBuildTicks() {
          this._callHooks("afterBuildTicks");
        }
        beforeTickToLabelConversion() {
          callback(this.options.beforeTickToLabelConversion, [this]);
        }
        generateTickLabels(e) {
          let l, c, d;
          let m = this.options.ticks;
          for (l = 0, c = e.length; l < c; l++)
            (d = e[l]).label = callback(m.callback, [d.value, l, e], this);
        }
        afterTickToLabelConversion() {
          callback(this.options.afterTickToLabelConversion, [this]);
        }
        beforeCalculateLabelRotation() {
          callback(this.options.beforeCalculateLabelRotation, [this]);
        }
        calculateLabelRotation() {
          let e, l, c;
          let d = this.options,
            m = d.ticks,
            g = getTicksLimit(this.ticks.length, d.ticks.maxTicksLimit),
            y = m.minRotation || 0,
            b = m.maxRotation,
            C = y;
          if (
            !this._isVisible() ||
            !m.display ||
            y >= b ||
            g <= 1 ||
            !this.isHorizontal()
          ) {
            this.labelRotation = y;
            return;
          }
          let P = this._getLabelSizes(),
            I = P.widest.width,
            B = P.highest.height,
            N = _limitValue(this.chart.width - I, 0, this.maxWidth);
          I + 6 > (e = d.offset ? this.maxWidth / g : N / (g - 1)) &&
            ((e = N / (g - (d.offset ? 0.5 : 1))),
            (l =
              this.maxHeight -
              getTickMarkLength(d.grid) -
              m.padding -
              getTitleHeight(d.title, this.chart.options.font)),
            (c = Math.sqrt(I * I + B * B)),
            (C = Math.max(
              y,
              Math.min(
                b,
                (C =
                  Math.min(
                    Math.asin(_limitValue((P.highest.height + 6) / e, -1, 1)),
                    Math.asin(_limitValue(l / c, -1, 1)) -
                      Math.asin(_limitValue(B / c, -1, 1))
                  ) *
                  (180 / ei))
              )
            ))),
            (this.labelRotation = C);
        }
        afterCalculateLabelRotation() {
          callback(this.options.afterCalculateLabelRotation, [this]);
        }
        afterAutoSkip() {}
        beforeFit() {
          callback(this.options.beforeFit, [this]);
        }
        fit() {
          let e = { width: 0, height: 0 },
            {
              chart: l,
              options: { ticks: c, title: d, grid: m },
            } = this,
            g = this._isVisible(),
            y = this.isHorizontal();
          if (g) {
            let g = getTitleHeight(d, l.options.font);
            if (
              (y
                ? ((e.width = this.maxWidth),
                  (e.height = getTickMarkLength(m) + g))
                : ((e.height = this.maxHeight),
                  (e.width = getTickMarkLength(m) + g)),
              c.display && this.ticks.length)
            ) {
              let {
                  first: l,
                  last: d,
                  widest: m,
                  highest: g,
                } = this._getLabelSizes(),
                b = 2 * c.padding,
                C = toRadians(this.labelRotation),
                P = Math.cos(C),
                I = Math.sin(C);
              if (y) {
                let l = c.mirror ? 0 : I * m.width + P * g.height;
                e.height = Math.min(this.maxHeight, e.height + l + b);
              } else {
                let l = c.mirror ? 0 : P * m.width + I * g.height;
                e.width = Math.min(this.maxWidth, e.width + l + b);
              }
              this._calculatePadding(l, d, I, P);
            }
          }
          this._handleMargins(),
            y
              ? ((this.width = this._length =
                  l.width - this._margins.left - this._margins.right),
                (this.height = e.height))
              : ((this.width = e.width),
                (this.height = this._length =
                  l.height - this._margins.top - this._margins.bottom));
        }
        _calculatePadding(e, l, c, d) {
          let {
              ticks: { align: m, padding: g },
              position: y,
            } = this.options,
            b = 0 !== this.labelRotation,
            C = "top" !== y && "x" === this.axis;
          if (this.isHorizontal()) {
            let y = this.getPixelForTick(0) - this.left,
              P = this.right - this.getPixelForTick(this.ticks.length - 1),
              I = 0,
              B = 0;
            b
              ? C
                ? ((I = d * e.width), (B = c * l.height))
                : ((I = c * e.height), (B = d * l.width))
              : "start" === m
              ? (B = l.width)
              : "end" === m
              ? (I = e.width)
              : "inner" !== m && ((I = e.width / 2), (B = l.width / 2)),
              (this.paddingLeft = Math.max(
                ((I - y + g) * this.width) / (this.width - y),
                0
              )),
              (this.paddingRight = Math.max(
                ((B - P + g) * this.width) / (this.width - P),
                0
              ));
          } else {
            let c = l.height / 2,
              d = e.height / 2;
            "start" === m
              ? ((c = 0), (d = e.height))
              : "end" === m && ((c = l.height), (d = 0)),
              (this.paddingTop = c + g),
              (this.paddingBottom = d + g);
          }
        }
        _handleMargins() {
          this._margins &&
            ((this._margins.left = Math.max(
              this.paddingLeft,
              this._margins.left
            )),
            (this._margins.top = Math.max(this.paddingTop, this._margins.top)),
            (this._margins.right = Math.max(
              this.paddingRight,
              this._margins.right
            )),
            (this._margins.bottom = Math.max(
              this.paddingBottom,
              this._margins.bottom
            )));
        }
        afterFit() {
          callback(this.options.afterFit, [this]);
        }
        isHorizontal() {
          let { axis: e, position: l } = this.options;
          return "top" === l || "bottom" === l || "x" === e;
        }
        isFullSize() {
          return this.options.fullSize;
        }
        _convertTicksToLabels(e) {
          let l, c;
          for (
            this.beforeTickToLabelConversion(),
              this.generateTickLabels(e),
              l = 0,
              c = e.length;
            l < c;
            l++
          )
            isNullOrUndef(e[l].label) && (e.splice(l, 1), c--, l--);
          this.afterTickToLabelConversion();
        }
        _getLabelSizes() {
          let e = this._labelSizes;
          if (!e) {
            let l = this.options.ticks.sampleSize,
              c = this.ticks;
            l < c.length && (c = sample(c, l)),
              (this._labelSizes = e =
                this._computeLabelSizes(
                  c,
                  c.length,
                  this.options.ticks.maxTicksLimit
                ));
          }
          return e;
        }
        _computeLabelSizes(e, l, c) {
          let d, m, g, y, b, C, P, I, B, N, F;
          let { ctx: V, _longestTextCache: G } = this,
            Q = [],
            $ = [],
            Z = Math.floor(l / getTicksLimit(l, c)),
            Y = 0,
            et = 0;
          for (d = 0; d < l; d += Z) {
            if (
              ((y = e[d].label),
              (b = this._resolveTickFontOptions(d)),
              (V.font = C = b.string),
              (P = G[C] = G[C] || { data: {}, gc: [] }),
              (I = b.lineHeight),
              (B = N = 0),
              isNullOrUndef(y) || isArray(y))
            ) {
              if (isArray(y))
                for (m = 0, g = y.length; m < g; ++m)
                  isNullOrUndef((F = y[m])) ||
                    isArray(F) ||
                    ((B = _measureText(V, P.data, P.gc, B, F)), (N += I));
            } else (B = _measureText(V, P.data, P.gc, B, y)), (N = I);
            Q.push(B), $.push(N), (Y = Math.max(B, Y)), (et = Math.max(N, et));
          }
          each(G, (e) => {
            let c;
            let d = e.gc,
              m = d.length / 2;
            if (m > l) {
              for (c = 0; c < m; ++c) delete e.data[d[c]];
              d.splice(0, m);
            }
          });
          let en = Q.indexOf(Y),
            er = $.indexOf(et),
            valueAt = (e) => ({ width: Q[e] || 0, height: $[e] || 0 });
          return {
            first: valueAt(0),
            last: valueAt(l - 1),
            widest: valueAt(en),
            highest: valueAt(er),
            widths: Q,
            heights: $,
          };
        }
        getLabelForValue(e) {
          return e;
        }
        getPixelForValue(e, l) {
          return NaN;
        }
        getValueForPixel(e) {}
        getPixelForTick(e) {
          let l = this.ticks;
          return e < 0 || e > l.length - 1
            ? null
            : this.getPixelForValue(l[e].value);
        }
        getPixelForDecimal(e) {
          this._reversePixels && (e = 1 - e);
          let l = this._startPixel + e * this._length;
          return _limitValue(
            this._alignToPixels ? _alignPixel(this.chart, l, 0) : l,
            -32768,
            32767
          );
        }
        getDecimalForPixel(e) {
          let l = (e - this._startPixel) / this._length;
          return this._reversePixels ? 1 - l : l;
        }
        getBasePixel() {
          return this.getPixelForValue(this.getBaseValue());
        }
        getBaseValue() {
          let { min: e, max: l } = this;
          return e < 0 && l < 0 ? l : e > 0 && l > 0 ? e : 0;
        }
        getContext(e) {
          let l = this.ticks || [];
          if (e >= 0 && e < l.length) {
            let c = l[e];
            return (
              c.$context ||
              (c.$context = createContext(this.getContext(), {
                tick: c,
                index: e,
                type: "tick",
              }))
            );
          }
          return (
            this.$context ||
            (this.$context = createContext(this.chart.getContext(), {
              scale: this,
              type: "scale",
            }))
          );
        }
        _tickSize() {
          let e = this.options.ticks,
            l = toRadians(this.labelRotation),
            c = Math.abs(Math.cos(l)),
            d = Math.abs(Math.sin(l)),
            m = this._getLabelSizes(),
            g = e.autoSkipPadding || 0,
            y = m ? m.widest.width + g : 0,
            b = m ? m.highest.height + g : 0;
          return this.isHorizontal()
            ? b * c > y * d
              ? y / c
              : b / d
            : b * d < y * c
            ? b / c
            : y / d;
        }
        _isVisible() {
          let e = this.options.display;
          return "auto" !== e ? !!e : this.getMatchingVisibleMetas().length > 0;
        }
        _computeGridLineItems(e) {
          let l, c, d, m, g, y, b, C, P, I, B, N;
          let F = this.axis,
            V = this.chart,
            G = this.options,
            { grid: Q, position: $, border: Z } = G,
            Y = Q.offset,
            et = this.isHorizontal(),
            en = this.ticks,
            er = en.length + (Y ? 1 : 0),
            ei = getTickMarkLength(Q),
            eo = [],
            ea = Z.setContext(this.getContext()),
            es = ea.display ? ea.width : 0,
            el = es / 2,
            alignBorderValue = function (e) {
              return _alignPixel(V, e, es);
            };
          if ("top" === $)
            (l = alignBorderValue(this.bottom)),
              (y = this.bottom - ei),
              (C = l - el),
              (I = alignBorderValue(e.top) + el),
              (N = e.bottom);
          else if ("bottom" === $)
            (l = alignBorderValue(this.top)),
              (I = e.top),
              (N = alignBorderValue(e.bottom) - el),
              (y = l + el),
              (C = this.top + ei);
          else if ("left" === $)
            (l = alignBorderValue(this.right)),
              (g = this.right - ei),
              (b = l - el),
              (P = alignBorderValue(e.left) + el),
              (B = e.right);
          else if ("right" === $)
            (l = alignBorderValue(this.left)),
              (P = e.left),
              (B = alignBorderValue(e.right) - el),
              (g = l + el),
              (b = this.left + ei);
          else if ("x" === F) {
            if ("center" === $)
              l = alignBorderValue((e.top + e.bottom) / 2 + 0.5);
            else if (isObject($)) {
              let e = Object.keys($)[0],
                c = $[e];
              l = alignBorderValue(this.chart.scales[e].getPixelForValue(c));
            }
            (I = e.top), (N = e.bottom), (C = (y = l + el) + ei);
          } else if ("y" === F) {
            if ("center" === $) l = alignBorderValue((e.left + e.right) / 2);
            else if (isObject($)) {
              let e = Object.keys($)[0],
                c = $[e];
              l = alignBorderValue(this.chart.scales[e].getPixelForValue(c));
            }
            (b = (g = l - el) - ei), (P = e.left), (B = e.right);
          }
          let ec = valueOrDefault(G.ticks.maxTicksLimit, er),
            eu = Math.max(1, Math.ceil(er / ec));
          for (c = 0; c < er; c += eu) {
            let e = this.getContext(c),
              l = Q.setContext(e),
              F = Z.setContext(e),
              G = l.lineWidth,
              $ = l.color,
              en = F.dash || [],
              er = F.dashOffset,
              ei = l.tickWidth,
              ea = l.tickColor,
              es = l.tickBorderDash || [],
              el = l.tickBorderDashOffset;
            void 0 !==
              (d = (function (e, l, c) {
                let d;
                let m = e.ticks.length,
                  g = Math.min(l, m - 1),
                  y = e._startPixel,
                  b = e._endPixel,
                  C = e.getPixelForTick(g);
                if (
                  !c ||
                  ((d =
                    1 === m
                      ? Math.max(C - y, b - C)
                      : 0 === l
                      ? (e.getPixelForTick(1) - C) / 2
                      : (C - e.getPixelForTick(g - 1)) / 2),
                  !((C += g < l ? d : -d) < y - 1e-6) && !(C > b + 1e-6))
                )
                  return C;
              })(this, c, Y)) &&
              ((m = _alignPixel(V, d, G)),
              et ? (g = b = P = B = m) : (y = C = I = N = m),
              eo.push({
                tx1: g,
                ty1: y,
                tx2: b,
                ty2: C,
                x1: P,
                y1: I,
                x2: B,
                y2: N,
                width: G,
                color: $,
                borderDash: en,
                borderDashOffset: er,
                tickWidth: ei,
                tickColor: ea,
                tickBorderDash: es,
                tickBorderDashOffset: el,
              }));
          }
          return (this._ticksLength = er), (this._borderValue = l), eo;
        }
        _computeLabelItems(e) {
          let l, c, d, m, g, y, b, C, P, I, B;
          let N = this.axis,
            F = this.options,
            { position: V, ticks: G } = F,
            Q = this.isHorizontal(),
            $ = this.ticks,
            { align: Z, crossAlign: Y, padding: et, mirror: en } = G,
            er = getTickMarkLength(F.grid),
            ei = er + et,
            eo = en ? -et : ei,
            ea = -toRadians(this.labelRotation),
            es = [],
            el = "middle";
          if ("top" === V)
            (g = this.bottom - eo), (y = this._getXAxisLabelAlignment());
          else if ("bottom" === V)
            (g = this.top + eo), (y = this._getXAxisLabelAlignment());
          else if ("left" === V) {
            let e = this._getYAxisLabelAlignment(er);
            (y = e.textAlign), (m = e.x);
          } else if ("right" === V) {
            let e = this._getYAxisLabelAlignment(er);
            (y = e.textAlign), (m = e.x);
          } else if ("x" === N) {
            if ("center" === V) g = (e.top + e.bottom) / 2 + ei;
            else if (isObject(V)) {
              let e = Object.keys(V)[0],
                l = V[e];
              g = this.chart.scales[e].getPixelForValue(l) + ei;
            }
            y = this._getXAxisLabelAlignment();
          } else if ("y" === N) {
            if ("center" === V) m = (e.left + e.right) / 2 - ei;
            else if (isObject(V)) {
              let e = Object.keys(V)[0],
                l = V[e];
              m = this.chart.scales[e].getPixelForValue(l);
            }
            y = this._getYAxisLabelAlignment(er).textAlign;
          }
          "y" === N &&
            ("start" === Z ? (el = "top") : "end" === Z && (el = "bottom"));
          let ec = this._getLabelSizes();
          for (l = 0, c = $.length; l < c; ++l) {
            let e;
            d = $[l].label;
            let N = G.setContext(this.getContext(l));
            (b = this.getPixelForTick(l) + G.labelOffset),
              (P = (C = this._resolveTickFontOptions(l)).lineHeight),
              (I = isArray(d) ? d.length : 1);
            let F = I / 2,
              Z = N.color,
              et = N.textStrokeColor,
              er = N.textStrokeWidth,
              ei = y;
            if (
              (Q
                ? ((m = b),
                  "inner" === y &&
                    (ei =
                      l === c - 1
                        ? this.options.reverse
                          ? "left"
                          : "right"
                        : 0 === l
                        ? this.options.reverse
                          ? "right"
                          : "left"
                        : "center"),
                  (B =
                    "top" === V
                      ? "near" === Y || 0 !== ea
                        ? -I * P + P / 2
                        : "center" === Y
                        ? -ec.highest.height / 2 - F * P + P
                        : -ec.highest.height + P / 2
                      : "near" === Y || 0 !== ea
                      ? P / 2
                      : "center" === Y
                      ? ec.highest.height / 2 - F * P
                      : ec.highest.height - I * P),
                  en && (B *= -1),
                  0 === ea ||
                    N.showLabelBackdrop ||
                    (m += (P / 2) * Math.sin(ea)))
                : ((g = b), (B = ((1 - I) * P) / 2)),
              N.showLabelBackdrop)
            ) {
              let d = toPadding(N.backdropPadding),
                m = ec.heights[l],
                g = ec.widths[l],
                b = B - d.top,
                C = 0 - d.left;
              switch (el) {
                case "middle":
                  b -= m / 2;
                  break;
                case "bottom":
                  b -= m;
              }
              switch (y) {
                case "center":
                  C -= g / 2;
                  break;
                case "right":
                  C -= g;
                  break;
                case "inner":
                  l === c - 1 ? (C -= g) : l > 0 && (C -= g / 2);
              }
              e = {
                left: C,
                top: b,
                width: g + d.width,
                height: m + d.height,
                color: N.backdropColor,
              };
            }
            es.push({
              label: d,
              font: C,
              textOffset: B,
              options: {
                rotation: ea,
                color: Z,
                strokeColor: et,
                strokeWidth: er,
                textAlign: ei,
                textBaseline: el,
                translation: [m, g],
                backdrop: e,
              },
            });
          }
          return es;
        }
        _getXAxisLabelAlignment() {
          let { position: e, ticks: l } = this.options,
            c = -toRadians(this.labelRotation);
          if (c) return "top" === e ? "left" : "right";
          let d = "center";
          return (
            "start" === l.align
              ? (d = "left")
              : "end" === l.align
              ? (d = "right")
              : "inner" === l.align && (d = "inner"),
            d
          );
        }
        _getYAxisLabelAlignment(e) {
          let l, c;
          let {
              position: d,
              ticks: { crossAlign: m, mirror: g, padding: y },
            } = this.options,
            b = this._getLabelSizes(),
            C = e + y,
            P = b.widest.width;
          return (
            "left" === d
              ? g
                ? ((c = this.right + y),
                  "near" === m
                    ? (l = "left")
                    : "center" === m
                    ? ((l = "center"), (c += P / 2))
                    : ((l = "right"), (c += P)))
                : ((c = this.right - C),
                  "near" === m
                    ? (l = "right")
                    : "center" === m
                    ? ((l = "center"), (c -= P / 2))
                    : ((l = "left"), (c = this.left)))
              : "right" === d
              ? g
                ? ((c = this.left + y),
                  "near" === m
                    ? (l = "right")
                    : "center" === m
                    ? ((l = "center"), (c -= P / 2))
                    : ((l = "left"), (c -= P)))
                : ((c = this.left + C),
                  "near" === m
                    ? (l = "left")
                    : "center" === m
                    ? ((l = "center"), (c += P / 2))
                    : ((l = "right"), (c = this.right)))
              : (l = "right"),
            { textAlign: l, x: c }
          );
        }
        _computeLabelArea() {
          if (this.options.ticks.mirror) return;
          let e = this.chart,
            l = this.options.position;
          return "left" === l || "right" === l
            ? { top: 0, left: this.left, bottom: e.height, right: this.right }
            : "top" === l || "bottom" === l
            ? { top: this.top, left: 0, bottom: this.bottom, right: e.width }
            : void 0;
        }
        drawBackground() {
          let {
            ctx: e,
            options: { backgroundColor: l },
            left: c,
            top: d,
            width: m,
            height: g,
          } = this;
          l &&
            (e.save(), (e.fillStyle = l), e.fillRect(c, d, m, g), e.restore());
        }
        getLineWidthForValue(e) {
          let l = this.options.grid;
          if (!this._isVisible() || !l.display) return 0;
          let c = this.ticks,
            d = c.findIndex((l) => l.value === e);
          if (d >= 0) {
            let e = l.setContext(this.getContext(d));
            return e.lineWidth;
          }
          return 0;
        }
        drawGrid(e) {
          let l, c;
          let d = this.options.grid,
            m = this.ctx,
            g =
              this._gridLineItems ||
              (this._gridLineItems = this._computeGridLineItems(e)),
            drawLine = (e, l, c) => {
              c.width &&
                c.color &&
                (m.save(),
                (m.lineWidth = c.width),
                (m.strokeStyle = c.color),
                m.setLineDash(c.borderDash || []),
                (m.lineDashOffset = c.borderDashOffset),
                m.beginPath(),
                m.moveTo(e.x, e.y),
                m.lineTo(l.x, l.y),
                m.stroke(),
                m.restore());
            };
          if (d.display)
            for (l = 0, c = g.length; l < c; ++l) {
              let e = g[l];
              d.drawOnChartArea &&
                drawLine({ x: e.x1, y: e.y1 }, { x: e.x2, y: e.y2 }, e),
                d.drawTicks &&
                  drawLine(
                    { x: e.tx1, y: e.ty1 },
                    { x: e.tx2, y: e.ty2 },
                    {
                      color: e.tickColor,
                      width: e.tickWidth,
                      borderDash: e.tickBorderDash,
                      borderDashOffset: e.tickBorderDashOffset,
                    }
                  );
            }
        }
        drawBorder() {
          let e, l, c, d;
          let {
              chart: m,
              ctx: g,
              options: { border: y, grid: b },
            } = this,
            C = y.setContext(this.getContext()),
            P = y.display ? C.width : 0;
          if (!P) return;
          let I = b.setContext(this.getContext(0)).lineWidth,
            B = this._borderValue;
          this.isHorizontal()
            ? ((e = _alignPixel(m, this.left, P) - P / 2),
              (l = _alignPixel(m, this.right, I) + I / 2),
              (c = d = B))
            : ((c = _alignPixel(m, this.top, P) - P / 2),
              (d = _alignPixel(m, this.bottom, I) + I / 2),
              (e = l = B)),
            g.save(),
            (g.lineWidth = C.width),
            (g.strokeStyle = C.color),
            g.beginPath(),
            g.moveTo(e, c),
            g.lineTo(l, d),
            g.stroke(),
            g.restore();
        }
        drawLabels(e) {
          let l = this.options.ticks;
          if (!l.display) return;
          let c = this.ctx,
            d = this._computeLabelArea();
          d && clipArea(c, d);
          let m = this.getLabelItems(e);
          for (let e of m) {
            let l = e.options,
              d = e.font,
              m = e.label,
              g = e.textOffset;
            renderText(c, m, 0, g, d, l);
          }
          d && unclipArea(c);
        }
        drawTitle() {
          let e;
          let {
            ctx: l,
            options: { position: c, title: d, reverse: m },
          } = this;
          if (!d.display) return;
          let g = toFont(d.font),
            y = toPadding(d.padding),
            b = d.align,
            C = g.lineHeight / 2;
          "bottom" === c || "center" === c || isObject(c)
            ? ((C += y.bottom),
              isArray(d.text) && (C += g.lineHeight * (d.text.length - 1)))
            : (C += y.top);
          let {
            titleX: P,
            titleY: I,
            maxWidth: B,
            rotation: N,
          } = (function (e, l, c, d) {
            let m, g, y;
            let { top: b, left: C, bottom: P, right: I, chart: B } = e,
              { chartArea: N, scales: F } = B,
              V = 0,
              G = P - b,
              Q = I - C;
            if (e.isHorizontal()) {
              if (((g = _alignStartEnd(d, C, I)), isObject(c))) {
                let e = Object.keys(c)[0],
                  d = c[e];
                y = F[e].getPixelForValue(d) + G - l;
              } else
                y =
                  "center" === c
                    ? (N.bottom + N.top) / 2 + G - l
                    : offsetFromEdge(e, c, l);
              m = I - C;
            } else {
              if (isObject(c)) {
                let e = Object.keys(c)[0],
                  d = c[e];
                g = F[e].getPixelForValue(d) - Q + l;
              } else
                g =
                  "center" === c
                    ? (N.left + N.right) / 2 - Q + l
                    : offsetFromEdge(e, c, l);
              (y = _alignStartEnd(d, P, b)), (V = "left" === c ? -ec : ec);
            }
            return { titleX: g, titleY: y, maxWidth: m, rotation: V };
          })(this, C, c, b);
          renderText(l, d.text, 0, 0, g, {
            color: d.color,
            maxWidth: B,
            rotation: N,
            textAlign:
              ((e = _toLeftRightCenter(b)),
              ((m && "right" !== c) || (!m && "right" === c)) &&
                (e = reverseAlign(e)),
              e),
            textBaseline: "middle",
            translation: [P, I],
          });
        }
        draw(e) {
          this._isVisible() &&
            (this.drawBackground(),
            this.drawGrid(e),
            this.drawBorder(),
            this.drawTitle(),
            this.drawLabels(e));
        }
        _layers() {
          let e = this.options,
            l = (e.ticks && e.ticks.z) || 0,
            c = valueOrDefault(e.grid && e.grid.z, -1),
            d = valueOrDefault(e.border && e.border.z, 0);
          return this._isVisible() && this.draw === Scale.prototype.draw
            ? [
                {
                  z: c,
                  draw: (e) => {
                    this.drawBackground(), this.drawGrid(e), this.drawTitle();
                  },
                },
                {
                  z: d,
                  draw: () => {
                    this.drawBorder();
                  },
                },
                {
                  z: l,
                  draw: (e) => {
                    this.drawLabels(e);
                  },
                },
              ]
            : [
                {
                  z: l,
                  draw: (e) => {
                    this.draw(e);
                  },
                },
              ];
        }
        getMatchingVisibleMetas(e) {
          let l, c;
          let d = this.chart.getSortedVisibleDatasetMetas(),
            m = this.axis + "AxisID",
            g = [];
          for (l = 0, c = d.length; l < c; ++l) {
            let c = d[l];
            c[m] !== this.id || (e && c.type !== e) || g.push(c);
          }
          return g;
        }
        _resolveTickFontOptions(e) {
          let l = this.options.ticks.setContext(this.getContext(e));
          return toFont(l.font);
        }
        _maxDigits() {
          let e = this._resolveTickFontOptions(0).lineHeight;
          return (this.isHorizontal() ? this.width : this.height) / e;
        }
      };
      let TypedRegistry = class TypedRegistry {
        constructor(e, l, c) {
          (this.type = e),
            (this.scope = l),
            (this.override = c),
            (this.items = Object.create(null));
        }
        isForType(e) {
          return Object.prototype.isPrototypeOf.call(
            this.type.prototype,
            e.prototype
          );
        }
        register(e) {
          let l;
          let c = Object.getPrototypeOf(e);
          "id" in c && "defaults" in c && (l = this.register(c));
          let d = this.items,
            m = e.id,
            g = this.scope + "." + m;
          if (!m) throw Error("class does not have id: " + e);
          return (
            m in d ||
              ((d[m] = e),
              (function (e, l, c) {
                let d = merge(Object.create(null), [
                  c ? eE.get(c) : {},
                  eE.get(l),
                  e.defaults,
                ]);
                eE.set(l, d),
                  e.defaultRoutes &&
                    (function (e, l) {
                      Object.keys(l).forEach((c) => {
                        let d = c.split("."),
                          m = d.pop(),
                          g = [e].concat(d).join("."),
                          y = l[c].split("."),
                          b = y.pop(),
                          C = y.join(".");
                        eE.route(g, m, C, b);
                      });
                    })(l, e.defaultRoutes),
                  e.descriptors && eE.describe(l, e.descriptors);
              })(e, g, l),
              this.override && eE.override(e.id, e.overrides)),
            g
          );
        }
        get(e) {
          return this.items[e];
        }
        unregister(e) {
          let l = this.items,
            c = e.id,
            d = this.scope;
          c in l && delete l[c],
            d && c in eE[d] && (delete eE[d][c], this.override && delete e_[c]);
        }
      };
      var eV = new (class {
        constructor() {
          (this.controllers = new TypedRegistry(
            DatasetController,
            "datasets",
            !0
          )),
            (this.elements = new TypedRegistry(Element, "elements")),
            (this.plugins = new TypedRegistry(Object, "plugins")),
            (this.scales = new TypedRegistry(Scale, "scales")),
            (this._typedRegistries = [
              this.controllers,
              this.scales,
              this.elements,
            ]);
        }
        add(...e) {
          this._each("register", e);
        }
        remove(...e) {
          this._each("unregister", e);
        }
        addControllers(...e) {
          this._each("register", e, this.controllers);
        }
        addElements(...e) {
          this._each("register", e, this.elements);
        }
        addPlugins(...e) {
          this._each("register", e, this.plugins);
        }
        addScales(...e) {
          this._each("register", e, this.scales);
        }
        getController(e) {
          return this._get(e, this.controllers, "controller");
        }
        getElement(e) {
          return this._get(e, this.elements, "element");
        }
        getPlugin(e) {
          return this._get(e, this.plugins, "plugin");
        }
        getScale(e) {
          return this._get(e, this.scales, "scale");
        }
        removeControllers(...e) {
          this._each("unregister", e, this.controllers);
        }
        removeElements(...e) {
          this._each("unregister", e, this.elements);
        }
        removePlugins(...e) {
          this._each("unregister", e, this.plugins);
        }
        removeScales(...e) {
          this._each("unregister", e, this.scales);
        }
        _each(e, l, c) {
          [...l].forEach((l) => {
            let d = c || this._getRegistryForType(l);
            c || d.isForType(l) || (d === this.plugins && l.id)
              ? this._exec(e, d, l)
              : each(l, (l) => {
                  let d = c || this._getRegistryForType(l);
                  this._exec(e, d, l);
                });
          });
        }
        _exec(e, l, c) {
          let d = _capitalize(e);
          callback(c["before" + d], [], c),
            l[e](c),
            callback(c["after" + d], [], c);
        }
        _getRegistryForType(e) {
          for (let l = 0; l < this._typedRegistries.length; l++) {
            let c = this._typedRegistries[l];
            if (c.isForType(e)) return c;
          }
          return this.plugins;
        }
        _get(e, l, c) {
          let d = l.get(e);
          if (void 0 === d)
            throw Error('"' + e + '" is not a registered ' + c + ".");
          return d;
        }
      })();
      let PluginService = class PluginService {
        constructor() {
          this._init = [];
        }
        notify(e, l, c, d) {
          "beforeInit" === l &&
            ((this._init = this._createDescriptors(e, !0)),
            this._notify(this._init, e, "install"));
          let m = d ? this._descriptors(e).filter(d) : this._descriptors(e),
            g = this._notify(m, e, l, c);
          return (
            "afterDestroy" === l &&
              (this._notify(m, e, "stop"),
              this._notify(this._init, e, "uninstall")),
            g
          );
        }
        _notify(e, l, c, d) {
          for (let m of ((d = d || {}), e)) {
            let e = m.plugin,
              g = e[c],
              y = [l, d, m.options];
            if (!1 === callback(g, y, e) && d.cancelable) return !1;
          }
          return !0;
        }
        invalidate() {
          isNullOrUndef(this._cache) ||
            ((this._oldCache = this._cache), (this._cache = void 0));
        }
        _descriptors(e) {
          if (this._cache) return this._cache;
          let l = (this._cache = this._createDescriptors(e));
          return this._notifyStateChanges(e), l;
        }
        _createDescriptors(e, l) {
          let c = e && e.config,
            d = valueOrDefault(c.options && c.options.plugins, {}),
            m = (function (e) {
              let l = {},
                c = [],
                d = Object.keys(eV.plugins.items);
              for (let e = 0; e < d.length; e++) c.push(eV.getPlugin(d[e]));
              let m = e.plugins || [];
              for (let e = 0; e < m.length; e++) {
                let d = m[e];
                -1 === c.indexOf(d) && (c.push(d), (l[d.id] = !0));
              }
              return { plugins: c, localIds: l };
            })(c);
          return !1 !== d || l
            ? (function (e, { plugins: l, localIds: c }, d, m) {
                let g = [],
                  y = e.getContext();
                for (let C of l) {
                  var b;
                  let l = C.id,
                    P =
                      ((b = d[l]), m || !1 !== b ? (!0 === b ? {} : b) : null);
                  null !== P &&
                    g.push({
                      plugin: C,
                      options: (function (e, { plugin: l, local: c }, d, m) {
                        let g = e.pluginScopeKeys(l),
                          y = e.getOptionScopes(d, g);
                        return (
                          c && l.defaults && y.push(l.defaults),
                          e.createResolver(y, m, [""], {
                            scriptable: !1,
                            indexable: !1,
                            allKeys: !0,
                          })
                        );
                      })(e.config, { plugin: C, local: c[l] }, P, y),
                    });
                }
                return g;
              })(e, m, d, l)
            : [];
        }
        _notifyStateChanges(e) {
          let l = this._oldCache || [],
            c = this._cache,
            diff = (e, l) =>
              e.filter((e) => !l.some((l) => e.plugin.id === l.plugin.id));
          this._notify(diff(l, c), e, "stop"),
            this._notify(diff(c, l), e, "start");
        }
      };
      function getIndexAxis(e, l) {
        let c = eE.datasets[e] || {},
          d = (l.datasets || {})[e] || {};
        return d.indexAxis || l.indexAxis || c.indexAxis || "x";
      }
      function idMatchesAxis(e) {
        if ("x" === e || "y" === e || "r" === e) return e;
      }
      function determineAxis(e, ...l) {
        if (idMatchesAxis(e)) return e;
        for (let d of l) {
          var c;
          let l =
            d.axis ||
            ("top" === (c = d.position) || "bottom" === c
              ? "x"
              : "left" === c || "right" === c
              ? "y"
              : void 0) ||
            (e.length > 1 && idMatchesAxis(e[0].toLowerCase()));
          if (l) return l;
        }
        throw Error(
          `Cannot determine type of '${e}' axis. Please provide 'axis' or 'position' option.`
        );
      }
      function getAxisFromDataset(e, l, c) {
        if (c[l + "AxisID"] === e) return { axis: l };
      }
      function initOptions(e) {
        let l = e.options || (e.options = {});
        (l.plugins = valueOrDefault(l.plugins, {})),
          (l.scales = (function (e, l) {
            let c = e_[e.type] || { scales: {} },
              d = l.scales || {},
              m = getIndexAxis(e.type, l),
              g = Object.create(null);
            return (
              Object.keys(d).forEach((l) => {
                let y = d[l];
                if (!isObject(y))
                  return console.error(
                    `Invalid scale configuration for scale: ${l}`
                  );
                if (y._proxy)
                  return console.warn(
                    `Ignoring resolver passed as options for scale: ${l}`
                  );
                let b = determineAxis(
                    l,
                    y,
                    (function (e, l) {
                      if (l.data && l.data.datasets) {
                        let c = l.data.datasets.filter(
                          (l) => l.xAxisID === e || l.yAxisID === e
                        );
                        if (c.length)
                          return (
                            getAxisFromDataset(e, "x", c[0]) ||
                            getAxisFromDataset(e, "y", c[0])
                          );
                      }
                      return {};
                    })(l, e),
                    eE.scales[y.type]
                  ),
                  C = b === m ? "_index_" : "_value_",
                  P = c.scales || {};
                g[l] = mergeIf(Object.create(null), [
                  { axis: b },
                  y,
                  P[b],
                  P[C],
                ]);
              }),
              e.data.datasets.forEach((c) => {
                let m = c.type || e.type,
                  y = c.indexAxis || getIndexAxis(m, l),
                  b = e_[m] || {},
                  C = b.scales || {};
                Object.keys(C).forEach((e) => {
                  let l;
                  let m =
                      ((l = e),
                      "_index_" === e
                        ? (l = y)
                        : "_value_" === e && (l = "x" === y ? "y" : "x"),
                      l),
                    b = c[m + "AxisID"] || m;
                  (g[b] = g[b] || Object.create(null)),
                    mergeIf(g[b], [{ axis: m }, d[b], C[e]]);
                });
              }),
              Object.keys(g).forEach((e) => {
                let l = g[e];
                mergeIf(l, [eE.scales[l.type], eE.scale]);
              }),
              g
            );
          })(e, l));
      }
      function initData(e) {
        return (
          ((e = e || {}).datasets = e.datasets || []),
          (e.labels = e.labels || []),
          e
        );
      }
      let eH = new Map(),
        eG = new Set();
      function cachedKeys(e, l) {
        let c = eH.get(e);
        return c || ((c = l()), eH.set(e, c), eG.add(c)), c;
      }
      let addIfFound = (e, l, c) => {
        let d = resolveObjectKey(l, c);
        void 0 !== d && e.add(d);
      };
      let Config = class Config {
        constructor(e) {
          var l;
          (this._config =
            (((l = (l = e) || {}).data = initData(l.data)), initOptions(l), l)),
            (this._scopeCache = new Map()),
            (this._resolverCache = new Map());
        }
        get platform() {
          return this._config.platform;
        }
        get type() {
          return this._config.type;
        }
        set type(e) {
          this._config.type = e;
        }
        get data() {
          return this._config.data;
        }
        set data(e) {
          this._config.data = initData(e);
        }
        get options() {
          return this._config.options;
        }
        set options(e) {
          this._config.options = e;
        }
        get plugins() {
          return this._config.plugins;
        }
        update() {
          let e = this._config;
          this.clearCache(), initOptions(e);
        }
        clearCache() {
          this._scopeCache.clear(), this._resolverCache.clear();
        }
        datasetScopeKeys(e) {
          return cachedKeys(e, () => [[`datasets.${e}`, ""]]);
        }
        datasetAnimationScopeKeys(e, l) {
          return cachedKeys(`${e}.transition.${l}`, () => [
            [`datasets.${e}.transitions.${l}`, `transitions.${l}`],
            [`datasets.${e}`, ""],
          ]);
        }
        datasetElementScopeKeys(e, l) {
          return cachedKeys(`${e}-${l}`, () => [
            [
              `datasets.${e}.elements.${l}`,
              `datasets.${e}`,
              `elements.${l}`,
              "",
            ],
          ]);
        }
        pluginScopeKeys(e) {
          let l = e.id,
            c = this.type;
          return cachedKeys(`${c}-plugin-${l}`, () => [
            [`plugins.${l}`, ...(e.additionalOptionScopes || [])],
          ]);
        }
        _cachedScopes(e, l) {
          let c = this._scopeCache,
            d = c.get(e);
          return (!d || l) && ((d = new Map()), c.set(e, d)), d;
        }
        getOptionScopes(e, l, c) {
          let { options: d, type: m } = this,
            g = this._cachedScopes(e, c),
            y = g.get(l);
          if (y) return y;
          let b = new Set();
          l.forEach((l) => {
            e && (b.add(e), l.forEach((l) => addIfFound(b, e, l))),
              l.forEach((e) => addIfFound(b, d, e)),
              l.forEach((e) => addIfFound(b, e_[m] || {}, e)),
              l.forEach((e) => addIfFound(b, eE, e)),
              l.forEach((e) => addIfFound(b, eC, e));
          });
          let C = Array.from(b);
          return (
            0 === C.length && C.push(Object.create(null)),
            eG.has(l) && g.set(l, C),
            C
          );
        }
        chartOptionScopes() {
          let { options: e, type: l } = this;
          return [e, e_[l] || {}, eE.datasets[l] || {}, { type: l }, eE, eC];
        }
        resolveNamedOptions(e, l, c, d = [""]) {
          let m = { $shared: !0 },
            { resolver: g, subPrefixes: y } = getResolver(
              this._resolverCache,
              e,
              d
            ),
            b = g;
          if (
            (function (e, l) {
              let { isScriptable: c, isIndexable: d } = _descriptors(e);
              for (let m of l) {
                let l = c(m),
                  g = d(m),
                  y = (g || l) && e[m];
                if (
                  (l && (isFunction(y) || hasFunction(y))) ||
                  (g && isArray(y))
                )
                  return !0;
              }
              return !1;
            })(g, l)
          ) {
            (m.$shared = !1), (c = isFunction(c) ? c() : c);
            let l = this.createResolver(e, c, y);
            b = _attachContext(g, c, l);
          }
          for (let e of l) m[e] = b[e];
          return m;
        }
        createResolver(e, l, c = [""], d) {
          let { resolver: m } = getResolver(this._resolverCache, e, c);
          return isObject(l) ? _attachContext(m, l, void 0, d) : m;
        }
      };
      function getResolver(e, l, c) {
        let d = e.get(l);
        d || ((d = new Map()), e.set(l, d));
        let m = c.join(),
          g = d.get(m);
        if (!g) {
          let e = _createResolver(l, c);
          (g = {
            resolver: e,
            subPrefixes: c.filter((e) => !e.toLowerCase().includes("hover")),
          }),
            d.set(m, g);
        }
        return g;
      }
      let hasFunction = (e) =>
          isObject(e) &&
          Object.getOwnPropertyNames(e).some((l) => isFunction(e[l])),
        eQ = ["top", "bottom", "left", "right", "chartArea"];
      function positionIsHorizontal(e, l) {
        return (
          "top" === e || "bottom" === e || (-1 === eQ.indexOf(e) && "x" === l)
        );
      }
      function compare2Level(e, l) {
        return function (c, d) {
          return c[e] === d[e] ? c[l] - d[l] : c[e] - d[e];
        };
      }
      function onAnimationsComplete(e) {
        let l = e.chart,
          c = l.options.animation;
        l.notifyPlugins("afterRender"), callback(c && c.onComplete, [e], l);
      }
      function onAnimationProgress(e) {
        let l = e.chart,
          c = l.options.animation;
        callback(c && c.onProgress, [e], l);
      }
      function getCanvas(e) {
        return (
          _isDomSupported() && "string" == typeof e
            ? (e = document.getElementById(e))
            : e && e.length && (e = e[0]),
          e && e.canvas && (e = e.canvas),
          e
        );
      }
      let e$ = {},
        getChart = (e) => {
          let l = getCanvas(e);
          return Object.values(e$)
            .filter((e) => e.canvas === l)
            .pop();
        };
      let Chart = class Chart {
        static defaults = eE;
        static instances = e$;
        static overrides = e_;
        static registry = eV;
        static version = "4.4.9";
        static getChart = getChart;
        static register(...e) {
          eV.add(...e), invalidatePlugins();
        }
        static unregister(...e) {
          eV.remove(...e), invalidatePlugins();
        }
        constructor(e, l) {
          var c, d;
          let m;
          let g = (this.config = new Config(l)),
            y = getCanvas(e),
            b = getChart(y);
          if (b)
            throw Error(
              "Canvas is already in use. Chart with ID '" +
                b.id +
                "' must be destroyed before the canvas with ID '" +
                b.canvas.id +
                "' can be reused."
            );
          let C = g.createResolver(g.chartOptionScopes(), this.getContext());
          (this.platform = new (g.platform ||
            (!_isDomSupported() ||
            ("undefined" != typeof OffscreenCanvas &&
              y instanceof OffscreenCanvas)
              ? BasicPlatform
              : DomPlatform))()),
            this.platform.updateConfig(g);
          let P = this.platform.acquireContext(y, C.aspectRatio),
            I = P && P.canvas,
            B = I && I.height,
            N = I && I.width;
          if (
            ((this.id = en()),
            (this.ctx = P),
            (this.canvas = I),
            (this.width = N),
            (this.height = B),
            (this._options = C),
            (this._aspectRatio = this.aspectRatio),
            (this._layers = []),
            (this._metasets = []),
            (this._stacks = void 0),
            (this.boxes = []),
            (this.currentDevicePixelRatio = void 0),
            (this.chartArea = void 0),
            (this._active = []),
            (this._lastEvent = void 0),
            (this._listeners = {}),
            (this._responsiveListeners = void 0),
            (this._sortedMetasets = []),
            (this.scales = {}),
            (this._plugins = new PluginService()),
            (this.$proxies = {}),
            (this._hiddenIndices = {}),
            (this.attached = !1),
            (this._animationsDisabled = void 0),
            (this.$context = void 0),
            (this._doResize =
              ((c = (e) => this.update(e)),
              (d = C.resizeDelay || 0),
              function (...e) {
                return (
                  d
                    ? (clearTimeout(m), (m = setTimeout(c, d, e)))
                    : c.apply(this, e),
                  d
                );
              })),
            (this._dataChanges = []),
            (e$[this.id] = this),
            !P || !I)
          ) {
            console.error(
              "Failed to create chart: can't acquire context from the given item"
            );
            return;
          }
          eT.listen(this, "complete", onAnimationsComplete),
            eT.listen(this, "progress", onAnimationProgress),
            this._initialize(),
            this.attached && this.update();
        }
        get aspectRatio() {
          let {
            options: { aspectRatio: e, maintainAspectRatio: l },
            width: c,
            height: d,
            _aspectRatio: m,
          } = this;
          return isNullOrUndef(e) ? (l && m ? m : d ? c / d : null) : e;
        }
        get data() {
          return this.config.data;
        }
        set data(e) {
          this.config.data = e;
        }
        get options() {
          return this._options;
        }
        set options(e) {
          this.config.options = e;
        }
        get registry() {
          return eV;
        }
        _initialize() {
          return (
            this.notifyPlugins("beforeInit"),
            this.options.responsive
              ? this.resize()
              : retinaScale(this, this.options.devicePixelRatio),
            this.bindEvents(),
            this.notifyPlugins("afterInit"),
            this
          );
        }
        clear() {
          return clearCanvas(this.canvas, this.ctx), this;
        }
        stop() {
          return eT.stop(this), this;
        }
        resize(e, l) {
          eT.running(this)
            ? (this._resizeBeforeDraw = { width: e, height: l })
            : this._resize(e, l);
        }
        _resize(e, l) {
          let c = this.options,
            d = this.canvas,
            m = c.maintainAspectRatio && this.aspectRatio,
            g = this.platform.getMaximumSize(d, e, l, m),
            y = c.devicePixelRatio || this.platform.getDevicePixelRatio(),
            b = this.width ? "resize" : "attach";
          (this.width = g.width),
            (this.height = g.height),
            (this._aspectRatio = this.aspectRatio),
            retinaScale(this, y, !0) &&
              (this.notifyPlugins("resize", { size: g }),
              callback(c.onResize, [this, g], this),
              this.attached && this._doResize(b) && this.render());
        }
        ensureScalesHaveIDs() {
          let e = this.options,
            l = e.scales || {};
          each(l, (e, l) => {
            e.id = l;
          });
        }
        buildOrUpdateScales() {
          let e = this.options,
            l = e.scales,
            c = this.scales,
            d = Object.keys(c).reduce((e, l) => ((e[l] = !1), e), {}),
            m = [];
          l &&
            (m = m.concat(
              Object.keys(l).map((e) => {
                let c = l[e],
                  d = determineAxis(e, c),
                  m = "r" === d,
                  g = "x" === d;
                return {
                  options: c,
                  dposition: m ? "chartArea" : g ? "bottom" : "left",
                  dtype: m ? "radialLinear" : g ? "category" : "linear",
                };
              })
            )),
            each(m, (l) => {
              let m = l.options,
                g = m.id,
                y = determineAxis(g, m),
                b = valueOrDefault(m.type, l.dtype);
              (void 0 === m.position ||
                positionIsHorizontal(m.position, y) !==
                  positionIsHorizontal(l.dposition)) &&
                (m.position = l.dposition),
                (d[g] = !0);
              let C = null;
              if (g in c && c[g].type === b) C = c[g];
              else {
                let e = eV.getScale(b);
                c[
                  (C = new e({ id: g, type: b, ctx: this.ctx, chart: this })).id
                ] = C;
              }
              C.init(m, e);
            }),
            each(d, (e, l) => {
              e || delete c[l];
            }),
            each(c, (e) => {
              eR.configure(this, e, e.options), eR.addBox(this, e);
            });
        }
        _updateMetasets() {
          let e = this._metasets,
            l = this.data.datasets.length,
            c = e.length;
          if ((e.sort((e, l) => e.index - l.index), c > l)) {
            for (let e = l; e < c; ++e) this._destroyDatasetMeta(e);
            e.splice(l, c - l);
          }
          this._sortedMetasets = e
            .slice(0)
            .sort(compare2Level("order", "index"));
        }
        _removeUnreferencedMetasets() {
          let {
            _metasets: e,
            data: { datasets: l },
          } = this;
          e.length > l.length && delete this._stacks,
            e.forEach((e, c) => {
              0 === l.filter((l) => l === e._dataset).length &&
                this._destroyDatasetMeta(c);
            });
        }
        buildOrUpdateControllers() {
          let e, l;
          let c = [],
            d = this.data.datasets;
          for (
            this._removeUnreferencedMetasets(), e = 0, l = d.length;
            e < l;
            e++
          ) {
            let l = d[e],
              m = this.getDatasetMeta(e),
              g = l.type || this.config.type;
            if (
              (m.type &&
                m.type !== g &&
                (this._destroyDatasetMeta(e), (m = this.getDatasetMeta(e))),
              (m.type = g),
              (m.indexAxis = l.indexAxis || getIndexAxis(g, this.options)),
              (m.order = l.order || 0),
              (m.index = e),
              (m.label = "" + l.label),
              (m.visible = this.isDatasetVisible(e)),
              m.controller)
            )
              m.controller.updateIndex(e), m.controller.linkScales();
            else {
              let l = eV.getController(g),
                { datasetElementType: d, dataElementType: y } = eE.datasets[g];
              Object.assign(l, {
                dataElementType: eV.getElement(y),
                datasetElementType: d && eV.getElement(d),
              }),
                (m.controller = new l(this, e)),
                c.push(m.controller);
            }
          }
          return this._updateMetasets(), c;
        }
        _resetElements() {
          each(
            this.data.datasets,
            (e, l) => {
              this.getDatasetMeta(l).controller.reset();
            },
            this
          );
        }
        reset() {
          this._resetElements(), this.notifyPlugins("reset");
        }
        update(e) {
          let l = this.config;
          l.update();
          let c = (this._options = l.createResolver(
              l.chartOptionScopes(),
              this.getContext()
            )),
            d = (this._animationsDisabled = !c.animation);
          if (
            (this._updateScales(),
            this._checkEventBindings(),
            this._updateHiddenIndices(),
            this._plugins.invalidate(),
            !1 ===
              this.notifyPlugins("beforeUpdate", { mode: e, cancelable: !0 }))
          )
            return;
          let m = this.buildOrUpdateControllers();
          this.notifyPlugins("beforeElementsUpdate");
          let g = 0;
          for (let e = 0, l = this.data.datasets.length; e < l; e++) {
            let { controller: l } = this.getDatasetMeta(e),
              c = !d && -1 === m.indexOf(l);
            l.buildOrUpdateElements(c), (g = Math.max(+l.getMaxOverflow(), g));
          }
          (g = this._minPadding = c.layout.autoPadding ? g : 0),
            this._updateLayout(g),
            d ||
              each(m, (e) => {
                e.reset();
              }),
            this._updateDatasets(e),
            this.notifyPlugins("afterUpdate", { mode: e }),
            this._layers.sort(compare2Level("z", "_idx"));
          let { _active: y, _lastEvent: b } = this;
          b
            ? this._eventHandler(b, !0)
            : y.length && this._updateHoverStyles(y, y, !0),
            this.render();
        }
        _updateScales() {
          each(this.scales, (e) => {
            eR.removeBox(this, e);
          }),
            this.ensureScalesHaveIDs(),
            this.buildOrUpdateScales();
        }
        _checkEventBindings() {
          let e = this.options,
            l = new Set(Object.keys(this._listeners)),
            c = new Set(e.events);
          (setsEqual(l, c) && !!this._responsiveListeners === e.responsive) ||
            (this.unbindEvents(), this.bindEvents());
        }
        _updateHiddenIndices() {
          let { _hiddenIndices: e } = this,
            l = this._getUniformDataChanges() || [];
          for (let { method: c, start: d, count: m } of l) {
            let l = "_removeElements" === c ? -m : m;
            !(function (e, l, c) {
              let d = Object.keys(e);
              for (let m of d) {
                let d = +m;
                if (d >= l) {
                  let g = e[m];
                  delete e[m], (c > 0 || d > l) && (e[d + c] = g);
                }
              }
            })(e, d, l);
          }
        }
        _getUniformDataChanges() {
          let e = this._dataChanges;
          if (!e || !e.length) return;
          this._dataChanges = [];
          let l = this.data.datasets.length,
            makeSet = (l) =>
              new Set(
                e
                  .filter((e) => e[0] === l)
                  .map((e, l) => l + "," + e.splice(1).join(","))
              ),
            c = makeSet(0);
          for (let e = 1; e < l; e++) if (!setsEqual(c, makeSet(e))) return;
          return Array.from(c)
            .map((e) => e.split(","))
            .map((e) => ({ method: e[1], start: +e[2], count: +e[3] }));
        }
        _updateLayout(e) {
          if (!1 === this.notifyPlugins("beforeLayout", { cancelable: !0 }))
            return;
          eR.update(this, this.width, this.height, e);
          let l = this.chartArea,
            c = l.width <= 0 || l.height <= 0;
          (this._layers = []),
            each(
              this.boxes,
              (e) => {
                (c && "chartArea" === e.position) ||
                  (e.configure && e.configure(),
                  this._layers.push(...e._layers()));
              },
              this
            ),
            this._layers.forEach((e, l) => {
              e._idx = l;
            }),
            this.notifyPlugins("afterLayout");
        }
        _updateDatasets(e) {
          if (
            !1 !==
            this.notifyPlugins("beforeDatasetsUpdate", {
              mode: e,
              cancelable: !0,
            })
          ) {
            for (let e = 0, l = this.data.datasets.length; e < l; ++e)
              this.getDatasetMeta(e).controller.configure();
            for (let l = 0, c = this.data.datasets.length; l < c; ++l)
              this._updateDataset(
                l,
                isFunction(e) ? e({ datasetIndex: l }) : e
              );
            this.notifyPlugins("afterDatasetsUpdate", { mode: e });
          }
        }
        _updateDataset(e, l) {
          let c = this.getDatasetMeta(e),
            d = { meta: c, index: e, mode: l, cancelable: !0 };
          !1 !== this.notifyPlugins("beforeDatasetUpdate", d) &&
            (c.controller._update(l),
            (d.cancelable = !1),
            this.notifyPlugins("afterDatasetUpdate", d));
        }
        render() {
          !1 !== this.notifyPlugins("beforeRender", { cancelable: !0 }) &&
            (eT.has(this)
              ? this.attached && !eT.running(this) && eT.start(this)
              : (this.draw(), onAnimationsComplete({ chart: this })));
        }
        draw() {
          let e;
          if (this._resizeBeforeDraw) {
            let { width: e, height: l } = this._resizeBeforeDraw;
            (this._resizeBeforeDraw = null), this._resize(e, l);
          }
          if (
            (this.clear(),
            this.width <= 0 ||
              this.height <= 0 ||
              !1 === this.notifyPlugins("beforeDraw", { cancelable: !0 }))
          )
            return;
          let l = this._layers;
          for (e = 0; e < l.length && l[e].z <= 0; ++e)
            l[e].draw(this.chartArea);
          for (this._drawDatasets(); e < l.length; ++e)
            l[e].draw(this.chartArea);
          this.notifyPlugins("afterDraw");
        }
        _getSortedDatasetMetas(e) {
          let l, c;
          let d = this._sortedMetasets,
            m = [];
          for (l = 0, c = d.length; l < c; ++l) {
            let c = d[l];
            (!e || c.visible) && m.push(c);
          }
          return m;
        }
        getSortedVisibleDatasetMetas() {
          return this._getSortedDatasetMetas(!0);
        }
        _drawDatasets() {
          if (
            !1 === this.notifyPlugins("beforeDatasetsDraw", { cancelable: !0 })
          )
            return;
          let e = this.getSortedVisibleDatasetMetas();
          for (let l = e.length - 1; l >= 0; --l) this._drawDataset(e[l]);
          this.notifyPlugins("afterDatasetsDraw");
        }
        _drawDataset(e) {
          let l = this.ctx,
            c = { meta: e, index: e.index, cancelable: !0 },
            d = getDatasetClipArea(this, e);
          !1 !== this.notifyPlugins("beforeDatasetDraw", c) &&
            (d && clipArea(l, d),
            e.controller.draw(),
            d && unclipArea(l),
            (c.cancelable = !1),
            this.notifyPlugins("afterDatasetDraw", c));
        }
        isPointInArea(e) {
          return _isPointInArea(e, this.chartArea, this._minPadding);
        }
        getElementsAtEventForMode(e, l, c, d) {
          let m = eD.modes[l];
          return "function" == typeof m ? m(this, e, c, d) : [];
        }
        getDatasetMeta(e) {
          let l = this.data.datasets[e],
            c = this._metasets,
            d = c.filter((e) => e && e._dataset === l).pop();
          return (
            d ||
              ((d = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                xAxisID: null,
                yAxisID: null,
                order: (l && l.order) || 0,
                index: e,
                _dataset: l,
                _parsed: [],
                _sorted: !1,
              }),
              c.push(d)),
            d
          );
        }
        getContext() {
          return (
            this.$context ||
            (this.$context = createContext(null, {
              chart: this,
              type: "chart",
            }))
          );
        }
        getVisibleDatasetCount() {
          return this.getSortedVisibleDatasetMetas().length;
        }
        isDatasetVisible(e) {
          let l = this.data.datasets[e];
          if (!l) return !1;
          let c = this.getDatasetMeta(e);
          return "boolean" == typeof c.hidden ? !c.hidden : !l.hidden;
        }
        setDatasetVisibility(e, l) {
          let c = this.getDatasetMeta(e);
          c.hidden = !l;
        }
        toggleDataVisibility(e) {
          this._hiddenIndices[e] = !this._hiddenIndices[e];
        }
        getDataVisibility(e) {
          return !this._hiddenIndices[e];
        }
        _updateVisibility(e, l, c) {
          let d = c ? "show" : "hide",
            m = this.getDatasetMeta(e),
            g = m.controller._resolveAnimations(void 0, d);
          defined(l)
            ? ((m.data[l].hidden = !c), this.update())
            : (this.setDatasetVisibility(e, c),
              g.update(m, { visible: c }),
              this.update((l) => (l.datasetIndex === e ? d : void 0)));
        }
        hide(e, l) {
          this._updateVisibility(e, l, !1);
        }
        show(e, l) {
          this._updateVisibility(e, l, !0);
        }
        _destroyDatasetMeta(e) {
          let l = this._metasets[e];
          l && l.controller && l.controller._destroy(),
            delete this._metasets[e];
        }
        _stop() {
          let e, l;
          for (
            this.stop(), eT.remove(this), e = 0, l = this.data.datasets.length;
            e < l;
            ++e
          )
            this._destroyDatasetMeta(e);
        }
        destroy() {
          this.notifyPlugins("beforeDestroy");
          let { canvas: e, ctx: l } = this;
          this._stop(),
            this.config.clearCache(),
            e &&
              (this.unbindEvents(),
              clearCanvas(e, l),
              this.platform.releaseContext(l),
              (this.canvas = null),
              (this.ctx = null)),
            delete e$[this.id],
            this.notifyPlugins("afterDestroy");
        }
        toBase64Image(...e) {
          return this.canvas.toDataURL(...e);
        }
        bindEvents() {
          this.bindUserEvents(),
            this.options.responsive
              ? this.bindResponsiveEvents()
              : (this.attached = !0);
        }
        bindUserEvents() {
          let e = this._listeners,
            l = this.platform,
            _add = (c, d) => {
              l.addEventListener(this, c, d), (e[c] = d);
            },
            listener = (e, l, c) => {
              (e.offsetX = l), (e.offsetY = c), this._eventHandler(e);
            };
          each(this.options.events, (e) => _add(e, listener));
        }
        bindResponsiveEvents() {
          let e;
          this._responsiveListeners || (this._responsiveListeners = {});
          let l = this._responsiveListeners,
            c = this.platform,
            _add = (e, d) => {
              c.addEventListener(this, e, d), (l[e] = d);
            },
            _remove = (e, d) => {
              l[e] && (c.removeEventListener(this, e, d), delete l[e]);
            },
            listener = (e, l) => {
              this.canvas && this.resize(e, l);
            },
            attached = () => {
              _remove("attach", attached),
                (this.attached = !0),
                this.resize(),
                _add("resize", listener),
                _add("detach", e);
            };
          (e = () => {
            (this.attached = !1),
              _remove("resize", listener),
              this._stop(),
              this._resize(0, 0),
              _add("attach", attached);
          }),
            c.isAttached(this.canvas) ? attached() : e();
        }
        unbindEvents() {
          each(this._listeners, (e, l) => {
            this.platform.removeEventListener(this, l, e);
          }),
            (this._listeners = {}),
            each(this._responsiveListeners, (e, l) => {
              this.platform.removeEventListener(this, l, e);
            }),
            (this._responsiveListeners = void 0);
        }
        updateHoverStyle(e, l, c) {
          let d, m, g;
          let y = c ? "set" : "remove";
          for (
            "dataset" === l &&
              this.getDatasetMeta(e[0].datasetIndex).controller[
                "_" + y + "DatasetHoverStyle"
              ](),
              m = 0,
              g = e.length;
            m < g;
            ++m
          ) {
            d = e[m];
            let l = d && this.getDatasetMeta(d.datasetIndex).controller;
            l && l[y + "HoverStyle"](d.element, d.datasetIndex, d.index);
          }
        }
        getActiveElements() {
          return this._active || [];
        }
        setActiveElements(e) {
          let l = this._active || [],
            c = e.map(({ datasetIndex: e, index: l }) => {
              let c = this.getDatasetMeta(e);
              if (!c) throw Error("No dataset found at index " + e);
              return { datasetIndex: e, element: c.data[l], index: l };
            }),
            d = !_elementsEqual(c, l);
          d &&
            ((this._active = c),
            (this._lastEvent = null),
            this._updateHoverStyles(c, l));
        }
        notifyPlugins(e, l, c) {
          return this._plugins.notify(this, e, l, c);
        }
        isPluginEnabled(e) {
          return (
            1 === this._plugins._cache.filter((l) => l.plugin.id === e).length
          );
        }
        _updateHoverStyles(e, l, c) {
          let d = this.options.hover,
            diff = (e, l) =>
              e.filter(
                (e) =>
                  !l.some(
                    (l) =>
                      e.datasetIndex === l.datasetIndex && e.index === l.index
                  )
              ),
            m = diff(l, e),
            g = c ? e : diff(e, l);
          m.length && this.updateHoverStyle(m, d.mode, !1),
            g.length && d.mode && this.updateHoverStyle(g, d.mode, !0);
        }
        _eventHandler(e, l) {
          let c = {
              event: e,
              replay: l,
              cancelable: !0,
              inChartArea: this.isPointInArea(e),
            },
            eventFilter = (l) =>
              (l.options.events || this.options.events).includes(e.native.type);
          if (!1 === this.notifyPlugins("beforeEvent", c, eventFilter)) return;
          let d = this._handleEvent(e, l, c.inChartArea);
          return (
            (c.cancelable = !1),
            this.notifyPlugins("afterEvent", c, eventFilter),
            (d || c.changed) && this.render(),
            this
          );
        }
        _handleEvent(e, l, c) {
          var d;
          let { _active: m = [], options: g } = this,
            y = this._getActiveElements(e, m, c, l),
            b =
              "mouseup" === e.type ||
              "click" === e.type ||
              "contextmenu" === e.type,
            C =
              ((d = this._lastEvent),
              c && "mouseout" !== e.type ? (b ? d : e) : null);
          c &&
            ((this._lastEvent = null),
            callback(g.onHover, [e, y, this], this),
            b && callback(g.onClick, [e, y, this], this));
          let P = !_elementsEqual(y, m);
          return (
            (P || l) && ((this._active = y), this._updateHoverStyles(y, m, l)),
            (this._lastEvent = C),
            P
          );
        }
        _getActiveElements(e, l, c, d) {
          if ("mouseout" === e.type) return [];
          if (!c) return l;
          let m = this.options.hover;
          return this.getElementsAtEventForMode(e, m.mode, m, d);
        }
      };
      function invalidatePlugins() {
        return each(Chart.instances, (e) => e._plugins.invalidate());
      }
      function rThetaToXY(e, l, c, d) {
        return { x: c + e * Math.cos(l), y: d + e * Math.sin(l) };
      }
      function pathArc(e, l, c, d, m, g) {
        let { x: y, y: b, startAngle: C, pixelMargin: P, innerRadius: I } = l,
          B = Math.max(l.outerRadius + d + c - P, 0),
          N = I > 0 ? I + d + c + P : 0,
          F = 0,
          V = m - C;
        if (d) {
          let e = B > 0 ? B - d : 0,
            l = ((I > 0 ? I - d : 0) + e) / 2;
          F = (V - (0 !== l ? (V * l) / (l + d) : V)) / 2;
        }
        let G = Math.max(0.001, V * B - c / ei) / B,
          Q = (V - G) / 2,
          $ = C + Q + F,
          Z = m - Q - F,
          {
            outerStart: Y,
            outerEnd: et,
            innerStart: en,
            innerEnd: er,
          } = (function (e, l, c, d) {
            let m = _readValueToProps(e.options.borderRadius, [
                "outerStart",
                "outerEnd",
                "innerStart",
                "innerEnd",
              ]),
              g = (c - l) / 2,
              y = Math.min(g, (d * l) / 2),
              computeOuterLimit = (e) => {
                let l = ((c - Math.min(g, e)) * d) / 2;
                return _limitValue(e, 0, Math.min(g, l));
              };
            return {
              outerStart: computeOuterLimit(m.outerStart),
              outerEnd: computeOuterLimit(m.outerEnd),
              innerStart: _limitValue(m.innerStart, 0, y),
              innerEnd: _limitValue(m.innerEnd, 0, y),
            };
          })(l, N, B, Z - $),
          eo = B - Y,
          ea = B - et,
          es = $ + Y / eo,
          el = Z - et / ea,
          eu = N + en,
          ed = N + er,
          ep = $ + en / eu,
          eh = Z - er / ed;
        if ((e.beginPath(), g)) {
          let l = (es + el) / 2;
          if ((e.arc(y, b, B, es, l), e.arc(y, b, B, l, el), et > 0)) {
            let l = rThetaToXY(ea, el, y, b);
            e.arc(l.x, l.y, et, el, Z + ec);
          }
          let c = rThetaToXY(ed, Z, y, b);
          if ((e.lineTo(c.x, c.y), er > 0)) {
            let l = rThetaToXY(ed, eh, y, b);
            e.arc(l.x, l.y, er, Z + ec, eh + Math.PI);
          }
          let d = (Z - er / N + ($ + en / N)) / 2;
          if (
            (e.arc(y, b, N, Z - er / N, d, !0),
            e.arc(y, b, N, d, $ + en / N, !0),
            en > 0)
          ) {
            let l = rThetaToXY(eu, ep, y, b);
            e.arc(l.x, l.y, en, ep + Math.PI, $ - ec);
          }
          let m = rThetaToXY(eo, $, y, b);
          if ((e.lineTo(m.x, m.y), Y > 0)) {
            let l = rThetaToXY(eo, es, y, b);
            e.arc(l.x, l.y, Y, $ - ec, es);
          }
        } else {
          e.moveTo(y, b);
          let l = Math.cos(es) * B + y,
            c = Math.sin(es) * B + b;
          e.lineTo(l, c);
          let d = Math.cos(el) * B + y,
            m = Math.sin(el) * B + b;
          e.lineTo(d, m);
        }
        e.closePath();
      }
      function setStyle(e, l, c = l) {
        (e.lineCap = valueOrDefault(c.borderCapStyle, l.borderCapStyle)),
          e.setLineDash(valueOrDefault(c.borderDash, l.borderDash)),
          (e.lineDashOffset = valueOrDefault(
            c.borderDashOffset,
            l.borderDashOffset
          )),
          (e.lineJoin = valueOrDefault(c.borderJoinStyle, l.borderJoinStyle)),
          (e.lineWidth = valueOrDefault(c.borderWidth, l.borderWidth)),
          (e.strokeStyle = valueOrDefault(c.borderColor, l.borderColor));
      }
      function lineTo(e, l, c) {
        e.lineTo(c.x, c.y);
      }
      function pathVars(e, l, c = {}) {
        let d = e.length,
          { start: m = 0, end: g = d - 1 } = c,
          { start: y, end: b } = l,
          C = Math.max(m, y),
          P = Math.min(g, b);
        return {
          count: d,
          start: C,
          loop: l.loop,
          ilen:
            P < C && !((m < y && g < y) || (m > b && g > b))
              ? d + P - C
              : P - C,
        };
      }
      function pathSegment(e, l, c, d) {
        let m, g, y;
        let { points: b, options: C } = l,
          { count: P, start: I, loop: B, ilen: N } = pathVars(b, c, d),
          F = C.stepped
            ? _steppedLineTo
            : C.tension || "monotone" === C.cubicInterpolationMode
            ? _bezierCurveTo
            : lineTo,
          { move: V = !0, reverse: G } = d || {};
        for (m = 0; m <= N; ++m)
          (g = b[(I + (G ? N - m : m)) % P]).skip ||
            (V ? (e.moveTo(g.x, g.y), (V = !1)) : F(e, y, g, G, C.stepped),
            (y = g));
        return B && F(e, y, (g = b[(I + (G ? N : 0)) % P]), G, C.stepped), !!B;
      }
      function fastPathSegment(e, l, c, d) {
        let m, g, y, b, C, P;
        let I = l.points,
          { count: B, start: N, ilen: F } = pathVars(I, c, d),
          { move: V = !0, reverse: G } = d || {},
          Q = 0,
          $ = 0,
          pointIndex = (e) => (N + (G ? F - e : e)) % B,
          drawX = () => {
            b !== C && (e.lineTo(Q, C), e.lineTo(Q, b), e.lineTo(Q, P));
          };
        for (
          V && ((g = I[pointIndex(0)]), e.moveTo(g.x, g.y)), m = 0;
          m <= F;
          ++m
        ) {
          if ((g = I[pointIndex(m)]).skip) continue;
          let l = g.x,
            c = g.y,
            d = 0 | l;
          d === y
            ? (c < b ? (b = c) : c > C && (C = c), (Q = ($ * Q + l) / ++$))
            : (drawX(), e.lineTo(l, c), (y = d), ($ = 0), (b = C = c)),
            (P = c);
        }
        drawX();
      }
      function _getSegmentMethod(e) {
        let l = e.options,
          c = l.borderDash && l.borderDash.length,
          d =
            !e._decimated &&
            !e._loop &&
            !l.tension &&
            "monotone" !== l.cubicInterpolationMode &&
            !l.stepped &&
            !c;
        return d ? fastPathSegment : pathSegment;
      }
      let eK = "function" == typeof Path2D;
      let LineElement = class LineElement extends Element {
        static id = "line";
        static defaults = {
          borderCapStyle: "butt",
          borderDash: [],
          borderDashOffset: 0,
          borderJoinStyle: "miter",
          borderWidth: 3,
          capBezierPoints: !0,
          cubicInterpolationMode: "default",
          fill: !1,
          spanGaps: !1,
          stepped: !1,
          tension: 0,
        };
        static defaultRoutes = {
          backgroundColor: "backgroundColor",
          borderColor: "borderColor",
        };
        static descriptors = {
          _scriptable: !0,
          _indexable: (e) => "borderDash" !== e && "fill" !== e,
        };
        constructor(e) {
          super(),
            (this.animated = !0),
            (this.options = void 0),
            (this._chart = void 0),
            (this._loop = void 0),
            (this._fullLoop = void 0),
            (this._path = void 0),
            (this._points = void 0),
            (this._segments = void 0),
            (this._decimated = !1),
            (this._pointsUpdated = !1),
            (this._datasetIndex = void 0),
            e && Object.assign(this, e);
        }
        updateControlPoints(e, l) {
          let c = this.options;
          if (
            (c.tension || "monotone" === c.cubicInterpolationMode) &&
            !c.stepped &&
            !this._pointsUpdated
          ) {
            let d = c.spanGaps ? this._loop : this._fullLoop;
            !(function (e, l, c, d, m) {
              let g, y, b, C;
              if (
                (l.spanGaps && (e = e.filter((e) => !e.skip)),
                "monotone" === l.cubicInterpolationMode)
              )
                !(function (e, l = "x") {
                  let c, d, m;
                  let g = getValueAxis(l),
                    y = e.length,
                    b = Array(y).fill(0),
                    C = Array(y),
                    P = getPoint(e, 0);
                  for (c = 0; c < y; ++c)
                    if (((d = m), (m = P), (P = getPoint(e, c + 1)), m)) {
                      if (P) {
                        let e = P[l] - m[l];
                        b[c] = 0 !== e ? (P[g] - m[g]) / e : 0;
                      }
                      C[c] = d
                        ? P
                          ? eh(b[c - 1]) !== eh(b[c])
                            ? 0
                            : (b[c - 1] + b[c]) / 2
                          : b[c - 1]
                        : b[c];
                    }
                  (function (e, l, c) {
                    let d, m, g, y, b;
                    let C = e.length,
                      P = getPoint(e, 0);
                    for (let I = 0; I < C - 1; ++I)
                      if (((b = P), (P = getPoint(e, I + 1)), b && P)) {
                        if (almostEquals(l[I], 0, ek)) {
                          c[I] = c[I + 1] = 0;
                          continue;
                        }
                        (y =
                          Math.pow((d = c[I] / l[I]), 2) +
                          Math.pow((m = c[I + 1] / l[I]), 2)) <= 9 ||
                          ((g = 3 / Math.sqrt(y)),
                          (c[I] = d * g * l[I]),
                          (c[I + 1] = m * g * l[I]));
                      }
                  })(e, b, C),
                    (function (e, l, c = "x") {
                      let d, m, g;
                      let y = getValueAxis(c),
                        b = e.length,
                        C = getPoint(e, 0);
                      for (let P = 0; P < b; ++P) {
                        if (((m = g), (g = C), (C = getPoint(e, P + 1)), !g))
                          continue;
                        let b = g[c],
                          I = g[y];
                        m &&
                          ((d = (b - m[c]) / 3),
                          (g[`cp1${c}`] = b - d),
                          (g[`cp1${y}`] = I - d * l[P])),
                          C &&
                            ((d = (C[c] - b) / 3),
                            (g[`cp2${c}`] = b + d),
                            (g[`cp2${y}`] = I + d * l[P]));
                      }
                    })(e, C, l);
                })(e, m);
              else {
                let c = d ? e[e.length - 1] : e[0];
                for (g = 0, y = e.length; g < y; ++g)
                  (C = (function (e, l, c, d) {
                    let m = e.skip ? l : e,
                      g = c.skip ? l : c,
                      y = distanceBetweenPoints(l, m),
                      b = distanceBetweenPoints(g, l),
                      C = y / (y + b),
                      P = b / (y + b);
                    (C = isNaN(C) ? 0 : C), (P = isNaN(P) ? 0 : P);
                    let I = d * C,
                      B = d * P;
                    return {
                      previous: {
                        x: l.x - I * (g.x - m.x),
                        y: l.y - I * (g.y - m.y),
                      },
                      next: {
                        x: l.x + B * (g.x - m.x),
                        y: l.y + B * (g.y - m.y),
                      },
                    };
                  })(
                    c,
                    (b = e[g]),
                    e[Math.min(g + 1, y - (d ? 0 : 1)) % y],
                    l.tension
                  )),
                    (b.cp1x = C.previous.x),
                    (b.cp1y = C.previous.y),
                    (b.cp2x = C.next.x),
                    (b.cp2y = C.next.y),
                    (c = b);
              }
              l.capBezierPoints &&
                (function (e, l) {
                  let c, d, m, g, y;
                  let b = _isPointInArea(e[0], l);
                  for (c = 0, d = e.length; c < d; ++c)
                    (y = g),
                      (g = b),
                      (b = c < d - 1 && _isPointInArea(e[c + 1], l)),
                      g &&
                        ((m = e[c]),
                        y &&
                          ((m.cp1x = capControlPoint(m.cp1x, l.left, l.right)),
                          (m.cp1y = capControlPoint(m.cp1y, l.top, l.bottom))),
                        b &&
                          ((m.cp2x = capControlPoint(m.cp2x, l.left, l.right)),
                          (m.cp2y = capControlPoint(m.cp2y, l.top, l.bottom))));
                })(e, c);
            })(this._points, c, e, d, l),
              (this._pointsUpdated = !0);
          }
        }
        set points(e) {
          (this._points = e),
            delete this._segments,
            delete this._path,
            (this._pointsUpdated = !1);
        }
        get points() {
          return this._points;
        }
        get segments() {
          return (
            this._segments ||
            (this._segments = (function (e, l) {
              let c = e.points,
                d = e.options.spanGaps,
                m = c.length;
              if (!m) return [];
              let g = !!e._loop,
                { start: y, end: b } = (function (e, l, c, d) {
                  let m = 0,
                    g = l - 1;
                  if (c && !d) for (; m < l && !e[m].skip; ) m++;
                  for (; m < l && e[m].skip; ) m++;
                  for (m %= l, c && (g += m); g > m && e[g % l].skip; ) g--;
                  return { start: m, end: (g %= l) };
                })(c, m, g, d);
              if (!0 === d)
                return splitByStyles(e, [{ start: y, end: b, loop: g }], c, l);
              let C = b < y ? b + m : b,
                P = !!e._fullLoop && 0 === y && b === m - 1;
              return splitByStyles(
                e,
                (function (e, l, c, d) {
                  let m;
                  let g = e.length,
                    y = [],
                    b = l,
                    C = e[l];
                  for (m = l + 1; m <= c; ++m) {
                    let c = e[m % g];
                    c.skip || c.stop
                      ? C.skip ||
                        ((d = !1),
                        y.push({ start: l % g, end: (m - 1) % g, loop: d }),
                        (l = b = c.stop ? m : null))
                      : ((b = m), C.skip && (l = m)),
                      (C = c);
                  }
                  return (
                    null !== b && y.push({ start: l % g, end: b % g, loop: d }),
                    y
                  );
                })(c, y, C, P),
                c,
                l
              );
            })(this, this.options.segment))
          );
        }
        first() {
          let e = this.segments,
            l = this.points;
          return e.length && l[e[0].start];
        }
        last() {
          let e = this.segments,
            l = this.points,
            c = e.length;
          return c && l[e[c - 1].end];
        }
        interpolate(e, l) {
          let c, d;
          let m = this.options,
            g = e[l],
            y = this.points,
            b = _boundSegments(this, { property: l, start: g, end: g });
          if (!b.length) return;
          let C = [],
            P = m.stepped
              ? _steppedInterpolation
              : m.tension || "monotone" === m.cubicInterpolationMode
              ? _bezierInterpolation
              : _pointInLine;
          for (c = 0, d = b.length; c < d; ++c) {
            let { start: d, end: I } = b[c],
              B = y[d],
              N = y[I];
            if (B === N) {
              C.push(B);
              continue;
            }
            let F = Math.abs((g - B[l]) / (N[l] - B[l])),
              V = P(B, N, F, m.stepped);
            (V[l] = e[l]), C.push(V);
          }
          return 1 === C.length ? C[0] : C;
        }
        pathSegment(e, l, c) {
          let d = _getSegmentMethod(this);
          return d(e, this, l, c);
        }
        path(e, l, c) {
          let d = this.segments,
            m = _getSegmentMethod(this),
            g = this._loop;
          for (let y of ((l = l || 0), (c = c || this.points.length - l), d))
            g &= m(e, this, y, { start: l, end: l + c - 1 });
          return !!g;
        }
        draw(e, l, c, d) {
          let m = this.options || {},
            g = this.points || [];
          g.length &&
            m.borderWidth &&
            (e.save(),
            (function (e, l, c, d) {
              if (eK && !l.options.segment) {
                let m;
                (m = l._path) ||
                  ((m = l._path = new Path2D()),
                  l.path(m, c, d) && m.closePath()),
                  setStyle(e, l.options),
                  e.stroke(m);
              } else
                !(function (e, l, c, d) {
                  let { segments: m, options: g } = l,
                    y = _getSegmentMethod(l);
                  for (let b of m)
                    setStyle(e, g, b.style),
                      e.beginPath(),
                      y(e, l, b, { start: c, end: c + d - 1 }) && e.closePath(),
                      e.stroke();
                })(e, l, c, d);
            })(e, this, c, d),
            e.restore()),
            this.animated &&
              ((this._pointsUpdated = !1), (this._path = void 0));
        }
      };
      function inRange$1(e, l, c, d) {
        let m = e.options,
          { [c]: g } = e.getProps([c], d);
        return Math.abs(l - g) < m.radius + m.hitRadius;
      }
      function getBarBounds(e, l) {
        let c, d, m, g, y;
        let {
          x: b,
          y: C,
          base: P,
          width: I,
          height: B,
        } = e.getProps(["x", "y", "base", "width", "height"], l);
        return (
          e.horizontal
            ? ((y = B / 2),
              (c = Math.min(b, P)),
              (d = Math.max(b, P)),
              (m = C - y),
              (g = C + y))
            : ((c = b - (y = I / 2)),
              (d = b + y),
              (m = Math.min(C, P)),
              (g = Math.max(C, P))),
          { left: c, top: m, right: d, bottom: g }
        );
      }
      function skipOrLimit(e, l, c, d) {
        return e ? 0 : _limitValue(l, c, d);
      }
      function inRange(e, l, c, d) {
        let m = null === l,
          g = null === c,
          y = e && !(m && g) && getBarBounds(e, d);
        return (
          y &&
          (m || _isBetween(l, y.left, y.right)) &&
          (g || _isBetween(c, y.top, y.bottom))
        );
      }
      function addNormalRectPath(e, l) {
        e.rect(l.x, l.y, l.w, l.h);
      }
      function inflateRect(e, l, c = {}) {
        let d = e.x !== c.x ? -l : 0,
          m = e.y !== c.y ? -l : 0,
          g = (e.x + e.w !== c.x + c.w ? l : 0) - d,
          y = (e.y + e.h !== c.y + c.h ? l : 0) - m;
        return {
          x: e.x + d,
          y: e.y + m,
          w: e.w + g,
          h: e.h + y,
          radius: e.radius,
        };
      }
      var eZ = Object.freeze({
        __proto__: null,
        ArcElement: class extends Element {
          static id = "arc";
          static defaults = {
            borderAlign: "center",
            borderColor: "#fff",
            borderDash: [],
            borderDashOffset: 0,
            borderJoinStyle: void 0,
            borderRadius: 0,
            borderWidth: 2,
            offset: 0,
            spacing: 0,
            angle: void 0,
            circular: !0,
          };
          static defaultRoutes = { backgroundColor: "backgroundColor" };
          static descriptors = {
            _scriptable: !0,
            _indexable: (e) => "borderDash" !== e,
          };
          circumference;
          endAngle;
          fullCircles;
          innerRadius;
          outerRadius;
          pixelMargin;
          startAngle;
          constructor(e) {
            super(),
              (this.options = void 0),
              (this.circumference = void 0),
              (this.startAngle = void 0),
              (this.endAngle = void 0),
              (this.innerRadius = void 0),
              (this.outerRadius = void 0),
              (this.pixelMargin = 0),
              (this.fullCircles = 0),
              e && Object.assign(this, e);
          }
          inRange(e, l, c) {
            let d = this.getProps(["x", "y"], c),
              { angle: m, distance: g } = getAngleFromPoint(d, { x: e, y: l }),
              {
                startAngle: y,
                endAngle: b,
                innerRadius: C,
                outerRadius: P,
                circumference: I,
              } = this.getProps(
                [
                  "startAngle",
                  "endAngle",
                  "innerRadius",
                  "outerRadius",
                  "circumference",
                ],
                c
              ),
              B = (this.options.spacing + this.options.borderWidth) / 2,
              N = valueOrDefault(I, b - y),
              F = _angleBetween(m, y, b) && y !== b,
              V = N >= eo || F,
              G = _isBetween(g, C + B, P + B);
            return V && G;
          }
          getCenterPoint(e) {
            let {
                x: l,
                y: c,
                startAngle: d,
                endAngle: m,
                innerRadius: g,
                outerRadius: y,
              } = this.getProps(
                [
                  "x",
                  "y",
                  "startAngle",
                  "endAngle",
                  "innerRadius",
                  "outerRadius",
                ],
                e
              ),
              { offset: b, spacing: C } = this.options,
              P = (d + m) / 2,
              I = (g + y + C + b) / 2;
            return { x: l + Math.cos(P) * I, y: c + Math.sin(P) * I };
          }
          tooltipPosition(e) {
            return this.getCenterPoint(e);
          }
          draw(e) {
            let { options: l, circumference: c } = this,
              d = (l.offset || 0) / 4,
              m = (l.spacing || 0) / 2,
              g = l.circular;
            if (
              ((this.pixelMargin = "inner" === l.borderAlign ? 0.33 : 0),
              (this.fullCircles = c > eo ? Math.floor(c / eo) : 0),
              0 === c || this.innerRadius < 0 || this.outerRadius < 0)
            )
              return;
            e.save();
            let y = (this.startAngle + this.endAngle) / 2;
            e.translate(Math.cos(y) * d, Math.sin(y) * d);
            let b = 1 - Math.sin(Math.min(ei, c || 0)),
              C = d * b;
            (e.fillStyle = l.backgroundColor),
              (e.strokeStyle = l.borderColor),
              (function (e, l, c, d, m) {
                let { fullCircles: g, startAngle: y, circumference: b } = l,
                  C = l.endAngle;
                if (g) {
                  pathArc(e, l, c, d, C, m);
                  for (let l = 0; l < g; ++l) e.fill();
                  isNaN(b) || (C = y + (b % eo || eo));
                }
                pathArc(e, l, c, d, C, m), e.fill();
              })(e, this, C, m, g),
              (function (e, l, c, d, m) {
                let {
                    fullCircles: g,
                    startAngle: y,
                    circumference: b,
                    options: C,
                  } = l,
                  {
                    borderWidth: P,
                    borderJoinStyle: I,
                    borderDash: B,
                    borderDashOffset: N,
                  } = C,
                  F = "inner" === C.borderAlign;
                if (!P) return;
                e.setLineDash(B || []),
                  (e.lineDashOffset = N),
                  F
                    ? ((e.lineWidth = 2 * P), (e.lineJoin = I || "round"))
                    : ((e.lineWidth = P), (e.lineJoin = I || "bevel"));
                let V = l.endAngle;
                if (g) {
                  pathArc(e, l, c, d, V, m);
                  for (let l = 0; l < g; ++l) e.stroke();
                  isNaN(b) || (V = y + (b % eo || eo));
                }
                F &&
                  (function (e, l, c) {
                    let {
                        startAngle: d,
                        pixelMargin: m,
                        x: g,
                        y,
                        outerRadius: b,
                        innerRadius: C,
                      } = l,
                      P = m / b;
                    e.beginPath(),
                      e.arc(g, y, b, d - P, c + P),
                      C > m
                        ? ((P = m / C), e.arc(g, y, C, c + P, d - P, !0))
                        : e.arc(g, y, m, c + ec, d - ec),
                      e.closePath(),
                      e.clip();
                  })(e, l, V),
                  g || (pathArc(e, l, c, d, V, m), e.stroke());
              })(e, this, C, m, g),
              e.restore();
          }
        },
        BarElement: class extends Element {
          static id = "bar";
          static defaults = {
            borderSkipped: "start",
            borderWidth: 0,
            borderRadius: 0,
            inflateAmount: "auto",
            pointStyle: void 0,
          };
          static defaultRoutes = {
            backgroundColor: "backgroundColor",
            borderColor: "borderColor",
          };
          constructor(e) {
            super(),
              (this.options = void 0),
              (this.horizontal = void 0),
              (this.base = void 0),
              (this.width = void 0),
              (this.height = void 0),
              (this.inflateAmount = void 0),
              e && Object.assign(this, e);
          }
          draw(e) {
            var l;
            let {
                inflateAmount: c,
                options: { borderColor: d, backgroundColor: m },
              } = this,
              { inner: g, outer: y } = (function (e) {
                let l = getBarBounds(e),
                  c = l.right - l.left,
                  d = l.bottom - l.top,
                  m = (function (e, l, c) {
                    let d = e.options.borderWidth,
                      m = e.borderSkipped,
                      g = toTRBL(d);
                    return {
                      t: skipOrLimit(m.top, g.top, 0, c),
                      r: skipOrLimit(m.right, g.right, 0, l),
                      b: skipOrLimit(m.bottom, g.bottom, 0, c),
                      l: skipOrLimit(m.left, g.left, 0, l),
                    };
                  })(e, c / 2, d / 2),
                  g = (function (e, l, c) {
                    let { enableBorderRadius: d } = e.getProps([
                        "enableBorderRadius",
                      ]),
                      m = e.options.borderRadius,
                      g = toTRBLCorners(m),
                      y = Math.min(l, c),
                      b = e.borderSkipped,
                      C = d || isObject(m);
                    return {
                      topLeft: skipOrLimit(
                        !C || b.top || b.left,
                        g.topLeft,
                        0,
                        y
                      ),
                      topRight: skipOrLimit(
                        !C || b.top || b.right,
                        g.topRight,
                        0,
                        y
                      ),
                      bottomLeft: skipOrLimit(
                        !C || b.bottom || b.left,
                        g.bottomLeft,
                        0,
                        y
                      ),
                      bottomRight: skipOrLimit(
                        !C || b.bottom || b.right,
                        g.bottomRight,
                        0,
                        y
                      ),
                    };
                  })(e, c / 2, d / 2);
                return {
                  outer: { x: l.left, y: l.top, w: c, h: d, radius: g },
                  inner: {
                    x: l.left + m.l,
                    y: l.top + m.t,
                    w: c - m.l - m.r,
                    h: d - m.t - m.b,
                    radius: {
                      topLeft: Math.max(0, g.topLeft - Math.max(m.t, m.l)),
                      topRight: Math.max(0, g.topRight - Math.max(m.t, m.r)),
                      bottomLeft: Math.max(
                        0,
                        g.bottomLeft - Math.max(m.b, m.l)
                      ),
                      bottomRight: Math.max(
                        0,
                        g.bottomRight - Math.max(m.b, m.r)
                      ),
                    },
                  },
                };
              })(this),
              b =
                (l = y.radius).topLeft ||
                l.topRight ||
                l.bottomLeft ||
                l.bottomRight
                  ? addRoundedRectPath
                  : addNormalRectPath;
            e.save(),
              (y.w !== g.w || y.h !== g.h) &&
                (e.beginPath(),
                b(e, inflateRect(y, c, g)),
                e.clip(),
                b(e, inflateRect(g, -c, y)),
                (e.fillStyle = d),
                e.fill("evenodd")),
              e.beginPath(),
              b(e, inflateRect(g, c)),
              (e.fillStyle = m),
              e.fill(),
              e.restore();
          }
          inRange(e, l, c) {
            return inRange(this, e, l, c);
          }
          inXRange(e, l) {
            return inRange(this, e, null, l);
          }
          inYRange(e, l) {
            return inRange(this, null, e, l);
          }
          getCenterPoint(e) {
            let {
              x: l,
              y: c,
              base: d,
              horizontal: m,
            } = this.getProps(["x", "y", "base", "horizontal"], e);
            return { x: m ? (l + d) / 2 : l, y: m ? c : (c + d) / 2 };
          }
          getRange(e) {
            return "x" === e ? this.width / 2 : this.height / 2;
          }
        },
        LineElement: LineElement,
        PointElement: class extends Element {
          static id = "point";
          parsed;
          skip;
          stop;
          static defaults = {
            borderWidth: 1,
            hitRadius: 1,
            hoverBorderWidth: 1,
            hoverRadius: 4,
            pointStyle: "circle",
            radius: 3,
            rotation: 0,
          };
          static defaultRoutes = {
            backgroundColor: "backgroundColor",
            borderColor: "borderColor",
          };
          constructor(e) {
            super(),
              (this.options = void 0),
              (this.parsed = void 0),
              (this.skip = void 0),
              (this.stop = void 0),
              e && Object.assign(this, e);
          }
          inRange(e, l, c) {
            let d = this.options,
              { x: m, y: g } = this.getProps(["x", "y"], c);
            return (
              Math.pow(e - m, 2) + Math.pow(l - g, 2) <
              Math.pow(d.hitRadius + d.radius, 2)
            );
          }
          inXRange(e, l) {
            return inRange$1(this, e, "x", l);
          }
          inYRange(e, l) {
            return inRange$1(this, e, "y", l);
          }
          getCenterPoint(e) {
            let { x: l, y: c } = this.getProps(["x", "y"], e);
            return { x: l, y: c };
          }
          size(e) {
            let l = (e = e || this.options || {}).radius || 0;
            l = Math.max(l, (l && e.hoverRadius) || 0);
            let c = (l && e.borderWidth) || 0;
            return (l + c) * 2;
          }
          draw(e, l) {
            let c = this.options;
            !this.skip &&
              !(c.radius < 0.1) &&
              _isPointInArea(this, l, this.size(c) / 2) &&
              ((e.strokeStyle = c.borderColor),
              (e.lineWidth = c.borderWidth),
              (e.fillStyle = c.backgroundColor),
              drawPoint(e, c, this.x, this.y));
          }
          getRange() {
            let e = this.options || {};
            return e.radius + e.hitRadius;
          }
        },
      });
      let eY = [
          "rgb(54, 162, 235)",
          "rgb(255, 99, 132)",
          "rgb(255, 159, 64)",
          "rgb(255, 205, 86)",
          "rgb(75, 192, 192)",
          "rgb(153, 102, 255)",
          "rgb(201, 203, 207)",
        ],
        eX = eY.map((e) => e.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
      function getBorderColor(e) {
        return eY[e % eY.length];
      }
      function getBackgroundColor(e) {
        return eX[e % eX.length];
      }
      function containsColorsDefinitions(e) {
        let l;
        for (l in e) if (e[l].borderColor || e[l].backgroundColor) return !0;
        return !1;
      }
      function cleanDecimatedDataset(e) {
        if (e._decimated) {
          let l = e._data;
          delete e._decimated,
            delete e._data,
            Object.defineProperty(e, "data", {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              value: l,
            });
        }
      }
      function cleanDecimatedData(e) {
        e.data.datasets.forEach((e) => {
          cleanDecimatedDataset(e);
        });
      }
      function _getBounds(e, l, c, d) {
        if (d) return;
        let m = l[e],
          g = c[e];
        return (
          "angle" === e && ((m = _normalizeAngle(m)), (g = _normalizeAngle(g))),
          { property: e, start: m, end: g }
        );
      }
      function _findSegmentEnd(e, l, c) {
        for (; l > e; l--) {
          let e = c[l];
          if (!isNaN(e.x) && !isNaN(e.y)) break;
        }
        return l;
      }
      function _getEdge(e, l, c, d) {
        return e && l ? d(e[c], l[c]) : e ? e[c] : l ? l[c] : 0;
      }
      function _createBoundaryLine(e, l) {
        let c = [],
          d = !1;
        return (
          isArray(e)
            ? ((d = !0), (c = e))
            : (c = (function (e, l) {
                let { x: c = null, y: d = null } = e || {},
                  m = l.points,
                  g = [];
                return (
                  l.segments.forEach(({ start: e, end: l }) => {
                    l = _findSegmentEnd(e, l, m);
                    let y = m[e],
                      b = m[l];
                    null !== d
                      ? (g.push({ x: y.x, y: d }), g.push({ x: b.x, y: d }))
                      : null !== c &&
                        (g.push({ x: c, y: y.y }), g.push({ x: c, y: b.y }));
                  }),
                  g
                );
              })(e, l)),
          c.length
            ? new LineElement({
                points: c,
                options: { tension: 0 },
                _loop: d,
                _fullLoop: d,
              })
            : null
        );
      }
      function _shouldApplyFill(e) {
        return e && !1 !== e.fill;
      }
      let simpleArc = class simpleArc {
        constructor(e) {
          (this.x = e.x), (this.y = e.y), (this.radius = e.radius);
        }
        pathSegment(e, l, c) {
          let { x: d, y: m, radius: g } = this;
          return (
            (l = l || { start: 0, end: eo }),
            e.arc(d, m, g, l.end, l.start, !0),
            !c.bounds
          );
        }
        interpolate(e) {
          let { x: l, y: c, radius: d } = this,
            m = e.angle;
          return { x: l + Math.cos(m) * d, y: c + Math.sin(m) * d, angle: m };
        }
      };
      function _drawfill(e, l, c) {
        let d = (function (e) {
            let { chart: l, fill: c, line: d } = e;
            if (isNumberFinite(c))
              return (function (e, l) {
                let c = e.getDatasetMeta(l),
                  d = c && e.isDatasetVisible(l);
                return d ? c.dataset : null;
              })(l, c);
            if ("stack" === c)
              return (function (e) {
                let { scale: l, index: c, line: d } = e,
                  m = [],
                  g = d.segments,
                  y = d.points,
                  b = (function (e, l) {
                    let c = [],
                      d = e.getMatchingVisibleMetas("line");
                    for (let e = 0; e < d.length; e++) {
                      let m = d[e];
                      if (m.index === l) break;
                      m.hidden || c.unshift(m.dataset);
                    }
                    return c;
                  })(l, c);
                b.push(_createBoundaryLine({ x: null, y: l.bottom }, d));
                for (let e = 0; e < g.length; e++) {
                  let l = g[e];
                  for (let e = l.start; e <= l.end; e++)
                    !(function (e, l, c) {
                      let d = [];
                      for (let m = 0; m < c.length; m++) {
                        let g = c[m],
                          {
                            first: y,
                            last: b,
                            point: C,
                          } = (function (e, l, c) {
                            let d = e.interpolate(l, c);
                            if (!d) return {};
                            let m = d[c],
                              g = e.segments,
                              y = e.points,
                              b = !1,
                              C = !1;
                            for (let e = 0; e < g.length; e++) {
                              let l = g[e],
                                d = y[l.start][c],
                                P = y[l.end][c];
                              if (_isBetween(m, d, P)) {
                                (b = m === d), (C = m === P);
                                break;
                              }
                            }
                            return { first: b, last: C, point: d };
                          })(g, l, "x");
                        if (C && (!y || !b)) {
                          if (y) d.unshift(C);
                          else if ((e.push(C), !b)) break;
                        }
                      }
                      e.push(...d);
                    })(m, y[e], b);
                }
                return new LineElement({ points: m, options: {} });
              })(e);
            if ("shape" === c) return !0;
            let m = (function (e) {
              let l = e.scale || {};
              return l.getPointPositionForValue
                ? (function (e) {
                    let { scale: l, fill: c } = e,
                      d = l.options,
                      m = l.getLabels().length,
                      g = d.reverse ? l.max : l.min,
                      y =
                        "start" === c
                          ? g
                          : "end" === c
                          ? l.options.reverse
                            ? l.min
                            : l.max
                          : isObject(c)
                          ? c.value
                          : l.getBaseValue(),
                      b = [];
                    if (d.grid.circular) {
                      let e = l.getPointPositionForValue(0, g);
                      return new simpleArc({
                        x: e.x,
                        y: e.y,
                        radius: l.getDistanceFromCenterForValue(y),
                      });
                    }
                    for (let e = 0; e < m; ++e)
                      b.push(l.getPointPositionForValue(e, y));
                    return b;
                  })(e)
                : (function (e) {
                    let l;
                    let { scale: c = {}, fill: d } = e,
                      m =
                        ((l = null),
                        "start" === d
                          ? (l = c.bottom)
                          : "end" === d
                          ? (l = c.top)
                          : isObject(d)
                          ? (l = c.getPixelForValue(d.value))
                          : c.getBasePixel && (l = c.getBasePixel()),
                        l);
                    if (isNumberFinite(m)) {
                      let e = c.isHorizontal();
                      return { x: e ? m : null, y: e ? null : m };
                    }
                    return null;
                  })(e);
            })(e);
            return m instanceof simpleArc ? m : _createBoundaryLine(m, d);
          })(l),
          { chart: m, index: g, line: y, scale: b, axis: C } = l,
          P = y.options,
          I = P.fill,
          B = P.backgroundColor,
          { above: N = B, below: F = B } = I || {},
          V = m.getDatasetMeta(g),
          G = getDatasetClipArea(m, V);
        d &&
          y.points.length &&
          (clipArea(e, c),
          (function (e, l) {
            let {
                line: c,
                target: d,
                above: m,
                below: g,
                area: y,
                scale: b,
                clip: C,
              } = l,
              P = c._loop ? "angle" : l.axis;
            e.save(),
              "x" === P &&
                g !== m &&
                (clipVertical(e, d, y.top),
                fill(e, {
                  line: c,
                  target: d,
                  color: m,
                  scale: b,
                  property: P,
                  clip: C,
                }),
                e.restore(),
                e.save(),
                clipVertical(e, d, y.bottom)),
              fill(e, {
                line: c,
                target: d,
                color: g,
                scale: b,
                property: P,
                clip: C,
              }),
              e.restore();
          })(e, {
            line: y,
            target: d,
            above: N,
            below: F,
            area: c,
            scale: b,
            axis: C,
            clip: G,
          }),
          unclipArea(e));
      }
      function clipVertical(e, l, c) {
        let { segments: d, points: m } = l,
          g = !0,
          y = !1;
        for (let b of (e.beginPath(), d)) {
          let { start: d, end: C } = b,
            P = m[d],
            I = m[_findSegmentEnd(d, C, m)];
          g
            ? (e.moveTo(P.x, P.y), (g = !1))
            : (e.lineTo(P.x, c), e.lineTo(P.x, P.y)),
            (y = !!l.pathSegment(e, b, { move: y }))
              ? e.closePath()
              : e.lineTo(I.x, c);
        }
        e.lineTo(l.first().x, c), e.closePath(), e.clip();
      }
      function fill(e, l) {
        let {
            line: c,
            target: d,
            property: m,
            color: g,
            scale: y,
            clip: b,
          } = l,
          C = (function (e, l, c) {
            let d = e.segments,
              m = e.points,
              g = l.points,
              y = [];
            for (let e of d) {
              let { start: d, end: b } = e;
              b = _findSegmentEnd(d, b, m);
              let C = _getBounds(c, m[d], m[b], e.loop);
              if (!l.segments) {
                y.push({ source: e, target: C, start: m[d], end: m[b] });
                continue;
              }
              let P = _boundSegments(l, C);
              for (let l of P) {
                let d = _getBounds(c, g[l.start], g[l.end], l.loop),
                  b = _boundSegment(e, m, d);
                for (let e of b)
                  y.push({
                    source: e,
                    target: l,
                    start: { [c]: _getEdge(C, d, "start", Math.max) },
                    end: { [c]: _getEdge(C, d, "end", Math.min) },
                  });
              }
            }
            return y;
          })(c, d, m);
        for (let { source: l, target: P, start: I, end: B } of C) {
          let C;
          let { style: { backgroundColor: N = g } = {} } = l,
            F = !0 !== d;
          e.save(),
            (e.fillStyle = N),
            (function (e, l, c, d) {
              let m = l.chart.chartArea,
                { property: g, start: y, end: b } = d || {};
              if ("x" === g || "y" === g) {
                let l, d, C, P;
                "x" === g
                  ? ((l = y), (d = m.top), (C = b), (P = m.bottom))
                  : ((l = m.left), (d = y), (C = m.right), (P = b)),
                  e.beginPath(),
                  c &&
                    ((l = Math.max(l, c.left)),
                    (C = Math.min(C, c.right)),
                    (d = Math.max(d, c.top)),
                    (P = Math.min(P, c.bottom))),
                  e.rect(l, d, C - l, P - d),
                  e.clip();
              }
            })(e, y, b, F && _getBounds(m, I, B)),
            e.beginPath();
          let V = !!c.pathSegment(e, l);
          if (F) {
            V ? e.closePath() : interpolatedLineTo(e, d, B, m);
            let l = !!d.pathSegment(e, P, { move: V, reverse: !0 });
            (C = V && l) || interpolatedLineTo(e, d, I, m);
          }
          e.closePath(), e.fill(C ? "evenodd" : "nonzero"), e.restore();
        }
      }
      function interpolatedLineTo(e, l, c, d) {
        let m = l.interpolate(c, d);
        m && e.lineTo(m.x, m.y);
      }
      let getBoxSize = (e, l) => {
          let { boxHeight: c = l, boxWidth: d = l } = e;
          return (
            e.usePointStyle &&
              ((c = Math.min(c, l)), (d = e.pointStyleWidth || Math.min(d, l))),
            { boxWidth: d, boxHeight: c, itemHeight: Math.max(l, c) }
          );
        },
        itemsEqual = (e, l) =>
          null !== e &&
          null !== l &&
          e.datasetIndex === l.datasetIndex &&
          e.index === l.index;
      let Legend = class Legend extends Element {
        constructor(e) {
          super(),
            (this._added = !1),
            (this.legendHitBoxes = []),
            (this._hoveredItem = null),
            (this.doughnutMode = !1),
            (this.chart = e.chart),
            (this.options = e.options),
            (this.ctx = e.ctx),
            (this.legendItems = void 0),
            (this.columnSizes = void 0),
            (this.lineWidths = void 0),
            (this.maxHeight = void 0),
            (this.maxWidth = void 0),
            (this.top = void 0),
            (this.bottom = void 0),
            (this.left = void 0),
            (this.right = void 0),
            (this.height = void 0),
            (this.width = void 0),
            (this._margins = void 0),
            (this.position = void 0),
            (this.weight = void 0),
            (this.fullSize = void 0);
        }
        update(e, l, c) {
          (this.maxWidth = e),
            (this.maxHeight = l),
            (this._margins = c),
            this.setDimensions(),
            this.buildLabels(),
            this.fit();
        }
        setDimensions() {
          this.isHorizontal()
            ? ((this.width = this.maxWidth),
              (this.left = this._margins.left),
              (this.right = this.width))
            : ((this.height = this.maxHeight),
              (this.top = this._margins.top),
              (this.bottom = this.height));
        }
        buildLabels() {
          let e = this.options.labels || {},
            l = callback(e.generateLabels, [this.chart], this) || [];
          e.filter && (l = l.filter((l) => e.filter(l, this.chart.data))),
            e.sort && (l = l.sort((l, c) => e.sort(l, c, this.chart.data))),
            this.options.reverse && l.reverse(),
            (this.legendItems = l);
        }
        fit() {
          let e, l;
          let { options: c, ctx: d } = this;
          if (!c.display) {
            this.width = this.height = 0;
            return;
          }
          let m = c.labels,
            g = toFont(m.font),
            y = g.size,
            b = this._computeTitleHeight(),
            { boxWidth: C, itemHeight: P } = getBoxSize(m, y);
          (d.font = g.string),
            this.isHorizontal()
              ? ((e = this.maxWidth), (l = this._fitRows(b, y, C, P) + 10))
              : ((l = this.maxHeight), (e = this._fitCols(b, g, C, P) + 10)),
            (this.width = Math.min(e, c.maxWidth || this.maxWidth)),
            (this.height = Math.min(l, c.maxHeight || this.maxHeight));
        }
        _fitRows(e, l, c, d) {
          let {
              ctx: m,
              maxWidth: g,
              options: {
                labels: { padding: y },
              },
            } = this,
            b = (this.legendHitBoxes = []),
            C = (this.lineWidths = [0]),
            P = d + y,
            I = e;
          (m.textAlign = "left"), (m.textBaseline = "middle");
          let B = -1,
            N = -P;
          return (
            this.legendItems.forEach((e, F) => {
              let V = c + l / 2 + m.measureText(e.text).width;
              (0 === F || C[C.length - 1] + V + 2 * y > g) &&
                ((I += P), (C[C.length - (F > 0 ? 0 : 1)] = 0), (N += P), B++),
                (b[F] = { left: 0, top: N, row: B, width: V, height: d }),
                (C[C.length - 1] += V + y);
            }),
            I
          );
        }
        _fitCols(e, l, c, d) {
          let {
              ctx: m,
              maxHeight: g,
              options: {
                labels: { padding: y },
              },
            } = this,
            b = (this.legendHitBoxes = []),
            C = (this.columnSizes = []),
            P = g - e,
            I = y,
            B = 0,
            N = 0,
            F = 0,
            V = 0;
          return (
            this.legendItems.forEach((e, g) => {
              let { itemWidth: G, itemHeight: Q } = (function (e, l, c, d, m) {
                var g;
                let y, b;
                let C =
                    ((y = d.text) &&
                      "string" != typeof y &&
                      (y = y.reduce((e, l) => (e.length > l.length ? e : l))),
                    e + l.size / 2 + c.measureText(y).width),
                  P =
                    ((g = l.lineHeight),
                    (b = m),
                    "string" != typeof d.text &&
                      (b = calculateLegendItemHeight(d, g)),
                    b);
                return { itemWidth: C, itemHeight: P };
              })(c, l, m, e, d);
              g > 0 &&
                N + Q + 2 * y > P &&
                ((I += B + y),
                C.push({ width: B, height: N }),
                (F += B + y),
                V++,
                (B = N = 0)),
                (b[g] = { left: F, top: N, col: V, width: G, height: Q }),
                (B = Math.max(B, G)),
                (N += Q + y);
            }),
            (I += B),
            C.push({ width: B, height: N }),
            I
          );
        }
        adjustHitBoxes() {
          if (!this.options.display) return;
          let e = this._computeTitleHeight(),
            {
              legendHitBoxes: l,
              options: {
                align: c,
                labels: { padding: d },
                rtl: m,
              },
            } = this,
            g = getRtlAdapter(m, this.left, this.width);
          if (this.isHorizontal()) {
            let m = 0,
              y = _alignStartEnd(
                c,
                this.left + d,
                this.right - this.lineWidths[m]
              );
            for (let b of l)
              m !== b.row &&
                ((m = b.row),
                (y = _alignStartEnd(
                  c,
                  this.left + d,
                  this.right - this.lineWidths[m]
                ))),
                (b.top += this.top + e + d),
                (b.left = g.leftForLtr(g.x(y), b.width)),
                (y += b.width + d);
          } else {
            let m = 0,
              y = _alignStartEnd(
                c,
                this.top + e + d,
                this.bottom - this.columnSizes[m].height
              );
            for (let b of l)
              b.col !== m &&
                ((m = b.col),
                (y = _alignStartEnd(
                  c,
                  this.top + e + d,
                  this.bottom - this.columnSizes[m].height
                ))),
                (b.top = y),
                (b.left += this.left + d),
                (b.left = g.leftForLtr(g.x(b.left), b.width)),
                (y += b.height + d);
          }
        }
        isHorizontal() {
          return (
            "top" === this.options.position ||
            "bottom" === this.options.position
          );
        }
        draw() {
          if (this.options.display) {
            let e = this.ctx;
            clipArea(e, this), this._draw(), unclipArea(e);
          }
        }
        _draw() {
          let e;
          let { options: l, columnSizes: c, lineWidths: d, ctx: m } = this,
            { align: g, labels: y } = l,
            b = eE.color,
            C = getRtlAdapter(l.rtl, this.left, this.width),
            P = toFont(y.font),
            { padding: I } = y,
            B = P.size,
            N = B / 2;
          this.drawTitle(),
            (m.textAlign = C.textAlign("left")),
            (m.textBaseline = "middle"),
            (m.lineWidth = 0.5),
            (m.font = P.string);
          let { boxWidth: F, boxHeight: V, itemHeight: G } = getBoxSize(y, B),
            drawLegendBox = function (e, l, c) {
              if (isNaN(F) || F <= 0 || isNaN(V) || V < 0) return;
              m.save();
              let d = valueOrDefault(c.lineWidth, 1);
              if (
                ((m.fillStyle = valueOrDefault(c.fillStyle, b)),
                (m.lineCap = valueOrDefault(c.lineCap, "butt")),
                (m.lineDashOffset = valueOrDefault(c.lineDashOffset, 0)),
                (m.lineJoin = valueOrDefault(c.lineJoin, "miter")),
                (m.lineWidth = d),
                (m.strokeStyle = valueOrDefault(c.strokeStyle, b)),
                m.setLineDash(valueOrDefault(c.lineDash, [])),
                y.usePointStyle)
              ) {
                let g = {
                    radius: (V * Math.SQRT2) / 2,
                    pointStyle: c.pointStyle,
                    rotation: c.rotation,
                    borderWidth: d,
                  },
                  b = C.xPlus(e, F / 2),
                  P = l + N;
                drawPointLegend(m, g, b, P, y.pointStyleWidth && F);
              } else {
                let g = l + Math.max((B - V) / 2, 0),
                  y = C.leftForLtr(e, F),
                  b = toTRBLCorners(c.borderRadius);
                m.beginPath(),
                  Object.values(b).some((e) => 0 !== e)
                    ? addRoundedRectPath(m, {
                        x: y,
                        y: g,
                        w: F,
                        h: V,
                        radius: b,
                      })
                    : m.rect(y, g, F, V),
                  m.fill(),
                  0 !== d && m.stroke();
              }
              m.restore();
            },
            fillText = function (e, l, c) {
              renderText(m, c.text, e, l + G / 2, P, {
                strikethrough: c.hidden,
                textAlign: C.textAlign(c.textAlign),
              });
            },
            Q = this.isHorizontal(),
            $ = this._computeTitleHeight();
          (e = Q
            ? {
                x: _alignStartEnd(g, this.left + I, this.right - d[0]),
                y: this.top + I + $,
                line: 0,
              }
            : {
                x: this.left + I,
                y: _alignStartEnd(
                  g,
                  this.top + $ + I,
                  this.bottom - c[0].height
                ),
                line: 0,
              }),
            overrideTextDirection(this.ctx, l.textDirection);
          let Z = G + I;
          this.legendItems.forEach((b, B) => {
            (m.strokeStyle = b.fontColor), (m.fillStyle = b.fontColor);
            let V = m.measureText(b.text).width,
              G = C.textAlign(b.textAlign || (b.textAlign = y.textAlign)),
              Y = F + N + V,
              et = e.x,
              en = e.y;
            C.setWidth(this.width),
              Q
                ? B > 0 &&
                  et + Y + I > this.right &&
                  ((en = e.y += Z),
                  e.line++,
                  (et = e.x =
                    _alignStartEnd(g, this.left + I, this.right - d[e.line])))
                : B > 0 &&
                  en + Z > this.bottom &&
                  ((et = e.x = et + c[e.line].width + I),
                  e.line++,
                  (en = e.y =
                    _alignStartEnd(
                      g,
                      this.top + $ + I,
                      this.bottom - c[e.line].height
                    )));
            let er = C.x(et);
            if (
              (drawLegendBox(er, en, b),
              (et = _textX(G, et + F + N, Q ? et + Y : this.right, l.rtl)),
              fillText(C.x(et), en, b),
              Q)
            )
              e.x += Y + I;
            else if ("string" != typeof b.text) {
              let l = P.lineHeight;
              e.y += calculateLegendItemHeight(b, l) + I;
            } else e.y += Z;
          }),
            restoreTextDirection(this.ctx, l.textDirection);
        }
        drawTitle() {
          let e;
          let l = this.options,
            c = l.title,
            d = toFont(c.font),
            m = toPadding(c.padding);
          if (!c.display) return;
          let g = getRtlAdapter(l.rtl, this.left, this.width),
            y = this.ctx,
            b = c.position,
            C = d.size / 2,
            P = m.top + C,
            I = this.left,
            B = this.width;
          if (this.isHorizontal())
            (B = Math.max(...this.lineWidths)),
              (e = this.top + P),
              (I = _alignStartEnd(l.align, I, this.right - B));
          else {
            let c = this.columnSizes.reduce((e, l) => Math.max(e, l.height), 0);
            e =
              P +
              _alignStartEnd(
                l.align,
                this.top,
                this.bottom - c - l.labels.padding - this._computeTitleHeight()
              );
          }
          let N = _alignStartEnd(b, I, I + B);
          (y.textAlign = g.textAlign(_toLeftRightCenter(b))),
            (y.textBaseline = "middle"),
            (y.strokeStyle = c.color),
            (y.fillStyle = c.color),
            (y.font = d.string),
            renderText(y, c.text, N, e, d);
        }
        _computeTitleHeight() {
          let e = this.options.title,
            l = toFont(e.font),
            c = toPadding(e.padding);
          return e.display ? l.lineHeight + c.height : 0;
        }
        _getLegendItemAt(e, l) {
          let c, d, m;
          if (
            _isBetween(e, this.left, this.right) &&
            _isBetween(l, this.top, this.bottom)
          ) {
            for (c = 0, m = this.legendHitBoxes; c < m.length; ++c)
              if (
                _isBetween(e, (d = m[c]).left, d.left + d.width) &&
                _isBetween(l, d.top, d.top + d.height)
              )
                return this.legendItems[c];
          }
          return null;
        }
        handleEvent(e) {
          var l;
          let c = this.options;
          if (
            (("mousemove" !== (l = e.type) && "mouseout" !== l) ||
              (!c.onHover && !c.onLeave)) &&
            (!c.onClick || ("click" !== l && "mouseup" !== l))
          )
            return;
          let d = this._getLegendItemAt(e.x, e.y);
          if ("mousemove" === e.type || "mouseout" === e.type) {
            let l = this._hoveredItem,
              m = itemsEqual(l, d);
            l && !m && callback(c.onLeave, [e, l, this], this),
              (this._hoveredItem = d),
              d && !m && callback(c.onHover, [e, d, this], this);
          } else d && callback(c.onClick, [e, d, this], this);
        }
      };
      function calculateLegendItemHeight(e, l) {
        let c = e.text ? e.text.length : 0;
        return l * c;
      }
      let Title = class Title extends Element {
        constructor(e) {
          super(),
            (this.chart = e.chart),
            (this.options = e.options),
            (this.ctx = e.ctx),
            (this._padding = void 0),
            (this.top = void 0),
            (this.bottom = void 0),
            (this.left = void 0),
            (this.right = void 0),
            (this.width = void 0),
            (this.height = void 0),
            (this.position = void 0),
            (this.weight = void 0),
            (this.fullSize = void 0);
        }
        update(e, l) {
          let c = this.options;
          if (((this.left = 0), (this.top = 0), !c.display)) {
            this.width = this.height = this.right = this.bottom = 0;
            return;
          }
          (this.width = this.right = e), (this.height = this.bottom = l);
          let d = isArray(c.text) ? c.text.length : 1;
          this._padding = toPadding(c.padding);
          let m = d * toFont(c.font).lineHeight + this._padding.height;
          this.isHorizontal() ? (this.height = m) : (this.width = m);
        }
        isHorizontal() {
          let e = this.options.position;
          return "top" === e || "bottom" === e;
        }
        _drawArgs(e) {
          let l, c, d;
          let { top: m, left: g, bottom: y, right: b, options: C } = this,
            P = C.align,
            I = 0;
          return (
            this.isHorizontal()
              ? ((c = _alignStartEnd(P, g, b)), (d = m + e), (l = b - g))
              : ("left" === C.position
                  ? ((c = g + e),
                    (d = _alignStartEnd(P, y, m)),
                    (I = -0.5 * ei))
                  : ((c = b - e),
                    (d = _alignStartEnd(P, m, y)),
                    (I = 0.5 * ei)),
                (l = y - m)),
            { titleX: c, titleY: d, maxWidth: l, rotation: I }
          );
        }
        draw() {
          let e = this.ctx,
            l = this.options;
          if (!l.display) return;
          let c = toFont(l.font),
            d = c.lineHeight,
            m = d / 2 + this._padding.top,
            {
              titleX: g,
              titleY: y,
              maxWidth: b,
              rotation: C,
            } = this._drawArgs(m);
          renderText(e, l.text, 0, 0, c, {
            color: l.color,
            maxWidth: b,
            rotation: C,
            textAlign: _toLeftRightCenter(l.align),
            textBaseline: "middle",
            translation: [g, y],
          });
        }
      };
      let eJ = new WeakMap(),
        e0 = {
          average(e) {
            let l, c;
            if (!e.length) return !1;
            let d = new Set(),
              m = 0,
              g = 0;
            for (l = 0, c = e.length; l < c; ++l) {
              let c = e[l].element;
              if (c && c.hasValue()) {
                let e = c.tooltipPosition();
                d.add(e.x), (m += e.y), ++g;
              }
            }
            if (0 === g || 0 === d.size) return !1;
            let y = [...d].reduce((e, l) => e + l) / d.size;
            return { x: y, y: m / g };
          },
          nearest(e, l) {
            let c, d, m;
            if (!e.length) return !1;
            let g = l.x,
              y = l.y,
              b = Number.POSITIVE_INFINITY;
            for (c = 0, d = e.length; c < d; ++c) {
              let d = e[c].element;
              if (d && d.hasValue()) {
                let e = d.getCenterPoint(),
                  c = distanceBetweenPoints(l, e);
                c < b && ((b = c), (m = d));
              }
            }
            if (m) {
              let e = m.tooltipPosition();
              (g = e.x), (y = e.y);
            }
            return { x: g, y };
          },
        };
      function pushOrConcat(e, l) {
        return (
          l && (isArray(l) ? Array.prototype.push.apply(e, l) : e.push(l)), e
        );
      }
      function splitNewlines(e) {
        return ("string" == typeof e || e instanceof String) &&
          e.indexOf("\n") > -1
          ? e.split("\n")
          : e;
      }
      function getTooltipSize(e, l) {
        let c = e.chart.ctx,
          { body: d, footer: m, title: g } = e,
          { boxWidth: y, boxHeight: b } = l,
          C = toFont(l.bodyFont),
          P = toFont(l.titleFont),
          I = toFont(l.footerFont),
          B = g.length,
          N = m.length,
          F = d.length,
          V = toPadding(l.padding),
          G = V.height,
          Q = 0,
          $ = d.reduce(
            (e, l) => e + l.before.length + l.lines.length + l.after.length,
            0
          );
        if (
          (($ += e.beforeBody.length + e.afterBody.length),
          B &&
            (G +=
              B * P.lineHeight +
              (B - 1) * l.titleSpacing +
              l.titleMarginBottom),
          $)
        ) {
          let e = l.displayColors ? Math.max(b, C.lineHeight) : C.lineHeight;
          G += F * e + ($ - F) * C.lineHeight + ($ - 1) * l.bodySpacing;
        }
        N &&
          (G +=
            l.footerMarginTop + N * I.lineHeight + (N - 1) * l.footerSpacing);
        let Z = 0,
          maxLineWidth = function (e) {
            Q = Math.max(Q, c.measureText(e).width + Z);
          };
        return (
          c.save(),
          (c.font = P.string),
          each(e.title, maxLineWidth),
          (c.font = C.string),
          each(e.beforeBody.concat(e.afterBody), maxLineWidth),
          (Z = l.displayColors ? y + 2 + l.boxPadding : 0),
          each(d, (e) => {
            each(e.before, maxLineWidth),
              each(e.lines, maxLineWidth),
              each(e.after, maxLineWidth);
          }),
          (Z = 0),
          (c.font = I.string),
          each(e.footer, maxLineWidth),
          c.restore(),
          { width: (Q += V.width), height: G }
        );
      }
      function determineAlignment(e, l, c) {
        let d =
          c.yAlign ||
          l.yAlign ||
          (function (e, l) {
            let { y: c, height: d } = l;
            return c < d / 2
              ? "top"
              : c > e.height - d / 2
              ? "bottom"
              : "center";
          })(e, c);
        return {
          xAlign:
            c.xAlign ||
            l.xAlign ||
            (function (e, l, c, d) {
              let { x: m, width: g } = c,
                {
                  width: y,
                  chartArea: { left: b, right: C },
                } = e,
                P = "center";
              return (
                "center" === d
                  ? (P = m <= (b + C) / 2 ? "left" : "right")
                  : m <= g / 2
                  ? (P = "left")
                  : m >= y - g / 2 && (P = "right"),
                (function (e, l, c, d) {
                  let { x: m, width: g } = d,
                    y = c.caretSize + c.caretPadding;
                  if (
                    ("left" === e && m + g + y > l.width) ||
                    ("right" === e && m - g - y < 0)
                  )
                    return !0;
                })(P, e, l, c) && (P = "center"),
                P
              );
            })(e, l, c, d),
          yAlign: d,
        };
      }
      function getBackgroundPoint(e, l, c, d) {
        let { caretSize: m, caretPadding: g, cornerRadius: y } = e,
          { xAlign: b, yAlign: C } = c,
          P = m + g,
          {
            topLeft: I,
            topRight: B,
            bottomLeft: N,
            bottomRight: F,
          } = toTRBLCorners(y),
          V = (function (e, l) {
            let { x: c, width: d } = e;
            return "right" === l ? (c -= d) : "center" === l && (c -= d / 2), c;
          })(l, b),
          G = (function (e, l, c) {
            let { y: d, height: m } = e;
            return (
              "top" === l
                ? (d += c)
                : "bottom" === l
                ? (d -= m + c)
                : (d -= m / 2),
              d
            );
          })(l, C, P);
        return (
          "center" === C
            ? "left" === b
              ? (V += P)
              : "right" === b && (V -= P)
            : "left" === b
            ? (V -= Math.max(I, N) + m)
            : "right" === b && (V += Math.max(B, F) + m),
          {
            x: _limitValue(V, 0, d.width - l.width),
            y: _limitValue(G, 0, d.height - l.height),
          }
        );
      }
      function getAlignedX(e, l, c) {
        let d = toPadding(c.padding);
        return "center" === l
          ? e.x + e.width / 2
          : "right" === l
          ? e.x + e.width - d.right
          : e.x + d.left;
      }
      function overrideCallbacks(e, l) {
        let c =
          l && l.dataset && l.dataset.tooltip && l.dataset.tooltip.callbacks;
        return c ? e.override(c) : e;
      }
      let e1 = {
        beforeTitle: noop,
        title(e) {
          if (e.length > 0) {
            let l = e[0],
              c = l.chart.data.labels,
              d = c ? c.length : 0;
            if (this && this.options && "dataset" === this.options.mode)
              return l.dataset.label || "";
            if (l.label) return l.label;
            if (d > 0 && l.dataIndex < d) return c[l.dataIndex];
          }
          return "";
        },
        afterTitle: noop,
        beforeBody: noop,
        beforeLabel: noop,
        label(e) {
          if (this && this.options && "dataset" === this.options.mode)
            return e.label + ": " + e.formattedValue || e.formattedValue;
          let l = e.dataset.label || "";
          l && (l += ": ");
          let c = e.formattedValue;
          return isNullOrUndef(c) || (l += c), l;
        },
        labelColor(e) {
          let l = e.chart.getDatasetMeta(e.datasetIndex),
            c = l.controller.getStyle(e.dataIndex);
          return {
            borderColor: c.borderColor,
            backgroundColor: c.backgroundColor,
            borderWidth: c.borderWidth,
            borderDash: c.borderDash,
            borderDashOffset: c.borderDashOffset,
            borderRadius: 0,
          };
        },
        labelTextColor() {
          return this.options.bodyColor;
        },
        labelPointStyle(e) {
          let l = e.chart.getDatasetMeta(e.datasetIndex),
            c = l.controller.getStyle(e.dataIndex);
          return { pointStyle: c.pointStyle, rotation: c.rotation };
        },
        afterLabel: noop,
        afterBody: noop,
        beforeFooter: noop,
        footer: noop,
        afterFooter: noop,
      };
      function invokeCallbackWithFallback(e, l, c, d) {
        let m = e[l].call(c, d);
        return void 0 === m ? e1[l].call(c, d) : m;
      }
      let Tooltip = class Tooltip extends Element {
        static positioners = e0;
        constructor(e) {
          super(),
            (this.opacity = 0),
            (this._active = []),
            (this._eventPosition = void 0),
            (this._size = void 0),
            (this._cachedAnimations = void 0),
            (this._tooltipItems = []),
            (this.$animations = void 0),
            (this.$context = void 0),
            (this.chart = e.chart),
            (this.options = e.options),
            (this.dataPoints = void 0),
            (this.title = void 0),
            (this.beforeBody = void 0),
            (this.body = void 0),
            (this.afterBody = void 0),
            (this.footer = void 0),
            (this.xAlign = void 0),
            (this.yAlign = void 0),
            (this.x = void 0),
            (this.y = void 0),
            (this.height = void 0),
            (this.width = void 0),
            (this.caretX = void 0),
            (this.caretY = void 0),
            (this.labelColors = void 0),
            (this.labelPointStyles = void 0),
            (this.labelTextColors = void 0);
        }
        initialize(e) {
          (this.options = e),
            (this._cachedAnimations = void 0),
            (this.$context = void 0);
        }
        _resolveAnimations() {
          let e = this._cachedAnimations;
          if (e) return e;
          let l = this.chart,
            c = this.options.setContext(this.getContext()),
            d = c.enabled && l.options.animation && c.animations,
            m = new Animations(this.chart, d);
          return d._cacheable && (this._cachedAnimations = Object.freeze(m)), m;
        }
        getContext() {
          return (
            this.$context ||
            (this.$context = createContext(this.chart.getContext(), {
              tooltip: this,
              tooltipItems: this._tooltipItems,
              type: "tooltip",
            }))
          );
        }
        getTitle(e, l) {
          let { callbacks: c } = l,
            d = invokeCallbackWithFallback(c, "beforeTitle", this, e),
            m = invokeCallbackWithFallback(c, "title", this, e),
            g = invokeCallbackWithFallback(c, "afterTitle", this, e),
            y = [];
          return (
            (y = pushOrConcat(y, splitNewlines(d))),
            (y = pushOrConcat(y, splitNewlines(m))),
            (y = pushOrConcat(y, splitNewlines(g)))
          );
        }
        getBeforeBody(e, l) {
          return pushOrConcat(
            [],
            splitNewlines(
              invokeCallbackWithFallback(l.callbacks, "beforeBody", this, e)
            )
          );
        }
        getBody(e, l) {
          let { callbacks: c } = l,
            d = [];
          return (
            each(e, (e) => {
              let l = { before: [], lines: [], after: [] },
                m = overrideCallbacks(c, e);
              pushOrConcat(
                l.before,
                splitNewlines(
                  invokeCallbackWithFallback(m, "beforeLabel", this, e)
                )
              ),
                pushOrConcat(
                  l.lines,
                  invokeCallbackWithFallback(m, "label", this, e)
                ),
                pushOrConcat(
                  l.after,
                  splitNewlines(
                    invokeCallbackWithFallback(m, "afterLabel", this, e)
                  )
                ),
                d.push(l);
            }),
            d
          );
        }
        getAfterBody(e, l) {
          return pushOrConcat(
            [],
            splitNewlines(
              invokeCallbackWithFallback(l.callbacks, "afterBody", this, e)
            )
          );
        }
        getFooter(e, l) {
          let { callbacks: c } = l,
            d = invokeCallbackWithFallback(c, "beforeFooter", this, e),
            m = invokeCallbackWithFallback(c, "footer", this, e),
            g = invokeCallbackWithFallback(c, "afterFooter", this, e),
            y = [];
          return (
            (y = pushOrConcat(y, splitNewlines(d))),
            (y = pushOrConcat(y, splitNewlines(m))),
            (y = pushOrConcat(y, splitNewlines(g)))
          );
        }
        _createItems(e) {
          let l, c;
          let d = this._active,
            m = this.chart.data,
            g = [],
            y = [],
            b = [],
            C = [];
          for (l = 0, c = d.length; l < c; ++l)
            C.push(
              (function (e, l) {
                let { element: c, datasetIndex: d, index: m } = l,
                  g = e.getDatasetMeta(d).controller,
                  { label: y, value: b } = g.getLabelAndValue(m);
                return {
                  chart: e,
                  label: y,
                  parsed: g.getParsed(m),
                  raw: e.data.datasets[d].data[m],
                  formattedValue: b,
                  dataset: g.getDataset(),
                  dataIndex: m,
                  datasetIndex: d,
                  element: c,
                };
              })(this.chart, d[l])
            );
          return (
            e.filter && (C = C.filter((l, c, d) => e.filter(l, c, d, m))),
            e.itemSort && (C = C.sort((l, c) => e.itemSort(l, c, m))),
            each(C, (l) => {
              let c = overrideCallbacks(e.callbacks, l);
              g.push(invokeCallbackWithFallback(c, "labelColor", this, l)),
                y.push(
                  invokeCallbackWithFallback(c, "labelPointStyle", this, l)
                ),
                b.push(
                  invokeCallbackWithFallback(c, "labelTextColor", this, l)
                );
            }),
            (this.labelColors = g),
            (this.labelPointStyles = y),
            (this.labelTextColors = b),
            (this.dataPoints = C),
            C
          );
        }
        update(e, l) {
          let c;
          let d = this.options.setContext(this.getContext()),
            m = this._active,
            g = [];
          if (m.length) {
            let e = e0[d.position].call(this, m, this._eventPosition);
            (g = this._createItems(d)),
              (this.title = this.getTitle(g, d)),
              (this.beforeBody = this.getBeforeBody(g, d)),
              (this.body = this.getBody(g, d)),
              (this.afterBody = this.getAfterBody(g, d)),
              (this.footer = this.getFooter(g, d));
            let l = (this._size = getTooltipSize(this, d)),
              y = Object.assign({}, e, l),
              b = determineAlignment(this.chart, d, y),
              C = getBackgroundPoint(d, y, b, this.chart);
            (this.xAlign = b.xAlign),
              (this.yAlign = b.yAlign),
              (c = {
                opacity: 1,
                x: C.x,
                y: C.y,
                width: l.width,
                height: l.height,
                caretX: e.x,
                caretY: e.y,
              });
          } else 0 !== this.opacity && (c = { opacity: 0 });
          (this._tooltipItems = g),
            (this.$context = void 0),
            c && this._resolveAnimations().update(this, c),
            e &&
              d.external &&
              d.external.call(this, {
                chart: this.chart,
                tooltip: this,
                replay: l,
              });
        }
        drawCaret(e, l, c, d) {
          let m = this.getCaretPosition(e, c, d);
          l.lineTo(m.x1, m.y1), l.lineTo(m.x2, m.y2), l.lineTo(m.x3, m.y3);
        }
        getCaretPosition(e, l, c) {
          let d, m, g, y, b, C;
          let { xAlign: P, yAlign: I } = this,
            { caretSize: B, cornerRadius: N } = c,
            {
              topLeft: F,
              topRight: V,
              bottomLeft: G,
              bottomRight: Q,
            } = toTRBLCorners(N),
            { x: $, y: Z } = e,
            { width: Y, height: et } = l;
          return (
            "center" === I
              ? ((b = Z + et / 2),
                "left" === P
                  ? ((m = (d = $) - B), (y = b + B), (C = b - B))
                  : ((m = (d = $ + Y) + B), (y = b - B), (C = b + B)),
                (g = d))
              : ((m =
                  "left" === P
                    ? $ + Math.max(F, G) + B
                    : "right" === P
                    ? $ + Y - Math.max(V, Q) - B
                    : this.caretX),
                "top" === I
                  ? ((b = (y = Z) - B), (d = m - B), (g = m + B))
                  : ((b = (y = Z + et) + B), (d = m + B), (g = m - B)),
                (C = y)),
            { x1: d, x2: m, x3: g, y1: y, y2: b, y3: C }
          );
        }
        drawTitle(e, l, c) {
          let d, m, g;
          let y = this.title,
            b = y.length;
          if (b) {
            let C = getRtlAdapter(c.rtl, this.x, this.width);
            for (
              g = 0,
                e.x = getAlignedX(this, c.titleAlign, c),
                l.textAlign = C.textAlign(c.titleAlign),
                l.textBaseline = "middle",
                d = toFont(c.titleFont),
                m = c.titleSpacing,
                l.fillStyle = c.titleColor,
                l.font = d.string;
              g < b;
              ++g
            )
              l.fillText(y[g], C.x(e.x), e.y + d.lineHeight / 2),
                (e.y += d.lineHeight + m),
                g + 1 === b && (e.y += c.titleMarginBottom - m);
          }
        }
        _drawColorBox(e, l, c, d, m) {
          let g = this.labelColors[c],
            y = this.labelPointStyles[c],
            { boxHeight: b, boxWidth: C } = m,
            P = toFont(m.bodyFont),
            I = getAlignedX(this, "left", m),
            B = d.x(I),
            N = b < P.lineHeight ? (P.lineHeight - b) / 2 : 0,
            F = l.y + N;
          if (m.usePointStyle) {
            let l = {
                radius: Math.min(C, b) / 2,
                pointStyle: y.pointStyle,
                rotation: y.rotation,
                borderWidth: 1,
              },
              c = d.leftForLtr(B, C) + C / 2,
              P = F + b / 2;
            (e.strokeStyle = m.multiKeyBackground),
              (e.fillStyle = m.multiKeyBackground),
              drawPoint(e, l, c, P),
              (e.strokeStyle = g.borderColor),
              (e.fillStyle = g.backgroundColor),
              drawPoint(e, l, c, P);
          } else {
            (e.lineWidth = isObject(g.borderWidth)
              ? Math.max(...Object.values(g.borderWidth))
              : g.borderWidth || 1),
              (e.strokeStyle = g.borderColor),
              e.setLineDash(g.borderDash || []),
              (e.lineDashOffset = g.borderDashOffset || 0);
            let l = d.leftForLtr(B, C),
              c = d.leftForLtr(d.xPlus(B, 1), C - 2),
              y = toTRBLCorners(g.borderRadius);
            Object.values(y).some((e) => 0 !== e)
              ? (e.beginPath(),
                (e.fillStyle = m.multiKeyBackground),
                addRoundedRectPath(e, { x: l, y: F, w: C, h: b, radius: y }),
                e.fill(),
                e.stroke(),
                (e.fillStyle = g.backgroundColor),
                e.beginPath(),
                addRoundedRectPath(e, {
                  x: c,
                  y: F + 1,
                  w: C - 2,
                  h: b - 2,
                  radius: y,
                }),
                e.fill())
              : ((e.fillStyle = m.multiKeyBackground),
                e.fillRect(l, F, C, b),
                e.strokeRect(l, F, C, b),
                (e.fillStyle = g.backgroundColor),
                e.fillRect(c, F + 1, C - 2, b - 2));
          }
          e.fillStyle = this.labelTextColors[c];
        }
        drawBody(e, l, c) {
          let d, m, g, y, b, C, P;
          let { body: I } = this,
            {
              bodySpacing: B,
              bodyAlign: N,
              displayColors: F,
              boxHeight: V,
              boxWidth: G,
              boxPadding: Q,
            } = c,
            $ = toFont(c.bodyFont),
            Z = $.lineHeight,
            Y = 0,
            et = getRtlAdapter(c.rtl, this.x, this.width),
            fillLineOfText = function (c) {
              l.fillText(c, et.x(e.x + Y), e.y + Z / 2), (e.y += Z + B);
            },
            en = et.textAlign(N);
          for (
            l.textAlign = N,
              l.textBaseline = "middle",
              l.font = $.string,
              e.x = getAlignedX(this, en, c),
              l.fillStyle = c.bodyColor,
              each(this.beforeBody, fillLineOfText),
              Y =
                F && "right" !== en
                  ? "center" === N
                    ? G / 2 + Q
                    : G + 2 + Q
                  : 0,
              y = 0,
              C = I.length;
            y < C;
            ++y
          ) {
            for (
              d = I[y],
                m = this.labelTextColors[y],
                l.fillStyle = m,
                each(d.before, fillLineOfText),
                g = d.lines,
                F &&
                  g.length &&
                  (this._drawColorBox(l, e, y, et, c),
                  (Z = Math.max($.lineHeight, V))),
                b = 0,
                P = g.length;
              b < P;
              ++b
            )
              fillLineOfText(g[b]), (Z = $.lineHeight);
            each(d.after, fillLineOfText);
          }
          (Y = 0),
            (Z = $.lineHeight),
            each(this.afterBody, fillLineOfText),
            (e.y -= B);
        }
        drawFooter(e, l, c) {
          let d, m;
          let g = this.footer,
            y = g.length;
          if (y) {
            let b = getRtlAdapter(c.rtl, this.x, this.width);
            for (
              e.x = getAlignedX(this, c.footerAlign, c),
                e.y += c.footerMarginTop,
                l.textAlign = b.textAlign(c.footerAlign),
                l.textBaseline = "middle",
                d = toFont(c.footerFont),
                l.fillStyle = c.footerColor,
                l.font = d.string,
                m = 0;
              m < y;
              ++m
            )
              l.fillText(g[m], b.x(e.x), e.y + d.lineHeight / 2),
                (e.y += d.lineHeight + c.footerSpacing);
          }
        }
        drawBackground(e, l, c, d) {
          let { xAlign: m, yAlign: g } = this,
            { x: y, y: b } = e,
            { width: C, height: P } = c,
            {
              topLeft: I,
              topRight: B,
              bottomLeft: N,
              bottomRight: F,
            } = toTRBLCorners(d.cornerRadius);
          (l.fillStyle = d.backgroundColor),
            (l.strokeStyle = d.borderColor),
            (l.lineWidth = d.borderWidth),
            l.beginPath(),
            l.moveTo(y + I, b),
            "top" === g && this.drawCaret(e, l, c, d),
            l.lineTo(y + C - B, b),
            l.quadraticCurveTo(y + C, b, y + C, b + B),
            "center" === g && "right" === m && this.drawCaret(e, l, c, d),
            l.lineTo(y + C, b + P - F),
            l.quadraticCurveTo(y + C, b + P, y + C - F, b + P),
            "bottom" === g && this.drawCaret(e, l, c, d),
            l.lineTo(y + N, b + P),
            l.quadraticCurveTo(y, b + P, y, b + P - N),
            "center" === g && "left" === m && this.drawCaret(e, l, c, d),
            l.lineTo(y, b + I),
            l.quadraticCurveTo(y, b, y + I, b),
            l.closePath(),
            l.fill(),
            d.borderWidth > 0 && l.stroke();
        }
        _updateAnimationTarget(e) {
          let l = this.chart,
            c = this.$animations,
            d = c && c.x,
            m = c && c.y;
          if (d || m) {
            let c = e0[e.position].call(
              this,
              this._active,
              this._eventPosition
            );
            if (!c) return;
            let g = (this._size = getTooltipSize(this, e)),
              y = Object.assign({}, c, this._size),
              b = determineAlignment(l, e, y),
              C = getBackgroundPoint(e, y, b, l);
            (d._to !== C.x || m._to !== C.y) &&
              ((this.xAlign = b.xAlign),
              (this.yAlign = b.yAlign),
              (this.width = g.width),
              (this.height = g.height),
              (this.caretX = c.x),
              (this.caretY = c.y),
              this._resolveAnimations().update(this, C));
          }
        }
        _willRender() {
          return !!this.opacity;
        }
        draw(e) {
          let l = this.options.setContext(this.getContext()),
            c = this.opacity;
          if (!c) return;
          this._updateAnimationTarget(l);
          let d = { width: this.width, height: this.height },
            m = { x: this.x, y: this.y };
          c = 0.001 > Math.abs(c) ? 0 : c;
          let g = toPadding(l.padding),
            y =
              this.title.length ||
              this.beforeBody.length ||
              this.body.length ||
              this.afterBody.length ||
              this.footer.length;
          l.enabled &&
            y &&
            (e.save(),
            (e.globalAlpha = c),
            this.drawBackground(m, e, d, l),
            overrideTextDirection(e, l.textDirection),
            (m.y += g.top),
            this.drawTitle(m, e, l),
            this.drawBody(m, e, l),
            this.drawFooter(m, e, l),
            restoreTextDirection(e, l.textDirection),
            e.restore());
        }
        getActiveElements() {
          return this._active || [];
        }
        setActiveElements(e, l) {
          let c = this._active,
            d = e.map(({ datasetIndex: e, index: l }) => {
              let c = this.chart.getDatasetMeta(e);
              if (!c) throw Error("Cannot find a dataset at index " + e);
              return { datasetIndex: e, element: c.data[l], index: l };
            }),
            m = !_elementsEqual(c, d),
            g = this._positionChanged(d, l);
          (m || g) &&
            ((this._active = d),
            (this._eventPosition = l),
            (this._ignoreReplayEvents = !0),
            this.update(!0));
        }
        handleEvent(e, l, c = !0) {
          if (l && this._ignoreReplayEvents) return !1;
          this._ignoreReplayEvents = !1;
          let d = this.options,
            m = this._active || [],
            g = this._getActiveElements(e, m, l, c),
            y = this._positionChanged(g, e),
            b = l || !_elementsEqual(g, m) || y;
          return (
            b &&
              ((this._active = g),
              (d.enabled || d.external) &&
                ((this._eventPosition = { x: e.x, y: e.y }),
                this.update(!0, l))),
            b
          );
        }
        _getActiveElements(e, l, c, d) {
          let m = this.options;
          if ("mouseout" === e.type) return [];
          if (!d)
            return l.filter(
              (e) =>
                this.chart.data.datasets[e.datasetIndex] &&
                void 0 !==
                  this.chart
                    .getDatasetMeta(e.datasetIndex)
                    .controller.getParsed(e.index)
            );
          let g = this.chart.getElementsAtEventForMode(e, m.mode, m, c);
          return m.reverse && g.reverse(), g;
        }
        _positionChanged(e, l) {
          let { caretX: c, caretY: d, options: m } = this,
            g = e0[m.position].call(this, e, l);
          return !1 !== g && (c !== g.x || d !== g.y);
        }
      };
      var e2 = Object.freeze({
        __proto__: null,
        Colors: {
          id: "colors",
          defaults: { enabled: !0, forceOverride: !1 },
          beforeLayout(e, l, c) {
            let d;
            if (!c.enabled) return;
            let {
                data: { datasets: m },
                options: g,
              } = e.config,
              { elements: y } = g,
              b =
                containsColorsDefinitions(m) ||
                (g && (g.borderColor || g.backgroundColor)) ||
                (y && containsColorsDefinitions(y)) ||
                "rgba(0,0,0,0.1)" !== eE.borderColor ||
                "rgba(0,0,0,0.1)" !== eE.backgroundColor;
            if (!c.forceOverride && b) return;
            let C =
              ((d = 0),
              (l, c) => {
                var m, g, y;
                let b = e.getDatasetMeta(c).controller;
                b instanceof DoughnutController
                  ? ((m = d),
                    (l.backgroundColor = l.data.map(() => getBorderColor(m++))),
                    (d = m))
                  : b instanceof PolarAreaController
                  ? ((g = d),
                    (l.backgroundColor = l.data.map(() =>
                      getBackgroundColor(g++)
                    )),
                    (d = g))
                  : b &&
                    ((y = d),
                    (l.borderColor = getBorderColor(y)),
                    (l.backgroundColor = getBackgroundColor(y)),
                    (d = ++y));
              });
            m.forEach(C);
          },
        },
        Decimation: {
          id: "decimation",
          defaults: { algorithm: "min-max", enabled: !1 },
          beforeElementsUpdate: (e, l, c) => {
            if (!c.enabled) {
              cleanDecimatedData(e);
              return;
            }
            let d = e.width;
            e.data.datasets.forEach((l, m) => {
              let g;
              let { _data: y, indexAxis: b } = l,
                C = e.getDatasetMeta(m),
                P = y || l.data;
              if (
                "y" === resolve([b, e.options.indexAxis]) ||
                !C.controller.supportsDecimation
              )
                return;
              let I = e.scales[C.xAxisID];
              if (
                ("linear" !== I.type && "time" !== I.type) ||
                e.options.parsing
              )
                return;
              let { start: B, count: N } = (function (e, l) {
                  let c = l.length,
                    d = 0,
                    { iScale: m } = e,
                    {
                      min: g,
                      max: y,
                      minDefined: b,
                      maxDefined: C,
                    } = m.getUserBounds();
                  return (
                    b &&
                      (d = _limitValue(
                        _lookupByKey(l, m.axis, g).lo,
                        0,
                        c - 1
                      )),
                    {
                      start: d,
                      count: C
                        ? _limitValue(_lookupByKey(l, m.axis, y).hi + 1, d, c) -
                          d
                        : c - d,
                    }
                  );
                })(C, P),
                F = c.threshold || 4 * d;
              if (N <= F) {
                cleanDecimatedDataset(l);
                return;
              }
              switch (
                (isNullOrUndef(y) &&
                  ((l._data = P),
                  delete l.data,
                  Object.defineProperty(l, "data", {
                    configurable: !0,
                    enumerable: !0,
                    get: function () {
                      return this._decimated;
                    },
                    set: function (e) {
                      this._data = e;
                    },
                  })),
                c.algorithm)
              ) {
                case "lttb":
                  g = (function (e, l, c, d, m) {
                    let g, y, b, C, P;
                    let I = m.samples || d;
                    if (I >= c) return e.slice(l, l + c);
                    let B = [],
                      N = (c - 2) / (I - 2),
                      F = 0,
                      V = l + c - 1,
                      G = l;
                    for (g = 0, B[F++] = e[G]; g < I - 2; g++) {
                      let d,
                        m = 0,
                        I = 0,
                        V = Math.floor((g + 1) * N) + 1 + l,
                        Q = Math.min(Math.floor((g + 2) * N) + 1, c) + l,
                        $ = Q - V;
                      for (d = V; d < Q; d++) (m += e[d].x), (I += e[d].y);
                      (m /= $), (I /= $);
                      let Z = Math.floor(g * N) + 1 + l,
                        Y = Math.min(Math.floor((g + 1) * N) + 1, c) + l,
                        { x: et, y: en } = e[G];
                      for (b = C = -1, d = Z; d < Y; d++)
                        (C =
                          0.5 *
                          Math.abs(
                            (et - m) * (e[d].y - en) - (et - e[d].x) * (I - en)
                          )) > b && ((b = C), (y = e[d]), (P = d));
                      (B[F++] = y), (G = P);
                    }
                    return (B[F++] = e[V]), B;
                  })(P, B, N, d, c);
                  break;
                case "min-max":
                  g = (function (e, l, c, d) {
                    let m,
                      g,
                      y,
                      b,
                      C,
                      P,
                      I,
                      B,
                      N,
                      F,
                      V = 0,
                      G = 0,
                      Q = [],
                      $ = e[l].x,
                      Z = e[l + c - 1].x,
                      Y = Z - $;
                    for (m = l; m < l + c; ++m) {
                      (y = (((g = e[m]).x - $) / Y) * d), (b = g.y);
                      let l = 0 | y;
                      if (l === C)
                        b < N
                          ? ((N = b), (P = m))
                          : b > F && ((F = b), (I = m)),
                          (V = (G * V + g.x) / ++G);
                      else {
                        let c = m - 1;
                        if (!isNullOrUndef(P) && !isNullOrUndef(I)) {
                          let l = Math.min(P, I),
                            d = Math.max(P, I);
                          l !== B && l !== c && Q.push({ ...e[l], x: V }),
                            d !== B && d !== c && Q.push({ ...e[d], x: V });
                        }
                        m > 0 && c !== B && Q.push(e[c]),
                          Q.push(g),
                          (C = l),
                          (G = 0),
                          (N = F = b),
                          (P = I = B = m);
                      }
                    }
                    return Q;
                  })(P, B, N, d);
                  break;
                default:
                  throw Error(
                    `Unsupported decimation algorithm '${c.algorithm}'`
                  );
              }
              l._decimated = g;
            });
          },
          destroy(e) {
            cleanDecimatedData(e);
          },
        },
        Filler: {
          id: "filler",
          afterDatasetsUpdate(e, l, c) {
            let d, m, g, y;
            let b = (e.data.datasets || []).length,
              C = [];
            for (m = 0; m < b; ++m)
              (g = (d = e.getDatasetMeta(m)).dataset),
                (y = null),
                g &&
                  g.options &&
                  g instanceof LineElement &&
                  (y = {
                    visible: e.isDatasetVisible(m),
                    index: m,
                    fill: (function (e, l, c) {
                      var d, m;
                      let g = (function (e) {
                        let l = e.options,
                          c = l.fill,
                          d = valueOrDefault(c && c.target, c);
                        return (
                          void 0 === d && (d = !!l.backgroundColor),
                          !1 !== d && null !== d && (!0 === d ? "origin" : d)
                        );
                      })(e);
                      if (isObject(g)) return !isNaN(g.value) && g;
                      let y = parseFloat(g);
                      return isNumberFinite(y) && Math.floor(y) === y
                        ? ((d = g[0]),
                          (m = y),
                          ("-" === d || "+" === d) && (m = l + m),
                          m !== l && !(m < 0) && !(m >= c) && m)
                        : ["origin", "start", "end", "stack", "shape"].indexOf(
                            g
                          ) >= 0 && g;
                    })(g, m, b),
                    chart: e,
                    axis: d.controller.options.indexAxis,
                    scale: d.vScale,
                    line: g,
                  }),
                (d.$filler = y),
                C.push(y);
            for (m = 0; m < b; ++m)
              (y = C[m]) &&
                !1 !== y.fill &&
                (y.fill = (function (e, l, c) {
                  let d;
                  let m = e[l],
                    g = m.fill,
                    y = [l];
                  if (!c) return g;
                  for (; !1 !== g && -1 === y.indexOf(g); ) {
                    if (!isNumberFinite(g)) return g;
                    if (!(d = e[g])) break;
                    if (d.visible) return g;
                    y.push(g), (g = d.fill);
                  }
                  return !1;
                })(C, m, c.propagate));
          },
          beforeDraw(e, l, c) {
            let d = "beforeDraw" === c.drawTime,
              m = e.getSortedVisibleDatasetMetas(),
              g = e.chartArea;
            for (let l = m.length - 1; l >= 0; --l) {
              let c = m[l].$filler;
              c &&
                (c.line.updateControlPoints(g, c.axis),
                d && c.fill && _drawfill(e.ctx, c, g));
            }
          },
          beforeDatasetsDraw(e, l, c) {
            if ("beforeDatasetsDraw" !== c.drawTime) return;
            let d = e.getSortedVisibleDatasetMetas();
            for (let l = d.length - 1; l >= 0; --l) {
              let c = d[l].$filler;
              _shouldApplyFill(c) && _drawfill(e.ctx, c, e.chartArea);
            }
          },
          beforeDatasetDraw(e, l, c) {
            let d = l.meta.$filler;
            _shouldApplyFill(d) &&
              "beforeDatasetDraw" === c.drawTime &&
              _drawfill(e.ctx, d, e.chartArea);
          },
          defaults: { propagate: !0, drawTime: "beforeDatasetDraw" },
        },
        Legend: {
          id: "legend",
          _element: Legend,
          start(e, l, c) {
            let d = (e.legend = new Legend({
              ctx: e.ctx,
              options: c,
              chart: e,
            }));
            eR.configure(e, d, c), eR.addBox(e, d);
          },
          stop(e) {
            eR.removeBox(e, e.legend), delete e.legend;
          },
          beforeUpdate(e, l, c) {
            let d = e.legend;
            eR.configure(e, d, c), (d.options = c);
          },
          afterUpdate(e) {
            let l = e.legend;
            l.buildLabels(), l.adjustHitBoxes();
          },
          afterEvent(e, l) {
            l.replay || e.legend.handleEvent(l.event);
          },
          defaults: {
            display: !0,
            position: "top",
            align: "center",
            fullSize: !0,
            reverse: !1,
            weight: 1e3,
            onClick(e, l, c) {
              let d = l.datasetIndex,
                m = c.chart;
              m.isDatasetVisible(d)
                ? (m.hide(d), (l.hidden = !0))
                : (m.show(d), (l.hidden = !1));
            },
            onHover: null,
            onLeave: null,
            labels: {
              color: (e) => e.chart.options.color,
              boxWidth: 40,
              padding: 10,
              generateLabels(e) {
                let l = e.data.datasets,
                  {
                    labels: {
                      usePointStyle: c,
                      pointStyle: d,
                      textAlign: m,
                      color: g,
                      useBorderRadius: y,
                      borderRadius: b,
                    },
                  } = e.legend.options;
                return e._getSortedDatasetMetas().map((e) => {
                  let C = e.controller.getStyle(c ? 0 : void 0),
                    P = toPadding(C.borderWidth);
                  return {
                    text: l[e.index].label,
                    fillStyle: C.backgroundColor,
                    fontColor: g,
                    hidden: !e.visible,
                    lineCap: C.borderCapStyle,
                    lineDash: C.borderDash,
                    lineDashOffset: C.borderDashOffset,
                    lineJoin: C.borderJoinStyle,
                    lineWidth: (P.width + P.height) / 4,
                    strokeStyle: C.borderColor,
                    pointStyle: d || C.pointStyle,
                    rotation: C.rotation,
                    textAlign: m || C.textAlign,
                    borderRadius: y && (b || C.borderRadius),
                    datasetIndex: e.index,
                  };
                }, this);
              },
            },
            title: {
              color: (e) => e.chart.options.color,
              display: !1,
              position: "center",
              text: "",
            },
          },
          descriptors: {
            _scriptable: (e) => !e.startsWith("on"),
            labels: {
              _scriptable: (e) =>
                !["generateLabels", "filter", "sort"].includes(e),
            },
          },
        },
        SubTitle: {
          id: "subtitle",
          start(e, l, c) {
            let d = new Title({ ctx: e.ctx, options: c, chart: e });
            eR.configure(e, d, c), eR.addBox(e, d), eJ.set(e, d);
          },
          stop(e) {
            eR.removeBox(e, eJ.get(e)), eJ.delete(e);
          },
          beforeUpdate(e, l, c) {
            let d = eJ.get(e);
            eR.configure(e, d, c), (d.options = c);
          },
          defaults: {
            align: "center",
            display: !1,
            font: { weight: "normal" },
            fullSize: !0,
            padding: 0,
            position: "top",
            text: "",
            weight: 1500,
          },
          defaultRoutes: { color: "color" },
          descriptors: { _scriptable: !0, _indexable: !1 },
        },
        Title: {
          id: "title",
          _element: Title,
          start(e, l, c) {
            !(function (e, l) {
              let c = new Title({ ctx: e.ctx, options: l, chart: e });
              eR.configure(e, c, l), eR.addBox(e, c), (e.titleBlock = c);
            })(e, c);
          },
          stop(e) {
            let l = e.titleBlock;
            eR.removeBox(e, l), delete e.titleBlock;
          },
          beforeUpdate(e, l, c) {
            let d = e.titleBlock;
            eR.configure(e, d, c), (d.options = c);
          },
          defaults: {
            align: "center",
            display: !1,
            font: { weight: "bold" },
            fullSize: !0,
            padding: 10,
            position: "top",
            text: "",
            weight: 2e3,
          },
          defaultRoutes: { color: "color" },
          descriptors: { _scriptable: !0, _indexable: !1 },
        },
        Tooltip: {
          id: "tooltip",
          _element: Tooltip,
          positioners: e0,
          afterInit(e, l, c) {
            c && (e.tooltip = new Tooltip({ chart: e, options: c }));
          },
          beforeUpdate(e, l, c) {
            e.tooltip && e.tooltip.initialize(c);
          },
          reset(e, l, c) {
            e.tooltip && e.tooltip.initialize(c);
          },
          afterDraw(e) {
            let l = e.tooltip;
            if (l && l._willRender()) {
              let c = { tooltip: l };
              if (
                !1 ===
                e.notifyPlugins("beforeTooltipDraw", { ...c, cancelable: !0 })
              )
                return;
              l.draw(e.ctx), e.notifyPlugins("afterTooltipDraw", c);
            }
          },
          afterEvent(e, l) {
            if (e.tooltip) {
              let c = l.replay;
              e.tooltip.handleEvent(l.event, c, l.inChartArea) &&
                (l.changed = !0);
            }
          },
          defaults: {
            enabled: !0,
            external: null,
            position: "average",
            backgroundColor: "rgba(0,0,0,0.8)",
            titleColor: "#fff",
            titleFont: { weight: "bold" },
            titleSpacing: 2,
            titleMarginBottom: 6,
            titleAlign: "left",
            bodyColor: "#fff",
            bodySpacing: 2,
            bodyFont: {},
            bodyAlign: "left",
            footerColor: "#fff",
            footerSpacing: 2,
            footerMarginTop: 6,
            footerFont: { weight: "bold" },
            footerAlign: "left",
            padding: 6,
            caretPadding: 2,
            caretSize: 5,
            cornerRadius: 6,
            boxHeight: (e, l) => l.bodyFont.size,
            boxWidth: (e, l) => l.bodyFont.size,
            multiKeyBackground: "#fff",
            displayColors: !0,
            boxPadding: 0,
            borderColor: "rgba(0,0,0,0)",
            borderWidth: 0,
            animation: { duration: 400, easing: "easeOutQuart" },
            animations: {
              numbers: {
                type: "number",
                properties: ["x", "y", "width", "height", "caretX", "caretY"],
              },
              opacity: { easing: "linear", duration: 200 },
            },
            callbacks: e1,
          },
          defaultRoutes: {
            bodyFont: "font",
            footerFont: "font",
            titleFont: "font",
          },
          descriptors: {
            _scriptable: (e) =>
              "filter" !== e && "itemSort" !== e && "external" !== e,
            _indexable: !1,
            callbacks: { _scriptable: !1, _indexable: !1 },
            animation: { _fallback: !1 },
            animations: { _fallback: "animation" },
          },
          additionalOptionScopes: ["interaction"],
        },
      });
      let addIfString = (e, l, c, d) => (
          "string" == typeof l
            ? ((c = e.push(l) - 1), d.unshift({ index: c, label: l }))
            : isNaN(l) && (c = null),
          c
        ),
        validIndex = (e, l) =>
          null === e ? null : _limitValue(Math.round(e), 0, l);
      function _getLabelForValue(e) {
        let l = this.getLabels();
        return e >= 0 && e < l.length ? l[e] : e;
      }
      let CategoryScale = class CategoryScale extends Scale {
        static id = "category";
        static defaults = { ticks: { callback: _getLabelForValue } };
        constructor(e) {
          super(e),
            (this._startValue = void 0),
            (this._valueRange = 0),
            (this._addedLabels = []);
        }
        init(e) {
          let l = this._addedLabels;
          if (l.length) {
            let e = this.getLabels();
            for (let { index: c, label: d } of l) e[c] === d && e.splice(c, 1);
            this._addedLabels = [];
          }
          super.init(e);
        }
        parse(e, l) {
          if (isNullOrUndef(e)) return null;
          let c = this.getLabels();
          return validIndex(
            (l =
              isFinite(l) && c[l] === e
                ? l
                : (function (e, l, c, d) {
                    let m = e.indexOf(l);
                    if (-1 === m) return addIfString(e, l, c, d);
                    let g = e.lastIndexOf(l);
                    return m !== g ? c : m;
                  })(c, e, valueOrDefault(l, e), this._addedLabels)),
            c.length - 1
          );
        }
        determineDataLimits() {
          let { minDefined: e, maxDefined: l } = this.getUserBounds(),
            { min: c, max: d } = this.getMinMax(!0);
          "ticks" !== this.options.bounds ||
            (e || (c = 0), l || (d = this.getLabels().length - 1)),
            (this.min = c),
            (this.max = d);
        }
        buildTicks() {
          let e = this.min,
            l = this.max,
            c = this.options.offset,
            d = [],
            m = this.getLabels();
          (m = 0 === e && l === m.length - 1 ? m : m.slice(e, l + 1)),
            (this._valueRange = Math.max(m.length - (c ? 0 : 1), 1)),
            (this._startValue = this.min - (c ? 0.5 : 0));
          for (let c = e; c <= l; c++) d.push({ value: c });
          return d;
        }
        getLabelForValue(e) {
          return _getLabelForValue.call(this, e);
        }
        configure() {
          super.configure(),
            this.isHorizontal() || (this._reversePixels = !this._reversePixels);
        }
        getPixelForValue(e) {
          return (
            "number" != typeof e && (e = this.parse(e)),
            null === e
              ? NaN
              : this.getPixelForDecimal(
                  (e - this._startValue) / this._valueRange
                )
          );
        }
        getPixelForTick(e) {
          let l = this.ticks;
          return e < 0 || e > l.length - 1
            ? null
            : this.getPixelForValue(l[e].value);
        }
        getValueForPixel(e) {
          return Math.round(
            this._startValue + this.getDecimalForPixel(e) * this._valueRange
          );
        }
        getBasePixel() {
          return this.bottom;
        }
      };
      function relativeLabelSize(e, l, { horizontal: c, minRotation: d }) {
        let m = toRadians(d),
          g = 0.75 * l * ("" + e).length;
        return Math.min(l / ((c ? Math.sin(m) : Math.cos(m)) || 0.001), g);
      }
      let LinearScaleBase = class LinearScaleBase extends Scale {
        constructor(e) {
          super(e),
            (this.start = void 0),
            (this.end = void 0),
            (this._startValue = void 0),
            (this._endValue = void 0),
            (this._valueRange = 0);
        }
        parse(e, l) {
          return isNullOrUndef(e) ||
            (("number" == typeof e || e instanceof Number) && !isFinite(+e))
            ? null
            : +e;
        }
        handleTickRangeOptions() {
          let { beginAtZero: e } = this.options,
            { minDefined: l, maxDefined: c } = this.getUserBounds(),
            { min: d, max: m } = this,
            setMin = (e) => (d = l ? d : e),
            setMax = (e) => (m = c ? m : e);
          if (e) {
            let e = eh(d),
              l = eh(m);
            e < 0 && l < 0 ? setMax(0) : e > 0 && l > 0 && setMin(0);
          }
          if (d === m) {
            let l = 0 === m ? 1 : Math.abs(0.05 * m);
            setMax(m + l), e || setMin(d - l);
          }
          (this.min = d), (this.max = m);
        }
        getTickLimit() {
          let e;
          let l = this.options.ticks,
            { maxTicksLimit: c, stepSize: d } = l;
          return (
            d
              ? (e = Math.ceil(this.max / d) - Math.floor(this.min / d) + 1) >
                  1e3 &&
                (console.warn(
                  `scales.${this.id}.ticks.stepSize: ${d} would result generating up to ${e} ticks. Limiting to 1000.`
                ),
                (e = 1e3))
              : ((e = this.computeTickLimit()), (c = c || 11)),
            c && (e = Math.min(c, e)),
            e
          );
        }
        computeTickLimit() {
          return Number.POSITIVE_INFINITY;
        }
        buildTicks() {
          let e = this.options,
            l = e.ticks,
            c = this.getTickLimit();
          c = Math.max(2, c);
          let d = {
              maxTicks: c,
              bounds: e.bounds,
              min: e.min,
              max: e.max,
              precision: l.precision,
              step: l.stepSize,
              count: l.count,
              maxDigits: this._maxDigits(),
              horizontal: this.isHorizontal(),
              minRotation: l.minRotation || 0,
              includeBounds: !1 !== l.includeBounds,
            },
            m = this._range || this,
            g = (function (e, l) {
              let c, d, m, g;
              let y = [],
                {
                  bounds: b,
                  step: C,
                  min: P,
                  max: I,
                  precision: B,
                  count: N,
                  maxTicks: F,
                  maxDigits: V,
                  includeBounds: G,
                } = e,
                Q = C || 1,
                $ = F - 1,
                { min: Z, max: Y } = l,
                et = !isNullOrUndef(P),
                en = !isNullOrUndef(I),
                er = !isNullOrUndef(N),
                ei = (Y - Z) / (V + 1),
                eo = niceNum((Y - Z) / $ / Q) * Q;
              if (eo < 1e-14 && !et && !en) return [{ value: Z }, { value: Y }];
              (g = Math.ceil(Y / eo) - Math.floor(Z / eo)) > $ &&
                (eo = niceNum((g * eo) / $ / Q) * Q),
                isNullOrUndef(B) ||
                  (eo = Math.ceil(eo * (c = Math.pow(10, B))) / c),
                "ticks" === b
                  ? ((d = Math.floor(Z / eo) * eo),
                    (m = Math.ceil(Y / eo) * eo))
                  : ((d = Z), (m = Y)),
                et &&
                en &&
                C &&
                (function (e, l) {
                  let c = Math.round(e);
                  return c - l <= e && c + l >= e;
                })((I - P) / C, eo / 1e3)
                  ? ((g = Math.round(Math.min((I - P) / eo, F))),
                    (eo = (I - P) / g),
                    (d = P),
                    (m = I))
                  : er
                  ? ((d = et ? P : d),
                    (eo = ((m = en ? I : m) - d) / (g = N - 1)))
                  : (g = almostEquals(
                      (g = (m - d) / eo),
                      Math.round(g),
                      eo / 1e3
                    )
                      ? Math.round(g)
                      : Math.ceil(g));
              let ea = Math.max(_decimalPlaces(eo), _decimalPlaces(d));
              (d =
                Math.round(d * (c = Math.pow(10, isNullOrUndef(B) ? ea : B))) /
                c),
                (m = Math.round(m * c) / c);
              let es = 0;
              for (
                et &&
                (G && d !== P
                  ? (y.push({ value: P }),
                    d < P && es++,
                    almostEquals(
                      Math.round((d + es * eo) * c) / c,
                      P,
                      relativeLabelSize(P, ei, e)
                    ) && es++)
                  : d < P && es++);
                es < g;
                ++es
              ) {
                let e = Math.round((d + es * eo) * c) / c;
                if (en && e > I) break;
                y.push({ value: e });
              }
              return (
                en && G && m !== I
                  ? y.length &&
                    almostEquals(
                      y[y.length - 1].value,
                      I,
                      relativeLabelSize(I, ei, e)
                    )
                    ? (y[y.length - 1].value = I)
                    : y.push({ value: I })
                  : (en && m !== I) || y.push({ value: m }),
                y
              );
            })(d, m);
          return (
            "ticks" === e.bounds && _setMinAndMaxByKey(g, this, "value"),
            e.reverse
              ? (g.reverse(), (this.start = this.max), (this.end = this.min))
              : ((this.start = this.min), (this.end = this.max)),
            g
          );
        }
        configure() {
          let e = this.ticks,
            l = this.min,
            c = this.max;
          if ((super.configure(), this.options.offset && e.length)) {
            let d = (c - l) / Math.max(e.length - 1, 1) / 2;
            (l -= d), (c += d);
          }
          (this._startValue = l),
            (this._endValue = c),
            (this._valueRange = c - l);
        }
        getLabelForValue(e) {
          return formatNumber(
            e,
            this.chart.options.locale,
            this.options.ticks.format
          );
        }
      };
      let LinearScale = class LinearScale extends LinearScaleBase {
        static id = "linear";
        static defaults = { ticks: { callback: ex.formatters.numeric } };
        determineDataLimits() {
          let { min: e, max: l } = this.getMinMax(!0);
          (this.min = isNumberFinite(e) ? e : 0),
            (this.max = isNumberFinite(l) ? l : 1),
            this.handleTickRangeOptions();
        }
        computeTickLimit() {
          let e = this.isHorizontal(),
            l = e ? this.width : this.height,
            c = toRadians(this.options.ticks.minRotation),
            d = this._resolveTickFontOptions(0);
          return Math.ceil(
            l /
              Math.min(
                40,
                d.lineHeight / ((e ? Math.sin(c) : Math.cos(c)) || 0.001)
              )
          );
        }
        getPixelForValue(e) {
          return null === e
            ? NaN
            : this.getPixelForDecimal(
                (e - this._startValue) / this._valueRange
              );
        }
        getValueForPixel(e) {
          return (
            this._startValue + this.getDecimalForPixel(e) * this._valueRange
          );
        }
      };
      let log10Floor = (e) => Math.floor(ep(e)),
        changeExponent = (e, l) => Math.pow(10, log10Floor(e) + l);
      function isMajor(e) {
        let l = e / Math.pow(10, log10Floor(e));
        return 1 === l;
      }
      function steps(e, l, c) {
        let d = Math.pow(10, c);
        return Math.ceil(l / d) - Math.floor(e / d);
      }
      let LogarithmicScale = class LogarithmicScale extends Scale {
        static id = "logarithmic";
        static defaults = {
          ticks: {
            callback: ex.formatters.logarithmic,
            major: { enabled: !0 },
          },
        };
        constructor(e) {
          super(e),
            (this.start = void 0),
            (this.end = void 0),
            (this._startValue = void 0),
            (this._valueRange = 0);
        }
        parse(e, l) {
          let c = LinearScaleBase.prototype.parse.apply(this, [e, l]);
          if (0 === c) {
            this._zero = !0;
            return;
          }
          return isNumberFinite(c) && c > 0 ? c : null;
        }
        determineDataLimits() {
          let { min: e, max: l } = this.getMinMax(!0);
          (this.min = isNumberFinite(e) ? Math.max(0, e) : null),
            (this.max = isNumberFinite(l) ? Math.max(0, l) : null),
            this.options.beginAtZero && (this._zero = !0),
            this._zero &&
              this.min !== this._suggestedMin &&
              !isNumberFinite(this._userMin) &&
              (this.min =
                e === changeExponent(this.min, 0)
                  ? changeExponent(this.min, -1)
                  : changeExponent(this.min, 0)),
            this.handleTickRangeOptions();
        }
        handleTickRangeOptions() {
          let { minDefined: e, maxDefined: l } = this.getUserBounds(),
            c = this.min,
            d = this.max,
            setMin = (l) => (c = e ? c : l),
            setMax = (e) => (d = l ? d : e);
          c === d &&
            (c <= 0
              ? (setMin(1), setMax(10))
              : (setMin(changeExponent(c, -1)), setMax(changeExponent(d, 1)))),
            c <= 0 && setMin(changeExponent(d, -1)),
            d <= 0 && setMax(changeExponent(c, 1)),
            (this.min = c),
            (this.max = d);
        }
        buildTicks() {
          let e = this.options,
            l = { min: this._userMin, max: this._userMax },
            c = (function (e, { min: l, max: c }) {
              l = finiteOrDefault(e.min, l);
              let d = [],
                m = log10Floor(l),
                g = (function (e, l) {
                  let c = l - e,
                    d = log10Floor(c);
                  for (; steps(e, l, d) > 10; ) d++;
                  for (; 10 > steps(e, l, d); ) d--;
                  return Math.min(d, log10Floor(e));
                })(l, c),
                y = g < 0 ? Math.pow(10, Math.abs(g)) : 1,
                b = Math.pow(10, g),
                C = m > g ? Math.pow(10, m) : 0,
                P = Math.round((l - C) * y) / y,
                I = Math.floor((l - C) / b / 10) * b * 10,
                B = Math.floor((P - I) / Math.pow(10, g)),
                N = finiteOrDefault(
                  e.min,
                  Math.round((C + I + B * Math.pow(10, g)) * y) / y
                );
              for (; N < c; )
                d.push({ value: N, major: isMajor(N), significand: B }),
                  B >= 10 ? (B = B < 15 ? 15 : 20) : B++,
                  B >= 20 && ((B = 2), (y = ++g >= 0 ? 1 : y)),
                  (N = Math.round((C + I + B * Math.pow(10, g)) * y) / y);
              let F = finiteOrDefault(e.max, N);
              return d.push({ value: F, major: isMajor(F), significand: B }), d;
            })(l, this);
          return (
            "ticks" === e.bounds && _setMinAndMaxByKey(c, this, "value"),
            e.reverse
              ? (c.reverse(), (this.start = this.max), (this.end = this.min))
              : ((this.start = this.min), (this.end = this.max)),
            c
          );
        }
        getLabelForValue(e) {
          return void 0 === e
            ? "0"
            : formatNumber(
                e,
                this.chart.options.locale,
                this.options.ticks.format
              );
        }
        configure() {
          let e = this.min;
          super.configure(),
            (this._startValue = ep(e)),
            (this._valueRange = ep(this.max) - ep(e));
        }
        getPixelForValue(e) {
          return ((void 0 === e || 0 === e) && (e = this.min),
          null === e || isNaN(e))
            ? NaN
            : this.getPixelForDecimal(
                e === this.min
                  ? 0
                  : (ep(e) - this._startValue) / this._valueRange
              );
        }
        getValueForPixel(e) {
          let l = this.getDecimalForPixel(e);
          return Math.pow(10, this._startValue + l * this._valueRange);
        }
      };
      function getTickBackdropHeight(e) {
        let l = e.ticks;
        if (l.display && e.display) {
          let e = toPadding(l.backdropPadding);
          return valueOrDefault(l.font && l.font.size, eE.font.size) + e.height;
        }
        return 0;
      }
      function determineLimits(e, l, c, d, m) {
        return e === d || e === m
          ? { start: l - c / 2, end: l + c / 2 }
          : e < d || e > m
          ? { start: l - c, end: l }
          : { start: l, end: l + c };
      }
      function pathRadiusLine(e, l, c, d) {
        let { ctx: m } = e;
        if (c) m.arc(e.xCenter, e.yCenter, l, 0, eo);
        else {
          let c = e.getPointPosition(0, l);
          m.moveTo(c.x, c.y);
          for (let g = 1; g < d; g++)
            (c = e.getPointPosition(g, l)), m.lineTo(c.x, c.y);
        }
      }
      let RadialLinearScale = class RadialLinearScale extends LinearScaleBase {
        static id = "radialLinear";
        static defaults = {
          display: !0,
          animate: !0,
          position: "chartArea",
          angleLines: {
            display: !0,
            lineWidth: 1,
            borderDash: [],
            borderDashOffset: 0,
          },
          grid: { circular: !1 },
          startAngle: 0,
          ticks: { showLabelBackdrop: !0, callback: ex.formatters.numeric },
          pointLabels: {
            backdropColor: void 0,
            backdropPadding: 2,
            display: !0,
            font: { size: 10 },
            callback: (e) => e,
            padding: 5,
            centerPointLabels: !1,
          },
        };
        static defaultRoutes = {
          "angleLines.color": "borderColor",
          "pointLabels.color": "color",
          "ticks.color": "color",
        };
        static descriptors = { angleLines: { _fallback: "grid" } };
        constructor(e) {
          super(e),
            (this.xCenter = void 0),
            (this.yCenter = void 0),
            (this.drawingArea = void 0),
            (this._pointLabels = []),
            (this._pointLabelItems = []);
        }
        setDimensions() {
          let e = (this._padding = toPadding(
              getTickBackdropHeight(this.options) / 2
            )),
            l = (this.width = this.maxWidth - e.width),
            c = (this.height = this.maxHeight - e.height);
          (this.xCenter = Math.floor(this.left + l / 2 + e.left)),
            (this.yCenter = Math.floor(this.top + c / 2 + e.top)),
            (this.drawingArea = Math.floor(Math.min(l, c) / 2));
        }
        determineDataLimits() {
          let { min: e, max: l } = this.getMinMax(!1);
          (this.min = isNumberFinite(e) && !isNaN(e) ? e : 0),
            (this.max = isNumberFinite(l) && !isNaN(l) ? l : 0),
            this.handleTickRangeOptions();
        }
        computeTickLimit() {
          return Math.ceil(
            this.drawingArea / getTickBackdropHeight(this.options)
          );
        }
        generateTickLabels(e) {
          LinearScaleBase.prototype.generateTickLabels.call(this, e),
            (this._pointLabels = this.getLabels()
              .map((e, l) => {
                let c = callback(
                  this.options.pointLabels.callback,
                  [e, l],
                  this
                );
                return c || 0 === c ? c : "";
              })
              .filter((e, l) => this.chart.getDataVisibility(l)));
        }
        fit() {
          let e = this.options;
          e.display && e.pointLabels.display
            ? (function (e) {
                let l = {
                    l: e.left + e._padding.left,
                    r: e.right - e._padding.right,
                    t: e.top + e._padding.top,
                    b: e.bottom - e._padding.bottom,
                  },
                  c = Object.assign({}, l),
                  d = [],
                  m = [],
                  g = e._pointLabels.length,
                  y = e.options.pointLabels,
                  b = y.centerPointLabels ? ei / g : 0;
                for (let I = 0; I < g; I++) {
                  var C, P;
                  let g = y.setContext(e.getPointLabelContext(I));
                  m[I] = g.padding;
                  let B = e.getPointPosition(I, e.drawingArea + m[I], b),
                    N = toFont(g.font),
                    F =
                      ((C = e.ctx),
                      (P = isArray((P = e._pointLabels[I])) ? P : [P]),
                      {
                        w: (function (e, l, c, d) {
                          let m, g, y, b, C;
                          let P = ((d = d || {}).data = d.data || {}),
                            I = (d.garbageCollect = d.garbageCollect || []);
                          d.font !== l &&
                            ((P = d.data = {}),
                            (I = d.garbageCollect = []),
                            (d.font = l)),
                            e.save(),
                            (e.font = l);
                          let B = 0,
                            N = c.length;
                          for (m = 0; m < N; m++)
                            if (null == (b = c[m]) || isArray(b)) {
                              if (isArray(b))
                                for (g = 0, y = b.length; g < y; g++)
                                  null == (C = b[g]) ||
                                    isArray(C) ||
                                    (B = _measureText(e, P, I, B, C));
                            } else B = _measureText(e, P, I, B, b);
                          e.restore();
                          let F = I.length / 2;
                          if (F > c.length) {
                            for (m = 0; m < F; m++) delete P[I[m]];
                            I.splice(0, F);
                          }
                          return B;
                        })(C, N.string, P),
                        h: P.length * N.lineHeight,
                      });
                  d[I] = F;
                  let V = _normalizeAngle(e.getIndexAngle(I) + b),
                    G = Math.round(V * (180 / ei)),
                    Q = determineLimits(G, B.x, F.w, 0, 180),
                    $ = determineLimits(G, B.y, F.h, 90, 270);
                  !(function (e, l, c, d, m) {
                    let g = Math.abs(Math.sin(c)),
                      y = Math.abs(Math.cos(c)),
                      b = 0,
                      C = 0;
                    d.start < l.l
                      ? ((b = (l.l - d.start) / g),
                        (e.l = Math.min(e.l, l.l - b)))
                      : d.end > l.r &&
                        ((b = (d.end - l.r) / g),
                        (e.r = Math.max(e.r, l.r + b))),
                      m.start < l.t
                        ? ((C = (l.t - m.start) / y),
                          (e.t = Math.min(e.t, l.t - C)))
                        : m.end > l.b &&
                          ((C = (m.end - l.b) / y),
                          (e.b = Math.max(e.b, l.b + C)));
                  })(c, l, V, Q, $);
                }
                e.setCenterPoint(l.l - c.l, c.r - l.r, l.t - c.t, c.b - l.b),
                  (e._pointLabelItems = (function (e, l, c) {
                    let d;
                    let m = [],
                      g = e._pointLabels.length,
                      y = e.options,
                      { centerPointLabels: b, display: C } = y.pointLabels,
                      P = {
                        extra: getTickBackdropHeight(y) / 2,
                        additionalAngle: b ? ei / g : 0,
                      };
                    for (let y = 0; y < g; y++) {
                      (P.padding = c[y]), (P.size = l[y]);
                      let g = (function (e, l, c) {
                        var d, m, g, y;
                        let b = e.drawingArea,
                          {
                            extra: C,
                            additionalAngle: P,
                            padding: I,
                            size: B,
                          } = c,
                          N = e.getPointPosition(l, b + C + I, P),
                          F = Math.round(
                            _normalizeAngle(N.angle + ec) * (180 / ei)
                          ),
                          V =
                            ((d = N.y),
                            (m = B.h),
                            90 === F || 270 === F
                              ? (d -= m / 2)
                              : (F > 270 || F < 90) && (d -= m),
                            d),
                          G =
                            0 === F || 180 === F
                              ? "center"
                              : F < 180
                              ? "left"
                              : "right",
                          Q =
                            ((g = N.x),
                            (y = B.w),
                            "right" === G
                              ? (g -= y)
                              : "center" === G && (g -= y / 2),
                            g);
                        return {
                          visible: !0,
                          x: N.x,
                          y: V,
                          textAlign: G,
                          left: Q,
                          top: V,
                          right: Q + B.w,
                          bottom: V + B.h,
                        };
                      })(e, y, P);
                      m.push(g),
                        "auto" === C &&
                          ((g.visible = (function (e, l) {
                            if (!l) return !0;
                            let { left: c, top: d, right: m, bottom: g } = e,
                              y =
                                _isPointInArea({ x: c, y: d }, l) ||
                                _isPointInArea({ x: c, y: g }, l) ||
                                _isPointInArea({ x: m, y: d }, l) ||
                                _isPointInArea({ x: m, y: g }, l);
                            return !y;
                          })(g, d)),
                          g.visible && (d = g));
                    }
                    return m;
                  })(e, d, m));
              })(this)
            : this.setCenterPoint(0, 0, 0, 0);
        }
        setCenterPoint(e, l, c, d) {
          (this.xCenter += Math.floor((e - l) / 2)),
            (this.yCenter += Math.floor((c - d) / 2)),
            (this.drawingArea -= Math.min(
              this.drawingArea / 2,
              Math.max(e, l, c, d)
            ));
        }
        getIndexAngle(e) {
          let l = eo / (this._pointLabels.length || 1),
            c = this.options.startAngle || 0;
          return _normalizeAngle(e * l + toRadians(c));
        }
        getDistanceFromCenterForValue(e) {
          if (isNullOrUndef(e)) return NaN;
          let l = this.drawingArea / (this.max - this.min);
          return this.options.reverse ? (this.max - e) * l : (e - this.min) * l;
        }
        getValueForDistanceFromCenter(e) {
          if (isNullOrUndef(e)) return NaN;
          let l = e / (this.drawingArea / (this.max - this.min));
          return this.options.reverse ? this.max - l : this.min + l;
        }
        getPointLabelContext(e) {
          let l = this._pointLabels || [];
          if (e >= 0 && e < l.length) {
            let c = l[e];
            return createContext(this.getContext(), {
              label: c,
              index: e,
              type: "pointLabel",
            });
          }
        }
        getPointPosition(e, l, c = 0) {
          let d = this.getIndexAngle(e) - ec + c;
          return {
            x: Math.cos(d) * l + this.xCenter,
            y: Math.sin(d) * l + this.yCenter,
            angle: d,
          };
        }
        getPointPositionForValue(e, l) {
          return this.getPointPosition(
            e,
            this.getDistanceFromCenterForValue(l)
          );
        }
        getBasePosition(e) {
          return this.getPointPositionForValue(e || 0, this.getBaseValue());
        }
        getPointLabelPosition(e) {
          let {
            left: l,
            top: c,
            right: d,
            bottom: m,
          } = this._pointLabelItems[e];
          return { left: l, top: c, right: d, bottom: m };
        }
        drawBackground() {
          let {
            backgroundColor: e,
            grid: { circular: l },
          } = this.options;
          if (e) {
            let c = this.ctx;
            c.save(),
              c.beginPath(),
              pathRadiusLine(
                this,
                this.getDistanceFromCenterForValue(this._endValue),
                l,
                this._pointLabels.length
              ),
              c.closePath(),
              (c.fillStyle = e),
              c.fill(),
              c.restore();
          }
        }
        drawGrid() {
          let e, l, c;
          let d = this.ctx,
            m = this.options,
            { angleLines: g, grid: y, border: b } = m,
            C = this._pointLabels.length;
          if (
            (m.pointLabels.display &&
              (function (e, l) {
                let {
                  ctx: c,
                  options: { pointLabels: d },
                } = e;
                for (let m = l - 1; m >= 0; m--) {
                  let l = e._pointLabelItems[m];
                  if (!l.visible) continue;
                  let g = d.setContext(e.getPointLabelContext(m));
                  !(function (e, l, c) {
                    let { left: d, top: m, right: g, bottom: y } = c,
                      { backdropColor: b } = l;
                    if (!isNullOrUndef(b)) {
                      let c = toTRBLCorners(l.borderRadius),
                        C = toPadding(l.backdropPadding);
                      e.fillStyle = b;
                      let P = d - C.left,
                        I = m - C.top,
                        B = g - d + C.width,
                        N = y - m + C.height;
                      Object.values(c).some((e) => 0 !== e)
                        ? (e.beginPath(),
                          addRoundedRectPath(e, {
                            x: P,
                            y: I,
                            w: B,
                            h: N,
                            radius: c,
                          }),
                          e.fill())
                        : e.fillRect(P, I, B, N);
                    }
                  })(c, g, l);
                  let y = toFont(g.font),
                    { x: b, y: C, textAlign: P } = l;
                  renderText(c, e._pointLabels[m], b, C + y.lineHeight / 2, y, {
                    color: g.color,
                    textAlign: P,
                    textBaseline: "middle",
                  });
                }
              })(this, C),
            y.display &&
              this.ticks.forEach((e, c) => {
                if (0 !== c || (0 === c && this.min < 0)) {
                  l = this.getDistanceFromCenterForValue(e.value);
                  let d = this.getContext(c),
                    m = y.setContext(d),
                    g = b.setContext(d);
                  !(function (e, l, c, d, m) {
                    let g = e.ctx,
                      y = l.circular,
                      { color: b, lineWidth: C } = l;
                    (y || d) &&
                      b &&
                      C &&
                      !(c < 0) &&
                      (g.save(),
                      (g.strokeStyle = b),
                      (g.lineWidth = C),
                      g.setLineDash(m.dash || []),
                      (g.lineDashOffset = m.dashOffset),
                      g.beginPath(),
                      pathRadiusLine(e, c, y, d),
                      g.closePath(),
                      g.stroke(),
                      g.restore());
                  })(this, m, l, C, g);
                }
              }),
            g.display)
          ) {
            for (d.save(), e = C - 1; e >= 0; e--) {
              let y = g.setContext(this.getPointLabelContext(e)),
                { color: b, lineWidth: C } = y;
              C &&
                b &&
                ((d.lineWidth = C),
                (d.strokeStyle = b),
                d.setLineDash(y.borderDash),
                (d.lineDashOffset = y.borderDashOffset),
                (l = this.getDistanceFromCenterForValue(
                  m.reverse ? this.min : this.max
                )),
                (c = this.getPointPosition(e, l)),
                d.beginPath(),
                d.moveTo(this.xCenter, this.yCenter),
                d.lineTo(c.x, c.y),
                d.stroke());
            }
            d.restore();
          }
        }
        drawBorder() {}
        drawLabels() {
          let e, l;
          let c = this.ctx,
            d = this.options,
            m = d.ticks;
          if (!m.display) return;
          let g = this.getIndexAngle(0);
          c.save(),
            c.translate(this.xCenter, this.yCenter),
            c.rotate(g),
            (c.textAlign = "center"),
            (c.textBaseline = "middle"),
            this.ticks.forEach((g, y) => {
              if (0 === y && this.min >= 0 && !d.reverse) return;
              let b = m.setContext(this.getContext(y)),
                C = toFont(b.font);
              if (
                ((e = this.getDistanceFromCenterForValue(this.ticks[y].value)),
                b.showLabelBackdrop)
              ) {
                (c.font = C.string),
                  (l = c.measureText(g.label).width),
                  (c.fillStyle = b.backdropColor);
                let d = toPadding(b.backdropPadding);
                c.fillRect(
                  -l / 2 - d.left,
                  -e - C.size / 2 - d.top,
                  l + d.width,
                  C.size + d.height
                );
              }
              renderText(c, g.label, 0, -e, C, {
                color: b.color,
                strokeColor: b.textStrokeColor,
                strokeWidth: b.textStrokeWidth,
              });
            }),
            c.restore();
        }
        drawTitle() {}
      };
      let e6 = {
          millisecond: { common: !0, size: 1, steps: 1e3 },
          second: { common: !0, size: 1e3, steps: 60 },
          minute: { common: !0, size: 6e4, steps: 60 },
          hour: { common: !0, size: 36e5, steps: 24 },
          day: { common: !0, size: 864e5, steps: 30 },
          week: { common: !1, size: 6048e5, steps: 4 },
          month: { common: !0, size: 2628e6, steps: 12 },
          quarter: { common: !1, size: 7884e6, steps: 4 },
          year: { common: !0, size: 3154e7 },
        },
        e3 = Object.keys(e6);
      function sorter(e, l) {
        return e - l;
      }
      function parse(e, l) {
        if (isNullOrUndef(l)) return null;
        let c = e._adapter,
          { parser: d, round: m, isoWeekday: g } = e._parseOpts,
          y = l;
        return ("function" == typeof d && (y = d(y)),
        isNumberFinite(y) ||
          (y = "string" == typeof d ? c.parse(y, d) : c.parse(y)),
        null === y)
          ? null
          : (m &&
              (y =
                "week" === m && (isNumber(g) || !0 === g)
                  ? c.startOf(y, "isoWeek", g)
                  : c.startOf(y, m)),
            +y);
      }
      function determineUnitForAutoTicks(e, l, c, d) {
        let m = e3.length;
        for (let g = e3.indexOf(e); g < m - 1; ++g) {
          let e = e6[e3[g]],
            m = e.steps ? e.steps : Number.MAX_SAFE_INTEGER;
          if (e.common && Math.ceil((c - l) / (m * e.size)) <= d) return e3[g];
        }
        return e3[m - 1];
      }
      function addTick(e, l, c) {
        if (c) {
          if (c.length) {
            let { lo: d, hi: m } = _lookup(c, l),
              g = c[d] >= l ? c[d] : c[m];
            e[g] = !0;
          }
        } else e[l] = !0;
      }
      function ticksFromTimestamps(e, l, c) {
        let d, m;
        let g = [],
          y = {},
          b = l.length;
        for (d = 0; d < b; ++d)
          (y[(m = l[d])] = d), g.push({ value: m, major: !1 });
        return 0 !== b && c
          ? (function (e, l, c, d) {
              let m, g;
              let y = e._adapter,
                b = +y.startOf(l[0].value, d),
                C = l[l.length - 1].value;
              for (m = b; m <= C; m = +y.add(m, 1, d))
                (g = c[m]) >= 0 && (l[g].major = !0);
              return l;
            })(e, g, y, c)
          : g;
      }
      let TimeScale = class TimeScale extends Scale {
        static id = "time";
        static defaults = {
          bounds: "data",
          adapters: {},
          time: {
            parser: !1,
            unit: !1,
            round: !1,
            isoWeekday: !1,
            minUnit: "millisecond",
            displayFormats: {},
          },
          ticks: { source: "auto", callback: !1, major: { enabled: !1 } },
        };
        constructor(e) {
          super(e),
            (this._cache = { data: [], labels: [], all: [] }),
            (this._unit = "day"),
            (this._majorUnit = void 0),
            (this._offsets = {}),
            (this._normalized = !1),
            (this._parseOpts = void 0);
        }
        init(e, l = {}) {
          let c = e.time || (e.time = {}),
            d = (this._adapter = new eB._date(e.adapters.date));
          d.init(l),
            mergeIf(c.displayFormats, d.formats()),
            (this._parseOpts = {
              parser: c.parser,
              round: c.round,
              isoWeekday: c.isoWeekday,
            }),
            super.init(e),
            (this._normalized = l.normalized);
        }
        parse(e, l) {
          return void 0 === e ? null : parse(this, e);
        }
        beforeLayout() {
          super.beforeLayout(),
            (this._cache = { data: [], labels: [], all: [] });
        }
        determineDataLimits() {
          let e = this.options,
            l = this._adapter,
            c = e.time.unit || "day",
            {
              min: d,
              max: m,
              minDefined: g,
              maxDefined: y,
            } = this.getUserBounds();
          function _applyBounds(e) {
            g || isNaN(e.min) || (d = Math.min(d, e.min)),
              y || isNaN(e.max) || (m = Math.max(m, e.max));
          }
          (g && y) ||
            (_applyBounds(this._getLabelBounds()),
            ("ticks" !== e.bounds || "labels" !== e.ticks.source) &&
              _applyBounds(this.getMinMax(!1))),
            (d =
              isNumberFinite(d) && !isNaN(d) ? d : +l.startOf(Date.now(), c)),
            (m =
              isNumberFinite(m) && !isNaN(m) ? m : +l.endOf(Date.now(), c) + 1),
            (this.min = Math.min(d, m - 1)),
            (this.max = Math.max(d + 1, m));
        }
        _getLabelBounds() {
          let e = this.getLabelTimestamps(),
            l = Number.POSITIVE_INFINITY,
            c = Number.NEGATIVE_INFINITY;
          return (
            e.length && ((l = e[0]), (c = e[e.length - 1])), { min: l, max: c }
          );
        }
        buildTicks() {
          let e = this.options,
            l = e.time,
            c = e.ticks,
            d =
              "labels" === c.source
                ? this.getLabelTimestamps()
                : this._generate();
          "ticks" === e.bounds &&
            d.length &&
            ((this.min = this._userMin || d[0]),
            (this.max = this._userMax || d[d.length - 1]));
          let m = this.min,
            g = this.max,
            y = (function (e, l, c) {
              let d = 0,
                m = e.length;
              for (; d < m && e[d] < l; ) d++;
              for (; m > d && e[m - 1] > c; ) m--;
              return d > 0 || m < e.length ? e.slice(d, m) : e;
            })(d, m, g);
          return (
            (this._unit =
              l.unit ||
              (c.autoSkip
                ? determineUnitForAutoTicks(
                    l.minUnit,
                    this.min,
                    this.max,
                    this._getLabelCapacity(m)
                  )
                : (function (e, l, c, d, m) {
                    for (let g = e3.length - 1; g >= e3.indexOf(c); g--) {
                      let c = e3[g];
                      if (e6[c].common && e._adapter.diff(m, d, c) >= l - 1)
                        return c;
                    }
                    return e3[c ? e3.indexOf(c) : 0];
                  })(this, y.length, l.minUnit, this.min, this.max))),
            (this._majorUnit =
              c.major.enabled && "year" !== this._unit
                ? (function (e) {
                    for (let l = e3.indexOf(e) + 1, c = e3.length; l < c; ++l)
                      if (e6[e3[l]].common) return e3[l];
                  })(this._unit)
                : void 0),
            this.initOffsets(d),
            e.reverse && y.reverse(),
            ticksFromTimestamps(this, y, this._majorUnit)
          );
        }
        afterAutoSkip() {
          this.options.offsetAfterAutoskip &&
            this.initOffsets(this.ticks.map((e) => +e.value));
        }
        initOffsets(e = []) {
          let l,
            c,
            d = 0,
            m = 0;
          this.options.offset &&
            e.length &&
            ((l = this.getDecimalForValue(e[0])),
            (d =
              1 === e.length ? 1 - l : (this.getDecimalForValue(e[1]) - l) / 2),
            (c = this.getDecimalForValue(e[e.length - 1])),
            (m =
              1 === e.length
                ? c
                : (c - this.getDecimalForValue(e[e.length - 2])) / 2));
          let g = e.length < 3 ? 0.5 : 0.25;
          (d = _limitValue(d, 0, g)),
            (m = _limitValue(m, 0, g)),
            (this._offsets = { start: d, end: m, factor: 1 / (d + 1 + m) });
        }
        _generate() {
          let e, l;
          let c = this._adapter,
            d = this.min,
            m = this.max,
            g = this.options,
            y = g.time,
            b =
              y.unit ||
              determineUnitForAutoTicks(
                y.minUnit,
                d,
                m,
                this._getLabelCapacity(d)
              ),
            C = valueOrDefault(g.ticks.stepSize, 1),
            P = "week" === b && y.isoWeekday,
            I = isNumber(P) || !0 === P,
            B = {},
            N = d;
          if (
            (I && (N = +c.startOf(N, "isoWeek", P)),
            (N = +c.startOf(N, I ? "day" : b)),
            c.diff(m, d, b) > 1e5 * C)
          )
            throw Error(
              d +
                " and " +
                m +
                " are too far apart with stepSize of " +
                C +
                " " +
                b
            );
          let F = "data" === g.ticks.source && this.getDataTimestamps();
          for (e = N, l = 0; e < m; e = +c.add(e, C, b), l++) addTick(B, e, F);
          return (
            (e === m || "ticks" === g.bounds || 1 === l) && addTick(B, e, F),
            Object.keys(B)
              .sort(sorter)
              .map((e) => +e)
          );
        }
        getLabelForValue(e) {
          let l = this._adapter,
            c = this.options.time;
          return c.tooltipFormat
            ? l.format(e, c.tooltipFormat)
            : l.format(e, c.displayFormats.datetime);
        }
        format(e, l) {
          let c = this.options,
            d = c.time.displayFormats,
            m = this._unit,
            g = l || d[m];
          return this._adapter.format(e, g);
        }
        _tickFormatFunction(e, l, c, d) {
          let m = this.options,
            g = m.ticks.callback;
          if (g) return callback(g, [e, l, c], this);
          let y = m.time.displayFormats,
            b = this._unit,
            C = this._majorUnit,
            P = b && y[b],
            I = C && y[C],
            B = c[l],
            N = C && I && B && B.major;
          return this._adapter.format(e, d || (N ? I : P));
        }
        generateTickLabels(e) {
          let l, c, d;
          for (l = 0, c = e.length; l < c; ++l)
            (d = e[l]).label = this._tickFormatFunction(d.value, l, e);
        }
        getDecimalForValue(e) {
          return null === e ? NaN : (e - this.min) / (this.max - this.min);
        }
        getPixelForValue(e) {
          let l = this._offsets,
            c = this.getDecimalForValue(e);
          return this.getPixelForDecimal((l.start + c) * l.factor);
        }
        getValueForPixel(e) {
          let l = this._offsets,
            c = this.getDecimalForPixel(e) / l.factor - l.end;
          return this.min + c * (this.max - this.min);
        }
        _getLabelSize(e) {
          let l = this.options.ticks,
            c = this.ctx.measureText(e).width,
            d = toRadians(this.isHorizontal() ? l.maxRotation : l.minRotation),
            m = Math.cos(d),
            g = Math.sin(d),
            y = this._resolveTickFontOptions(0).size;
          return { w: c * m + y * g, h: c * g + y * m };
        }
        _getLabelCapacity(e) {
          let l = this.options.time,
            c = l.displayFormats,
            d = c[l.unit] || c.millisecond,
            m = this._tickFormatFunction(
              e,
              0,
              ticksFromTimestamps(this, [e], this._majorUnit),
              d
            ),
            g = this._getLabelSize(m),
            y =
              Math.floor(
                this.isHorizontal() ? this.width / g.w : this.height / g.h
              ) - 1;
          return y > 0 ? y : 1;
        }
        getDataTimestamps() {
          let e,
            l,
            c = this._cache.data || [];
          if (c.length) return c;
          let d = this.getMatchingVisibleMetas();
          if (this._normalized && d.length)
            return (this._cache.data =
              d[0].controller.getAllParsedValues(this));
          for (e = 0, l = d.length; e < l; ++e)
            c = c.concat(d[e].controller.getAllParsedValues(this));
          return (this._cache.data = this.normalize(c));
        }
        getLabelTimestamps() {
          let e, l;
          let c = this._cache.labels || [];
          if (c.length) return c;
          let d = this.getLabels();
          for (e = 0, l = d.length; e < l; ++e) c.push(parse(this, d[e]));
          return (this._cache.labels = this._normalized
            ? c
            : this.normalize(c));
        }
        normalize(e) {
          return _arrayUnique(e.sort(sorter));
        }
      };
      function chart_interpolate(e, l, c) {
        let d,
          m,
          g,
          y,
          b = 0,
          C = e.length - 1;
        c
          ? (l >= e[b].pos &&
              l <= e[C].pos &&
              ({ lo: b, hi: C } = _lookupByKey(e, "pos", l)),
            ({ pos: d, time: g } = e[b]),
            ({ pos: m, time: y } = e[C]))
          : (l >= e[b].time &&
              l <= e[C].time &&
              ({ lo: b, hi: C } = _lookupByKey(e, "time", l)),
            ({ time: d, pos: g } = e[b]),
            ({ time: m, pos: y } = e[C]));
        let P = m - d;
        return P ? g + ((y - g) * (l - d)) / P : g;
      }
      let TimeSeriesScale = class TimeSeriesScale extends TimeScale {
        static id = "timeseries";
        static defaults = TimeScale.defaults;
        constructor(e) {
          super(e),
            (this._table = []),
            (this._minPos = void 0),
            (this._tableRange = void 0);
        }
        initOffsets() {
          let e = this._getTimestampsForTable(),
            l = (this._table = this.buildLookupTable(e));
          (this._minPos = chart_interpolate(l, this.min)),
            (this._tableRange = chart_interpolate(l, this.max) - this._minPos),
            super.initOffsets(e);
        }
        buildLookupTable(e) {
          let l, c, d;
          let { min: m, max: g } = this,
            y = [],
            b = [];
          for (l = 0, c = e.length; l < c; ++l)
            (d = e[l]) >= m && d <= g && y.push(d);
          if (y.length < 2)
            return [
              { time: m, pos: 0 },
              { time: g, pos: 1 },
            ];
          for (l = 0, c = y.length; l < c; ++l)
            Math.round((y[l + 1] + y[l - 1]) / 2) !== (d = y[l]) &&
              b.push({ time: d, pos: l / (c - 1) });
          return b;
        }
        _generate() {
          let e = this.min,
            l = this.max,
            c = super.getDataTimestamps();
          return (
            (c.includes(e) && c.length) || c.splice(0, 0, e),
            (c.includes(l) && 1 !== c.length) || c.push(l),
            c.sort((e, l) => e - l)
          );
        }
        _getTimestampsForTable() {
          let e = this._cache.all || [];
          if (e.length) return e;
          let l = this.getDataTimestamps(),
            c = this.getLabelTimestamps();
          return (
            (e =
              l.length && c.length
                ? this.normalize(l.concat(c))
                : l.length
                ? l
                : c),
            (e = this._cache.all = e)
          );
        }
        getDecimalForValue(e) {
          return (
            (chart_interpolate(this._table, e) - this._minPos) /
            this._tableRange
          );
        }
        getValueForPixel(e) {
          let l = this._offsets,
            c = this.getDecimalForPixel(e) / l.factor - l.end;
          return chart_interpolate(
            this._table,
            c * this._tableRange + this._minPos,
            !0
          );
        }
      };
      var e5 = Object.freeze({
        __proto__: null,
        CategoryScale: CategoryScale,
        LinearScale: LinearScale,
        LogarithmicScale: LogarithmicScale,
        RadialLinearScale: RadialLinearScale,
        TimeScale: TimeScale,
        TimeSeriesScale: TimeSeriesScale,
      });
      let e4 = [eO, eZ, e2, e5];
      Chart.register(...e4);
      var e7 = "persist:",
        e8 = "persist/FLUSH",
        e9 = "persist/REHYDRATE",
        te = "persist/PAUSE",
        tt = "persist/PERSIST",
        tn = "persist/PURGE",
        tr = "persist/REGISTER";
      function _typeof(e) {
        return (_typeof =
          "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
            ? function (e) {
                return typeof e;
              }
            : function (e) {
                return e &&
                  "function" == typeof Symbol &&
                  e.constructor === Symbol &&
                  e !== Symbol.prototype
                  ? "symbol"
                  : typeof e;
              })(e);
      }
      function ownKeys(e, l) {
        var c = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var d = Object.getOwnPropertySymbols(e);
          l &&
            (d = d.filter(function (l) {
              return Object.getOwnPropertyDescriptor(e, l).enumerable;
            })),
            c.push.apply(c, d);
        }
        return c;
      }
      function autoMergeLevel1(e, l, c, d) {
        d.debug;
        var m = (function (e) {
          for (var l = 1; l < arguments.length; l++) {
            var c = null != arguments[l] ? arguments[l] : {};
            l % 2
              ? ownKeys(c, !0).forEach(function (l) {
                  var d;
                  (d = c[l]),
                    l in e
                      ? Object.defineProperty(e, l, {
                          value: d,
                          enumerable: !0,
                          configurable: !0,
                          writable: !0,
                        })
                      : (e[l] = d);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(c))
              : ownKeys(c).forEach(function (l) {
                  Object.defineProperty(
                    e,
                    l,
                    Object.getOwnPropertyDescriptor(c, l)
                  );
                });
          }
          return e;
        })({}, c);
        return (
          e &&
            "object" === _typeof(e) &&
            Object.keys(e).forEach(function (d) {
              "_persist" !== d && l[d] === c[d] && (m[d] = e[d]);
            }),
          m
        );
      }
      function defaultSerialize(e) {
        return JSON.stringify(e);
      }
      function getStoredState_getStoredState(e) {
        var l,
          c = e.transforms || [],
          d = ""
            .concat(void 0 !== e.keyPrefix ? e.keyPrefix : e7)
            .concat(e.key),
          m = e.storage;
        return (
          e.debug,
          (l =
            !1 === e.deserialize
              ? function (e) {
                  return e;
                }
              : "function" == typeof e.deserialize
              ? e.deserialize
              : defaultDeserialize),
          m.getItem(d).then(function (e) {
            if (e)
              try {
                var d = {},
                  m = l(e);
                return (
                  Object.keys(m).forEach(function (e) {
                    d[e] = c.reduceRight(function (l, c) {
                      return c.out(l, e, m);
                    }, l(m[e]));
                  }),
                  d
                );
              } catch (e) {
                throw e;
              }
          })
        );
      }
      function defaultDeserialize(e) {
        return JSON.parse(e);
      }
      function warnIfRemoveError(e) {}
      function persistReducer_ownKeys(e, l) {
        var c = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var d = Object.getOwnPropertySymbols(e);
          l &&
            (d = d.filter(function (l) {
              return Object.getOwnPropertyDescriptor(e, l).enumerable;
            })),
            c.push.apply(c, d);
        }
        return c;
      }
      function persistReducer_objectSpread(e) {
        for (var l = 1; l < arguments.length; l++) {
          var c = null != arguments[l] ? arguments[l] : {};
          l % 2
            ? persistReducer_ownKeys(c, !0).forEach(function (l) {
                var d;
                (d = c[l]),
                  l in e
                    ? Object.defineProperty(e, l, {
                        value: d,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                      })
                    : (e[l] = d);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(c))
            : persistReducer_ownKeys(c).forEach(function (l) {
                Object.defineProperty(
                  e,
                  l,
                  Object.getOwnPropertyDescriptor(c, l)
                );
              });
        }
        return e;
      }
      function persistReducer(e, l) {
        var c = void 0 !== e.version ? e.version : -1;
        e.debug;
        var d =
            void 0 === e.stateReconciler ? autoMergeLevel1 : e.stateReconciler,
          m = e.getStoredState || getStoredState_getStoredState,
          g = void 0 !== e.timeout ? e.timeout : 5e3,
          y = null,
          b = !1,
          C = !0,
          conditionalUpdate = function (e) {
            return e._persist.rehydrated && y && !C && y.update(e), e;
          };
        return function (P, I) {
          var B,
            N,
            F = P || {},
            V = F._persist,
            G = (function (e, l) {
              if (null == e) return {};
              var c,
                d,
                m = (function (e, l) {
                  if (null == e) return {};
                  var c,
                    d,
                    m = {},
                    g = Object.keys(e);
                  for (d = 0; d < g.length; d++)
                    (c = g[d]), l.indexOf(c) >= 0 || (m[c] = e[c]);
                  return m;
                })(e, l);
              if (Object.getOwnPropertySymbols) {
                var g = Object.getOwnPropertySymbols(e);
                for (d = 0; d < g.length; d++)
                  (c = g[d]),
                    !(l.indexOf(c) >= 0) &&
                      Object.prototype.propertyIsEnumerable.call(e, c) &&
                      (m[c] = e[c]);
              }
              return m;
            })(F, ["_persist"]);
          if (I.type === tt) {
            var Q = !1,
              _rehydrate = function (l, c) {
                Q || (I.rehydrate(e.key, l, c), (Q = !0));
              };
            if (
              (g &&
                setTimeout(function () {
                  Q ||
                    _rehydrate(
                      void 0,
                      Error(
                        'redux-persist: persist timed out for persist key "'.concat(
                          e.key,
                          '"'
                        )
                      )
                    );
                }, g),
              (C = !1),
              y ||
                (y = (function (e) {
                  var l,
                    c = e.blacklist || null,
                    d = e.whitelist || null,
                    m = e.transforms || [],
                    g = e.throttle || 0,
                    y = ""
                      .concat(void 0 !== e.keyPrefix ? e.keyPrefix : e7)
                      .concat(e.key),
                    b = e.storage;
                  l =
                    !1 === e.serialize
                      ? function (e) {
                          return e;
                        }
                      : "function" == typeof e.serialize
                      ? e.serialize
                      : defaultSerialize;
                  var C = e.writeFailHandler || null,
                    P = {},
                    I = {},
                    B = [],
                    N = null,
                    F = null;
                  function processNextKey() {
                    if (0 === B.length) {
                      N && clearInterval(N), (N = null);
                      return;
                    }
                    var e = B.shift(),
                      c = m.reduce(function (l, c) {
                        return c.in(l, e, P);
                      }, P[e]);
                    if (void 0 !== c)
                      try {
                        I[e] = l(c);
                      } catch (e) {
                        console.error(
                          "redux-persist/createPersistoid: error serializing state",
                          e
                        );
                      }
                    else delete I[e];
                    0 === B.length &&
                      (Object.keys(I).forEach(function (e) {
                        void 0 === P[e] && delete I[e];
                      }),
                      (F = b.setItem(y, l(I)).catch(onWriteFail)));
                  }
                  function passWhitelistBlacklist(e) {
                    return (
                      (!d || -1 !== d.indexOf(e) || "_persist" === e) &&
                      (!c || -1 === c.indexOf(e))
                    );
                  }
                  function onWriteFail(e) {
                    C && C(e);
                  }
                  return {
                    update: function (e) {
                      Object.keys(e).forEach(function (l) {
                        passWhitelistBlacklist(l) &&
                          P[l] !== e[l] &&
                          -1 === B.indexOf(l) &&
                          B.push(l);
                      }),
                        Object.keys(P).forEach(function (l) {
                          void 0 === e[l] &&
                            passWhitelistBlacklist(l) &&
                            -1 === B.indexOf(l) &&
                            void 0 !== P[l] &&
                            B.push(l);
                        }),
                        null === N && (N = setInterval(processNextKey, g)),
                        (P = e);
                    },
                    flush: function () {
                      for (; 0 !== B.length; ) processNextKey();
                      return F || Promise.resolve();
                    },
                  };
                })(e)),
              V)
            )
              return persistReducer_objectSpread({}, l(G, I), { _persist: V });
            if (
              "function" != typeof I.rehydrate ||
              "function" != typeof I.register
            )
              throw Error(
                "redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution."
              );
            return (
              I.register(e.key),
              m(e).then(
                function (l) {
                  (
                    e.migrate ||
                    function (e, l) {
                      return Promise.resolve(e);
                    }
                  )(l, c).then(
                    function (e) {
                      _rehydrate(e);
                    },
                    function (e) {
                      _rehydrate(void 0, e);
                    }
                  );
                },
                function (e) {
                  _rehydrate(void 0, e);
                }
              ),
              persistReducer_objectSpread({}, l(G, I), {
                _persist: { version: c, rehydrated: !1 },
              })
            );
          }
          if (I.type === tn)
            return (
              (b = !0),
              I.result(
                ((B = e.storage),
                (N = ""
                  .concat(void 0 !== e.keyPrefix ? e.keyPrefix : e7)
                  .concat(e.key)),
                B.removeItem(N, warnIfRemoveError))
              ),
              persistReducer_objectSpread({}, l(G, I), { _persist: V })
            );
          if (I.type === e8)
            return (
              I.result(y && y.flush()),
              persistReducer_objectSpread({}, l(G, I), { _persist: V })
            );
          if (I.type === te) C = !0;
          else if (I.type === e9) {
            if (b)
              return persistReducer_objectSpread({}, G, {
                _persist: persistReducer_objectSpread({}, V, {
                  rehydrated: !0,
                }),
              });
            if (I.key === e.key) {
              var $ = l(G, I),
                Z = I.payload;
              return conditionalUpdate(
                persistReducer_objectSpread(
                  {},
                  !1 !== d && void 0 !== Z ? d(Z, P, $, e) : $,
                  {
                    _persist: persistReducer_objectSpread({}, V, {
                      rehydrated: !0,
                    }),
                  }
                )
              );
            }
          }
          if (!V) return l(P, I);
          var Y = l(G, I);
          return Y === G
            ? P
            : conditionalUpdate(
                persistReducer_objectSpread({}, Y, { _persist: V })
              );
        };
      }
      var ti = c(91367);
      function _toConsumableArray(e) {
        return (
          (function (e) {
            if (Array.isArray(e)) {
              for (var l = 0, c = Array(e.length); l < e.length; l++)
                c[l] = e[l];
              return c;
            }
          })(e) ||
          (function (e) {
            if (
              Symbol.iterator in Object(e) ||
              "[object Arguments]" === Object.prototype.toString.call(e)
            )
              return Array.from(e);
          })(e) ||
          (function () {
            throw TypeError("Invalid attempt to spread non-iterable instance");
          })()
        );
      }
      function persistStore_ownKeys(e, l) {
        var c = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var d = Object.getOwnPropertySymbols(e);
          l &&
            (d = d.filter(function (l) {
              return Object.getOwnPropertyDescriptor(e, l).enumerable;
            })),
            c.push.apply(c, d);
        }
        return c;
      }
      function persistStore_objectSpread(e) {
        for (var l = 1; l < arguments.length; l++) {
          var c = null != arguments[l] ? arguments[l] : {};
          l % 2
            ? persistStore_ownKeys(c, !0).forEach(function (l) {
                var d;
                (d = c[l]),
                  l in e
                    ? Object.defineProperty(e, l, {
                        value: d,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                      })
                    : (e[l] = d);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(c))
            : persistStore_ownKeys(c).forEach(function (l) {
                Object.defineProperty(
                  e,
                  l,
                  Object.getOwnPropertyDescriptor(c, l)
                );
              });
        }
        return e;
      }
      var ta = { registry: [], bootstrapped: !1 },
        ts = c(50959);
      function react_typeof(e) {
        return (react_typeof =
          "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
            ? function (e) {
                return typeof e;
              }
            : function (e) {
                return e &&
                  "function" == typeof Symbol &&
                  e.constructor === Symbol &&
                  e !== Symbol.prototype
                  ? "symbol"
                  : typeof e;
              })(e);
      }
      function _defineProperties(e, l) {
        for (var c = 0; c < l.length; c++) {
          var d = l[c];
          (d.enumerable = d.enumerable || !1),
            (d.configurable = !0),
            "value" in d && (d.writable = !0),
            Object.defineProperty(e, d.key, d);
        }
      }
      function _getPrototypeOf(e) {
        return (_getPrototypeOf = Object.setPrototypeOf
          ? Object.getPrototypeOf
          : function (e) {
              return e.__proto__ || Object.getPrototypeOf(e);
            })(e);
      }
      function _assertThisInitialized(e) {
        if (void 0 === e)
          throw ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        return e;
      }
      function _setPrototypeOf(e, l) {
        return (_setPrototypeOf =
          Object.setPrototypeOf ||
          function (e, l) {
            return (e.__proto__ = l), e;
          })(e, l);
      }
      function react_defineProperty(e, l, c) {
        return (
          l in e
            ? Object.defineProperty(e, l, {
                value: c,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (e[l] = c),
          e
        );
      }
      var tl = (function (e) {
        var l;
        function PersistGate() {
          !(function (e, l) {
            if (!(e instanceof l))
              throw TypeError("Cannot call a class as a function");
          })(this, PersistGate);
          for (
            var e, l, c, d = arguments.length, m = Array(d), g = 0;
            g < d;
            g++
          )
            m[g] = arguments[g];
          return (
            (c =
              (e = (l = _getPrototypeOf(PersistGate)).call.apply(
                l,
                [this].concat(m)
              )) &&
              ("object" === react_typeof(e) || "function" == typeof e)
                ? e
                : _assertThisInitialized(this)),
            react_defineProperty(_assertThisInitialized(c), "state", {
              bootstrapped: !1,
            }),
            react_defineProperty(
              _assertThisInitialized(c),
              "_unsubscribe",
              void 0
            ),
            react_defineProperty(
              _assertThisInitialized(c),
              "handlePersistorState",
              function () {
                c.props.persistor.getState().bootstrapped &&
                  (c.props.onBeforeLift
                    ? Promise.resolve(c.props.onBeforeLift()).finally(
                        function () {
                          return c.setState({ bootstrapped: !0 });
                        }
                      )
                    : c.setState({ bootstrapped: !0 }),
                  c._unsubscribe && c._unsubscribe());
              }
            ),
            c
          );
        }
        return (
          !(function (e, l) {
            if ("function" != typeof l && null !== l)
              throw TypeError(
                "Super expression must either be null or a function"
              );
            (e.prototype = Object.create(l && l.prototype, {
              constructor: { value: e, writable: !0, configurable: !0 },
            })),
              l && _setPrototypeOf(e, l);
          })(PersistGate, e),
          _defineProperties(PersistGate.prototype, [
            {
              key: "componentDidMount",
              value: function () {
                (this._unsubscribe = this.props.persistor.subscribe(
                  this.handlePersistorState
                )),
                  this.handlePersistorState();
              },
            },
            {
              key: "componentWillUnmount",
              value: function () {
                this._unsubscribe && this._unsubscribe();
              },
            },
            {
              key: "render",
              value: function () {
                return "function" == typeof this.props.children
                  ? this.props.children(this.state.bootstrapped)
                  : this.state.bootstrapped
                  ? this.props.children
                  : this.props.loading;
              },
            },
          ]),
          l && _defineProperties(PersistGate, l),
          PersistGate
        );
      })(ts.PureComponent);
      react_defineProperty(tl, "defaultProps", {
        children: null,
        loading: null,
      });
      var tc = c(28254),
        tu = c(6743),
        td = c(90733),
        tp = c(60715),
        th = c(59581),
        tf = c.n(th),
        tm = c(11446),
        tg = c.n(tm),
        ty = {
          src: "/_next/static/media/close.57cb38be.svg",
          height: 17,
          width: 17,
          blurWidth: 0,
          blurHeight: 0,
        },
        tb = c(52690);
      function ConnectPopUp() {
        let e = (0, tc.T)(),
          l = (0, V.v9)((e) => e.WalletReducer.wallet),
          [c, d] = (0, ts.useState)(!1),
          { openConnectModal: m, connectModalOpen: g } = (0, ts.useMemo)(() => {
            let { openConnectModal: e, connectModalOpen: l } = (0, tb.We)();
            return { openConnectModal: e, connectModalOpen: l };
          }, [window]);
        return (
          (0, ts.useEffect)(() => {
            l.account && e((0, tp.jl)());
          }, [l]),
          (0, B.jsx)("div", {
            className: tg().ConnectPopUp_wrapper,
            onClick: () => e((0, tp.jl)()),
            children: (0, B.jsxs)("section", {
              className: tg().ConnectPopUp_container,
              onClick: (e) => {
                e.stopPropagation();
              },
              children: [
                (0, B.jsx)("div", { className: tg().ConnectPopUp_shadow }),
                (0, B.jsx)(tf(), {
                  src: ty,
                  alt: "close",
                  className: tg().ConnectPopUp_container_close,
                  onClick: () => e((0, tp.jl)()),
                }),
                (0, B.jsx)("div", {
                  className: tg().ConnectPopUp_title,
                  children: "Connect your Wallet",
                }),
                (0, B.jsx)("div", { className: tg().breakLine }),
                (0, B.jsx)("div", {
                  className: tg().ConnectPopUp_Warning_Text,
                  children: (0, B.jsx)("p", {
                    children:
                      "Please accept NOYA’s terms of use before connecting your wallet.",
                  }),
                }),
                (0, B.jsxs)("div", {
                  className: tg().ConnectPopUp_terms_box,
                  children: [
                    (0, B.jsx)("div", {
                      onClick: () => {
                        d(!0),
                          setTimeout(() => {
                            m && m(), d(!1);
                          }, 500);
                      },
                      className: tg().ConnectPopUp_checkbox,
                      children: (0, B.jsx)("div", {
                        style: { opacity: c ? 1 : 0 },
                      }),
                    }),
                    (0, B.jsxs)("p", {
                      children: [
                        "Accept ",
                        (0, B.jsx)("span", { children: "NOYA’s Terms of Use" }),
                        " &",
                        " ",
                        (0, B.jsx)("span", { children: "Privacy Policy" }),
                        " ",
                      ],
                    }),
                  ],
                }),
              ],
            }),
          })
        );
      }
      td.QF, td.CF, td.gU;
      var tv = c(99490),
        tw = c.n(tv),
        tx = c(82438),
        t_ = c(92530),
        tC = c.n(t_),
        tE = c(87360);
      function DropDown(e) {
        let {
            type: l,
            items: c,
            selectedState: d,
            setSelectedState: m,
            setDropDown: g,
            time: y,
            selectedTime: b,
            setSelectedTime: C,
          } = e,
          P = (0, tE.x)();
        return (0, B.jsx)("section", {
          className: tC().DropDown_container,
          onClick: (e) => {
            g(!1), e.stopPropagation();
          },
          children: y
            ? (0, B.jsx)(B.Fragment, {
                children: [
                  { name: "3 months", desc: "(2% Rewards in NOYA token)" },
                  { name: "6 months", desc: "(4% Rewards in NOYA token)" },
                  { name: "1 year", desc: "(6% Rewards in NOYA token)" },
                ].map((e, l) =>
                  (0, B.jsxs)(
                    "section",
                    {
                      onClick: () => {
                        C && C(e.name);
                      },
                      className: tC().DropDown_item,
                      children: [
                        (0, B.jsx)("div", {
                          style: b === e.name ? { background: "#7D6FF6" } : {},
                          className: tC().DropDown_item_time_icon,
                        }),
                        (0, B.jsxs)("p", {
                          style: {
                            left: "13%",
                            fontWeight: b === e.name ? 600 : 300,
                          },
                          children: [e.name, " ", e.desc],
                        }),
                      ],
                    },
                    l
                  )
                ),
              })
            : (0, B.jsx)(B.Fragment, {
                children: c.map((e, c) =>
                  (0, B.jsxs)(
                    "section",
                    {
                      onClick: () => {
                        "chain" === l && e.chainId && P === e.chainId
                          ? (m(e), g(!1))
                          : m(e);
                      },
                      className: tC().DropDown_item,
                      children: [
                        (null == d ? void 0 : d.name) === e.name &&
                          (0, B.jsx)("div", {
                            className: tC().DropDown_item_selected,
                          }),
                        (0, B.jsx)("div", {
                          className: tC().DropDown_item_img,
                          style: { backgroundImage: "url(".concat(e.img, ")") },
                        }),
                        (0, B.jsx)("p", { children: e.name }),
                      ],
                    },
                    c
                  )
                ),
              }),
        });
      }
      var tA,
        tS,
        tk = c(71045),
        tP = c.n(tk),
        tM = {
          src: "/_next/static/media/trigger.daca10f2.svg",
          height: 12,
          width: 12,
          blurWidth: 0,
          blurHeight: 0,
        },
        tT = c(88494),
        tI = c(85703),
        tj = "0123456789abcdef",
        tO =
          "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",
        tB =
          "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",
        tD = {
          precision: 20,
          rounding: 4,
          modulo: 1,
          toExpNeg: -7,
          toExpPos: 21,
          minE: -9e15,
          maxE: 9e15,
          crypto: !1,
        },
        tN = !0,
        tR = "[DecimalError] ",
        tF = tR + "Invalid argument: ",
        tL = tR + "Precision limit exceeded",
        tU = tR + "crypto unavailable",
        tz = "[object Decimal]",
        tW = Math.floor,
        tq = Math.pow,
        tV = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
        tH = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
        tG = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
        tQ = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        t$ = tO.length - 1,
        tK = tB.length - 1,
        tZ = { toStringTag: tz };
      function digitsToString(e) {
        var l,
          c,
          d,
          m = e.length - 1,
          g = "",
          y = e[0];
        if (m > 0) {
          for (g += y, l = 1; l < m; l++)
            (c = 7 - (d = e[l] + "").length) && (g += getZeroString(c)),
              (g += d);
          (c = 7 - (d = (y = e[l]) + "").length) && (g += getZeroString(c));
        } else if (0 === y) return "0";
        for (; y % 10 == 0; ) y /= 10;
        return g + y;
      }
      function checkInt32(e, l, c) {
        if (e !== ~~e || e < l || e > c) throw Error(tF + e);
      }
      function checkRoundingDigits(e, l, c, d) {
        var m, g, y, b;
        for (g = e[0]; g >= 10; g /= 10) --l;
        return (
          --l < 0
            ? ((l += 7), (m = 0))
            : ((m = Math.ceil((l + 1) / 7)), (l %= 7)),
          (g = tq(10, 7 - l)),
          (b = e[m] % g | 0),
          null == d
            ? l < 3
              ? (0 == l ? (b = (b / 100) | 0) : 1 == l && (b = (b / 10) | 0),
                (y =
                  (c < 4 && 99999 == b) ||
                  (c > 3 && 49999 == b) ||
                  5e4 == b ||
                  0 == b))
              : (y =
                  (((c < 4 && b + 1 == g) || (c > 3 && b + 1 == g / 2)) &&
                    ((e[m + 1] / g / 100) | 0) == tq(10, l - 2) - 1) ||
                  ((b == g / 2 || 0 == b) && ((e[m + 1] / g / 100) | 0) == 0))
            : l < 4
            ? (0 == l
                ? (b = (b / 1e3) | 0)
                : 1 == l
                ? (b = (b / 100) | 0)
                : 2 == l && (b = (b / 10) | 0),
              (y = ((d || c < 4) && 9999 == b) || (!d && c > 3 && 4999 == b)))
            : (y =
                (((d || c < 4) && b + 1 == g) ||
                  (!d && c > 3 && b + 1 == g / 2)) &&
                ((e[m + 1] / g / 1e3) | 0) == tq(10, l - 3) - 1),
          y
        );
      }
      function convertBase(e, l, c) {
        for (var d, m, g = [0], y = 0, b = e.length; y < b; ) {
          for (m = g.length; m--; ) g[m] *= l;
          for (g[0] += tj.indexOf(e.charAt(y++)), d = 0; d < g.length; d++)
            g[d] > c - 1 &&
              (void 0 === g[d + 1] && (g[d + 1] = 0),
              (g[d + 1] += (g[d] / c) | 0),
              (g[d] %= c));
        }
        return g.reverse();
      }
      (tZ.absoluteValue = tZ.abs =
        function () {
          var e = new this.constructor(this);
          return e.s < 0 && (e.s = 1), finalise(e);
        }),
        (tZ.ceil = function () {
          return finalise(new this.constructor(this), this.e + 1, 2);
        }),
        (tZ.clampedTo = tZ.clamp =
          function (e, l) {
            var c = this.constructor;
            if (((e = new c(e)), (l = new c(l)), !e.s || !l.s))
              return new c(NaN);
            if (e.gt(l)) throw Error(tF + l);
            return 0 > this.cmp(e) ? e : this.cmp(l) > 0 ? l : new c(this);
          }),
        (tZ.comparedTo = tZ.cmp =
          function (e) {
            var l,
              c,
              d,
              m,
              g = this.d,
              y = (e = new this.constructor(e)).d,
              b = this.s,
              C = e.s;
            if (!g || !y)
              return b && C
                ? b !== C
                  ? b
                  : g === y
                  ? 0
                  : !g ^ (b < 0)
                  ? 1
                  : -1
                : NaN;
            if (!g[0] || !y[0]) return g[0] ? b : y[0] ? -C : 0;
            if (b !== C) return b;
            if (this.e !== e.e) return (this.e > e.e) ^ (b < 0) ? 1 : -1;
            for (l = 0, c = (d = g.length) < (m = y.length) ? d : m; l < c; ++l)
              if (g[l] !== y[l]) return (g[l] > y[l]) ^ (b < 0) ? 1 : -1;
            return d === m ? 0 : (d > m) ^ (b < 0) ? 1 : -1;
          }),
        (tZ.cosine = tZ.cos =
          function () {
            var e,
              l,
              c = this,
              d = c.constructor;
            return c.d
              ? c.d[0]
                ? ((e = d.precision),
                  (l = d.rounding),
                  (d.precision = e + Math.max(c.e, c.sd()) + 7),
                  (d.rounding = 1),
                  (c = (function (e, l) {
                    var c, d, m;
                    if (l.isZero()) return l;
                    (d = l.d.length) < 32
                      ? (m = (
                          1 / tinyPow(4, (c = Math.ceil(d / 3)))
                        ).toString())
                      : ((c = 16), (m = "2.3283064365386962890625e-10")),
                      (e.precision += c),
                      (l = taylorSeries(e, 1, l.times(m), new e(1)));
                    for (var g = c; g--; ) {
                      var y = l.times(l);
                      l = y.times(y).minus(y).times(8).plus(1);
                    }
                    return (e.precision -= c), l;
                  })(d, toLessThanHalfPi(d, c))),
                  (d.precision = e),
                  (d.rounding = l),
                  finalise(2 == tS || 3 == tS ? c.neg() : c, e, l, !0))
                : new d(1)
              : new d(NaN);
          }),
        (tZ.cubeRoot = tZ.cbrt =
          function () {
            var e,
              l,
              c,
              d,
              m,
              g,
              y,
              b,
              C,
              P,
              I = this.constructor;
            if (!this.isFinite() || this.isZero()) return new I(this);
            for (
              tN = !1,
                (g = this.s * tq(this.s * this, 1 / 3)) && Math.abs(g) != 1 / 0
                  ? (d = new I(g.toString()))
                  : ((c = digitsToString(this.d)),
                    (g = ((e = this.e) - c.length + 1) % 3) &&
                      (c += 1 == g || -2 == g ? "0" : "00"),
                    (g = tq(c, 1 / 3)),
                    (e = tW((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2))),
                    (c =
                      g == 1 / 0
                        ? "5e" + e
                        : (c = g.toExponential()).slice(0, c.indexOf("e") + 1) +
                          e),
                    ((d = new I(c)).s = this.s)),
                y = (e = I.precision) + 3;
              ;

            )
              if (
                ((d = tY(
                  (P = (C = (b = d).times(b).times(b)).plus(this))
                    .plus(this)
                    .times(b),
                  P.plus(C),
                  y + 2,
                  1
                )),
                digitsToString(b.d).slice(0, y) ===
                  (c = digitsToString(d.d)).slice(0, y))
              ) {
                if (
                  "9999" != (c = c.slice(y - 3, y + 1)) &&
                  (m || "4999" != c)
                ) {
                  (+c && (+c.slice(1) || "5" != c.charAt(0))) ||
                    (finalise(d, e + 1, 1),
                    (l = !d.times(d).times(d).eq(this)));
                  break;
                }
                if (
                  !m &&
                  (finalise(b, e + 1, 0), b.times(b).times(b).eq(this))
                ) {
                  d = b;
                  break;
                }
                (y += 4), (m = 1);
              }
            return (tN = !0), finalise(d, e, I.rounding, l);
          }),
        (tZ.decimalPlaces = tZ.dp =
          function () {
            var e,
              l = this.d,
              c = NaN;
            if (l) {
              if (((c = ((e = l.length - 1) - tW(this.e / 7)) * 7), (e = l[e])))
                for (; e % 10 == 0; e /= 10) c--;
              c < 0 && (c = 0);
            }
            return c;
          }),
        (tZ.dividedBy = tZ.div =
          function (e) {
            return tY(this, new this.constructor(e));
          }),
        (tZ.dividedToIntegerBy = tZ.divToInt =
          function (e) {
            var l = this.constructor;
            return finalise(
              tY(this, new l(e), 0, 1, 1),
              l.precision,
              l.rounding
            );
          }),
        (tZ.equals = tZ.eq =
          function (e) {
            return 0 === this.cmp(e);
          }),
        (tZ.floor = function () {
          return finalise(new this.constructor(this), this.e + 1, 3);
        }),
        (tZ.greaterThan = tZ.gt =
          function (e) {
            return this.cmp(e) > 0;
          }),
        (tZ.greaterThanOrEqualTo = tZ.gte =
          function (e) {
            var l = this.cmp(e);
            return 1 == l || 0 === l;
          }),
        (tZ.hyperbolicCosine = tZ.cosh =
          function () {
            var e,
              l,
              c,
              d,
              m,
              g = this,
              y = g.constructor,
              b = new y(1);
            if (!g.isFinite()) return new y(g.s ? 1 / 0 : NaN);
            if (g.isZero()) return b;
            (c = y.precision),
              (d = y.rounding),
              (y.precision = c + Math.max(g.e, g.sd()) + 4),
              (y.rounding = 1),
              (m = g.d.length) < 32
                ? (l = (1 / tinyPow(4, (e = Math.ceil(m / 3)))).toString())
                : ((e = 16), (l = "2.3283064365386962890625e-10")),
              (g = taylorSeries(y, 1, g.times(l), new y(1), !0));
            for (var C, P = e, I = new y(8); P--; )
              (C = g.times(g)), (g = b.minus(C.times(I.minus(C.times(I)))));
            return finalise(g, (y.precision = c), (y.rounding = d), !0);
          }),
        (tZ.hyperbolicSine = tZ.sinh =
          function () {
            var e,
              l,
              c,
              d,
              m = this,
              g = m.constructor;
            if (!m.isFinite() || m.isZero()) return new g(m);
            if (
              ((l = g.precision),
              (c = g.rounding),
              (g.precision = l + Math.max(m.e, m.sd()) + 4),
              (g.rounding = 1),
              (d = m.d.length) < 3)
            )
              m = taylorSeries(g, 2, m, m, !0);
            else {
              (e = (e = 1.4 * Math.sqrt(d)) > 16 ? 16 : 0 | e),
                (m = taylorSeries(
                  g,
                  2,
                  (m = m.times(1 / tinyPow(5, e))),
                  m,
                  !0
                ));
              for (var y, b = new g(5), C = new g(16), P = new g(20); e--; )
                (y = m.times(m)),
                  (m = m.times(b.plus(y.times(C.times(y).plus(P)))));
            }
            return (g.precision = l), (g.rounding = c), finalise(m, l, c, !0);
          }),
        (tZ.hyperbolicTangent = tZ.tanh =
          function () {
            var e,
              l,
              c = this.constructor;
            return this.isFinite()
              ? this.isZero()
                ? new c(this)
                : ((e = c.precision),
                  (l = c.rounding),
                  (c.precision = e + 7),
                  (c.rounding = 1),
                  tY(
                    this.sinh(),
                    this.cosh(),
                    (c.precision = e),
                    (c.rounding = l)
                  ))
              : new c(this.s);
          }),
        (tZ.inverseCosine = tZ.acos =
          function () {
            var e = this,
              l = e.constructor,
              c = e.abs().cmp(1),
              d = l.precision,
              m = l.rounding;
            return -1 !== c
              ? 0 === c
                ? e.isNeg()
                  ? getPi(l, d, m)
                  : new l(0)
                : new l(NaN)
              : e.isZero()
              ? getPi(l, d + 4, m).times(0.5)
              : ((l.precision = d + 6),
                (l.rounding = 1),
                (e = new l(1).minus(e).div(e.plus(1)).sqrt().atan()),
                (l.precision = d),
                (l.rounding = m),
                e.times(2));
          }),
        (tZ.inverseHyperbolicCosine = tZ.acosh =
          function () {
            var e,
              l,
              c = this,
              d = c.constructor;
            return c.lte(1)
              ? new d(c.eq(1) ? 0 : NaN)
              : c.isFinite()
              ? ((e = d.precision),
                (l = d.rounding),
                (d.precision = e + Math.max(Math.abs(c.e), c.sd()) + 4),
                (d.rounding = 1),
                (tN = !1),
                (c = c.times(c).minus(1).sqrt().plus(c)),
                (tN = !0),
                (d.precision = e),
                (d.rounding = l),
                c.ln())
              : new d(c);
          }),
        (tZ.inverseHyperbolicSine = tZ.asinh =
          function () {
            var e,
              l,
              c = this,
              d = c.constructor;
            return !c.isFinite() || c.isZero()
              ? new d(c)
              : ((e = d.precision),
                (l = d.rounding),
                (d.precision = e + 2 * Math.max(Math.abs(c.e), c.sd()) + 6),
                (d.rounding = 1),
                (tN = !1),
                (c = c.times(c).plus(1).sqrt().plus(c)),
                (tN = !0),
                (d.precision = e),
                (d.rounding = l),
                c.ln());
          }),
        (tZ.inverseHyperbolicTangent = tZ.atanh =
          function () {
            var e,
              l,
              c,
              d,
              m = this,
              g = m.constructor;
            return m.isFinite()
              ? m.e >= 0
                ? new g(m.abs().eq(1) ? m.s / 0 : m.isZero() ? m : NaN)
                : ((e = g.precision),
                  (l = g.rounding),
                  Math.max((d = m.sd()), e) < -(2 * m.e) - 1)
                ? finalise(new g(m), e, l, !0)
                : ((g.precision = c = d - m.e),
                  (m = tY(m.plus(1), new g(1).minus(m), c + e, 1)),
                  (g.precision = e + 4),
                  (g.rounding = 1),
                  (m = m.ln()),
                  (g.precision = e),
                  (g.rounding = l),
                  m.times(0.5))
              : new g(NaN);
          }),
        (tZ.inverseSine = tZ.asin =
          function () {
            var e,
              l,
              c,
              d,
              m = this,
              g = m.constructor;
            return m.isZero()
              ? new g(m)
              : ((l = m.abs().cmp(1)),
                (c = g.precision),
                (d = g.rounding),
                -1 !== l)
              ? 0 === l
                ? (((e = getPi(g, c + 4, d).times(0.5)).s = m.s), e)
                : new g(NaN)
              : ((g.precision = c + 6),
                (g.rounding = 1),
                (m = m.div(new g(1).minus(m.times(m)).sqrt().plus(1)).atan()),
                (g.precision = c),
                (g.rounding = d),
                m.times(2));
          }),
        (tZ.inverseTangent = tZ.atan =
          function () {
            var e,
              l,
              c,
              d,
              m,
              g,
              y,
              b,
              C,
              P = this,
              I = P.constructor,
              B = I.precision,
              N = I.rounding;
            if (P.isFinite()) {
              if (P.isZero()) return new I(P);
              if (P.abs().eq(1) && B + 4 <= tK)
                return ((y = getPi(I, B + 4, N).times(0.25)).s = P.s), y;
            } else {
              if (!P.s) return new I(NaN);
              if (B + 4 <= tK)
                return ((y = getPi(I, B + 4, N).times(0.5)).s = P.s), y;
            }
            for (
              I.precision = b = B + 10,
                I.rounding = 1,
                e = c = Math.min(28, (b / 7 + 2) | 0);
              e;
              --e
            )
              P = P.div(P.times(P).plus(1).sqrt().plus(1));
            for (
              tN = !1,
                l = Math.ceil(b / 7),
                d = 1,
                C = P.times(P),
                y = new I(P),
                m = P;
              -1 !== e;

            )
              if (
                ((m = m.times(C)),
                (g = y.minus(m.div((d += 2)))),
                (m = m.times(C)),
                void 0 !== (y = g.plus(m.div((d += 2)))).d[l])
              )
                for (e = l; y.d[e] === g.d[e] && e--; );
            return (
              c && (y = y.times(2 << (c - 1))),
              (tN = !0),
              finalise(y, (I.precision = B), (I.rounding = N), !0)
            );
          }),
        (tZ.isFinite = function () {
          return !!this.d;
        }),
        (tZ.isInteger = tZ.isInt =
          function () {
            return !!this.d && tW(this.e / 7) > this.d.length - 2;
          }),
        (tZ.isNaN = function () {
          return !this.s;
        }),
        (tZ.isNegative = tZ.isNeg =
          function () {
            return this.s < 0;
          }),
        (tZ.isPositive = tZ.isPos =
          function () {
            return this.s > 0;
          }),
        (tZ.isZero = function () {
          return !!this.d && 0 === this.d[0];
        }),
        (tZ.lessThan = tZ.lt =
          function (e) {
            return 0 > this.cmp(e);
          }),
        (tZ.lessThanOrEqualTo = tZ.lte =
          function (e) {
            return 1 > this.cmp(e);
          }),
        (tZ.logarithm = tZ.log =
          function (e) {
            var l,
              c,
              d,
              m,
              g,
              y,
              b,
              C = this.constructor,
              P = C.precision,
              I = C.rounding;
            if (null == e) (e = new C(10)), (l = !0);
            else {
              if (((c = (e = new C(e)).d), e.s < 0 || !c || !c[0] || e.eq(1)))
                return new C(NaN);
              l = e.eq(10);
            }
            if (((c = this.d), this.s < 0 || !c || !c[0] || this.eq(1)))
              return new C(
                c && !c[0] ? -1 / 0 : 1 != this.s ? NaN : c ? 0 : 1 / 0
              );
            if (l) {
              if (c.length > 1) m = !0;
              else {
                for (d = c[0]; d % 10 == 0; ) d /= 10;
                m = 1 !== d;
              }
            }
            if (
              ((tN = !1),
              checkRoundingDigits(
                (b = tY(
                  naturalLogarithm(this, (y = P + 5)),
                  l ? getLn10(C, y + 10) : naturalLogarithm(e, y),
                  y,
                  1
                )).d,
                (d = P),
                I
              ))
            )
              do
                if (
                  ((y += 10),
                  (b = tY(
                    naturalLogarithm(this, y),
                    l ? getLn10(C, y + 10) : naturalLogarithm(e, y),
                    y,
                    1
                  )),
                  !m)
                ) {
                  +digitsToString(b.d).slice(d + 1, d + 15) + 1 == 1e14 &&
                    (b = finalise(b, P + 1, 0));
                  break;
                }
              while (checkRoundingDigits(b.d, (d += 10), I));
            return (tN = !0), finalise(b, P, I);
          }),
        (tZ.minus = tZ.sub =
          function (e) {
            var l,
              c,
              d,
              m,
              g,
              y,
              b,
              C,
              P,
              I,
              B,
              N,
              F = this.constructor;
            if (((e = new F(e)), !this.d || !e.d))
              return (
                this.s && e.s
                  ? this.d
                    ? (e.s = -e.s)
                    : (e = new F(e.d || this.s !== e.s ? this : NaN))
                  : (e = new F(NaN)),
                e
              );
            if (this.s != e.s) return (e.s = -e.s), this.plus(e);
            if (
              ((P = this.d),
              (N = e.d),
              (b = F.precision),
              (C = F.rounding),
              !P[0] || !N[0])
            ) {
              if (N[0]) e.s = -e.s;
              else {
                if (!P[0]) return new F(3 === C ? -0 : 0);
                e = new F(this);
              }
              return tN ? finalise(e, b, C) : e;
            }
            if (
              ((c = tW(e.e / 7)),
              (I = tW(this.e / 7)),
              (P = P.slice()),
              (g = I - c))
            ) {
              for (
                (B = g < 0)
                  ? ((l = P), (g = -g), (y = N.length))
                  : ((l = N), (c = I), (y = P.length)),
                  g > (d = Math.max(Math.ceil(b / 7), y) + 2) &&
                    ((g = d), (l.length = 1)),
                  l.reverse(),
                  d = g;
                d--;

              )
                l.push(0);
              l.reverse();
            } else {
              for (
                (B = (d = P.length) < (y = N.length)) && (y = d), d = 0;
                d < y;
                d++
              )
                if (P[d] != N[d]) {
                  B = P[d] < N[d];
                  break;
                }
              g = 0;
            }
            for (
              B && ((l = P), (P = N), (N = l), (e.s = -e.s)),
                y = P.length,
                d = N.length - y;
              d > 0;
              --d
            )
              P[y++] = 0;
            for (d = N.length; d > g; ) {
              if (P[--d] < N[d]) {
                for (m = d; m && 0 === P[--m]; ) P[m] = 1e7 - 1;
                --P[m], (P[d] += 1e7);
              }
              P[d] -= N[d];
            }
            for (; 0 === P[--y]; ) P.pop();
            for (; 0 === P[0]; P.shift()) --c;
            return P[0]
              ? ((e.d = P),
                (e.e = getBase10Exponent(P, c)),
                tN ? finalise(e, b, C) : e)
              : new F(3 === C ? -0 : 0);
          }),
        (tZ.modulo = tZ.mod =
          function (e) {
            var l,
              c = this.constructor;
            return ((e = new c(e)), this.d && e.s && (!e.d || e.d[0]))
              ? e.d && (!this.d || this.d[0])
                ? ((tN = !1),
                  9 == c.modulo
                    ? ((l = tY(this, e.abs(), 0, 3, 1)), (l.s *= e.s))
                    : (l = tY(this, e, 0, c.modulo, 1)),
                  (l = l.times(e)),
                  (tN = !0),
                  this.minus(l))
                : finalise(new c(this), c.precision, c.rounding)
              : new c(NaN);
          }),
        (tZ.naturalExponential = tZ.exp =
          function () {
            return naturalExponential(this);
          }),
        (tZ.naturalLogarithm = tZ.ln =
          function () {
            return naturalLogarithm(this);
          }),
        (tZ.negated = tZ.neg =
          function () {
            var e = new this.constructor(this);
            return (e.s = -e.s), finalise(e);
          }),
        (tZ.plus = tZ.add =
          function (e) {
            var l,
              c,
              d,
              m,
              g,
              y,
              b,
              C,
              P,
              I,
              B = this.constructor;
            if (((e = new B(e)), !this.d || !e.d))
              return (
                this.s && e.s
                  ? this.d || (e = new B(e.d || this.s === e.s ? this : NaN))
                  : (e = new B(NaN)),
                e
              );
            if (this.s != e.s) return (e.s = -e.s), this.minus(e);
            if (
              ((P = this.d),
              (I = e.d),
              (b = B.precision),
              (C = B.rounding),
              !P[0] || !I[0])
            )
              return I[0] || (e = new B(this)), tN ? finalise(e, b, C) : e;
            if (
              ((g = tW(this.e / 7)),
              (d = tW(e.e / 7)),
              (P = P.slice()),
              (m = g - d))
            ) {
              for (
                m < 0
                  ? ((c = P), (m = -m), (y = I.length))
                  : ((c = I), (d = g), (y = P.length)),
                  m > (y = (g = Math.ceil(b / 7)) > y ? g + 1 : y + 1) &&
                    ((m = y), (c.length = 1)),
                  c.reverse();
                m--;

              )
                c.push(0);
              c.reverse();
            }
            for (
              (y = P.length) - (m = I.length) < 0 &&
                ((m = y), (c = I), (I = P), (P = c)),
                l = 0;
              m;

            )
              (l = ((P[--m] = P[m] + I[m] + l) / 1e7) | 0), (P[m] %= 1e7);
            for (l && (P.unshift(l), ++d), y = P.length; 0 == P[--y]; ) P.pop();
            return (
              (e.d = P),
              (e.e = getBase10Exponent(P, d)),
              tN ? finalise(e, b, C) : e
            );
          }),
        (tZ.precision = tZ.sd =
          function (e) {
            var l;
            if (void 0 !== e && !!e !== e && 1 !== e && 0 !== e)
              throw Error(tF + e);
            return (
              this.d
                ? ((l = getPrecision(this.d)),
                  e && this.e + 1 > l && (l = this.e + 1))
                : (l = NaN),
              l
            );
          }),
        (tZ.round = function () {
          var e = this.constructor;
          return finalise(new e(this), this.e + 1, e.rounding);
        }),
        (tZ.sine = tZ.sin =
          function () {
            var e,
              l,
              c = this,
              d = c.constructor;
            return c.isFinite()
              ? c.isZero()
                ? new d(c)
                : ((e = d.precision),
                  (l = d.rounding),
                  (d.precision = e + Math.max(c.e, c.sd()) + 7),
                  (d.rounding = 1),
                  (c = (function (e, l) {
                    var c,
                      d = l.d.length;
                    if (d < 3) return l.isZero() ? l : taylorSeries(e, 2, l, l);
                    (c = (c = 1.4 * Math.sqrt(d)) > 16 ? 16 : 0 | c),
                      (l = taylorSeries(
                        e,
                        2,
                        (l = l.times(1 / tinyPow(5, c))),
                        l
                      ));
                    for (
                      var m, g = new e(5), y = new e(16), b = new e(20);
                      c--;

                    )
                      (m = l.times(l)),
                        (l = l.times(g.plus(m.times(y.times(m).minus(b)))));
                    return l;
                  })(d, toLessThanHalfPi(d, c))),
                  (d.precision = e),
                  (d.rounding = l),
                  finalise(tS > 2 ? c.neg() : c, e, l, !0))
              : new d(NaN);
          }),
        (tZ.squareRoot = tZ.sqrt =
          function () {
            var e,
              l,
              c,
              d,
              m,
              g,
              y = this.d,
              b = this.e,
              C = this.s,
              P = this.constructor;
            if (1 !== C || !y || !y[0])
              return new P(
                !C || (C < 0 && (!y || y[0])) ? NaN : y ? this : 1 / 0
              );
            for (
              tN = !1,
                0 == (C = Math.sqrt(+this)) || C == 1 / 0
                  ? (((l = digitsToString(y)).length + b) % 2 == 0 &&
                      (l += "0"),
                    (C = Math.sqrt(l)),
                    (b = tW((b + 1) / 2) - (b < 0 || b % 2)),
                    (l =
                      C == 1 / 0
                        ? "5e" + b
                        : (l = C.toExponential()).slice(0, l.indexOf("e") + 1) +
                          b),
                    (d = new P(l)))
                  : (d = new P(C.toString())),
                c = (b = P.precision) + 3;
              ;

            )
              if (
                ((d = (g = d).plus(tY(this, g, c + 2, 1)).times(0.5)),
                digitsToString(g.d).slice(0, c) ===
                  (l = digitsToString(d.d)).slice(0, c))
              ) {
                if (
                  "9999" != (l = l.slice(c - 3, c + 1)) &&
                  (m || "4999" != l)
                ) {
                  (+l && (+l.slice(1) || "5" != l.charAt(0))) ||
                    (finalise(d, b + 1, 1), (e = !d.times(d).eq(this)));
                  break;
                }
                if (!m && (finalise(g, b + 1, 0), g.times(g).eq(this))) {
                  d = g;
                  break;
                }
                (c += 4), (m = 1);
              }
            return (tN = !0), finalise(d, b, P.rounding, e);
          }),
        (tZ.tangent = tZ.tan =
          function () {
            var e,
              l,
              c = this,
              d = c.constructor;
            return c.isFinite()
              ? c.isZero()
                ? new d(c)
                : ((e = d.precision),
                  (l = d.rounding),
                  (d.precision = e + 10),
                  (d.rounding = 1),
                  ((c = c.sin()).s = 1),
                  (c = tY(c, new d(1).minus(c.times(c)).sqrt(), e + 10, 0)),
                  (d.precision = e),
                  (d.rounding = l),
                  finalise(2 == tS || 4 == tS ? c.neg() : c, e, l, !0))
              : new d(NaN);
          }),
        (tZ.times = tZ.mul =
          function (e) {
            var l,
              c,
              d,
              m,
              g,
              y,
              b,
              C,
              P,
              I = this.constructor,
              B = this.d,
              N = (e = new I(e)).d;
            if (((e.s *= this.s), !B || !B[0] || !N || !N[0]))
              return new I(
                e.s && (!B || B[0] || N) && (!N || N[0] || B)
                  ? B && N
                    ? 0 * e.s
                    : e.s / 0
                  : NaN
              );
            for (
              c = tW(this.e / 7) + tW(e.e / 7),
                (C = B.length) < (P = N.length) &&
                  ((g = B), (B = N), (N = g), (y = C), (C = P), (P = y)),
                g = [],
                d = y = C + P;
              d--;

            )
              g.push(0);
            for (d = P; --d >= 0; ) {
              for (l = 0, m = C + d; m > d; )
                (b = g[m] + N[d] * B[m - d - 1] + l),
                  (g[m--] = b % 1e7 | 0),
                  (l = (b / 1e7) | 0);
              g[m] = (g[m] + l) % 1e7 | 0;
            }
            for (; !g[--y]; ) g.pop();
            return (
              l ? ++c : g.shift(),
              (e.d = g),
              (e.e = getBase10Exponent(g, c)),
              tN ? finalise(e, I.precision, I.rounding) : e
            );
          }),
        (tZ.toBinary = function (e, l) {
          return toStringBinary(this, 2, e, l);
        }),
        (tZ.toDecimalPlaces = tZ.toDP =
          function (e, l) {
            var c = this,
              d = c.constructor;
            return ((c = new d(c)), void 0 === e)
              ? c
              : (checkInt32(e, 0, 1e9),
                void 0 === l ? (l = d.rounding) : checkInt32(l, 0, 8),
                finalise(c, e + c.e + 1, l));
          }),
        (tZ.toExponential = function (e, l) {
          var c,
            d = this,
            m = d.constructor;
          return (
            void 0 === e
              ? (c = finiteToString(d, !0))
              : (checkInt32(e, 0, 1e9),
                void 0 === l ? (l = m.rounding) : checkInt32(l, 0, 8),
                (c = finiteToString(
                  (d = finalise(new m(d), e + 1, l)),
                  !0,
                  e + 1
                ))),
            d.isNeg() && !d.isZero() ? "-" + c : c
          );
        }),
        (tZ.toFixed = function (e, l) {
          var c,
            d,
            m = this.constructor;
          return (
            void 0 === e
              ? (c = finiteToString(this))
              : (checkInt32(e, 0, 1e9),
                void 0 === l ? (l = m.rounding) : checkInt32(l, 0, 8),
                (c = finiteToString(
                  (d = finalise(new m(this), e + this.e + 1, l)),
                  !1,
                  e + d.e + 1
                ))),
            this.isNeg() && !this.isZero() ? "-" + c : c
          );
        }),
        (tZ.toFraction = function (e) {
          var l,
            c,
            d,
            m,
            g,
            y,
            b,
            C,
            P,
            I,
            B,
            N,
            F = this.d,
            V = this.constructor;
          if (!F) return new V(this);
          if (
            ((P = c = new V(1)),
            (d = C = new V(0)),
            (y = (g = (l = new V(d)).e = getPrecision(F) - this.e - 1) % 7),
            (l.d[0] = tq(10, y < 0 ? 7 + y : y)),
            null == e)
          )
            e = g > 0 ? l : P;
          else {
            if (!(b = new V(e)).isInt() || b.lt(P)) throw Error(tF + b);
            e = b.gt(l) ? (g > 0 ? l : P) : b;
          }
          for (
            tN = !1,
              b = new V(digitsToString(F)),
              I = V.precision,
              V.precision = g = 14 * F.length;
            (B = tY(b, l, 0, 1, 1)), 1 != (m = c.plus(B.times(d))).cmp(e);

          )
            (c = d),
              (d = m),
              (m = P),
              (P = C.plus(B.times(m))),
              (C = m),
              (m = l),
              (l = b.minus(B.times(m))),
              (b = m);
          return (
            (m = tY(e.minus(c), d, 0, 1, 1)),
            (C = C.plus(m.times(P))),
            (c = c.plus(m.times(d))),
            (C.s = P.s = this.s),
            (N =
              1 >
              tY(P, d, g, 1)
                .minus(this)
                .abs()
                .cmp(tY(C, c, g, 1).minus(this).abs())
                ? [P, d]
                : [C, c]),
            (V.precision = I),
            (tN = !0),
            N
          );
        }),
        (tZ.toHexadecimal = tZ.toHex =
          function (e, l) {
            return toStringBinary(this, 16, e, l);
          }),
        (tZ.toNearest = function (e, l) {
          var c = this,
            d = c.constructor;
          if (((c = new d(c)), null == e)) {
            if (!c.d) return c;
            (e = new d(1)), (l = d.rounding);
          } else {
            if (
              ((e = new d(e)),
              void 0 === l ? (l = d.rounding) : checkInt32(l, 0, 8),
              !c.d)
            )
              return e.s ? c : e;
            if (!e.d) return e.s && (e.s = c.s), e;
          }
          return (
            e.d[0]
              ? ((tN = !1),
                (c = tY(c, e, 0, l, 1).times(e)),
                (tN = !0),
                finalise(c))
              : ((e.s = c.s), (c = e)),
            c
          );
        }),
        (tZ.toNumber = function () {
          return +this;
        }),
        (tZ.toOctal = function (e, l) {
          return toStringBinary(this, 8, e, l);
        }),
        (tZ.toPower = tZ.pow =
          function (e) {
            var l,
              c,
              d,
              m,
              g,
              y,
              b = this,
              C = b.constructor,
              P = +(e = new C(e));
            if (!b.d || !e.d || !b.d[0] || !e.d[0]) return new C(tq(+b, P));
            if ((b = new C(b)).eq(1)) return b;
            if (((d = C.precision), (g = C.rounding), e.eq(1)))
              return finalise(b, d, g);
            if (
              (l = tW(e.e / 7)) >= e.d.length - 1 &&
              (c = P < 0 ? -P : P) <= 9007199254740991
            )
              return (
                (m = intPow(C, b, c, d)),
                e.s < 0 ? new C(1).div(m) : finalise(m, d, g)
              );
            if ((y = b.s) < 0) {
              if (l < e.d.length - 1) return new C(NaN);
              if (
                ((1 & e.d[l]) == 0 && (y = 1),
                0 == b.e && 1 == b.d[0] && 1 == b.d.length)
              )
                return (b.s = y), b;
            }
            return (l =
              0 != (c = tq(+b, P)) && isFinite(c)
                ? new C(c + "").e
                : tW(
                    P *
                      (Math.log("0." + digitsToString(b.d)) / Math.LN10 +
                        b.e +
                        1)
                  )) >
              C.maxE + 1 || l < C.minE - 1
              ? new C(l > 0 ? y / 0 : 0)
              : ((tN = !1),
                (C.rounding = b.s = 1),
                (c = Math.min(12, (l + "").length)),
                (m = naturalExponential(e.times(naturalLogarithm(b, d + c)), d))
                  .d &&
                  checkRoundingDigits((m = finalise(m, d + 5, 1)).d, d, g) &&
                  ((l = d + 10),
                  +digitsToString(
                    (m = finalise(
                      naturalExponential(
                        e.times(naturalLogarithm(b, l + c)),
                        l
                      ),
                      l + 5,
                      1
                    )).d
                  ).slice(d + 1, d + 15) +
                    1 ==
                    1e14 && (m = finalise(m, d + 1, 0))),
                (m.s = y),
                (tN = !0),
                (C.rounding = g),
                finalise(m, d, g));
          }),
        (tZ.toPrecision = function (e, l) {
          var c,
            d = this,
            m = d.constructor;
          return (
            void 0 === e
              ? (c = finiteToString(d, d.e <= m.toExpNeg || d.e >= m.toExpPos))
              : (checkInt32(e, 1, 1e9),
                void 0 === l ? (l = m.rounding) : checkInt32(l, 0, 8),
                (c = finiteToString(
                  (d = finalise(new m(d), e, l)),
                  e <= d.e || d.e <= m.toExpNeg,
                  e
                ))),
            d.isNeg() && !d.isZero() ? "-" + c : c
          );
        }),
        (tZ.toSignificantDigits = tZ.toSD =
          function (e, l) {
            var c = this.constructor;
            return (
              void 0 === e
                ? ((e = c.precision), (l = c.rounding))
                : (checkInt32(e, 1, 1e9),
                  void 0 === l ? (l = c.rounding) : checkInt32(l, 0, 8)),
              finalise(new c(this), e, l)
            );
          }),
        (tZ.toString = function () {
          var e = this.constructor,
            l = finiteToString(
              this,
              this.e <= e.toExpNeg || this.e >= e.toExpPos
            );
          return this.isNeg() && !this.isZero() ? "-" + l : l;
        }),
        (tZ.truncated = tZ.trunc =
          function () {
            return finalise(new this.constructor(this), this.e + 1, 1);
          }),
        (tZ.valueOf = tZ.toJSON =
          function () {
            var e = this.constructor,
              l = finiteToString(
                this,
                this.e <= e.toExpNeg || this.e >= e.toExpPos
              );
            return this.isNeg() ? "-" + l : l;
          });
      var tY = (function () {
        function multiplyInteger(e, l, c) {
          var d,
            m = 0,
            g = e.length;
          for (e = e.slice(); g--; )
            (d = e[g] * l + m), (e[g] = d % c | 0), (m = (d / c) | 0);
          return m && e.unshift(m), e;
        }
        function compare(e, l, c, d) {
          var m, g;
          if (c != d) g = c > d ? 1 : -1;
          else
            for (m = g = 0; m < c; m++)
              if (e[m] != l[m]) {
                g = e[m] > l[m] ? 1 : -1;
                break;
              }
          return g;
        }
        function subtract(e, l, c, d) {
          for (var m = 0; c--; )
            (e[c] -= m),
              (m = e[c] < l[c] ? 1 : 0),
              (e[c] = m * d + e[c] - l[c]);
          for (; !e[0] && e.length > 1; ) e.shift();
        }
        return function (e, l, c, d, m, g) {
          var y,
            b,
            C,
            P,
            I,
            B,
            N,
            F,
            V,
            G,
            Q,
            $,
            Z,
            Y,
            et,
            en,
            er,
            ei,
            eo,
            ea,
            es = e.constructor,
            el = e.s == l.s ? 1 : -1,
            ec = e.d,
            eu = l.d;
          if (!ec || !ec[0] || !eu || !eu[0])
            return new es(
              e.s && l.s && (ec ? !eu || ec[0] != eu[0] : eu)
                ? (ec && 0 == ec[0]) || !eu
                  ? 0 * el
                  : el / 0
                : NaN
            );
          for (
            g
              ? ((I = 1), (b = e.e - l.e))
              : ((g = 1e7), (I = 7), (b = tW(e.e / I) - tW(l.e / I))),
              eo = eu.length,
              er = ec.length,
              G = (V = new es(el)).d = [],
              C = 0;
            eu[C] == (ec[C] || 0);
            C++
          );
          if (
            (eu[C] > (ec[C] || 0) && b--,
            null == c
              ? ((Y = c = es.precision), (d = es.rounding))
              : (Y = m ? c + (e.e - l.e) + 1 : c),
            Y < 0)
          )
            G.push(1), (B = !0);
          else {
            if (((Y = (Y / I + 2) | 0), (C = 0), 1 == eo)) {
              for (P = 0, eu = eu[0], Y++; (C < er || P) && Y--; C++)
                (et = P * g + (ec[C] || 0)),
                  (G[C] = (et / eu) | 0),
                  (P = et % eu | 0);
              B = P || C < er;
            } else {
              for (
                (P = (g / (eu[0] + 1)) | 0) > 1 &&
                  ((eu = multiplyInteger(eu, P, g)),
                  (ec = multiplyInteger(ec, P, g)),
                  (eo = eu.length),
                  (er = ec.length)),
                  en = eo,
                  $ = (Q = ec.slice(0, eo)).length;
                $ < eo;

              )
                Q[$++] = 0;
              (ea = eu.slice()).unshift(0),
                (ei = eu[0]),
                eu[1] >= g / 2 && ++ei;
              do
                (P = 0),
                  (y = compare(eu, Q, eo, $)) < 0
                    ? ((Z = Q[0]),
                      eo != $ && (Z = Z * g + (Q[1] || 0)),
                      (P = (Z / ei) | 0) > 1
                        ? (P >= g && (P = g - 1),
                          (F = (N = multiplyInteger(eu, P, g)).length),
                          ($ = Q.length),
                          1 == (y = compare(N, Q, F, $)) &&
                            (P--, subtract(N, eo < F ? ea : eu, F, g)))
                        : (0 == P && (y = P = 1), (N = eu.slice())),
                      (F = N.length) < $ && N.unshift(0),
                      subtract(Q, N, $, g),
                      -1 == y &&
                        (($ = Q.length),
                        (y = compare(eu, Q, eo, $)) < 1 &&
                          (P++, subtract(Q, eo < $ ? ea : eu, $, g))),
                      ($ = Q.length))
                    : 0 === y && (P++, (Q = [0])),
                  (G[C++] = P),
                  y && Q[0]
                    ? (Q[$++] = ec[en] || 0)
                    : ((Q = [ec[en]]), ($ = 1));
              while ((en++ < er || void 0 !== Q[0]) && Y--);
              B = void 0 !== Q[0];
            }
            G[0] || G.shift();
          }
          if (1 == I) (V.e = b), (tA = B);
          else {
            for (C = 1, P = G[0]; P >= 10; P /= 10) C++;
            (V.e = C + b * I - 1), finalise(V, m ? c + V.e + 1 : c, d, B);
          }
          return V;
        };
      })();
      function finalise(e, l, c, d) {
        var m,
          g,
          y,
          b,
          C,
          P,
          I,
          B,
          N,
          F = e.constructor;
        e: if (null != l) {
          if (!(B = e.d)) return e;
          for (m = 1, b = B[0]; b >= 10; b /= 10) m++;
          if ((g = l - m) < 0)
            (g += 7),
              (y = l),
              (C = ((I = B[(N = 0)]) / tq(10, m - y - 1)) % 10 | 0);
          else if ((N = Math.ceil((g + 1) / 7)) >= (b = B.length)) {
            if (d) {
              for (; b++ <= N; ) B.push(0);
              (I = C = 0), (m = 1), (g %= 7), (y = g - 7 + 1);
            } else break e;
          } else {
            for (m = 1, I = b = B[N]; b >= 10; b /= 10) m++;
            (g %= 7),
              (C = (y = g - 7 + m) < 0 ? 0 : (I / tq(10, m - y - 1)) % 10 | 0);
          }
          if (
            ((d =
              d ||
              l < 0 ||
              void 0 !== B[N + 1] ||
              (y < 0 ? I : I % tq(10, m - y - 1))),
            (P =
              c < 4
                ? (C || d) && (0 == c || c == (e.s < 0 ? 3 : 2))
                : C > 5 ||
                  (5 == C &&
                    (4 == c ||
                      d ||
                      (6 == c &&
                        (g > 0 ? (y > 0 ? I / tq(10, m - y) : 0) : B[N - 1]) %
                          10 &
                          1) ||
                      c == (e.s < 0 ? 8 : 7)))),
            l < 1 || !B[0])
          )
            return (
              (B.length = 0),
              P
                ? ((l -= e.e + 1),
                  (B[0] = tq(10, (7 - (l % 7)) % 7)),
                  (e.e = -l || 0))
                : (B[0] = e.e = 0),
              e
            );
          if (
            (0 == g
              ? ((B.length = N), (b = 1), N--)
              : ((B.length = N + 1),
                (b = tq(10, 7 - g)),
                (B[N] = y > 0 ? ((I / tq(10, m - y)) % tq(10, y) | 0) * b : 0)),
            P)
          )
            for (;;) {
              if (0 == N) {
                for (g = 1, y = B[0]; y >= 10; y /= 10) g++;
                for (y = B[0] += b, b = 1; y >= 10; y /= 10) b++;
                g != b && (e.e++, 1e7 == B[0] && (B[0] = 1));
                break;
              }
              if (((B[N] += b), 1e7 != B[N])) break;
              (B[N--] = 0), (b = 1);
            }
          for (g = B.length; 0 === B[--g]; ) B.pop();
        }
        return (
          tN &&
            (e.e > F.maxE
              ? ((e.d = null), (e.e = NaN))
              : e.e < F.minE && ((e.e = 0), (e.d = [0]))),
          e
        );
      }
      function finiteToString(e, l, c) {
        if (!e.isFinite()) return nonFiniteToString(e);
        var d,
          m = e.e,
          g = digitsToString(e.d),
          y = g.length;
        return (
          l
            ? (c && (d = c - y) > 0
                ? (g = g.charAt(0) + "." + g.slice(1) + getZeroString(d))
                : y > 1 && (g = g.charAt(0) + "." + g.slice(1)),
              (g = g + (e.e < 0 ? "e" : "e+") + e.e))
            : m < 0
            ? ((g = "0." + getZeroString(-m - 1) + g),
              c && (d = c - y) > 0 && (g += getZeroString(d)))
            : m >= y
            ? ((g += getZeroString(m + 1 - y)),
              c && (d = c - m - 1) > 0 && (g = g + "." + getZeroString(d)))
            : ((d = m + 1) < y && (g = g.slice(0, d) + "." + g.slice(d)),
              c &&
                (d = c - y) > 0 &&
                (m + 1 === y && (g += "."), (g += getZeroString(d)))),
          g
        );
      }
      function getBase10Exponent(e, l) {
        var c = e[0];
        for (l *= 7; c >= 10; c /= 10) l++;
        return l;
      }
      function getLn10(e, l, c) {
        if (l > t$) throw ((tN = !0), c && (e.precision = c), Error(tL));
        return finalise(new e(tO), l, 1, !0);
      }
      function getPi(e, l, c) {
        if (l > tK) throw Error(tL);
        return finalise(new e(tB), l, c, !0);
      }
      function getPrecision(e) {
        var l = e.length - 1,
          c = 7 * l + 1;
        if ((l = e[l])) {
          for (; l % 10 == 0; l /= 10) c--;
          for (l = e[0]; l >= 10; l /= 10) c++;
        }
        return c;
      }
      function getZeroString(e) {
        for (var l = ""; e--; ) l += "0";
        return l;
      }
      function intPow(e, l, c, d) {
        var m,
          g = new e(1),
          y = Math.ceil(d / 7 + 4);
        for (tN = !1; ; ) {
          if (
            (c % 2 && truncate((g = g.times(l)).d, y) && (m = !0),
            0 === (c = tW(c / 2)))
          ) {
            (c = g.d.length - 1), m && 0 === g.d[c] && ++g.d[c];
            break;
          }
          truncate((l = l.times(l)).d, y);
        }
        return (tN = !0), g;
      }
      function isOdd(e) {
        return 1 & e.d[e.d.length - 1];
      }
      function maxOrMin(e, l, c) {
        for (var d, m, g = new e(l[0]), y = 0; ++y < l.length; ) {
          if (!(m = new e(l[y])).s) {
            g = m;
            break;
          }
          ((d = g.cmp(m)) === c || (0 === d && g.s === c)) && (g = m);
        }
        return g;
      }
      function naturalExponential(e, l) {
        var c,
          d,
          m,
          g,
          y,
          b,
          C,
          P = 0,
          I = 0,
          B = 0,
          N = e.constructor,
          F = N.rounding,
          V = N.precision;
        if (!e.d || !e.d[0] || e.e > 17)
          return new N(
            e.d
              ? e.d[0]
                ? e.s < 0
                  ? 0
                  : 1 / 0
                : 1
              : e.s
              ? e.s < 0
                ? 0
                : e
              : 0 / 0
          );
        for (
          null == l ? ((tN = !1), (C = V)) : (C = l), b = new N(0.03125);
          e.e > -2;

        )
          (e = e.times(b)), (B += 5);
        for (
          C += d = ((Math.log(tq(2, B)) / Math.LN10) * 2 + 5) | 0,
            c = g = y = new N(1),
            N.precision = C;
          ;

        ) {
          if (
            ((g = finalise(g.times(e), C, 1)),
            (c = c.times(++I)),
            digitsToString((b = y.plus(tY(g, c, C, 1))).d).slice(0, C) ===
              digitsToString(y.d).slice(0, C))
          ) {
            for (m = B; m--; ) y = finalise(y.times(y), C, 1);
            if (null != l) return (N.precision = V), y;
            if (!(P < 3 && checkRoundingDigits(y.d, C - d, F, P)))
              return finalise(y, (N.precision = V), F, (tN = !0));
            (N.precision = C += 10), (c = g = b = new N(1)), (I = 0), P++;
          }
          y = b;
        }
      }
      function naturalLogarithm(e, l) {
        var c,
          d,
          m,
          g,
          y,
          b,
          C,
          P,
          I,
          B,
          N,
          F = 1,
          V = e,
          G = V.d,
          Q = V.constructor,
          $ = Q.rounding,
          Z = Q.precision;
        if (V.s < 0 || !G || !G[0] || (!V.e && 1 == G[0] && 1 == G.length))
          return new Q(G && !G[0] ? -1 / 0 : 1 != V.s ? NaN : G ? 0 : V);
        if (
          (null == l ? ((tN = !1), (I = Z)) : (I = l),
          (Q.precision = I += 10),
          (d = (c = digitsToString(G)).charAt(0)),
          !(15e14 > Math.abs((g = V.e))))
        )
          return (
            (P = getLn10(Q, I + 2, Z).times(g + "")),
            (V = naturalLogarithm(new Q(d + "." + c.slice(1)), I - 10).plus(P)),
            (Q.precision = Z),
            null == l ? finalise(V, Z, $, (tN = !0)) : V
          );
        for (; (d < 7 && 1 != d) || (1 == d && c.charAt(1) > 3); )
          (d = (c = digitsToString((V = V.times(e)).d)).charAt(0)), F++;
        for (
          g = V.e,
            d > 1
              ? ((V = new Q("0." + c)), g++)
              : (V = new Q(d + "." + c.slice(1))),
            B = V,
            C = y = V = tY(V.minus(1), V.plus(1), I, 1),
            N = finalise(V.times(V), I, 1),
            m = 3;
          ;

        ) {
          if (
            ((y = finalise(y.times(N), I, 1)),
            digitsToString((P = C.plus(tY(y, new Q(m), I, 1))).d).slice(
              0,
              I
            ) === digitsToString(C.d).slice(0, I))
          ) {
            if (
              ((C = C.times(2)),
              0 !== g && (C = C.plus(getLn10(Q, I + 2, Z).times(g + ""))),
              (C = tY(C, new Q(F), I, 1)),
              null != l)
            )
              return (Q.precision = Z), C;
            if (!checkRoundingDigits(C.d, I - 10, $, b))
              return finalise(C, (Q.precision = Z), $, (tN = !0));
            (Q.precision = I += 10),
              (P = y = V = tY(B.minus(1), B.plus(1), I, 1)),
              (N = finalise(V.times(V), I, 1)),
              (m = b = 1);
          }
          (C = P), (m += 2);
        }
      }
      function nonFiniteToString(e) {
        return String((e.s * e.s) / 0);
      }
      function parseDecimal(e, l) {
        var c, d, m;
        for (
          (c = l.indexOf(".")) > -1 && (l = l.replace(".", "")),
            (d = l.search(/e/i)) > 0
              ? (c < 0 && (c = d),
                (c += +l.slice(d + 1)),
                (l = l.substring(0, d)))
              : c < 0 && (c = l.length),
            d = 0;
          48 === l.charCodeAt(d);
          d++
        );
        for (m = l.length; 48 === l.charCodeAt(m - 1); --m);
        if ((l = l.slice(d, m))) {
          if (
            ((m -= d),
            (e.e = c = c - d - 1),
            (e.d = []),
            (d = (c + 1) % 7),
            c < 0 && (d += 7),
            d < m)
          ) {
            for (d && e.d.push(+l.slice(0, d)), m -= 7; d < m; )
              e.d.push(+l.slice(d, (d += 7)));
            d = 7 - (l = l.slice(d)).length;
          } else d -= m;
          for (; d--; ) l += "0";
          e.d.push(+l),
            tN &&
              (e.e > e.constructor.maxE
                ? ((e.d = null), (e.e = NaN))
                : e.e < e.constructor.minE && ((e.e = 0), (e.d = [0])));
        } else (e.e = 0), (e.d = [0]);
        return e;
      }
      function taylorSeries(e, l, c, d, m) {
        var g,
          y,
          b,
          C,
          P = e.precision,
          I = Math.ceil(P / 7);
        for (tN = !1, C = c.times(c), b = new e(d); ; ) {
          if (
            ((y = tY(b.times(C), new e(l++ * l++), P, 1)),
            (b = m ? d.plus(y) : d.minus(y)),
            (d = tY(y.times(C), new e(l++ * l++), P, 1)),
            void 0 !== (y = b.plus(d)).d[I])
          ) {
            for (g = I; y.d[g] === b.d[g] && g--; );
            if (-1 == g) break;
          }
          (g = b), (b = d), (d = y), (y = g);
        }
        return (tN = !0), (y.d.length = I + 1), y;
      }
      function tinyPow(e, l) {
        for (var c = e; --l; ) c *= e;
        return c;
      }
      function toLessThanHalfPi(e, l) {
        var c,
          d = l.s < 0,
          m = getPi(e, e.precision, 1),
          g = m.times(0.5);
        if ((l = l.abs()).lte(g)) return (tS = d ? 4 : 1), l;
        if ((c = l.divToInt(m)).isZero()) tS = d ? 3 : 2;
        else {
          if ((l = l.minus(c.times(m))).lte(g))
            return (tS = isOdd(c) ? (d ? 2 : 3) : d ? 4 : 1), l;
          tS = isOdd(c) ? (d ? 1 : 4) : d ? 3 : 2;
        }
        return l.minus(m).abs();
      }
      function toStringBinary(e, l, c, d) {
        var m,
          g,
          y,
          b,
          C,
          P,
          I,
          B,
          N,
          F = e.constructor,
          V = void 0 !== c;
        if (
          (V
            ? (checkInt32(c, 1, 1e9),
              void 0 === d ? (d = F.rounding) : checkInt32(d, 0, 8))
            : ((c = F.precision), (d = F.rounding)),
          e.isFinite())
        ) {
          for (
            y = (I = finiteToString(e)).indexOf("."),
              V
                ? ((m = 2),
                  16 == l ? (c = 4 * c - 3) : 8 == l && (c = 3 * c - 2))
                : (m = l),
              y >= 0 &&
                ((I = I.replace(".", "")),
                ((N = new F(1)).e = I.length - y),
                (N.d = convertBase(finiteToString(N), 10, m)),
                (N.e = N.d.length)),
              g = C = (B = convertBase(I, 10, m)).length;
            0 == B[--C];

          )
            B.pop();
          if (B[0]) {
            if (
              (y < 0
                ? g--
                : (((e = new F(e)).d = B),
                  (e.e = g),
                  (B = (e = tY(e, N, c, d, 0, m)).d),
                  (g = e.e),
                  (P = tA)),
              (y = B[c]),
              (b = m / 2),
              (P = P || void 0 !== B[c + 1]),
              (P =
                d < 4
                  ? (void 0 !== y || P) && (0 === d || d === (e.s < 0 ? 3 : 2))
                  : y > b ||
                    (y === b &&
                      (4 === d ||
                        P ||
                        (6 === d && 1 & B[c - 1]) ||
                        d === (e.s < 0 ? 8 : 7)))),
              (B.length = c),
              P)
            )
              for (; ++B[--c] > m - 1; ) (B[c] = 0), c || (++g, B.unshift(1));
            for (C = B.length; !B[C - 1]; --C);
            for (y = 0, I = ""; y < C; y++) I += tj.charAt(B[y]);
            if (V) {
              if (C > 1) {
                if (16 == l || 8 == l) {
                  for (y = 16 == l ? 4 : 3, --C; C % y; C++) I += "0";
                  for (C = (B = convertBase(I, m, l)).length; !B[C - 1]; --C);
                  for (y = 1, I = "1."; y < C; y++) I += tj.charAt(B[y]);
                } else I = I.charAt(0) + "." + I.slice(1);
              }
              I = I + (g < 0 ? "p" : "p+") + g;
            } else if (g < 0) {
              for (; ++g; ) I = "0" + I;
              I = "0." + I;
            } else if (++g > C) for (g -= C; g--; ) I += "0";
            else g < C && (I = I.slice(0, g) + "." + I.slice(g));
          } else I = V ? "0p+0" : "0";
          I = (16 == l ? "0x" : 2 == l ? "0b" : 8 == l ? "0o" : "") + I;
        } else I = nonFiniteToString(e);
        return e.s < 0 ? "-" + I : I;
      }
      function truncate(e, l) {
        if (e.length > l) return (e.length = l), !0;
      }
      function abs(e) {
        return new this(e).abs();
      }
      function acos(e) {
        return new this(e).acos();
      }
      function acosh(e) {
        return new this(e).acosh();
      }
      function add(e, l) {
        return new this(e).plus(l);
      }
      function asin(e) {
        return new this(e).asin();
      }
      function asinh(e) {
        return new this(e).asinh();
      }
      function atan(e) {
        return new this(e).atan();
      }
      function atanh(e) {
        return new this(e).atanh();
      }
      function atan2(e, l) {
        (e = new this(e)), (l = new this(l));
        var c,
          d = this.precision,
          m = this.rounding,
          g = d + 4;
        return (
          e.s && l.s
            ? e.d || l.d
              ? !l.d || e.isZero()
                ? ((c = l.s < 0 ? getPi(this, d, m) : new this(0)).s = e.s)
                : !e.d || l.isZero()
                ? ((c = getPi(this, g, 1).times(0.5)).s = e.s)
                : l.s < 0
                ? ((this.precision = g),
                  (this.rounding = 1),
                  (c = this.atan(tY(e, l, g, 1))),
                  (l = getPi(this, g, 1)),
                  (this.precision = d),
                  (this.rounding = m),
                  (c = e.s < 0 ? c.minus(l) : c.plus(l)))
                : (c = this.atan(tY(e, l, g, 1)))
              : ((c = getPi(this, g, 1).times(l.s > 0 ? 0.25 : 0.75)).s = e.s)
            : (c = new this(NaN)),
          c
        );
      }
      function cbrt(e) {
        return new this(e).cbrt();
      }
      function ceil(e) {
        return finalise((e = new this(e)), e.e + 1, 2);
      }
      function clamp(e, l, c) {
        return new this(e).clamp(l, c);
      }
      function config(e) {
        if (!e || "object" != typeof e) throw Error(tR + "Object expected");
        var l,
          c,
          d,
          m = !0 === e.defaults,
          g = [
            "precision",
            1,
            1e9,
            "rounding",
            0,
            8,
            "toExpNeg",
            -9e15,
            0,
            "toExpPos",
            0,
            9e15,
            "maxE",
            0,
            9e15,
            "minE",
            -9e15,
            0,
            "modulo",
            0,
            9,
          ];
        for (l = 0; l < g.length; l += 3)
          if (((c = g[l]), m && (this[c] = tD[c]), void 0 !== (d = e[c]))) {
            if (tW(d) === d && d >= g[l + 1] && d <= g[l + 2]) this[c] = d;
            else throw Error(tF + c + ": " + d);
          }
        if (((c = "crypto"), m && (this[c] = tD[c]), void 0 !== (d = e[c]))) {
          if (!0 === d || !1 === d || 0 === d || 1 === d) {
            if (d) {
              if (
                "undefined" != typeof crypto &&
                crypto &&
                (crypto.getRandomValues || crypto.randomBytes)
              )
                this[c] = !0;
              else throw Error(tU);
            } else this[c] = !1;
          } else throw Error(tF + c + ": " + d);
        }
        return this;
      }
      function cos(e) {
        return new this(e).cos();
      }
      function cosh(e) {
        return new this(e).cosh();
      }
      function div(e, l) {
        return new this(e).div(l);
      }
      function exp(e) {
        return new this(e).exp();
      }
      function floor(e) {
        return finalise((e = new this(e)), e.e + 1, 3);
      }
      function hypot() {
        var e,
          l,
          c = new this(0);
        for (e = 0, tN = !1; e < arguments.length; )
          if (((l = new this(arguments[e++])), l.d))
            c.d && (c = c.plus(l.times(l)));
          else {
            if (l.s) return (tN = !0), new this(1 / 0);
            c = l;
          }
        return (tN = !0), c.sqrt();
      }
      function isDecimalInstance(e) {
        return e instanceof tX || (e && e.toStringTag === tz) || !1;
      }
      function ln(e) {
        return new this(e).ln();
      }
      function log(e, l) {
        return new this(e).log(l);
      }
      function log2(e) {
        return new this(e).log(2);
      }
      function decimal_log10(e) {
        return new this(e).log(10);
      }
      function max() {
        return maxOrMin(this, arguments, -1);
      }
      function min() {
        return maxOrMin(this, arguments, 1);
      }
      function mod(e, l) {
        return new this(e).mod(l);
      }
      function mul(e, l) {
        return new this(e).mul(l);
      }
      function pow(e, l) {
        return new this(e).pow(l);
      }
      function random(e) {
        var l,
          c,
          d,
          m,
          g = 0,
          y = new this(1),
          b = [];
        if (
          (void 0 === e ? (e = this.precision) : checkInt32(e, 1, 1e9),
          (d = Math.ceil(e / 7)),
          this.crypto)
        ) {
          if (crypto.getRandomValues)
            for (l = crypto.getRandomValues(new Uint32Array(d)); g < d; )
              (m = l[g]) >= 429e7
                ? (l[g] = crypto.getRandomValues(new Uint32Array(1))[0])
                : (b[g++] = m % 1e7);
          else if (crypto.randomBytes) {
            for (l = crypto.randomBytes((d *= 4)); g < d; )
              (m =
                l[g] +
                (l[g + 1] << 8) +
                (l[g + 2] << 16) +
                ((127 & l[g + 3]) << 24)) >= 214e7
                ? crypto.randomBytes(4).copy(l, g)
                : (b.push(m % 1e7), (g += 4));
            g = d / 4;
          } else throw Error(tU);
        } else for (; g < d; ) b[g++] = (1e7 * Math.random()) | 0;
        for (
          d = b[--g],
            e %= 7,
            d && e && ((m = tq(10, 7 - e)), (b[g] = ((d / m) | 0) * m));
          0 === b[g];
          g--
        )
          b.pop();
        if (g < 0) (c = 0), (b = [0]);
        else {
          for (c = -1; 0 === b[0]; c -= 7) b.shift();
          for (d = 1, m = b[0]; m >= 10; m /= 10) d++;
          d < 7 && (c -= 7 - d);
        }
        return (y.e = c), (y.d = b), y;
      }
      function decimal_round(e) {
        return finalise((e = new this(e)), e.e + 1, this.rounding);
      }
      function decimal_sign(e) {
        return (e = new this(e)).d ? (e.d[0] ? e.s : 0 * e.s) : e.s || NaN;
      }
      function sin(e) {
        return new this(e).sin();
      }
      function sinh(e) {
        return new this(e).sinh();
      }
      function sqrt(e) {
        return new this(e).sqrt();
      }
      function sub(e, l) {
        return new this(e).sub(l);
      }
      function sum() {
        var e = 0,
          l = arguments,
          c = new this(l[e]);
        for (tN = !1; c.s && ++e < l.length; ) c = c.plus(l[e]);
        return (tN = !0), finalise(c, this.precision, this.rounding);
      }
      function tan(e) {
        return new this(e).tan();
      }
      function tanh(e) {
        return new this(e).tanh();
      }
      function trunc(e) {
        return finalise((e = new this(e)), e.e + 1, 1);
      }
      (tZ[Symbol.for("nodejs.util.inspect.custom")] = tZ.toString),
        (tZ[Symbol.toStringTag] = "Decimal");
      var tX = (tZ.constructor = (function decimal_clone(e) {
        var l, c, d;
        function Decimal(e) {
          var l, c, d;
          if (!(this instanceof Decimal)) return new Decimal(e);
          if (((this.constructor = Decimal), isDecimalInstance(e))) {
            (this.s = e.s),
              tN
                ? !e.d || e.e > Decimal.maxE
                  ? ((this.e = NaN), (this.d = null))
                  : e.e < Decimal.minE
                  ? ((this.e = 0), (this.d = [0]))
                  : ((this.e = e.e), (this.d = e.d.slice()))
                : ((this.e = e.e), (this.d = e.d ? e.d.slice() : e.d));
            return;
          }
          if ("number" == (d = typeof e)) {
            if (0 === e) {
              (this.s = 1 / e < 0 ? -1 : 1), (this.e = 0), (this.d = [0]);
              return;
            }
            if (
              (e < 0 ? ((e = -e), (this.s = -1)) : (this.s = 1),
              e === ~~e && e < 1e7)
            ) {
              for (l = 0, c = e; c >= 10; c /= 10) l++;
              tN
                ? l > Decimal.maxE
                  ? ((this.e = NaN), (this.d = null))
                  : l < Decimal.minE
                  ? ((this.e = 0), (this.d = [0]))
                  : ((this.e = l), (this.d = [e]))
                : ((this.e = l), (this.d = [e]));
              return;
            }
            if (0 * e != 0) {
              e || (this.s = NaN), (this.e = NaN), (this.d = null);
              return;
            }
            return parseDecimal(this, e.toString());
          }
          if ("string" === d)
            return (
              45 === (c = e.charCodeAt(0))
                ? ((e = e.slice(1)), (this.s = -1))
                : (43 === c && (e = e.slice(1)), (this.s = 1)),
              tQ.test(e)
                ? parseDecimal(this, e)
                : (function (e, l) {
                    var c, d, m, g, y, b, C, P, I;
                    if (l.indexOf("_") > -1) {
                      if (((l = l.replace(/(\d)_(?=\d)/g, "$1")), tQ.test(l)))
                        return parseDecimal(e, l);
                    } else if ("Infinity" === l || "NaN" === l)
                      return +l || (e.s = NaN), (e.e = NaN), (e.d = null), e;
                    if (tH.test(l)) (c = 16), (l = l.toLowerCase());
                    else if (tV.test(l)) c = 2;
                    else if (tG.test(l)) c = 8;
                    else throw Error(tF + l);
                    for (
                      (g = l.search(/p/i)) > 0
                        ? ((C = +l.slice(g + 1)), (l = l.substring(2, g)))
                        : (l = l.slice(2)),
                        y = (g = l.indexOf(".")) >= 0,
                        d = e.constructor,
                        y &&
                          ((g = (b = (l = l.replace(".", "")).length) - g),
                          (m = intPow(d, new d(c), g, 2 * g))),
                        g = I = (P = convertBase(l, c, 1e7)).length - 1;
                      0 === P[g];
                      --g
                    )
                      P.pop();
                    return g < 0
                      ? new d(0 * e.s)
                      : ((e.e = getBase10Exponent(P, I)),
                        (e.d = P),
                        (tN = !1),
                        y && (e = tY(e, m, 4 * b)),
                        C &&
                          (e = e.times(
                            54 > Math.abs(C) ? tq(2, C) : tX.pow(2, C)
                          )),
                        (tN = !0),
                        e);
                  })(this, e)
            );
          if ("bigint" === d)
            return (
              e < 0 ? ((e = -e), (this.s = -1)) : (this.s = 1),
              parseDecimal(this, e.toString())
            );
          throw Error(tF + e);
        }
        if (
          ((Decimal.prototype = tZ),
          (Decimal.ROUND_UP = 0),
          (Decimal.ROUND_DOWN = 1),
          (Decimal.ROUND_CEIL = 2),
          (Decimal.ROUND_FLOOR = 3),
          (Decimal.ROUND_HALF_UP = 4),
          (Decimal.ROUND_HALF_DOWN = 5),
          (Decimal.ROUND_HALF_EVEN = 6),
          (Decimal.ROUND_HALF_CEIL = 7),
          (Decimal.ROUND_HALF_FLOOR = 8),
          (Decimal.EUCLID = 9),
          (Decimal.config = Decimal.set = config),
          (Decimal.clone = decimal_clone),
          (Decimal.isDecimal = isDecimalInstance),
          (Decimal.abs = abs),
          (Decimal.acos = acos),
          (Decimal.acosh = acosh),
          (Decimal.add = add),
          (Decimal.asin = asin),
          (Decimal.asinh = asinh),
          (Decimal.atan = atan),
          (Decimal.atanh = atanh),
          (Decimal.atan2 = atan2),
          (Decimal.cbrt = cbrt),
          (Decimal.ceil = ceil),
          (Decimal.clamp = clamp),
          (Decimal.cos = cos),
          (Decimal.cosh = cosh),
          (Decimal.div = div),
          (Decimal.exp = exp),
          (Decimal.floor = floor),
          (Decimal.hypot = hypot),
          (Decimal.ln = ln),
          (Decimal.log = log),
          (Decimal.log10 = decimal_log10),
          (Decimal.log2 = log2),
          (Decimal.max = max),
          (Decimal.min = min),
          (Decimal.mod = mod),
          (Decimal.mul = mul),
          (Decimal.pow = pow),
          (Decimal.random = random),
          (Decimal.round = decimal_round),
          (Decimal.sign = decimal_sign),
          (Decimal.sin = sin),
          (Decimal.sinh = sinh),
          (Decimal.sqrt = sqrt),
          (Decimal.sub = sub),
          (Decimal.sum = sum),
          (Decimal.tan = tan),
          (Decimal.tanh = tanh),
          (Decimal.trunc = trunc),
          void 0 === e && (e = {}),
          e && !0 !== e.defaults)
        )
          for (
            l = 0,
              d = [
                "precision",
                "rounding",
                "toExpNeg",
                "toExpPos",
                "maxE",
                "minE",
                "modulo",
                "crypto",
              ];
            l < d.length;

          )
            e.hasOwnProperty((c = d[l++])) || (e[c] = this[c]);
        return Decimal.config(e), Decimal;
      })(tD));
      (tO = new tX(tO)), (tB = new tX(tB));
      var DragScale_DragScale = (e) => {
          var l, c;
          let {
              type: d,
              balance: m,
              amount: g,
              tmpBalance: y,
              selectedAsset: b,
              setSelectedAmount: C,
              icon: P,
            } = e,
            [I, N] = (0, ts.useState)(!1),
            [F, V] = (0, ts.useState)(!1),
            [G, Q] = (0, ts.useState)(),
            $ = (0, ts.useRef)(null),
            Z = (0, ts.useRef)(null),
            Y = (0, ts.useRef)(null),
            et = (0, ts.useRef)(null);
          (0, ts.useRef)(null);
          let en =
              null === (l = et.current) || void 0 === l
                ? void 0
                : l.getBoundingClientRect().left,
            er =
              null === (c = et.current) || void 0 === c
                ? void 0
                : c.getBoundingClientRect().right,
            ei = (0, ts.useCallback)((e) => {
              Q(e.clientX);
            }, []),
            eo = (0, ts.useCallback)((e) => {
              Q(e.touches[0].clientX);
            }, []);
          return (
            (0, ts.useEffect)(() => {
              let mouseUpHandler = () => N(!1),
                pointerUpHandler = () => V(!1);
              return (
                window.addEventListener("mouseup", mouseUpHandler),
                window.addEventListener("pointerup", pointerUpHandler),
                () => {
                  window.removeEventListener("mouseup", mouseUpHandler),
                    window.removeEventListener("pointerup", pointerUpHandler);
                }
              );
            }, []),
            (0, ts.useEffect)(
              () => (
                I &&
                  (window.addEventListener("mousemove", ei),
                  (document.body.style.cursor = "pointer")),
                F && window.addEventListener("touchmove", eo),
                () => {
                  window.removeEventListener("mousemove", ei),
                    window.removeEventListener("touchmove", eo),
                    (document.body.style.cursor = "unset");
                }
              ),
              [I, F, ei, eo]
            ),
            (0, ts.useEffect)(() => {
              if (
                Y.current &&
                $.current &&
                Z.current &&
                G &&
                en &&
                er &&
                (G > er &&
                  (C(String(m)),
                  (Y.current.style.left = "99%"),
                  (Z.current.style.width = "99%")),
                G < en &&
                  (C(""),
                  (Y.current.style.left = "0%"),
                  (Z.current.style.width = "0%")),
                G > en && G < er)
              ) {
                let e = new tX(m.toString()),
                  l = new tX((G - en) / $.current.clientWidth),
                  c = e.mul(l);
                C(c.toString()),
                  (Z.current.style.width = "".concat(
                    ((G - en) / $.current.clientWidth) * 100,
                    "%"
                  )),
                  (Y.current.style.left = "".concat(
                    ((G - en) / $.current.clientWidth) * 100,
                    "%"
                  ));
              }
            }, [G, m, en, er]),
            (0, ts.useEffect)(() => {
              Y.current &&
                $.current &&
                Z.current &&
                en &&
                er &&
                Number(g) <= m &&
                ((Z.current.style.width = "".concat(
                  (Number(g) / m) * 100,
                  "%"
                )),
                (Y.current.style.left = "".concat((Number(g) / m) * 100, "%")));
            }, [g, m, en, er]),
            (0, ts.useEffect)(() => {
              C("");
            }, [b]),
            (0, B.jsx)("section", {
              className: tP().DragScale_container,
              children: (0, B.jsxs)("div", {
                className: tP().DragScale_data_box,
                children: [
                  (0, B.jsxs)("div", {
                    className: tP().DragScale_data_amount_box,
                    children: [
                      (0, B.jsx)("section", {
                        className: "w-fit",
                        children: (0, B.jsx)(tT.Z, {
                          onClick: () => {
                            C(m.toString()),
                              Z.current &&
                                Y.current &&
                                ((Z.current.style.width = "100%"),
                                (Y.current.style.left = "100%"));
                          },
                          text: "MAX",
                          className:
                            "text-white font-EuclidCircularB font-semibold",
                        }),
                      }),
                      (0, B.jsx)("div", { className: tP().divider }),
                      (0, B.jsx)("input", {
                        placeholder: "Amount",
                        type: "number",
                        value: g,
                        onChange: (e) => {
                          "deposit" === d
                            ? m < 10 && Number(e.target.value) > m
                              ? C(String(m))
                              : C(e.target.value)
                            : Number(e.target.value) > m
                            ? C(String(m))
                            : C(e.target.value);
                        },
                      }),
                      (0, B.jsxs)("div", {
                        children: [
                          "Balance:",
                          (0, B.jsx)("span", {
                            children:
                              y < 1e3
                                ? (0, tI.dN)(y)
                                : y < 1e6
                                ? "".concat((0, tI.dN)(y / 1e3), "K")
                                : "".concat((0, tI.dN)(y / 1e6), "M"),
                          }),
                          b
                            ? (0, B.jsx)(tf(), {
                                width: 20,
                                height: 20,
                                src: P,
                                alt: b,
                              })
                            : (0, B.jsx)(B.Fragment, {}),
                        ],
                      }),
                    ],
                  }),
                  (0, B.jsxs)("div", {
                    className: tP().DragScale_select_box,
                    children: [
                      (0, B.jsxs)("div", {
                        className: tP().DragScale_select_line,
                        onClick: (e) => {
                          let l = e.clientX;
                          Q(l);
                        },
                        ref: $,
                        children: [
                          (0, B.jsx)("div", {
                            className: tP().DragScale_select_progress,
                            ref: Z,
                          }),
                          (0, B.jsx)(tf(), {
                            src: tM,
                            alt: "trigger",
                            ref: Y,
                            className: tP().DragScale_select_trigger,
                            onMouseDown: () => {
                              N(!0);
                            },
                            onPointerDown: () => V(!0),
                          }),
                        ],
                      }),
                      (0, B.jsx)("div", {
                        ref: et,
                        className: tP().DragScale_select_precents_box,
                        children: [
                          { percent: 0 },
                          { percent: 25 },
                          { percent: 50 },
                          { percent: 75 },
                          { percent: 100 },
                        ].map((e, l) =>
                          (0, B.jsxs)(
                            "p",
                            {
                              onClick: () => {
                                let l = new tX(m.toString()),
                                  c = new tX(e.percent).div(100),
                                  d = l.mul(c);
                                100 === e.percent
                                  ? C(m.toString())
                                  : C(d.toString()),
                                  Z.current &&
                                    Y.current &&
                                    ((Z.current.style.width = "".concat(
                                      e.percent,
                                      "%"
                                    )),
                                    (Y.current.style.left = "".concat(
                                      e.percent,
                                      "%"
                                    )));
                              },
                              style: {
                                top: "50%",
                                left: "".concat(e.percent, "%"),
                                transform: "translateY(-50%)",
                                transformOrigin: "center",
                              },
                              children: [e.percent, "%"],
                            },
                            l
                          )
                        ),
                      }),
                    ],
                  }),
                ],
              }),
            })
          );
        },
        tJ = JSON.parse(
          '[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]'
        ),
        t0 = c(66195),
        t1 = c(44507);
      function readContract_readContract(e, l) {
        let { chainId: c, ...d } = l,
          m = e.getClient({ chainId: c }),
          g = (0, t1.s)(m, t0.L, "readContract");
        return g(d);
      }
      var t2 = c(42954);
      let getBalances = async (e, l, c) => {
        try {
          let d = Number(
              await readContract_readContract(t2.g, {
                address: e,
                abi: tJ,
                chainId: l,
                functionName: "balanceOf",
                args: [c],
              })
            ),
            m = Number(
              await readContract_readContract(t2.g, {
                address: e,
                abi: tJ,
                chainId: l,
                functionName: "decimals",
                args: [],
              })
            );
          return d / 10 ** m;
        } catch (e) {
          return 0;
        }
      };
      var t6 = c(41873),
        t3 = c(51021),
        t5 = {
          src: "/_next/static/media/loading.22baa959.svg",
          height: 17,
          width: 17,
          blurWidth: 0,
          blurHeight: 0,
        },
        t4 = c(19602),
        t7 = c(88414),
        t8 = c(85188),
        t9 = c(25074),
        ne = c(23874),
        nt = c.n(ne),
        nn = c(43829),
        nr = c(38603),
        ni = c(93622),
        no = c(66730),
        na = c(19202),
        ns = c(64460);
      let nl = ["Chain", "Protocol", "Asset"];
      function DepositModal(e) {
        var l, c, d, m, g;
        let { data: y, display: b } = e,
          C = y.baseChain.chainId,
          P = (0, tc.T)(),
          I = (0, ts.useRef)(null),
          N = (0, tc.C)((e) => e.ModalsReducer.depositModal),
          [F, V] = (0, ts.useState)(y.chains.find((e) => e.chainId === C)),
          [G, Q] = (0, ts.useState)(y.baseToken.symbol.toUpperCase()),
          [$, Z] = (0, ts.useState)(""),
          [Y, et] = (0, ts.useState)(0),
          [en, er] = (0, ts.useState)("Loading"),
          [ei, eo] = (0, ts.useState)(0),
          [ea, es] = (0, ts.useState)(!1),
          { address: el } = (0, tu.Z)(),
          ec = (0, ts.useMemo)(() => {
            let e = y.accountingManagerAddress,
              l = y.baseToken.address;
            return { depositContractAddress: e, depositAddress: l };
          }, [F]),
          eu = (0, ts.useMemo)(
            () => (null == F ? void 0 : F.chainId) !== C,
            [F, C]
          );
        (0, ts.useEffect)(() => {
          (async () => {
            if (F) {
              let e = {
                  address: ec.depositAddress,
                  abi: t8.Wo,
                  functionName: "allowance",
                  args: [el, ec.depositContractAddress],
                  chainId: C,
                },
                l = await readContract_readContract(t2.g, e);
              0 === Number(l)
                ? er("Approve")
                : (l ? eo(Number(l)) : eo(0), er("Deposit"));
            }
          })();
        }, [G, ea, F]),
          (0, ts.useEffect)(() => {
            F
              ? getBalances(y.baseToken.address, F.chainId, el).then((e) => {
                  et(e);
                })
              : er("Deposit");
          }, [G, F]),
          (0, ts.useEffect)(
            () => (
              (document.body.style.overflowY = "hidden"),
              () => {
                document.body.style.overflowY = "scroll";
              }
            ),
            []
          );
        let { refetch: ed } = (0, nn.C2)({ address: el, vaultId: y.vaultId }),
          { data: ep, isLoading: eh } = (0, nn.bw)(),
          deposit = async () => {
            let e = new tX($ || "0"),
              l = new tX(Y.toString());
            if (e.gt(l)) {
              (0, t6.x)("Amount exceeds available balance", "error");
              return;
            }
            let c = new tX(10).pow(y.baseToken.decimals),
              d = e.mul(c),
              m = d.floor().toNumber();
            if (F) {
              if ("Loading" !== en) {
                if (ei < m) {
                  er("Loading");
                  let e = {
                    address: ec.depositAddress,
                    abi: t8.Wo,
                    functionName: "approve",
                    args: [ec.depositContractAddress, BigInt(m)],
                    chainId: C,
                  };
                  try {
                    let l = await (0, t4.n)(t2.g, e),
                      c = await (0, t7.e)(t2.g, { hash: l });
                    "success" === c.status
                      ? (es((e) => !e),
                        (0, t6.x)("Approval Successful", "success"),
                        er("Deposit"))
                      : (0 === ei ? er("Approve") : er("Deposit"),
                        (0, t6.x)("Approval Failed", "error"));
                  } catch (e) {
                    0 === ei ? er("Approve") : er("Deposit"), console.error(e);
                  }
                } else if (0 !== m) {
                  let e = {
                    address: ec.depositContractAddress,
                    abi: t3,
                    functionName: "deposit",
                    args: [el, BigInt(m), N.referrer],
                    chainId: C,
                  };
                  er("Loading");
                  try {
                    let l = await (0, t4.n)(t2.g, e),
                      { transactionHash: c } = await (0, t7.e)(t2.g, {
                        hash: l,
                      });
                    P((0, tp.KW)("TX_EMITTED"));
                    let d = 0,
                      m = !1,
                      g = setInterval(() => {
                        d > 20 &&
                          (clearInterval(g),
                          P((0, tp.Sy)()),
                          (0, t6.x)(
                            "Deposit validation failed, try refreshing the page",
                            "warning"
                          ),
                          P(t9.Bl.util.invalidateTags(["Transaction"])));
                        let e = !sessionStorage.getItem("referralModalOpen");
                        ed()
                          .unwrap()
                          .then((l) => {
                            l &&
                              l.find((e) => e.txnHash1 === c) &&
                              (clearInterval(g),
                              P((0, tp.Sy)()),
                              e &&
                                (sessionStorage.setItem(
                                  "referralModalOpen",
                                  "true"
                                ),
                                P((0, tp.zW)())),
                              m ||
                                ((0, t6.x)("Deposit Successful", "success"),
                                (m = !0)),
                              P(t9.Bl.util.invalidateTags(["Transaction"])));
                          }),
                          d++;
                      }, 1500);
                  } catch (e) {
                    console.error(e),
                      er("Deposit"),
                      (0, t6.x)("Something went wrong", "error");
                  }
                }
              }
            } else (0, t6.x)("Please select a chain", "warning");
          },
          { convertToUSD: ef } = (0, ni.B)(),
          em = (0, ts.useMemo)(() => {
            let e = Number($),
              l = ef(e, tI.ZP.getSymbolFromVaultType(y.type));
            return !!l && tI.ZP.formatWithExponential(l * na.Sq);
          }, [ef, $, y.type]),
          { data: eg, isLoading: ey } = (0, nn.Yv)({ vaultId: y.vaultId }),
          eb = (0, ts.useMemo)(() => {
            let e =
              null == eg
                ? void 0
                : eg.readablePositions.toSorted(
                    (e, l) =>
                      (Number(l.tvlInUSD) || 0) - (Number(e.tvlInUSD) || 0)
                  )[0];
            return (
              e || {
                chainId: y.baseChain.chainId,
                protocol: y.protocols[0],
                tokens: y.baseToken.address,
              }
            );
          }, [eg, y.baseChain, y.protocols, y.baseToken]),
          ev = (0, ts.useMemo)(
            () =>
              eb
                ? [
                    {
                      address: null == eb ? void 0 : eb.tokens,
                      chainId: null == eb ? void 0 : eb.chainId,
                    },
                  ]
                : [],
            [eb]
          ),
          { symbolsMap: ew } = (0, no.B)(ev),
          ex = (0, ts.useMemo)(
            () => y.tokens.map((e) => e.toUpperCase()),
            [y.tokens]
          ),
          e_ = (0, ts.useMemo)(() => {
            var e;
            let l =
              ew[
                null !== (e = null == eb ? void 0 : eb.tokens) && void 0 !== e
                  ? e
                  : ""
              ];
            return l ? tI.ZP.findClosestIndex(l.toLowerCase(), ex) : 0;
          }, [ew, null == eb ? void 0 : eb.tokens, ex]);
        return (0, B.jsx)("div", {
          onClick: () => {
            "Loading" !== en && P((0, tp.Sy)());
          },
          className: ""
            .concat(
              tw().DepositModal_wrapper,
              " animate__animated animate__fadeIn "
            )
            .concat(!N.open && b && "animate__fadeOut"),
          children: (0, B.jsxs)("section", {
            onClick: (e) => {
              e.stopPropagation();
            },
            ref: I,
            className: tw().DepositModal_container,
            children: [
              (0, B.jsx)("div", { className: tw().DepositModal_leftGlow }),
              (0, B.jsx)("div", { className: tw().DepositModal_rightGlow }),
              (0, B.jsx)(tf(), {
                onClick: () => {
                  "Loading" !== en && P((0, tp.Sy)());
                },
                src: ty,
                alt: "close",
                className: tw().DepositModal_close,
              }),
              (0, B.jsx)("div", {
                className: tw().DepositModal_head,
                children: (0, B.jsx)("div", {
                  className: tw().DepositModal_head_left,
                  children: (0, B.jsx)("h1", { children: "Deposit" }),
                }),
              }),
              (0, B.jsx)("div", { className: tw().breakLine }),
              (0, B.jsx)("div", {
                className: tw().DepositModal_description_box,
                children: (0, B.jsxs)("p", {
                  children: [
                    (0, B.jsx)("span", {
                      className: "gradient-text",
                      children: "NOYA",
                    }),
                    " is currently farming:",
                  ],
                }),
              }),
              (0, B.jsx)("div", {
                className: tw().DepositModal_params_box,
                children: nl.map((e, l) => {
                  var c, d, m, g, b;
                  return (0, B.jsxs)(B.Fragment, {
                    children: [
                      (0, B.jsxs)(
                        "div",
                        {
                          className: tw().DepositModal_param,
                          children: [
                            (0, B.jsx)("h3", { children: e }),
                            (0, B.jsxs)("div", {
                              className: tw().DepositModal_param_box,
                              children: [
                                (0, B.jsx)(tf(), {
                                  width: 20,
                                  height: 20,
                                  alt: "",
                                  className: "rounded-full",
                                  src:
                                    0 === l
                                      ? (0, tI.tY)(
                                          null !==
                                            (g =
                                              null == eb
                                                ? void 0
                                                : null === (c = eb.chainId) ||
                                                  void 0 === c
                                                ? void 0
                                                : c.toString()) && void 0 !== g
                                            ? g
                                            : "",
                                          "chains"
                                        )
                                      : 1 === l
                                      ? (0, tI.tY)(
                                          null !==
                                            (b =
                                              null == eb
                                                ? void 0
                                                : null === (d = eb.protocol) ||
                                                  void 0 === d
                                                ? void 0
                                                : d.toLowerCase()) &&
                                            void 0 !== b
                                            ? b
                                            : "",
                                          "protocols"
                                        )
                                      : -1 !== e_
                                      ? (0, tI.tY)(
                                          y.tokens[e_].toLowerCase(),
                                          "tokens"
                                        )
                                      : "",
                                }),
                                (0, B.jsx)("p", {
                                  className:
                                    "overflow-hidden text-ellipsis whitespace-nowrap max-w-24 ".concat(
                                      0 === l
                                        ? "capitalize"
                                        : 1 === l
                                        ? "capitalize"
                                        : "uppercase"
                                    ),
                                  children:
                                    0 === l
                                      ? null ===
                                          (m = y.chains.find(
                                            (e) =>
                                              e.chainId.toString() ===
                                              (null == eb
                                                ? void 0
                                                : eb.chainId.toString())
                                          )) || void 0 === m
                                        ? void 0
                                        : m.chainName
                                      : 1 === l
                                      ? null == eb
                                        ? void 0
                                        : eb.protocol
                                      : y.tokens[e_].toUpperCase(),
                                }),
                              ],
                            }),
                          ],
                        },
                        l
                      ),
                      l !== nl.length - 1 &&
                        (0, B.jsx)("div", {
                          className: tw().DepositModal_param_dashed,
                        }),
                    ],
                  });
                }),
              }),
              (0, B.jsxs)("div", {
                className: tw().DepositModal_strategy_box,
                children: [
                  (0, B.jsxs)("div", {
                    className: tw().DepositModal_strategy_left,
                    children: [
                      (0, B.jsx)("h1", { children: "Current Strategy" }),
                      (0, B.jsxs)("div", {
                        className: tw().DepositModal_strategy_param_box,
                        children: [
                          (0, B.jsx)("div", {
                            style: {
                              backgroundImage: "url(".concat(
                                (0, tI.tY)(
                                  null !==
                                    (d =
                                      null == eb
                                        ? void 0
                                        : null === (l = eb.protocol) ||
                                          void 0 === l
                                        ? void 0
                                        : l.toLowerCase()) && void 0 !== d
                                    ? d
                                    : "",
                                  "protocols"
                                ),
                                ")"
                              ),
                            },
                          }),
                          (0, B.jsx)("p", {
                            className: "capitalize",
                            children: eb
                              ? ""
                                  .concat(
                                    null == eb ? void 0 : eb.protocol,
                                    " "
                                  )
                                  .concat(
                                    ew[
                                      null !==
                                        (m = null == eb ? void 0 : eb.tokens) &&
                                      void 0 !== m
                                        ? m
                                        : ""
                                    ]
                                  )
                              : (0, B.jsx)(nr.Z, { className: "w-5 h-5" }),
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, B.jsxs)("div", {
                    className: tw().DepositModal_strategy_right,
                    children: [
                      (0, B.jsx)("h1", { children: "Rewards APY" }),
                      (0, B.jsxs)("p", {
                        children: [
                          eh
                            ? (0, B.jsx)(nr.Z, { className: "w-5 h-5 mx-auto" })
                            : ep
                            ? "".concat(
                                (
                                  (null !==
                                    (g =
                                      null === (c = ep[y.vaultId]) ||
                                      void 0 === c
                                        ? void 0
                                        : c.movingAverageAPY) && void 0 !== g
                                    ? g
                                    : 0) * 100
                                ).toFixed(2),
                                "%"
                              )
                            : "APY",
                          " ",
                          !1 !== em &&
                            (0, B.jsxs)("span", {
                              children: ["+ ", em, " Points / Day"],
                            }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
              (0, B.jsx)("div", { className: tw().breakLine }),
              (0, B.jsxs)("div", {
                className: tw().DepositModal_select_container_box,
                children: [
                  (0, B.jsx)(SelectItem, {
                    disabled: !0,
                    title: "Select Chain",
                    type: "chain",
                    items: y.chains.map((e) => ({
                      img: (0, tI.tY)(e.chainId.toString(), "chains"),
                      name: e.chainName,
                      chainId: e.chainId,
                    })),
                    selectedState: F
                      ? {
                          img: (0, tI.tY)(F.chainId.toString(), "chains"),
                          name: F.chainName,
                        }
                      : void 0,
                    setSelectedState: (e) => {
                      var l;
                      e.name !==
                      (null === (l = y.chains.find((e) => e.chainId === C)) ||
                      void 0 === l
                        ? void 0
                        : l.chainName)
                        ? tI.ZP.showToast(
                            "Deposits are currently only available on the base chain.",
                            "error"
                          )
                        : V(y.chains.find((l) => l.chainName === e.name));
                    },
                  }),
                  (0, B.jsx)(SelectItem, {
                    disabled: !0,
                    title: "Select Asset and Amount",
                    type: "asset",
                    items: y.tokens.map((e) => ({
                      img: (0, tI.tY)(e.toLowerCase(), "tokens"),
                      name: e.toUpperCase(),
                    })),
                    selectedState: {
                      img: (0, tI.tY)(
                        y.baseToken.symbol.toLowerCase(),
                        "tokens"
                      ),
                      name: G.toUpperCase(),
                    },
                    setSelectedState: (e) => {
                      e.name.toUpperCase() !== y.baseToken.symbol.toUpperCase()
                        ? tI.ZP.showToast(
                            "Deposits are currently only available in the base token.",
                            "error"
                          )
                        : Q(e.name);
                    },
                  }),
                  (0, B.jsx)(DragScale_DragScale, {
                    type: "deposit",
                    tmpBalance: Y,
                    balance: Y,
                    amount: $,
                    selectedAsset: G,
                    setSelectedAmount: Z,
                    icon: (0, tI.tY)(
                      y.baseToken.symbol.toLowerCase(),
                      "tokens"
                    ),
                  }),
                ],
              }),
              (0, B.jsxs)("div", {
                className: "".concat(
                  tw().DepositModal_select_container_box,
                  " !mt-8 [&>*]:font-EuclidCircularB [&>*]:font-semibold [&>*]:text-[10px] [&>*]:text-justify [&>*]:[text-align-last:center]"
                ),
                children: [
                  (0, B.jsx)("p", {
                    className: "mb-2 text-[#ffffff6f]",
                    children:
                      "ⓘDisclaimer. All Noya vaults involve smart contract risk and varying levels of economic risk. Please refer to the links below for a more detailed overview of the risks involved:",
                  }),
                  (0, B.jsxs)("div", {
                    className:
                      "relative flex items-center [&>*]:text-[#ffffff96] hover:[&>*]:text-[#ffffffc3] [&>*]:transition-colors gap-4 flex-wrap",
                    children: [
                      (0, B.jsx)(nt(), {
                        href: "https://docs.noya.ai/audits-and-risk/risk-and-warning",
                        target: "_blank",
                        children: "\uD83D\uDD17 Risk and Warning",
                      }),
                      (0, B.jsx)(nt(), {
                        href: "https://docs.noya.ai/audits-and-risk/disclaimer-and-terms",
                        target: "_blank",
                        children: "\uD83D\uDD17 Disclaimer and Terms",
                      }),
                    ],
                  }),
                ],
              }),
              (0, B.jsxs)("div", {
                className: tw().DepositModal_bottom_box,
                children: [
                  eu
                    ? (0, B.jsxs)("p", {
                        children: [
                          "We recommend to deposit the asset in the chain that",
                          (0, B.jsx)("br", {}),
                          "NOYA is currently farming to save fees.",
                        ],
                      })
                    : (0, B.jsx)(B.Fragment, {}),
                  (0, B.jsx)("button", {
                    className: tw().color_1,
                    onClick: () => {
                      deposit();
                    },
                    children:
                      "Loading" === en
                        ? (0, B.jsxs)(B.Fragment, {
                            children: [
                              "Loading",
                              (0, B.jsx)(tf(), {
                                width: 23,
                                height: 23,
                                className: tw().img,
                                src: t5,
                                alt: "loading",
                              }),
                            ],
                          })
                        : (0, B.jsx)(B.Fragment, { children: en }),
                  }),
                ],
              }),
            ],
          }),
        });
      }
      let SelectItem = (e) => {
        let {
            title: l,
            type: c,
            items: d,
            selectedState: m,
            setSelectedState: g,
            disabled: y,
          } = e,
          [b, C] = (0, ts.useState)(!1),
          P = (0, ts.useRef)(null);
        return (0, B.jsxs)("div", {
          className: "select-none "
            .concat(!y && "cursor-pointer", " ")
            .concat(tw().DepositModal_select_box),
          children: [
            (0, B.jsx)("h1", { children: l }),
            (0, B.jsxs)("div", {
              ref: P,
              className: tw().DepositModal_select,
              onClick: () => {
                y || C(!b);
              },
              children: [
                (0, B.jsx)("div", {
                  className: tw().DepositModal_select_Text_Image,
                  children: m
                    ? (0, B.jsxs)(B.Fragment, {
                        children: [
                          (0, B.jsx)("div", {
                            className: tw().DepositModal_select_img,
                            style: {
                              backgroundImage: "url(".concat(m.img, ")"),
                            },
                          }),
                          (0, B.jsx)("p", { children: m.name }),
                        ],
                      })
                    : (0, B.jsx)("p", {
                        style: { left: "8%" },
                        children: "Select an option",
                      }),
                }),
                (0, B.jsx)(tf(), {
                  style: b ? { transform: "scale(-1)" } : {},
                  src: tx.Z,
                  alt: "chainArrow",
                  className: (0, ns.cn)(tw().DepositModal_select_icon, {
                    "opacity-0": y || d.length <= 1,
                  }),
                }),
                b &&
                  (0, B.jsx)(DropDown, {
                    type: c,
                    items: d,
                    selectedState: m,
                    setSelectedState: g,
                    setDropDown: C,
                  }),
              ],
            }),
          ],
        });
      };
      var nc = c(51999),
        nu = c.n(nc),
        nd = c(55765),
        np = c(17296);
      let nh = ["Chain", "Protocol", "Asset"];
      function WithdrawModal(e) {
        var l;
        let { data: c, display: d } = e,
          m = c.baseChain.chainId,
          g = (0, V.v9)((e) => e),
          y = (0, tc.T)(),
          b = (0, ts.useRef)(null),
          [C, P] = (0, ts.useState)(c.chains.find((e) => e.chainId === m)),
          [I, N] = (0, ts.useState)({
            img: (0, tI.tY)(c.baseToken.symbol.toLowerCase(), "tokens"),
            name: c.baseToken.symbol.toUpperCase(),
          }),
          [F, G] = (0, ts.useState)(""),
          [Q, $] = (0, ts.useState)("Withdraw"),
          Z = (0, ts.useMemo)(
            () => (null == C ? void 0 : C.chainId) !== m,
            [C, m]
          ),
          { address: Y } = (0, tu.Z)(),
          { convertToUSD: et } = (0, ni.B)(),
          getDailyPointsLoss = () => {
            let e = Number(F),
              l = et(e, tI.ZP.getSymbolFromVaultType(c.type));
            return tI.ZP.roundToTwo(l * na.Sq);
          },
          { refetch: en, data: er } = (0, nn.C2)({
            address: null != Y ? Y : "0x0",
            vaultId: c.vaultId,
          }),
          ei = (0, ts.useMemo)(() => {
            var e;
            return null !==
              (e =
                null == er
                  ? void 0
                  : er
                      .filter(
                        (e) =>
                          e.txnType === np.iI.withdraw && e.state !== np.og.done
                      )
                      .map(
                        (e) =>
                          Number(e.ShareAmount) / 10 ** c.baseToken.decimals
                      )
                      .reduce((e, l) => e + l, 0)) && void 0 !== e
              ? e
              : 0;
          }, [er, c.baseToken.decimals]),
          { data: eo, isLoading: ea } = (0, nn.Yv)({ vaultId: c.vaultId }),
          es = (0, ts.useMemo)(() => {
            let e =
              null == eo
                ? void 0
                : eo.readablePositions.toSorted(
                    (e, l) =>
                      (Number(l.tvlInUSD) || 0) - (Number(e.tvlInUSD) || 0)
                  )[0];
            return (
              e || {
                chainId: c.baseChain.chainId,
                protocol: c.protocols[0],
                tokens: c.baseToken.address,
              }
            );
          }, [eo, c.baseChain, c.protocols, c.baseToken]),
          el = (0, ts.useMemo)(
            () =>
              es
                ? [
                    {
                      address: null == es ? void 0 : es.tokens,
                      chainId: null == es ? void 0 : es.chainId,
                    },
                  ]
                : [],
            [es]
          ),
          { symbolsMap: ec } = (0, no.B)(el),
          eu = (0, ts.useMemo)(
            () => c.tokens.map((e) => e.toLowerCase()),
            [c.tokens]
          ),
          ed = (0, ts.useMemo)(() => {
            var e;
            let l =
              ec[
                null !== (e = null == es ? void 0 : es.tokens) && void 0 !== e
                  ? e
                  : ""
              ];
            return l ? tI.ZP.findClosestIndex(l.toLowerCase(), eu) : 0;
          }, [ec, null == es ? void 0 : es.tokens, eu]),
          withdraw = async () => {
            if (C) {
              $("Loading");
              let e = new tX(F || "0"),
                l = new tX(ef.baseTokenAmount.toString()),
                d = new tX(ef.balance.toString()),
                m = ef.baseTokenAmount - ei;
              if (e.gt(new tX(m.toString()))) {
                (0, t6.x)("Amount exceeds available balance", "error"),
                  $("Withdraw");
                return;
              }
              let g = e.div(l).mul(d);
              g.gt(d) && (g = d);
              let b = new tX(10).pow(c.baseToken.decimals),
                C = g.mul(b).floor().toNumber();
              try {
                let e = c.accountingManagerAddress,
                  l = {
                    address: e,
                    abi: t3,
                    functionName: "withdraw",
                    args: [C, Y],
                    chainId: c.baseChain.chainId,
                  },
                  d = await (0, t4.n)(t2.g, l),
                  { transactionHash: m } = await (0, t7.e)(t2.g, { hash: d });
                y((0, tp.KW)("TX_EMITTED"));
                let g = 0,
                  b = setInterval(() => {
                    g > 20 &&
                      (clearInterval(b),
                      y((0, tp.CC)()),
                      (0, t6.x)(
                        "Withdrawal validation failed, try refreshing the page",
                        "warning"
                      ),
                      y(t9.Bl.util.invalidateTags(["Transaction"]))),
                      en()
                        .unwrap()
                        .then((e) => {
                          e &&
                            e.find((e) => e.txnHash1 === m) &&
                            (clearInterval(b),
                            y((0, tp.CC)()),
                            (0, t6.x)("Withdrawal Successful", "success"),
                            y(t9.Bl.util.invalidateTags(["Transaction"])));
                        }),
                      g++;
                  }, 1500);
              } catch (e) {
                console.error(e),
                  $("Withdraw"),
                  (0, t6.x)("Something went wrong", "error");
              }
            } else (0, t6.x)("Please select a chain", "warning");
          },
          { data: ep, isLoading: eh } = (0, nd.Z)({ vaults: [c], account: Y }),
          ef = (0, ts.useMemo)(() => {
            var e, l, d, m, g, y, b, C, P, I, B, N, F;
            return ep &&
              (null === (l = ep[c.vaultId]) || void 0 === l
                ? void 0
                : null === (e = l.balanceOf) || void 0 === e
                ? void 0
                : e.status) === "success"
              ? {
                  balance: ep[c.vaultId].balanceOf.result,
                  baseTokenAmount:
                    ((null !==
                      (B =
                        null === (m = ep[c.vaultId]) || void 0 === m
                          ? void 0
                          : null === (d = m.totalAssets) || void 0 === d
                          ? void 0
                          : d.result) && void 0 !== B
                      ? B
                      : 0) *
                      (null !==
                        (N =
                          null === (y = ep[c.vaultId]) || void 0 === y
                            ? void 0
                            : null === (g = y.balanceOf) || void 0 === g
                            ? void 0
                            : g.result) && void 0 !== N
                        ? N
                        : 0)) /
                    ((null === (C = ep[c.vaultId]) || void 0 === C
                      ? void 0
                      : null === (b = C.totalSupply) || void 0 === b
                      ? void 0
                      : b.result) === 0
                      ? 1
                      : null !==
                          (F =
                            null === (I = ep[c.vaultId]) || void 0 === I
                              ? void 0
                              : null === (P = I.totalSupply) || void 0 === P
                              ? void 0
                              : P.result) && void 0 !== F
                      ? F
                      : 0),
                }
              : { balance: 0, baseTokenAmount: 0 };
          }, [ep, c.vaultId]);
        return (
          (0, ts.useEffect)(
            () => (
              (document.body.style.overflowY = "hidden"),
              () => {
                document.body.style.overflowY = "scroll";
              }
            ),
            []
          ),
          (0, B.jsx)("div", {
            onClick: () => {
              eh || y((0, tp.CC)());
            },
            className: ""
              .concat(
                nu().WithdrawModal_wrapper,
                " animate__animated animate__fadeIn "
              )
              .concat(
                !g.ModalsReducer.withdrawModal.open && d && "animate__fadeOut"
              ),
            children: (0, B.jsxs)("section", {
              onClick: (e) => e.stopPropagation(),
              ref: b,
              className: nu().WithdrawModal_container,
              children: [
                (0, B.jsx)("div", { className: nu().WithdrawModal_leftGlow }),
                (0, B.jsx)("div", { className: nu().WithdrawModal_rightGlow }),
                (0, B.jsx)(tf(), {
                  onClick: () => {
                    eh || y((0, tp.CC)());
                  },
                  src: ty,
                  alt: "close",
                  className: nu().WithdrawModal_close,
                }),
                (0, B.jsx)("div", {
                  className: nu().WithdrawModal_head,
                  children: (0, B.jsx)("div", {
                    className: nu().WithdrawModal_head_left,
                    children: (0, B.jsx)("h1", { children: "Withdraw" }),
                  }),
                }),
                (0, B.jsx)("div", { className: nu().breakLine }),
                (0, B.jsx)("div", {
                  className: nu().WithdrawModal_description_box,
                  children: (0, B.jsxs)("p", {
                    children: [
                      (0, B.jsx)("span", {
                        className: "gradient-text",
                        children: "NOYA",
                      }),
                      " is currently farming:",
                    ],
                  }),
                }),
                (0, B.jsx)("div", {
                  className: nu().WithdrawModal_params_box,
                  children: nh.map((e, l) => {
                    var d, m, g, y;
                    return (0, B.jsxs)(B.Fragment, {
                      children: [
                        (0, B.jsxs)(
                          "div",
                          {
                            className: nu().WithdrawModal_param,
                            children: [
                              (0, B.jsx)("h3", { children: e }),
                              (0, B.jsxs)("div", {
                                className: nu().WithdrawModal_param_box,
                                children: [
                                  (0, B.jsx)(tf(), {
                                    width: 20,
                                    height: 20,
                                    alt: "",
                                    className: "rounded-full",
                                    src:
                                      0 === l
                                        ? (0, tI.tY)(
                                            null !==
                                              (g =
                                                null == es
                                                  ? void 0
                                                  : null === (d = es.chainId) ||
                                                    void 0 === d
                                                  ? void 0
                                                  : d.toString()) &&
                                              void 0 !== g
                                              ? g
                                              : "",
                                            "chains"
                                          )
                                        : 1 === l
                                        ? (0, tI.tY)(
                                            null !==
                                              (y =
                                                null == es
                                                  ? void 0
                                                  : es.protocol) && void 0 !== y
                                              ? y
                                              : "",
                                            "protocols"
                                          )
                                        : -1 !== ed
                                        ? (0, tI.tY)(c.tokens[ed], "tokens")
                                        : "",
                                  }),
                                  (0, B.jsx)("p", {
                                    className: "".concat(
                                      0 === l
                                        ? "capitalize"
                                        : 1 === l
                                        ? "capitalize"
                                        : "uppercase"
                                    ),
                                    children:
                                      0 === l
                                        ? null ===
                                            (m = c.chains.find(
                                              (e) =>
                                                e.chainId.toString() ===
                                                (null == es
                                                  ? void 0
                                                  : es.chainId.toString())
                                            )) || void 0 === m
                                          ? void 0
                                          : m.chainName
                                        : 1 === l
                                        ? null == es
                                          ? void 0
                                          : es.protocol
                                        : c.tokens[ed].toUpperCase(),
                                  }),
                                ],
                              }),
                            ],
                          },
                          l
                        ),
                        l !== nh.length - 1 &&
                          (0, B.jsx)("div", {
                            className: nu().WithdrawModal_param_dashed,
                          }),
                      ],
                    });
                  }),
                }),
                (0, B.jsxs)("div", {
                  className: nu().WithdrawModal_strategy_box,
                  children: [
                    (0, B.jsx)("h1", { children: "Current Strategy" }),
                    (0, B.jsxs)("div", {
                      className: nu().WithdrawModal_strategy_param_box,
                      children: [
                        (0, B.jsx)("div", {
                          style: {
                            backgroundImage: "url(".concat(
                              (0, tI.tY)(c.vaultId, "vaults"),
                              ")"
                            ),
                          },
                        }),
                        (0, B.jsx)("p", {
                          className: "capitalize",
                          children: es
                            ? ""
                                .concat(null == es ? void 0 : es.protocol, " ")
                                .concat(
                                  ec[
                                    null !==
                                      (l = null == es ? void 0 : es.tokens) &&
                                    void 0 !== l
                                      ? l
                                      : ""
                                  ]
                                )
                            : (0, B.jsx)(nr.Z, { className: "w-5 h-5" }),
                        }),
                      ],
                    }),
                  ],
                }),
                (0, B.jsx)("div", { className: nu().breakLine }),
                (0, B.jsxs)("div", {
                  className: nu().WithdrawModal_select_container_box,
                  children: [
                    (0, B.jsx)(WithdrawModal_SelectItem, {
                      disabled: !0,
                      title: "Select Chain",
                      type: "chain",
                      items: c.chains.map((e) => ({
                        img: (0, tI.tY)(e.chainId.toString(), "chains"),
                        chainId: e.chainId,
                        name: e.chainName,
                      })),
                      selectedState: C
                        ? {
                            img: (0, tI.tY)(C.chainId.toString(), "chains"),
                            name: C.chainName,
                          }
                        : void 0,
                      setSelectedState: (e) => {
                        var l;
                        e.name !==
                        (null === (l = c.chains.find((e) => e.chainId === m)) ||
                        void 0 === l
                          ? void 0
                          : l.chainName)
                          ? tI.ZP.showToast(
                              "Withdrawals are currently only available on the base chain.",
                              "error"
                            )
                          : P(c.chains.find((l) => l.chainName === e.name));
                      },
                    }),
                    (0, B.jsx)(WithdrawModal_SelectItem, {
                      disabled: !0,
                      title: "Select Asset and Amount",
                      type: "asset",
                      items: c.tokens.map((e) => ({
                        img: (0, tI.tY)(e, "tokens"),
                        name: e.toUpperCase(),
                      })),
                      selectedState: I,
                      setSelectedState: (e) => {
                        e.name.toUpperCase() !==
                        c.baseToken.symbol.toUpperCase()
                          ? tI.ZP.showToast(
                              "Withdrawals are currently only available in the base token.",
                              "error"
                            )
                          : N({ img: e.img, name: e.name });
                      },
                    }),
                    (0, B.jsx)(DragScale_DragScale, {
                      icon: I.img.src,
                      type: "withdraw",
                      tmpBalance: ef.baseTokenAmount,
                      balance: ef.baseTokenAmount - ei,
                      selectedAsset: "",
                      amount: F,
                      setSelectedAmount: G,
                    }),
                    (0, B.jsx)("div", {
                      className: "flex items-center justify-center gap-1 mt-2",
                      children: (0, B.jsx)("p", {
                        className: "text-[#FFFFFF80] text-xs",
                        children: "Withdrawal period: 24 hours",
                      }),
                    }),
                  ],
                }),
                "" !== F &&
                  (0, B.jsxs)("p", {
                    className:
                      "!text-[#FFFFFFBF] font-EuclidCircularB text-center mx-auto font-normal max-w-[340px] text-[14px] mt-6",
                    children: [
                      "ⓘ By withdrawing, you will stop earning points for this deposit and you'll lose on",
                      " ",
                      (0, B.jsxs)("span", {
                        className: "gradient-text",
                        children: [
                          getDailyPointsLoss(),
                          " daily point",
                          1 === getDailyPointsLoss() ? "" : "s",
                        ],
                      }),
                      " ",
                      "for this deposit.",
                    ],
                  }),
                (0, B.jsxs)("div", {
                  className: nu().WithdrawModal_bottom_box,
                  children: [
                    Z
                      ? (0, B.jsx)("p", {
                          children:
                            "We recommend to withdraw the asset in the chain that NOYA is currently farming to save fees.",
                        })
                      : (0, B.jsx)(B.Fragment, {}),
                    (0, B.jsx)("button", {
                      className: nu().color_1,
                      onClick: () => {
                        eh || withdraw();
                      },
                      children: eh
                        ? (0, B.jsxs)(B.Fragment, {
                            children: [
                              "Loading",
                              (0, B.jsx)(tf(), {
                                className: nu().img,
                                src: t5,
                                alt: "loading",
                              }),
                            ],
                          })
                        : (0, B.jsx)(B.Fragment, { children: Q }),
                    }),
                  ],
                }),
              ],
            }),
          })
        );
      }
      let WithdrawModal_SelectItem = (e) => {
        let {
            title: l,
            type: c,
            items: d,
            selectedState: m,
            setSelectedState: g,
            disabled: y,
          } = e,
          [b, C] = (0, ts.useState)(!1),
          P = (0, ts.useRef)(null),
          I = !1,
          closeDropDown = (e) => {
            var l;
            let { target: c } = e;
            !(function (e) {
              if (!e || !("nodeType" in e)) throw Error("Node expected");
            })(c),
              (null !== (l = P.current) && void 0 !== l && l.contains(c)) ||
                (I ? C(!1) : (I = !0));
          };
        return (
          (0, ts.useEffect)(
            () => (
              document.body.addEventListener("click", closeDropDown),
              () => {
                document.body.removeEventListener("click", closeDropDown);
              }
            ),
            []
          ),
          (0, B.jsxs)("div", {
            className: "select-none "
              .concat(!y && "cursor-pointer", " ")
              .concat(nu().WithdrawModal_select_box),
            children: [
              (0, B.jsx)("h1", { children: l }),
              (0, B.jsxs)("div", {
                ref: P,
                className: nu().WithdrawModal_select,
                onClick: () => {
                  y || C(!b);
                },
                children: [
                  (0, B.jsx)("div", {
                    className: nu().WithdrawModal_select_Text_Image,
                    children: m
                      ? (0, B.jsxs)(B.Fragment, {
                          children: [
                            (0, B.jsx)("div", {
                              className: nu().WithdrawModal_select_img,
                              style: {
                                backgroundImage: "url(".concat(m.img, ")"),
                              },
                            }),
                            (0, B.jsx)("p", { children: m.name }),
                          ],
                        })
                      : (0, B.jsx)("p", {
                          style: { left: "8%" },
                          children: "Select an option",
                        }),
                  }),
                  (0, B.jsx)(tf(), {
                    style: b ? { transform: "scale(-1)" } : {},
                    src: tx.Z,
                    alt: "chainArrow",
                    className: (0, ns.cn)(nu().WithdrawModal_select_icon, {
                      "opacity-0": y || d.length <= 1,
                    }),
                  }),
                  b &&
                    (0, B.jsx)(DropDown, {
                      type: c,
                      items: d,
                      selectedState: m,
                      setSelectedState: g,
                      setDropDown: C,
                    }),
                ],
              }),
            ],
          })
        );
      };
      var nf = c(58252),
        nm = c.n(nf),
        ng = c(58791);
      function ReferralModal(e) {
        let { display: l } = e,
          c = (0, tc.T)(),
          d = (0, ts.useRef)(null),
          m = (0, tc.C)((e) => e.ModalsReducer.referralModal),
          { address: g } = (0, tu.Z)(),
          { data: y } = (0, ng.Nf)({ address: g }, { skip: !g });
        (0, ts.useEffect)(
          () => (
            (document.body.style.overflowY = "hidden"),
            () => {
              document.body.style.overflowY = "scroll";
            }
          ),
          []
        );
        let copyInviteLink = () => {
          if (
            !(null == y ? void 0 : y.customReferralLink) &&
            !(null == y ? void 0 : y.referralCode)
          )
            return;
          let e = window.location.origin;
          navigator.clipboard
            .writeText(
              ""
                .concat(e, "/space-race-onboarding/")
                .concat(
                  (null == y ? void 0 : y.customReferralLink) ||
                    (null == y ? void 0 : y.referralCode)
                )
            )
            .then(() => {
              (0, t6.x)("Copied to clipboard", "success");
            })
            .catch(() => {
              (0, t6.x)("Error copying to clipboard", "error");
            });
        };
        return (0, B.jsx)("div", {
          onClick: () => {
            c((0, tp.e1)());
          },
          className: ""
            .concat(
              nm().ReferralModal_wrapper,
              " animate__animated animate__fadeIn "
            )
            .concat(!m.open && l && "animate__fadeOut"),
          children: (0, B.jsxs)("section", {
            onClick: (e) => {
              e.stopPropagation();
            },
            ref: d,
            className: nm().ReferralModal_container,
            children: [
              (0, B.jsx)("div", { className: nm().ReferralModal_leftGlow }),
              (0, B.jsx)("div", { className: nm().ReferralModal_rightGlow }),
              (0, B.jsx)(tf(), {
                onClick: () => {
                  c((0, tp.e1)());
                },
                src: ty,
                alt: "close",
                className: nm().ReferralModal_close,
              }),
              (0, B.jsx)("div", {
                className: nm().ReferralModal_head,
                children: (0, B.jsx)("h1", {
                  children: "\uD83C\uDF89 Deposit Successful!",
                }),
              }),
              (0, B.jsx)("div", { className: nm().breakLine }),
              (0, B.jsx)("div", {
                className: nm().ReferralModal_description_box,
                children: (0, B.jsxs)("p", {
                  className: "text-lg mb-4",
                  children: [
                    "Your deposit was successful! Now it's time to",
                    " ",
                    (0, B.jsx)("span", {
                      className: "gradient-text font-bold",
                      children: "supercharge your earnings",
                    }),
                    " ",
                    "by referring your friends to",
                    " ",
                    (0, B.jsx)("span", {
                      className: "gradient-text",
                      children: "NOYA",
                    }),
                  ],
                }),
              }),
              (0, B.jsxs)("div", {
                className: nm().ReferralModal_content_box,
                children: [
                  (0, B.jsx)("h1", {
                    className: nm().ReferralModal_content_title,
                    children: "\uD83D\uDE80 Start Earning More Points",
                  }),
                  (0, B.jsx)("div", {
                    className: nm().ReferralModal_link_container,
                    children: (0, B.jsxs)("div", {
                      className: nm().ReferralModal_link_inner,
                      children: [
                        (0, B.jsx)("p", {
                          className: nm().ReferralModal_link_label,
                          children: "Your Referral Link:",
                        }),
                        (0, B.jsxs)("div", {
                          className: "".concat(
                            nm().ReferralModal_link_text,
                            " flex items-center gap-2 px-2.5"
                          ),
                          children: [
                            (0, B.jsx)("span", {
                              className:
                                "flex-1 overflow-hidden whitespace-nowrap text-ellipsis",
                              children: (null == y ? void 0 : y.referralCode)
                                ? ""
                                    .concat(
                                      window.location.origin,
                                      "/space-race-onboarding/"
                                    )
                                    .concat(y.referralCode)
                                : "Loading...",
                            }),
                            (null == y ? void 0 : y.referralCode) &&
                              (0, B.jsx)("button", {
                                onClick: copyInviteLink,
                                className:
                                  "bg-transparent border-none cursor-pointer rounded flex items-center justify-center opacity-70 transition-opacity duration-200 text-white flex-shrink-0 hover:opacity-100",
                                title: "Copy referral link",
                                children: (0, B.jsx)("svg", {
                                  width: "16",
                                  height: "16",
                                  viewBox: "0 0 24 24",
                                  fill: "none",
                                  xmlns: "http://www.w3.org/2000/svg",
                                  children: (0, B.jsx)("path", {
                                    d: "M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM19 5H8C6.9 5 6 5.9 6 7V21C6 22.1 6.9 23 8 23H19C20.1 23 21 22.1 21 21V7C21 5.9 20.1 5 19 5ZM19 21H8V7H19V21Z",
                                    fill: "currentColor",
                                  }),
                                }),
                              }),
                          ],
                        }),
                      ],
                    }),
                  }),
                  (0, B.jsxs)("div", {
                    className: nm().ReferralModal_steps_grid,
                    children: [
                      (0, B.jsxs)("div", {
                        className: nm().ReferralModal_step_item,
                        children: [
                          (0, B.jsx)("span", {
                            className: nm().ReferralModal_step_emoji,
                            children: "\uD83D\uDC65",
                          }),
                          (0, B.jsx)("p", {
                            className: nm().ReferralModal_step_text,
                            children: "Invite your friends",
                          }),
                        ],
                      }),
                      (0, B.jsxs)("div", {
                        className: nm().ReferralModal_step_item,
                        children: [
                          (0, B.jsx)("span", {
                            className: nm().ReferralModal_step_emoji,
                            children: "\uD83D\uDCB0",
                          }),
                          (0, B.jsx)("p", {
                            className: nm().ReferralModal_step_text,
                            children: "They earn an extra 10%",
                          }),
                        ],
                      }),
                      (0, B.jsxs)("div", {
                        className: nm().ReferralModal_step_item,
                        children: [
                          (0, B.jsx)("span", {
                            className: nm().ReferralModal_step_emoji,
                            children: "\uD83C\uDF81",
                          }),
                          (0, B.jsx)("p", {
                            className: nm().ReferralModal_step_text,
                            children: "You earn 10% of their points",
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
              (0, B.jsx)("div", { className: nm().breakLine }),
              (0, B.jsx)("div", {
                className: nm().ReferralModal_bottom_box,
                children: (0, B.jsxs)("button", {
                  className: ""
                    .concat(nm().ReferralModal_copy_button, " ")
                    .concat(nm().color_1),
                  onClick: copyInviteLink,
                  children: [
                    (0, B.jsx)("svg", {
                      width: "16",
                      height: "16",
                      viewBox: "0 0 24 24",
                      fill: "none",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: (0, B.jsx)("path", {
                        d: "M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM19 5H8C6.9 5 6 5.9 6 7V21C6 22.1 6.9 23 8 23H19C20.1 23 21 22.1 21 21V7C21 5.9 20.1 5 19 5ZM19 21H8V7H19V21Z",
                        fill: "currentColor",
                      }),
                    }),
                    "Copy Referral Link",
                  ],
                }),
              }),
            ],
          }),
        });
      }
      var ny = c(30423),
        nb = c.n(ny),
        nv = c(51386),
        nw = c(79096),
        nx = {
          src: "/_next/static/media/email.2b108120.svg",
          height: 13,
          width: 17,
          blurWidth: 0,
          blurHeight: 0,
        },
        n_ = c(73909),
        nC = c(88102),
        nE = c(9737),
        nA = c(88644);
      function Drawer() {
        let e = (0, tc.T)(),
          { disconnect: l } = (0, nA.q)(),
          c = (0, ts.useRef)(null),
          d = (0, nw.useRouter)(),
          m = (0, tc.C)((e) => e.WalletReducer.wallet),
          g = !1,
          y = !1,
          { address: b } = (0, tu.Z)(),
          [C] = (0, ng.nd)(),
          P = [
            {
              title: "Omnivaults",
              onclick: () => {
                d.push({ pathname: "/" });
              },
            },
            {
              title: "Space Race",
              onclick: () => {
                b
                  ? C({ address: b })
                      .unwrap()
                      .then((e) => {
                        e
                          ? d.push({ pathname: "/space-race" })
                          : d.push({ pathname: "/space-race-onboarding" });
                      })
                      .catch((e) => {
                        d.push({ pathname: "/space-race-onboarding" });
                      })
                  : d.push({ pathname: "/space-race-onboarding" });
              },
            },
            {
              title: "ZKML",
              onclick: () => {
                d.push({ pathname: "/zkml" });
              },
            },
            {
              title: "Docs",
              onclick: () => window.open("https://docs.noya.network", "_blank"),
            },
          ],
          I = [{ right: 0 }, { right: "-234px" }],
          N = { duration: 500, iterations: 1 },
          closeLocalMenu = (l) => {
            var d;
            let { target: m } = l;
            !(function (e) {
              if (!e || !("nodeType" in e)) throw Error("Node expected");
            })(m),
              (null !== (d = c.current) && void 0 !== d && d.contains(m)) ||
                (g
                  ? !1 === y &&
                    ((y = !0),
                    c.current && c.current.animate(I, N),
                    setTimeout(() => {
                      e((0, tp.dl)(!1));
                    }, 470))
                  : (g = !0));
          };
        (0, ts.useEffect)(
          () => (
            document.addEventListener("click", closeLocalMenu),
            () => {
              document.removeEventListener("click", closeLocalMenu);
            }
          ),
          []
        );
        let disconnectWallet = () => {
          e((0, nC.Gu)(void 0)), l();
        };
        return (0, B.jsxs)("section", {
          className: nb().Drawer_container,
          ref: c,
          children: [
            (0, B.jsxs)("div", {
              className: nb().Drawer_header,
              children: [
                (0, B.jsx)(tf(), {
                  src: nv.Z,
                  className: nb().Drawer_header_icon,
                  alt: "drawer-noya",
                  onClick: () => {
                    y ||
                      ((y = !0),
                      c.current && c.current.animate(I, N),
                      setTimeout(() => {
                        e((0, tp.dl)(!1));
                      }, 480),
                      d.push("/"));
                  },
                }),
                (0, B.jsx)(tf(), {
                  onClick: () => {
                    y ||
                      ((y = !0),
                      c.current && c.current.animate(I, N),
                      setTimeout(() => {
                        e((0, tp.dl)(!1));
                      }, 480));
                  },
                  src: ty,
                  className: nb().Drawer_header_close,
                  alt: "drawer-noya",
                }),
              ],
            }),
            (0, B.jsx)("div", {
              className: nb().Drawer_links_box,
              children: P.map((l, d) =>
                (0, B.jsx)(
                  "p",
                  {
                    onClick: () => {
                      c.current && c.current.animate(I, N),
                        setTimeout(() => {
                          e((0, tp.dl)(!1));
                        }, 480),
                        l.onclick();
                    },
                    children: l.title,
                  },
                  d
                )
              ),
            }),
            (0, B.jsxs)("div", {
              className: nb().Drawer_socials_box,
              children: [
                (0, B.jsxs)("div", {
                  onClick: () => window.open("https://team@noya.ai", "_blank"),
                  children: [
                    (0, B.jsx)(tf(), {
                      className: nb().Drawer_socials_box_icon,
                      src: nx,
                      alt: "email",
                    }),
                    (0, B.jsx)("p", { children: "team@noya.ai" }),
                  ],
                }),
                (0, B.jsxs)("div", {
                  onClick: () =>
                    window.open("https://twitter.com/networknoya", "_blank"),
                  children: [
                    (0, B.jsx)(tf(), {
                      className: nb().Drawer_socials_box_icon,
                      src: n_.Z,
                      alt: "twitter",
                    }),
                    (0, B.jsx)("p", { children: "@networknoya" }),
                  ],
                }),
              ],
            }),
            (0, B.jsxs)("div", {
              className: nb().Drawer_connect_box,
              children: [
                (0, B.jsx)(Connectbutton, {}),
                m.account &&
                  (0, B.jsxs)(B.Fragment, {
                    children: [
                      (0, B.jsx)("button", {
                        onClick: () => d.push("/"),
                        children: "Dashboard",
                      }),
                      (0, B.jsx)("button", {
                        style: { background: "#eb3333" },
                        onClick: () => {
                          disconnectWallet(),
                            c.current && c.current.animate(I, N),
                            setTimeout(() => {
                              e((0, tp.dl)(!1));
                            }, 480),
                            d.push("/");
                        },
                        children: "Disconnect wallet",
                      }),
                    ],
                  }),
              ],
            }),
            (0, B.jsx)(nE.Z, { className: "1020px:hidden px-6" }),
          ],
        });
      }
      let Connectbutton = () => {
        let e = (0, tc.T)(),
          l = (0, tu.Z)();
        return (
          (0, ts.useEffect)(() => {
            l.address && e((0, nC.Gu)({ account: l.address }));
          }, [l.address]),
          (0, B.jsx)(tb.NL.Custom, {
            children: (e) => {
              let {
                openConnectModal: c,
                authenticationStatus: d,
                mounted: m,
              } = e;
              return (0, B.jsx)("button", {
                onClick: () => {
                  l.address || c();
                },
                style: l.address
                  ? { background: "unset", border: "2px solid white" }
                  : {},
                children:
                  l.isConnected && l.address
                    ? ""
                        .concat(l.address.slice(0, 5), " ... ")
                        .concat(
                          l.address.slice(
                            l.address.length - 4,
                            l.address.length
                          )
                        )
                    : "Connect wallet",
              });
            },
          })
        );
      };
      var nS = c(3792),
        nk = c.n(nS),
        Modals_WatchVideoPopup = () => {
          let e = (0, ts.useRef)(null),
            l = (0, V.I0)(),
            c = !1,
            closeModal = (d) => {
              var m;
              let { target: g } = d;
              !(function (e) {
                if (!e || !("nodeType" in e)) throw Error("Node expected");
              })(g),
                (null !== (m = e.current) && void 0 !== m && m.contains(g)) ||
                  (c ? l((0, tp.gr)(!1)) : (c = !0));
            };
          (0, ts.useEffect)(
            () => (
              (document.body.style.overflowY = "hidden"),
              document.body.addEventListener("click", closeModal),
              () => {
                (document.body.style.overflowY = "scroll"),
                  document.body.removeEventListener("click", closeModal);
              }
            ),
            []
          );
          let d = (0, ts.useRef)(null);
          return (
            (0, ts.useEffect)(() => {
              d.current && d.current.play();
            }, []),
            (0, B.jsx)("div", {
              className: nk().WV_Popup_Wrapper,
              children: (0, B.jsxs)("section", {
                ref: e,
                className: nk().WV_Popup_Container,
                children: [
                  (0, B.jsx)(tf(), {
                    onClick: () => l((0, tp.gr)(!1)),
                    src: ty,
                    alt: "close",
                    className: nk().WV_Popup_close,
                  }),
                  (0, B.jsxs)("video", {
                    controls: !0,
                    ref: d,
                    style: { width: "100%", height: "100%" },
                    loop: !0,
                    children: [
                      (0, B.jsx)("source", {
                        src: "presentation.mp4",
                        type: "video/mp4",
                      }),
                      "Your browser does not support the video tag.",
                    ],
                  }),
                ],
              }),
            })
          );
        },
        nP = c(54656),
        nM = c.n(nP),
        nT = {
          src: "/_next/static/media/success.33cadcbd.svg",
          height: 23,
          width: 23,
          blurWidth: 0,
          blurHeight: 0,
        };
      function SuccessModal(e) {
        let { type: l } = e,
          c = (0, tc.T)(),
          d = (0, nw.useRouter)();
        return (0, B.jsx)("div", {
          className: nM().SuccessModal_wrapper,
          onClick: () => c((0, tp.A9)()),
          children: (0, B.jsxs)("section", {
            className: nM().SuccessModal_container,
            onClick: (e) => e.stopPropagation(),
            children: [
              (0, B.jsx)(tf(), {
                onClick: () => c((0, tp.A9)()),
                src: ty,
                alt: "close-modal",
                className: nM().SuccessModal_container_close,
              }),
              (0, B.jsx)("div", { className: nM().SuccessModal_glow }),
              (0, B.jsxs)("div", {
                className: nM().SuccessModal_content,
                children: [
                  (0, B.jsxs)("div", {
                    className: nM().SuccessModal_content_title,
                    children: [
                      (0, B.jsx)("div", {
                        className: nM().SuccessModal_content_line,
                      }),
                      "bug" === l
                        ? "Thank you!"
                        : "contact" === l
                        ? "Thank you!"
                        : "borrow" === l
                        ? "Borrowed Successfully"
                        : "Congratulations",
                    ],
                  }),
                  (0, B.jsxs)("div", {
                    className: nM().SuccessModal_content_status,
                    children: [
                      (0, B.jsx)(tf(), {
                        src: nT,
                        alt: "success",
                        className: nM().SuccessModal_content_status_img,
                      }),
                      "bug" === l
                        ? "Report sent"
                        : "contact" === l
                        ? "Mail sent"
                        : "Success",
                    ],
                  }),
                  (0, B.jsxs)("div", {
                    className: nM().SuccessModal_content_text1,
                    children: [
                      "bug" === l
                        ? (0, B.jsxs)("p", {
                            children: [
                              "Thank you for actively contributing to our development efforts.",
                              (0, B.jsx)("br", {}),
                              "We appreciate it!",
                            ],
                          })
                        : "contact" === l
                        ? (0, B.jsx)("p", {
                            children:
                              "Thank you for getting in touch with us. We read every email.",
                          })
                        : "borrow" === l
                        ? (0, B.jsxs)("p", {
                            children: [
                              "Borrow operation was ",
                              (0, B.jsx)("span", { children: " Successful" }),
                              ".",
                            ],
                          })
                        : (0, B.jsxs)("p", {
                            children: [
                              "You have been successfully added to our ",
                              (0, B.jsx)("span", { children: " Waitlist" }),
                              ".",
                            ],
                          }),
                      "waitlist" === l &&
                        (0, B.jsx)("div", {
                          className: nM().SuccessModal_content_line,
                        }),
                    ],
                  }),
                  "waitlist" === l &&
                    (0, B.jsx)("div", {
                      className: nM().SuccessModal_content_text2,
                      children: (0, B.jsxs)("p", {
                        children: [
                          "Please confirm your subscription by clicking the link in",
                          (0, B.jsx)("br", {}),
                          " the email we’ve just sent you.",
                        ],
                      }),
                    }),
                  (0, B.jsxs)("div", {
                    className: nM().SuccessModal_content_buttons_box,
                    children: [
                      (0, B.jsx)("button", {
                        onClick: () => {
                          c((0, tp.A9)());
                        },
                        className: ""
                          .concat(nM().SuccessModal_content_close_button, " ")
                          .concat(nM().color_1),
                        children: "waitlist" === l ? "Okay" : "Close",
                      }),
                      "waitlist" !== l &&
                        (0, B.jsx)("div", {
                          onClick: () => {
                            c((0, tp.A9)()), d.push("/");
                          },
                          className: nM().SuccessModal_content_back_wrapper,
                          children: (0, B.jsx)("button", {
                            className: ""
                              .concat(
                                nM().SuccessModal_content_back_button,
                                " "
                              )
                              .concat(nM().color_1),
                            children: "Back to home",
                          }),
                        }),
                    ],
                  }),
                ],
              }),
            ],
          }),
        });
      }
      var nI = c(70432),
        nj = c.n(nI);
      function ZkmlVideo() {
        let e = (0, ts.useRef)(null),
          l = (0, V.I0)(),
          c = !1,
          closeModal = (d) => {
            var m;
            let { target: g } = d;
            !(function (e) {
              if (!e || !("nodeType" in e)) throw Error("Node expected");
            })(g),
              (null !== (m = e.current) && void 0 !== m && m.contains(g)) ||
                (c ? l((0, tp.ir)(!1)) : (c = !0));
          };
        (0, ts.useEffect)(
          () => (
            (document.body.style.overflowY = "hidden"),
            document.body.addEventListener("click", closeModal),
            () => {
              (document.body.style.overflowY = "scroll"),
                document.body.removeEventListener("click", closeModal);
            }
          ),
          []
        );
        let d = (0, ts.useRef)(null);
        return (
          (0, ts.useEffect)(() => {
            d.current && d.current.play();
          }, []),
          (0, B.jsx)("div", {
            className: nj().ZKML_video_wrapper,
            children: (0, B.jsxs)("section", {
              ref: e,
              className: nj().ZKML_video_Container,
              children: [
                (0, B.jsx)(tf(), {
                  onClick: () => l((0, tp.ir)(!1)),
                  src: ty,
                  alt: "close",
                  className: nj().ZKML_video_close,
                }),
                (0, B.jsx)("iframe", {
                  width: "100%",
                  height: "100%",
                  src: "https://www.youtube.com/embed/Z52gBVVC_D8",
                  title: "YouTube video player",
                  allow:
                    "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",
                  allowFullScreen: !0,
                }),
              ],
            }),
          })
        );
      }
      var nO = c(27995),
        nB = c.n(nO),
        nD = {
          src: "/_next/static/media/flesh.7c6f1480.svg",
          height: 8,
          width: 10,
          blurWidth: 0,
          blurHeight: 0,
        },
        nN = {
          src: "/_next/static/media/copy.ac5d093a.svg",
          height: 21,
          width: 18,
          blurWidth: 0,
          blurHeight: 0,
        },
        nR = c(59440),
        nF = {
          src: "/_next/static/media/info2-white.742748a2.svg",
          height: 18,
          width: 18,
          blurWidth: 0,
          blurHeight: 0,
        };
      function VerifyProofModal(e) {
        let {
            input: l,
            output: c,
            date: d,
            display: m,
            proof: g,
            publicInputs: y,
            verifierLink: b,
            otherInfo: C,
          } = e,
          [P, I] = (0, ts.useState)(!0),
          N = (0, tc.T)();
        (0, nw.useRouter)();
        let { width: F } = (0, nR.Z)(),
          G = (0, V.v9)((e) => e.ModalsReducer.verifyProofModal.visible);
        (0, ts.useEffect)(
          () => (
            (document.body.style.overflowY = "hidden"),
            () => {
              document.body.style.overflowY = "scroll";
            }
          ),
          []
        );
        let Q = [
            {
              step: "Step 1:",
              content: "Go to the corresponding verifier here:",
              button: (0, B.jsx)("div", {
                className: nB().guidButton_wrapper,
                children: (0, B.jsx)("button", {
                  onClick: () => {
                    window.open(b, "_blank");
                  },
                  className: ""
                    .concat(nB().guidButton, " ")
                    .concat(nB().color_1),
                  children: "Confirm and Verify On-Chain",
                }),
              }),
              span: null,
            },
            {
              step: "Step 2:",
              content:
                "Paste the public inputs and proof from above into the corresponding fields.",
              button: null,
              span: null,
            },
            {
              step: "Step 3:",
              content:
                "Click on “Query”. You should get a <span>“success”</span> notification.",
              button: null,
              span: null,
            },
          ],
          $ = (0, ts.useMemo)(() => {
            if (!C) return { price: 0, range: "[ $0 - $0 ]" };
            {
              let e = "",
                l = "",
                c = "",
                d = C.split(",");
              return (
                d.forEach((d, m) => {
                  '"currentPrice"' === d.split(":")[0]
                    ? (e = d.split(":")[1].replace(" ", ""))
                    : "" === l
                    ? (l = d.split(":")[1])
                    : (c = d.split(":")[1]);
                }),
                {
                  price: e,
                  range: "[ $".concat(l.trim(), " - $").concat(c.trim(), " ]"),
                }
              );
            }
          }, [C]);
        return (0, B.jsx)("div", {
          className: ""
            .concat(
              nB().VerifyProof_wrapper,
              " animate__animated animate__fadeIn "
            )
            .concat(!G && m && "animate__fadeOut"),
          onClick: () => N((0, tp.A2)()),
          children: (0, B.jsxs)("section", {
            className: nB().VerifyProof_container,
            onClick: (e) => e.stopPropagation(),
            children: [
              (0, B.jsx)(tf(), {
                onClick: () => N((0, tp.A2)()),
                className: nB().VerifyProof_container_close,
                src: ty,
                alt: "close",
              }),
              (0, B.jsxs)("div", {
                className: nB().VerifyProof_content,
                children: [
                  (0, B.jsxs)("div", {
                    className: nB().VerifyProof_content_title,
                    children: [
                      "Verifying a record",
                      (0, B.jsx)("div", {
                        className: nB().VerifyProof_content_line,
                      }),
                    ],
                  }),
                  (0, B.jsxs)("div", {
                    className: nB().VerifyProof_content_pools_box,
                    children: [
                      (0, B.jsxs)("div", {
                        className: nB().VerifyProof_content_pool,
                        children: [
                          (0, B.jsxs)("h3", {
                            children: [
                              "Input ",
                              (0, B.jsx)("span", { children: "[pool]" }),
                            ],
                          }),
                          (0, B.jsx)("div", { children: l }),
                        ],
                      }),
                      (0, B.jsx)(tf(), {
                        src: nD,
                        alt: "arrow",
                        className: nB().VerifyProof_content_pools_box_flesh,
                      }),
                      (0, B.jsxs)("div", {
                        className: nB().VerifyProof_content_pool,
                        children: [
                          (0, B.jsxs)("h3", {
                            children: [
                              "Output ",
                              (0, B.jsx)("span", { children: "[pool]" }),
                            ],
                          }),
                          (0, B.jsx)("div", { children: c }),
                        ],
                      }),
                    ],
                  }),
                  (0, B.jsxs)("div", {
                    className: nB().VerifyProof_content_proof_box,
                    children: [
                      (0, B.jsx)("div", {
                        className: nB().VerifyProof_content_line,
                      }),
                      (0, B.jsxs)("div", {
                        className: nB().VerifyProof_content_proof_box_item,
                        children: [
                          (0, B.jsxs)("h3", {
                            children: [
                              (0, B.jsx)(tf(), {
                                className:
                                  nB().VerifyProof_content_proof_box_info,
                                src: nF,
                                alt: "info",
                              }),
                              "Public Inputs:",
                              " ",
                              !P &&
                                (0, B.jsx)(tf(), {
                                  className:
                                    nB().VerifyProof_content_proof_box_icon,
                                  src: nT,
                                  alt: "success",
                                }),
                            ],
                          }),
                          (0, B.jsxs)("p", {
                            children: [
                              y
                                ? "".concat(y.slice(0, 35), "...")
                                : "Loading...",
                              y &&
                                (0, B.jsx)(tf(), {
                                  style: { cursor: "pointer" },
                                  className:
                                    nB().VerifyProof_content_proof_box_icon,
                                  src: nN,
                                  alt: "copy",
                                  onClick: () => {
                                    (0, t6.x)("Copied to clipboard", "success"),
                                      navigator.clipboard.writeText(y);
                                  },
                                }),
                            ],
                          }),
                        ],
                      }),
                      (0, B.jsxs)("div", {
                        className: nB().VerifyProof_content_proof_box_item,
                        children: [
                          (0, B.jsxs)("h3", {
                            children: [
                              (0, B.jsx)(tf(), {
                                className:
                                  nB().VerifyProof_content_proof_box_info,
                                src: nF,
                                alt: "info",
                              }),
                              "Generated Proof:",
                              " ",
                              !P &&
                                (0, B.jsx)(tf(), {
                                  className:
                                    nB().VerifyProof_content_proof_box_icon,
                                  src: nT,
                                  alt: "success",
                                }),
                            ],
                          }),
                          (0, B.jsxs)("p", {
                            children: [
                              g
                                ? "".concat(g.slice(0, 35), "...")
                                : "Loading...",
                              g &&
                                (0, B.jsx)(tf(), {
                                  style: { cursor: "pointer" },
                                  className:
                                    nB().VerifyProof_content_proof_box_icon,
                                  src: nN,
                                  alt: "copy",
                                  onClick: () => {
                                    (0, t6.x)("Copied to clipboard", "success"),
                                      navigator.clipboard.writeText(g);
                                  },
                                }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  C &&
                    (0, B.jsxs)("div", {
                      className: nB().VerifyProof_content_price_box,
                      children: [
                        (0, B.jsxs)("div", {
                          className: nB().VerifyProof_content_price,
                          children: [
                            (0, B.jsx)("h3", { children: "Current Price:" }),
                            (0, B.jsxs)("p", { children: ["$", $.price] }),
                          ],
                        }),
                        (0, B.jsxs)("div", {
                          className: nB().VerifyProof_content_price,
                          children: [
                            (0, B.jsx)("h3", { children: "Current Range:" }),
                            (0, B.jsx)("p", {
                              style: { color: "rgba(125, 111, 245,1)" },
                              children: $.range,
                            }),
                          ],
                        }),
                      ],
                    }),
                  (0, B.jsxs)("div", {
                    className: nB().VerifyProof_content_guid_container,
                    children: [
                      (0, B.jsxs)("div", {
                        className: nB().VerifyProof_content_guid_title,
                        children: [
                          (0, B.jsx)("div", {
                            className:
                              nB().VerifyProof_content_guid_title_line1,
                          }),
                          (0, B.jsx)("div", {
                            className:
                              nB().VerifyProof_content_guid_title_line2,
                          }),
                          "How to verify?",
                        ],
                      }),
                      (0, B.jsx)("div", {
                        className: nB().VerifyProof_content_guid_bottom,
                        children: Q.map((e, l) =>
                          (0, B.jsxs)(
                            "div",
                            {
                              className:
                                nB().VerifyProof_content_guid_bottom_item,
                              children: [
                                (0, B.jsx)("h3", { children: e.step }),
                                (0, B.jsx)("p", {
                                  dangerouslySetInnerHTML: {
                                    __html: e.content,
                                  },
                                }),
                                null !== e.span &&
                                  (0, B.jsx)("span", { children: e.span }),
                                null !== e.button && e.button,
                              ],
                            },
                            e.step
                          )
                        ),
                      }),
                    ],
                  }),
                  (0, B.jsx)("div", {
                    className: nB().VerifyProof_content_buttons_container,
                    children: (0, B.jsx)("button", {
                      onClick: () => N((0, tp.A2)()),
                      className: ""
                        .concat(nB().VerifyProof_content_close_button, " ")
                        .concat(nB().color_1),
                      children: "Close",
                    }),
                  }),
                ],
              }),
            ],
          }),
        });
      }
      var nL = c(15215),
        nU = c(51157),
        MessagePopUp = function (e) {
          let { open: l, onClose: c, notification: d, address: m } = e,
            { className: g, dialogRef: y, handleClose: b } = (0, nU.Z)(c, l),
            { data: C } = (0, ng.Nf)({ address: m });
          return C
            ? (0, B.jsx)("div", {
                className: g,
                onClick: b,
                ref: y,
                children: (0, B.jsxs)("div", {
                  onClick: (e) => e.stopPropagation(),
                  className:
                    "w-full shadow-gradient max-w-[min(660px,90%)] px-4 mx-auto relative h-[313px] max-h-[80vh] bg-black rounded-[5px] shadow-2xl flex flex-col items-center justify-between py-8",
                  children: [
                    (0, B.jsx)("button", {
                      onClick: b,
                      className:
                        "cursor-pointer absolute top-5 right-5 outline-none border-none bg-transparent",
                      children: (0, B.jsx)(nL.Z, { className: "w-4 h-4" }),
                    }),
                    (0, B.jsxs)("div", {
                      className:
                        "flex w-full items-center justify-center gap-3 flex-col",
                      children: [
                        (0, B.jsx)("p", {
                          className:
                            "font-RussoOne text-[22px] md:text-[24px] lg:text-[28px] font-normal text-center text-white max-w-[480px]",
                          children: "New Task",
                        }),
                        (0, B.jsx)("div", { className: "gradient-border" }),
                      ],
                    }),
                    (0, B.jsx)("p", {
                      className:
                        "font-EuclidCircularB text-[12px] md:text-[14px] font-normal  text-center text-white max-w-[480px]",
                      children: d.message,
                    }),
                    (0, B.jsx)(nt(), {
                      href: tI.ZP.getNotificationAction(d, C),
                      onClick: (e) => {
                        e.preventDefault(),
                          b(),
                          setTimeout(() => {
                            window.location.href = tI.ZP.getNotificationAction(
                              d,
                              C
                            );
                          }, 250);
                      },
                      className:
                        "moving-bg flex justify-center items-center font-RussoOne text-[16xp] md:text-[18px] font-normal !text-white w-[185px] h-[41px] rounded-[5px]",
                      children: tI.ZP.getNotificationActionTitle(d, C),
                    }),
                  ],
                }),
              })
            : null;
        },
        nz = c(34532),
        nW = c.n(nz),
        nq = c(29002),
        nV = c(41398),
        nH = c(49723);
      let calculateDailyPoints = (e, l) =>
        e
          ? {
              normalEarnings: tI.ZP.formatWithExponential(e * na.Sq),
              newEarnings: tI.ZP.formatWithExponential(
                e * { 3: 1.2, 6: 1.4, 12: 1.8 }[l] * na.Sq
              ),
            }
          : { normalEarnings: "0", newEarnings: "0" };
      function BondModal(e) {
        var l, c, d;
        let { data: m, display: g } = e,
          y = (0, tc.T)(),
          b = (0, ts.useRef)(null),
          C = (0, V.v9)((e) => e),
          [P, I] = (0, ts.useState)(""),
          [N, F] = (0, ts.useState)("Bond"),
          [G, Q] = (0, ts.useState)("3 Months"),
          [$, Z] = (0, ts.useState)(0);
        (0, ts.useEffect)(
          () => (
            (document.body.style.overflowY = "hidden"),
            () => {
              document.body.style.overflowY = "scroll";
            }
          ),
          []
        );
        let { address: Y } = (0, tu.Z)(),
          [et] = (0, nn.zu)(),
          [en, er] = (0, ts.useState)(0),
          [ei, eo] = (0, ts.useState)(!1);
        (0, ts.useEffect)(() => {
          (async () => {
            let e = {
                address: m.accountingManagerAddress,
                abi: t8.Wo,
                functionName: "allowance",
                args: [Y, m.bondingManager],
                chainId: m.baseChain.chainId,
              },
              l = await readContract_readContract(t2.g, e);
            0 === Number(l)
              ? F("Approve")
              : (l ? er(Number(l)) : er(0), F("Bond"));
          })();
        }, [ei, Y, m.accountingManagerAddress, m.baseChain, m.bondingManager]);
        let getBalance = () => {
            getBalances(
              m.accountingManagerAddress,
              m.baseChain.chainId,
              Y
            ).then((e) => {
              Z(e);
            });
          },
          { switchChain: ea } = (0, nq.o)();
        (0, ts.useEffect)(() => {
          ea && ea({ chainId: m.baseChain.chainId }), getBalance();
        }, [Y, m.baseToken, m.baseChain]);
        let { convertToUSD: es } = (0, ni.B)(),
          el = (0, ts.useMemo)(() => {
            let e = Number(P),
              l = es(e, tI.ZP.getSymbolFromVaultType(m.type));
            if (!l) return { normalEarnings: "0", newEarnings: "0" };
            let c = "3 Months" === G ? 3 : "6 Months" === G ? 6 : 12;
            return calculateDailyPoints(l, c);
          }, [es, P, G]),
          { data: ec, isLoading: eu } = (0, nn.bw)(),
          bond = async () => {
            if ("Loading" !== N) {
              let e = new tX(P || "0"),
                l = new tX($.toString());
              if (e.gt(l)) {
                (0, t6.x)("Amount exceeds available balance", "error");
                return;
              }
              let c = new tX(10).pow(m.baseToken.decimals),
                d = e.mul(c),
                g = d.floor().toNumber();
              if (0 !== g) {
                if (en < g) {
                  F("Loading");
                  let e = {
                    address: m.accountingManagerAddress,
                    abi: t8.Wo,
                    functionName: "approve",
                    args: [m.bondingManager, BigInt(g)],
                    chainId: m.baseChain.chainId,
                  };
                  try {
                    let l = await (0, t4.n)(t2.g, e),
                      c = await (0, t7.e)(t2.g, { hash: l });
                    "success" === c.status
                      ? (eo((e) => !e),
                        (0, t6.x)("Approval Successful", "success"),
                        F("Bond"))
                      : (0 === en ? F("Approve") : F("Bond"),
                        (0, t6.x)("Approval Failed", "error"));
                  } catch (e) {
                    0 === en ? F("Approve") : F("Bond"), console.error(e);
                  }
                } else {
                  let e = {
                    address: m.bondingManager,
                    abi: nV,
                    functionName: "depositFor",
                    args: [
                      Y,
                      BigInt(g),
                      "3 Months" === G
                        ? BigInt(7776e3)
                        : "6 Months" === G
                        ? BigInt(15552e3)
                        : BigInt(31536e3),
                    ],
                    chainId: m.baseChain.chainId,
                  };
                  try {
                    F("Loading");
                    let l = await (0, t4.n)(t2.g, e),
                      { transactionHash: c } = await (0, t7.e)(t2.g, {
                        hash: l,
                      });
                    y((0, tp.KW)("TX_EMITTED"));
                    let d = 0,
                      g = !1,
                      b = setInterval(async () => {
                        if (d > 20) {
                          clearInterval(b),
                            F("Bond"),
                            y((0, tp.Us)()),
                            (0, t6.x)(
                              "Bond validation failed, try refreshing the page",
                              "warning"
                            ),
                            y(t9.Bl.util.invalidateTags(["Transaction"]));
                          return;
                        }
                        try {
                          let e = await et({
                            address: Y,
                            vaultId: m.vaultId,
                          }).unwrap();
                          if (e) {
                            let l = e.find((e) => e.txnHash1 === c);
                            if (l) {
                              clearInterval(b),
                                F("Bond"),
                                y((0, tp.Us)()),
                                g ||
                                  ((0, t6.x)("Bond Successful", "success"),
                                  (g = !0)),
                                y(t9.Bl.util.invalidateTags(["Transaction"]));
                              return;
                            }
                          }
                        } catch (e) {
                          console.error("Error checking transaction:", e);
                        }
                        d++;
                      }, 1500);
                  } catch (e) {
                    console.error("Bond transaction failed:", e),
                      F("Bond"),
                      (0, t6.x)("Something went wrong", "error");
                  }
                }
              } else (0, t6.x)("Please select an amount", "warning");
            } else (0, t6.x)("Please wait", "warning");
          },
          { data: ed, isLoading: ep } = (0, nn.Yv)({ vaultId: m.vaultId }),
          eh = (0, ts.useMemo)(() => {
            let e =
              null == ed
                ? void 0
                : ed.readablePositions.toSorted(
                    (e, l) =>
                      (Number(l.tvlInUSD) || 0) - (Number(e.tvlInUSD) || 0)
                  )[0];
            return (
              e || {
                chainId: m.baseChain.chainId,
                protocol: m.protocols[0],
                tokens: m.baseToken.address,
              }
            );
          }, [ed, m.baseChain, m.protocols, m.baseToken]),
          ef = (0, ts.useMemo)(
            () =>
              eh
                ? [
                    {
                      address: null == eh ? void 0 : eh.tokens,
                      chainId: null == eh ? void 0 : eh.chainId,
                    },
                  ]
                : [],
            [eh]
          ),
          { symbolsMap: em } = (0, no.B)(ef);
        return (0, B.jsxs)("div", {
          onClick: () => {
            y((0, tp.Us)());
          },
          className: ""
            .concat(
              nW().BondModal_wrapper,
              " animate__animated animate__fadeIn "
            )
            .concat(!C.ModalsReducer.bondModal.open && g && "animate__fadeOut"),
          children: [
            (0, B.jsx)(nH.u, {
              id: "bond-tooltip",
              className: "chart_box_header_tooltip_no_width",
              noArrow: !0,
              clickable: !0,
            }),
            (0, B.jsxs)("section", {
              onClick: (e) => {
                e.stopPropagation();
              },
              ref: b,
              className: nW().BondModal_container,
              children: [
                (0, B.jsx)("div", { className: nW().BondModal_leftGlow }),
                (0, B.jsx)("div", { className: nW().BondModal_rightGlow }),
                (0, B.jsx)(tf(), {
                  onClick: () => {
                    y((0, tp.Us)());
                  },
                  src: ty,
                  alt: "close",
                  className: nW().BondModal_close,
                }),
                (0, B.jsx)("div", {
                  className: nW().BondModal_head,
                  children: (0, B.jsx)("div", {
                    className: nW().BondModal_head_left,
                    children: (0, B.jsx)("h1", {
                      children: "Bond Your Deposit",
                    }),
                  }),
                }),
                (0, B.jsx)("div", { className: nW().breakLine }),
                (0, B.jsxs)("div", {
                  className: "mt-4 ".concat(nW().BondModal_strategy_box),
                  children: [
                    (0, B.jsxs)("div", {
                      className: nW().BondModal_strategy_left,
                      children: [
                        (0, B.jsx)("h1", { children: "Current Strategy" }),
                        (0, B.jsxs)("div", {
                          className: nW().BondModal_strategy_param_box,
                          children: [
                            (0, B.jsx)("div", {
                              style: {
                                backgroundImage: "url(".concat(
                                  (0, tI.tY)(m.vaultId, "vaults"),
                                  ")"
                                ),
                              },
                            }),
                            (0, B.jsx)("p", {
                              className: "gradient-text uppercase",
                              children: eh
                                ? ""
                                    .concat(
                                      null == eh ? void 0 : eh.protocol,
                                      " "
                                    )
                                    .concat(
                                      em[
                                        null !==
                                          (c =
                                            null == eh ? void 0 : eh.tokens) &&
                                        void 0 !== c
                                          ? c
                                          : ""
                                      ]
                                    )
                                : (0, B.jsx)(nr.Z, { className: "w-5 h-5" }),
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, B.jsxs)("div", {
                      className: nW().BondModal_strategy_right,
                      children: [
                        (0, B.jsx)("h1", { children: "Rewards" }),
                        (0, B.jsx)("div", {
                          className: "flex items-center gap-2",
                          children: (0, B.jsxs)("p", {
                            className: "!text-[15px] animate-fadeinReallyFast",
                            children: [
                              eu
                                ? (0, B.jsx)(nr.Z, {
                                    className: "w-5 h-5 mx-auto",
                                  })
                                : ec
                                ? "".concat(
                                    (
                                      (null !==
                                        (d =
                                          null === (l = ec[m.vaultId]) ||
                                          void 0 === l
                                            ? void 0
                                            : l.movingAverageAPY) &&
                                      void 0 !== d
                                        ? d
                                        : 0) * 100
                                    ).toFixed(2),
                                    "%"
                                  )
                                : "APY",
                              " ",
                              "0" !== el.newEarnings &&
                                (0, B.jsxs)(B.Fragment, {
                                  children: [
                                    (0, B.jsx)("span", {
                                      className: "!text-white !text-[15px]",
                                      children: "+",
                                    }),
                                    (0, B.jsx)("a", {
                                      "data-tooltip-id": "bond-tooltip",
                                      "data-tooltip-content":
                                        "You'll earn more points when bonding",
                                      className:
                                        "strike-through !text-white !text-[15px]",
                                      children: el.normalEarnings,
                                    }),
                                    " ",
                                    (0, B.jsxs)("span", {
                                      className: "!text-white !text-[15px]",
                                      children: [
                                        el.newEarnings,
                                        " Points / Day",
                                      ],
                                    }),
                                  ],
                                }),
                            ],
                          }),
                        }),
                      ],
                    }),
                  ],
                }),
                (0, B.jsx)("div", { className: nW().breakLine }),
                (0, B.jsx)("div", {
                  className: "mt-8 mb-4 ".concat(
                    nW().BondModal_select_container_box
                  ),
                  children: (0, B.jsx)(DragScale_DragScale, {
                    icon: "/wallet-noya.svg",
                    type: "deposit",
                    tmpBalance: $,
                    balance: $,
                    amount: P,
                    selectedAsset: "",
                    setSelectedAmount: I,
                  }),
                }),
                (0, B.jsxs)("div", {
                  className:
                    "!flex !items-start relative !max-w-[400px] gap-1 !mt-4 !mb-8 !mx-auto !text-[##FFFFFFC7]",
                  children: [
                    (0, B.jsx)(tf(), {
                      src: "/info-outline.svg",
                      width: 20,
                      height: 20,
                      alt: "info",
                    }),
                    (0, B.jsxs)("p", {
                      className:
                        "font-EuclidCircularB text-[12px] font-normal text-[#FFFFFFC7]",
                      children: [
                        "You will receive daily points with a multiplier if you bond your deposit amount for any time duration. The longer the period, the higher the points & the multiplier. Visit",
                        " ",
                        (0, B.jsx)("a", {
                          href: "https://docs.noya.ai/audits-and-risk/space-race",
                          target: "_blank",
                          rel: "noopener noreferrer",
                          className: "hover:text-[#46F243BF]",
                          children: (0, B.jsx)("span", {
                            className:
                              "font-extrabold font-EuclidCircularB text-[12px] text-[#FFFFFFC7] underline",
                            children: "Space Race Docs",
                          }),
                        }),
                        " ",
                        "for more information.",
                      ],
                    }),
                  ],
                }),
                (0, B.jsx)("p", {
                  className:
                    "font-EuclidCircularB relative mb-3 text-[12px] font-normal text-[#FFFFFFC7]",
                  children: "Select bond duration:",
                }),
                (0, B.jsx)("div", {
                  className:
                    "w-full flex items-center max-w-[400px] mx-auto relative justify-center mb-8 gap-2",
                  children: [
                    { duration: "3 Months", multiplier: "1.2x" },
                    { duration: "6 Months", multiplier: "1.6x" },
                    { duration: "1 Year", multiplier: "2.0x" },
                  ].map((e, l) =>
                    (0, B.jsxs)(
                      "div",
                      {
                        className: "!w-fit flex-1 ".concat(
                          G !== e.duration ? "hover-button-wrapper !mt-0" : "",
                          " !relative"
                        ),
                        children: [
                          (0, B.jsx)("button", {
                            onClick: () => {
                              Q(e.duration);
                            },
                            className: "".concat(
                              G !== e.duration
                                ? "hover-button"
                                : "moving-bg border-solid border-transparent border",
                              " rounded-[5px] !mt-0 cursor-pointer !w-full !h-[33px] font-RussoOne text-white text-[14px]"
                            ),
                            children: e.duration,
                          }),
                          (0, B.jsxs)("p", {
                            className:
                              "absolute top-[calc(100%+4px)] left-0 w-full text-center text-[#797979] font-EuclidCircularB font-light text-[14px]",
                            children: [e.multiplier, " multiplier"],
                          }),
                        ],
                      },
                      l
                    )
                  ),
                }),
                (0, B.jsx)("button", {
                  className:
                    "moving-bg w-[185px] mt-4 h-[40px] rounded-[5px] text-white font-RussoOne font-normal text-[18px]",
                  onClick: () => {
                    "" === P
                      ? (0, t6.x)("Please select an amount", "warning")
                      : bond();
                  },
                  children:
                    "Bond" === N
                      ? "Bond Deposit"
                      : "Loading" === N
                      ? "Loading..."
                      : "Approve",
                }),
                (0, B.jsxs)("p", {
                  className:
                    "font-EuclidCircularB mt-2 relative text-center w-full max-w-[400px] text-[12px] font-normal text-[#FFFFFF80]",
                  children: [
                    "Your points multiplier:",
                    " ",
                    "3 Months" === G &&
                      (0, B.jsx)("span", {
                        className:
                          "text-[16px] animate-fadeinReallyFast font-bold font-EuclidCircularB text-[#FFFFFF80]",
                        children: "x1.2",
                      }),
                    "6 Months" === G &&
                      (0, B.jsx)("span", {
                        className:
                          "text-[16px] animate-fadeinReallyFast font-bold font-EuclidCircularB text-[#FFFFFF80]",
                        children: "x1.6",
                      }),
                    "1 Year" === G &&
                      (0, B.jsx)("span", {
                        className:
                          "text-[16px] animate-fadeinReallyFast font-bold font-EuclidCircularB text-[#FFFFFF80]",
                        children: "x2",
                      }),
                  ],
                }),
              ],
            }),
          ],
        });
      }
      function Modals() {
        let e = (0, tc.C)((e) => e.ModalsReducer),
          [l, c] = (0, ts.useState)(!1),
          [d, m] = (0, ts.useState)(!1),
          [g, y] = (0, ts.useState)(!1),
          [b, C] = (0, ts.useState)(!1),
          [P, I] = (0, ts.useState)(!1),
          [N, { data: F }] = (0, ng.oV)(),
          [V, G] = (0, ts.useState)(!1),
          { address: Q } = (0, tu.Z)();
        return (
          (0, ts.useEffect)(() => {}, [Q]),
          (0, ts.useEffect)(() => {
            e.depositModal.open
              ? c(!0)
              : setTimeout(() => {
                  c(!1);
                }, 300),
              e.bondModal.open
                ? m(!0)
                : setTimeout(() => {
                    m(!1);
                  }, 300),
              e.withdrawModal.open
                ? y(!0)
                : setTimeout(() => {
                    y(!1);
                  }, 300),
              e.referralModal.open
                ? C(!0)
                : setTimeout(() => {
                    C(!1);
                  }, 300),
              e.verifyProofModal.visible
                ? I(!0)
                : setTimeout(() => {
                    I(!1);
                  }, 300);
          }, [
            e.depositModal.open,
            e.bondModal.open,
            e.withdrawModal.open,
            e.referralModal.open,
            e.verifyProofModal.visible,
          ]),
          (0, nn.Zf)(void 0, { pollingInterval: 3e5 }),
          (0, B.jsxs)(B.Fragment, {
            children: [
              Q &&
                F &&
                (0, B.jsx)(MessagePopUp, {
                  address: Q,
                  notification: F,
                  open: V,
                  onClose: () => G(!1),
                }),
              e.walletPopUp && (0, B.jsx)(ConnectPopUp, {}),
              l &&
                (0, B.jsx)(DepositModal, { data: e.depositModal, display: l }),
              d && (0, B.jsx)(BondModal, { data: e.bondModal, display: d }),
              g &&
                (0, B.jsx)(WithdrawModal, {
                  data: e.withdrawModal,
                  display: g,
                }),
              b && (0, B.jsx)(ReferralModal, { display: b }),
              e.openDrawer && (0, B.jsx)(Drawer, {}),
              e.watchVideoPopup && (0, B.jsx)(Modals_WatchVideoPopup, {}),
              e.successModal.visible &&
                (0, B.jsx)(SuccessModal, { type: e.successModal.type }),
              e.watchZkmlVideoPopup && (0, B.jsx)(ZkmlVideo, {}),
              P &&
                (0, B.jsx)(VerifyProofModal, {
                  display: P,
                  input: e.verifyProofModal.input,
                  output: e.verifyProofModal.output,
                  date: e.verifyProofModal.date,
                  proof: e.verifyProofModal.proof,
                  publicInputs: e.verifyProofModal.publicInputs,
                  verifierLink: e.verifyProofModal.verifierLink,
                  otherInfo: e.verifyProofModal.otherInfo,
                }),
            ],
          })
        );
      }
      var nG = c(89239);
      let nQ = {
          selectedVault: {
            bondingManager: "0x0",
            tokens: [],
            name: "",
            vaultId: "",
            chains: [],
            protocols: [],
            risk: 0,
            accountingManagerAddress: "0x0",
            baseChain: { chainId: 1, chainName: "Ethereum" },
            baseToken: {
              address: "0x0",
              decimals: 18,
              symbol: "ETH",
              chainId: 1,
            },
            type: np.g9.ETH,
            description: "",
            accessLevels: [],
          },
          OperationSystem: "unknown",
          showAnnouncement: !0,
        },
        n$ = (0, nG.oM)({
          name: "Portfolio",
          initialState: nQ,
          reducers: {
            selectVault: (e, l) => {
              let { payload: c } = l;
              e.selectedVault = c;
            },
            closeAnnouncement: (e) => {
              e.showAnnouncement = !1;
            },
            setOs: (e, l) => {
              let { payload: c } = l;
              e.OperationSystem = c;
            },
          },
        }),
        { selectVault: nK, setOs: nZ, closeAnnouncement: nY } = n$.actions;
      var nX = n$.reducer,
        nJ = c(99013);
      let n0 = (0, nJ.Z)("local"),
        n1 = (0, ti.UY)({
          PortfolioReducer: persistReducer({ key: "app", storage: n0 }, nX),
          WalletReducer: persistReducer({ key: "wallet", storage: n0 }, nC.ZP),
          ModalsReducer: tp.ZP,
          [t9.mA.reducerPath]: t9.mA.reducer,
          [t9.cB.reducerPath]: t9.cB.reducer,
          [t9.Hs.reducerPath]: t9.Hs.reducer,
          [t9.Bl.reducerPath]: t9.Bl.reducer,
        });
      var n2 = c(66034);
      let n6 = (0, nG.xC)({
        reducer: n1,
        middleware: (e) =>
          e({ serializableCheck: { ignoredActions: [e8, e9, te, tt, tn, tr] } })
            .concat(t9.mA.middleware)
            .concat(t9.cB.middleware)
            .concat(t9.Hs.middleware)
            .concat(t9.Bl.middleware),
      });
      (0, n2.sj)(n6.dispatch), c(36230), c(58576), c(93241);
      var n3 = c(83893),
        n5 = c.n(n3);
      c(78402);
      var n4 = c(68563),
        n7 = c(21481),
        initQueue = () => {
          window.va ||
            (window.va = function (...e) {
              (window.vaq = window.vaq || []).push(e);
            });
        };
      function isBrowser() {
        return "undefined" != typeof window;
      }
      function detectEnvironment() {
        return "production";
      }
      function isDevelopment() {
        return (
          "development" ===
          (function () {
            let e = isBrowser() ? window.vam : detectEnvironment();
            return e || "production";
          })()
        );
      }
      function Analytics(e) {
        return (
          (0, ts.useEffect)(() => {
            var l;
            e.beforeSend &&
              (null == (l = window.va) ||
                l.call(window, "beforeSend", e.beforeSend));
          }, [e.beforeSend]),
          (0, ts.useEffect)(() => {
            !(function (e = { debug: !0 }) {
              var l;
              if (!isBrowser()) return;
              (function (e = "auto") {
                if ("auto" === e) {
                  window.vam = detectEnvironment();
                  return;
                }
                window.vam = e;
              })(e.mode),
                initQueue(),
                e.beforeSend &&
                  (null == (l = window.va) ||
                    l.call(window, "beforeSend", e.beforeSend));
              let c = e.scriptSrc
                ? e.scriptSrc
                : isDevelopment()
                ? "https://va.vercel-scripts.com/v1/script.debug.js"
                : e.basePath
                ? `${e.basePath}/insights/script.js`
                : "/_vercel/insights/script.js";
              if (document.head.querySelector(`script[src*="${c}"]`)) return;
              let d = document.createElement("script");
              (d.src = c),
                (d.defer = !0),
                (d.dataset.sdkn =
                  "@vercel/analytics" + (e.framework ? `/${e.framework}` : "")),
                (d.dataset.sdkv = "1.5.0"),
                e.disableAutoTrack && (d.dataset.disableAutoTrack = "1"),
                e.endpoint
                  ? (d.dataset.endpoint = e.endpoint)
                  : e.basePath &&
                    (d.dataset.endpoint = `${e.basePath}/insights`),
                e.dsn && (d.dataset.dsn = e.dsn),
                (d.onerror = () => {
                  let e = isDevelopment()
                    ? "Please check if any ad blockers are enabled and try again."
                    : "Be sure to enable Web Analytics for your project and deploy again. See https://vercel.com/docs/analytics/quickstart for more information.";
                  console.log(
                    `[Vercel Web Analytics] Failed to load script from ${c}. ${e}`
                  );
                }),
                isDevelopment() &&
                  !1 === e.debug &&
                  (d.dataset.debug = "false"),
                document.head.appendChild(d);
            })({
              framework: e.framework || "react",
              basePath:
                e.basePath ??
                (function () {
                  if (void 0 !== n7 && void 0 !== n7.env)
                    return n7.env.REACT_APP_VERCEL_OBSERVABILITY_BASEPATH;
                })(),
              ...(void 0 !== e.route && { disableAutoTrack: !0 }),
              ...e,
            });
          }, []),
          (0, ts.useEffect)(() => {
            e.route &&
              e.path &&
              (function ({ route: e, path: l }) {
                var c;
                null == (c = window.va) ||
                  c.call(window, "pageview", { route: e, path: l });
              })({ route: e.route, path: e.path });
          }, [e.route, e.path]),
          null
        );
      }
      c(22919);
      var n8 = c(92623),
        n9 = "#1A1B1F",
        re = {
          blue: { accentColor: "#3898FF", accentColorForeground: "#FFF" },
          green: { accentColor: "#4BD166", accentColorForeground: n9 },
          orange: { accentColor: "#FF983D", accentColorForeground: n9 },
          pink: { accentColor: "#FF7AB8", accentColorForeground: n9 },
          purple: { accentColor: "#7A70FF", accentColorForeground: "#FFF" },
          red: { accentColor: "#FF6257", accentColorForeground: "#FFF" },
        },
        rt = re.blue,
        darkTheme = ({
          accentColor: e = rt.accentColor,
          accentColorForeground: l = rt.accentColorForeground,
          ...c
        } = {}) => ({
          ...(0, n8.w)(c),
          colors: {
            accentColor: e,
            accentColorForeground: l,
            actionButtonBorder: "rgba(255, 255, 255, 0.04)",
            actionButtonBorderMobile: "rgba(255, 255, 255, 0.08)",
            actionButtonSecondaryBackground: "rgba(255, 255, 255, 0.08)",
            closeButton: "rgba(224, 232, 255, 0.6)",
            closeButtonBackground: "rgba(255, 255, 255, 0.08)",
            connectButtonBackground: n9,
            connectButtonBackgroundError: "#FF494A",
            connectButtonInnerBackground:
              "linear-gradient(0deg, rgba(255, 255, 255, 0.075), rgba(255, 255, 255, 0.15))",
            connectButtonText: "#FFF",
            connectButtonTextError: "#FFF",
            connectionIndicator: "#30E000",
            downloadBottomCardBackground:
              "linear-gradient(126deg, rgba(0, 0, 0, 0) 9.49%, rgba(120, 120, 120, 0.2) 71.04%), #1A1B1F",
            downloadTopCardBackground:
              "linear-gradient(126deg, rgba(120, 120, 120, 0.2) 9.49%, rgba(0, 0, 0, 0) 71.04%), #1A1B1F",
            error: "#FF494A",
            generalBorder: "rgba(255, 255, 255, 0.08)",
            generalBorderDim: "rgba(255, 255, 255, 0.04)",
            menuItemBackground: "rgba(224, 232, 255, 0.1)",
            modalBackdrop: "rgba(0, 0, 0, 0.5)",
            modalBackground: "#1A1B1F",
            modalBorder: "rgba(255, 255, 255, 0.08)",
            modalText: "#FFF",
            modalTextDim: "rgba(224, 232, 255, 0.3)",
            modalTextSecondary: "rgba(255, 255, 255, 0.6)",
            profileAction: "rgba(224, 232, 255, 0.1)",
            profileActionHover: "rgba(224, 232, 255, 0.2)",
            profileForeground: "rgba(224, 232, 255, 0.05)",
            selectedOptionBorder: "rgba(224, 232, 255, 0.1)",
            standby: "#FFD641",
          },
          shadows: {
            connectButton: "0px 4px 12px rgba(0, 0, 0, 0.1)",
            dialog: "0px 8px 32px rgba(0, 0, 0, 0.32)",
            profileDetailsAction: "0px 2px 6px rgba(37, 41, 46, 0.04)",
            selectedOption: "0px 2px 6px rgba(0, 0, 0, 0.24)",
            selectedWallet: "0px 2px 6px rgba(0, 0, 0, 0.24)",
            walletLogo: "0px 2px 16px rgba(0, 0, 0, 0.16)",
          },
        });
      darkTheme.accentColors = re;
      var components_GlobalLoading = function () {
          let e = (0, tc.C)(
            (e) =>
              Object.values(e.mainApi.queries).some(
                (e) => (null == e ? void 0 : e.status) === "pending"
              ) ||
              Object.values(e.dataApi.queries).some(
                (e) => (null == e ? void 0 : e.status) === "pending"
              ) ||
              Object.values(e.schedulerApi.queries).some(
                (e) => (null == e ? void 0 : e.status) === "pending"
              )
          );
          return (0, B.jsx)(nr.Z, {
            className:
              "z-50 w-8 h-8 fixed bottom-10 right-10 select-none pointer-events-none transition-opacity duration-300 ".concat(
                e ? "opacity-100" : "opacity-0 animate-none"
              ),
          });
        },
        rn = c(16902),
        rr = c(60527),
        ri = c(40053),
        ro = c(77268),
        ra = c(60954),
        rs = class extends ra.l {
          constructor(e = {}) {
            super(), (this.config = e), (this.#e = new Map());
          }
          #e;
          build(e, l, c) {
            let d = l.queryKey,
              m = l.queryHash ?? (0, rr.Rm)(d, l),
              g = this.get(m);
            return (
              g ||
                ((g = new ri.A({
                  client: e,
                  queryKey: d,
                  queryHash: m,
                  options: e.defaultQueryOptions(l),
                  state: c,
                  defaultOptions: e.getQueryDefaults(d),
                })),
                this.add(g)),
              g
            );
          }
          add(e) {
            this.#e.has(e.queryHash) ||
              (this.#e.set(e.queryHash, e),
              this.notify({ type: "added", query: e }));
          }
          remove(e) {
            let l = this.#e.get(e.queryHash);
            l &&
              (e.destroy(),
              l === e && this.#e.delete(e.queryHash),
              this.notify({ type: "removed", query: e }));
          }
          clear() {
            ro.Vr.batch(() => {
              this.getAll().forEach((e) => {
                this.remove(e);
              });
            });
          }
          get(e) {
            return this.#e.get(e);
          }
          getAll() {
            return [...this.#e.values()];
          }
          find(e) {
            let l = { exact: !0, ...e };
            return this.getAll().find((e) => (0, rr._x)(l, e));
          }
          findAll(e = {}) {
            let l = this.getAll();
            return Object.keys(e).length > 0
              ? l.filter((l) => (0, rr._x)(e, l))
              : l;
          }
          notify(e) {
            ro.Vr.batch(() => {
              this.listeners.forEach((l) => {
                l(e);
              });
            });
          }
          onFocus() {
            ro.Vr.batch(() => {
              this.getAll().forEach((e) => {
                e.onFocus();
              });
            });
          }
          onOnline() {
            ro.Vr.batch(() => {
              this.getAll().forEach((e) => {
                e.onOnline();
              });
            });
          }
        },
        rl = c(44344),
        rc = class extends ra.l {
          constructor(e = {}) {
            super(),
              (this.config = e),
              (this.#t = new Set()),
              (this.#n = new Map()),
              (this.#r = 0);
          }
          #t;
          #n;
          #r;
          build(e, l, c) {
            let d = new rl.m({
              mutationCache: this,
              mutationId: ++this.#r,
              options: e.defaultMutationOptions(l),
              state: c,
            });
            return this.add(d), d;
          }
          add(e) {
            this.#t.add(e);
            let l = scopeFor(e);
            if ("string" == typeof l) {
              let c = this.#n.get(l);
              c ? c.push(e) : this.#n.set(l, [e]);
            }
            this.notify({ type: "added", mutation: e });
          }
          remove(e) {
            if (this.#t.delete(e)) {
              let l = scopeFor(e);
              if ("string" == typeof l) {
                let c = this.#n.get(l);
                if (c) {
                  if (c.length > 1) {
                    let l = c.indexOf(e);
                    -1 !== l && c.splice(l, 1);
                  } else c[0] === e && this.#n.delete(l);
                }
              }
            }
            this.notify({ type: "removed", mutation: e });
          }
          canRun(e) {
            let l = scopeFor(e);
            if ("string" != typeof l) return !0;
            {
              let c = this.#n.get(l),
                d = c?.find((e) => "pending" === e.state.status);
              return !d || d === e;
            }
          }
          runNext(e) {
            let l = scopeFor(e);
            if ("string" != typeof l) return Promise.resolve();
            {
              let c = this.#n.get(l)?.find((l) => l !== e && l.state.isPaused);
              return c?.continue() ?? Promise.resolve();
            }
          }
          clear() {
            ro.Vr.batch(() => {
              this.#t.forEach((e) => {
                this.notify({ type: "removed", mutation: e });
              }),
                this.#t.clear(),
                this.#n.clear();
            });
          }
          getAll() {
            return Array.from(this.#t);
          }
          find(e) {
            let l = { exact: !0, ...e };
            return this.getAll().find((e) => (0, rr.X7)(l, e));
          }
          findAll(e = {}) {
            return this.getAll().filter((l) => (0, rr.X7)(e, l));
          }
          notify(e) {
            ro.Vr.batch(() => {
              this.listeners.forEach((l) => {
                l(e);
              });
            });
          }
          resumePausedMutations() {
            let e = this.getAll().filter((e) => e.state.isPaused);
            return ro.Vr.batch(() =>
              Promise.all(e.map((e) => e.continue().catch(rr.ZT)))
            );
          }
        };
      function scopeFor(e) {
        return e.options.scope?.id;
      }
      var ru = c(87125),
        rd = c(34498);
      function infiniteQueryBehavior(e) {
        return {
          onFetch: (l, c) => {
            let d = l.options,
              m = l.fetchOptions?.meta?.fetchMore?.direction,
              g = l.state.data?.pages || [],
              y = l.state.data?.pageParams || [],
              b = { pages: [], pageParams: [] },
              C = 0,
              fetchFn = async () => {
                let c = !1,
                  addSignalProperty = (e) => {
                    Object.defineProperty(e, "signal", {
                      enumerable: !0,
                      get: () => (
                        l.signal.aborted
                          ? (c = !0)
                          : l.signal.addEventListener("abort", () => {
                              c = !0;
                            }),
                        l.signal
                      ),
                    });
                  },
                  P = (0, rr.cG)(l.options, l.fetchOptions),
                  fetchPage = async (e, d, m) => {
                    if (c) return Promise.reject();
                    if (null == d && e.pages.length) return Promise.resolve(e);
                    let g = {
                      client: l.client,
                      queryKey: l.queryKey,
                      pageParam: d,
                      direction: m ? "backward" : "forward",
                      meta: l.options.meta,
                    };
                    addSignalProperty(g);
                    let y = await P(g),
                      { maxPages: b } = l.options,
                      C = m ? rr.Ht : rr.VX;
                    return {
                      pages: C(e.pages, y, b),
                      pageParams: C(e.pageParams, d, b),
                    };
                  };
                if (m && g.length) {
                  let e = "backward" === m,
                    l = e ? getPreviousPageParam : getNextPageParam,
                    c = { pages: g, pageParams: y },
                    C = l(d, c);
                  b = await fetchPage(c, C, e);
                } else {
                  let l = e ?? g.length;
                  do {
                    let e =
                      0 === C
                        ? y[0] ?? d.initialPageParam
                        : getNextPageParam(d, b);
                    if (C > 0 && null == e) break;
                    (b = await fetchPage(b, e)), C++;
                  } while (C < l);
                }
                return b;
              };
            l.options.persister
              ? (l.fetchFn = () =>
                  l.options.persister?.(
                    fetchFn,
                    {
                      client: l.client,
                      queryKey: l.queryKey,
                      meta: l.options.meta,
                      signal: l.signal,
                    },
                    c
                  ))
              : (l.fetchFn = fetchFn);
          },
        };
      }
      function getNextPageParam(e, { pages: l, pageParams: c }) {
        let d = l.length - 1;
        return l.length > 0 ? e.getNextPageParam(l[d], l, c[d], c) : void 0;
      }
      function getPreviousPageParam(e, { pages: l, pageParams: c }) {
        return l.length > 0
          ? e.getPreviousPageParam?.(l[0], l, c[0], c)
          : void 0;
      }
      var rp = class {
          #i;
          #o;
          #a;
          #s;
          #l;
          #c;
          #u;
          #d;
          constructor(e = {}) {
            (this.#i = e.queryCache || new rs()),
              (this.#o = e.mutationCache || new rc()),
              (this.#a = e.defaultOptions || {}),
              (this.#s = new Map()),
              (this.#l = new Map()),
              (this.#c = 0);
          }
          mount() {
            this.#c++,
              1 === this.#c &&
                ((this.#u = ru.j.subscribe(async (e) => {
                  e && (await this.resumePausedMutations(), this.#i.onFocus());
                })),
                (this.#d = rd.N.subscribe(async (e) => {
                  e && (await this.resumePausedMutations(), this.#i.onOnline());
                })));
          }
          unmount() {
            this.#c--,
              0 === this.#c &&
                (this.#u?.(),
                (this.#u = void 0),
                this.#d?.(),
                (this.#d = void 0));
          }
          isFetching(e) {
            return this.#i.findAll({ ...e, fetchStatus: "fetching" }).length;
          }
          isMutating(e) {
            return this.#o.findAll({ ...e, status: "pending" }).length;
          }
          getQueryData(e) {
            let l = this.defaultQueryOptions({ queryKey: e });
            return this.#i.get(l.queryHash)?.state.data;
          }
          ensureQueryData(e) {
            let l = this.defaultQueryOptions(e),
              c = this.#i.build(this, l),
              d = c.state.data;
            return void 0 === d
              ? this.fetchQuery(e)
              : (e.revalidateIfStale &&
                  c.isStaleByTime((0, rr.KC)(l.staleTime, c)) &&
                  this.prefetchQuery(l),
                Promise.resolve(d));
          }
          getQueriesData(e) {
            return this.#i.findAll(e).map(({ queryKey: e, state: l }) => {
              let c = l.data;
              return [e, c];
            });
          }
          setQueryData(e, l, c) {
            let d = this.defaultQueryOptions({ queryKey: e }),
              m = this.#i.get(d.queryHash),
              g = m?.state.data,
              y = (0, rr.SE)(l, g);
            if (void 0 !== y)
              return this.#i.build(this, d).setData(y, { ...c, manual: !0 });
          }
          setQueriesData(e, l, c) {
            return ro.Vr.batch(() =>
              this.#i
                .findAll(e)
                .map(({ queryKey: e }) => [e, this.setQueryData(e, l, c)])
            );
          }
          getQueryState(e) {
            let l = this.defaultQueryOptions({ queryKey: e });
            return this.#i.get(l.queryHash)?.state;
          }
          removeQueries(e) {
            let l = this.#i;
            ro.Vr.batch(() => {
              l.findAll(e).forEach((e) => {
                l.remove(e);
              });
            });
          }
          resetQueries(e, l) {
            let c = this.#i;
            return ro.Vr.batch(
              () => (
                c.findAll(e).forEach((e) => {
                  e.reset();
                }),
                this.refetchQueries({ type: "active", ...e }, l)
              )
            );
          }
          cancelQueries(e, l = {}) {
            let c = { revert: !0, ...l },
              d = ro.Vr.batch(() => this.#i.findAll(e).map((e) => e.cancel(c)));
            return Promise.all(d).then(rr.ZT).catch(rr.ZT);
          }
          invalidateQueries(e, l = {}) {
            return ro.Vr.batch(() =>
              (this.#i.findAll(e).forEach((e) => {
                e.invalidate();
              }),
              e?.refetchType === "none")
                ? Promise.resolve()
                : this.refetchQueries(
                    { ...e, type: e?.refetchType ?? e?.type ?? "active" },
                    l
                  )
            );
          }
          refetchQueries(e, l = {}) {
            let c = { ...l, cancelRefetch: l.cancelRefetch ?? !0 },
              d = ro.Vr.batch(() =>
                this.#i
                  .findAll(e)
                  .filter((e) => !e.isDisabled())
                  .map((e) => {
                    let l = e.fetch(void 0, c);
                    return (
                      c.throwOnError || (l = l.catch(rr.ZT)),
                      "paused" === e.state.fetchStatus ? Promise.resolve() : l
                    );
                  })
              );
            return Promise.all(d).then(rr.ZT);
          }
          fetchQuery(e) {
            let l = this.defaultQueryOptions(e);
            void 0 === l.retry && (l.retry = !1);
            let c = this.#i.build(this, l);
            return c.isStaleByTime((0, rr.KC)(l.staleTime, c))
              ? c.fetch(l)
              : Promise.resolve(c.state.data);
          }
          prefetchQuery(e) {
            return this.fetchQuery(e).then(rr.ZT).catch(rr.ZT);
          }
          fetchInfiniteQuery(e) {
            return (
              (e.behavior = infiniteQueryBehavior(e.pages)), this.fetchQuery(e)
            );
          }
          prefetchInfiniteQuery(e) {
            return this.fetchInfiniteQuery(e).then(rr.ZT).catch(rr.ZT);
          }
          ensureInfiniteQueryData(e) {
            return (
              (e.behavior = infiniteQueryBehavior(e.pages)),
              this.ensureQueryData(e)
            );
          }
          resumePausedMutations() {
            return rd.N.isOnline()
              ? this.#o.resumePausedMutations()
              : Promise.resolve();
          }
          getQueryCache() {
            return this.#i;
          }
          getMutationCache() {
            return this.#o;
          }
          getDefaultOptions() {
            return this.#a;
          }
          setDefaultOptions(e) {
            this.#a = e;
          }
          setQueryDefaults(e, l) {
            this.#s.set((0, rr.Ym)(e), { queryKey: e, defaultOptions: l });
          }
          getQueryDefaults(e) {
            let l = [...this.#s.values()],
              c = {};
            return (
              l.forEach((l) => {
                (0, rr.to)(e, l.queryKey) && Object.assign(c, l.defaultOptions);
              }),
              c
            );
          }
          setMutationDefaults(e, l) {
            this.#l.set((0, rr.Ym)(e), { mutationKey: e, defaultOptions: l });
          }
          getMutationDefaults(e) {
            let l = [...this.#l.values()],
              c = {};
            return (
              l.forEach((l) => {
                (0, rr.to)(e, l.mutationKey) &&
                  Object.assign(c, l.defaultOptions);
              }),
              c
            );
          }
          defaultQueryOptions(e) {
            if (e._defaulted) return e;
            let l = {
              ...this.#a.queries,
              ...this.getQueryDefaults(e.queryKey),
              ...e,
              _defaulted: !0,
            };
            return (
              l.queryHash || (l.queryHash = (0, rr.Rm)(l.queryKey, l)),
              void 0 === l.refetchOnReconnect &&
                (l.refetchOnReconnect = "always" !== l.networkMode),
              void 0 === l.throwOnError && (l.throwOnError = !!l.suspense),
              !l.networkMode && l.persister && (l.networkMode = "offlineFirst"),
              l.queryFn === rr.CN && (l.enabled = !1),
              l
            );
          }
          defaultMutationOptions(e) {
            return e?._defaulted
              ? e
              : {
                  ...this.#a.mutations,
                  ...(e?.mutationKey &&
                    this.getMutationDefaults(e.mutationKey)),
                  ...e,
                  _defaulted: !0,
                };
          }
          clear() {
            this.#i.clear(), this.#o.clear();
          }
        },
        rh = c(74732),
        rf = c(73662),
        rm = c(56266),
        rg = c.n(rm),
        ry = c(88299);
      /**
       * @license lucide-react v0.462.0 - ISC
       *
       * This source code is licensed under the ISC license.
       * See the LICENSE file in the root directory of this source tree.
       */ let rb = (0, ry.Z)("WalletMinimal", [
          ["path", { d: "M17 14h.01", key: "7oqj8z" }],
          [
            "path",
            {
              d: "M7 7h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14",
              key: "u1rqew",
            },
          ],
        ]),
        ConnectWalletOverlay = (e) => {
          let { children: l } = e,
            { isConnected: c } = (0, tu.Z)();
          return c
            ? (0, B.jsx)(B.Fragment, { children: l })
            : (0, B.jsxs)("div", {
                className: rg().overlay_wrapper,
                children: [
                  (0, B.jsx)("div", {
                    className: rg().overlay_content,
                    children: l,
                  }),
                  (0, B.jsx)("div", {
                    className: rg().overlay_blur,
                    children: (0, B.jsxs)("div", {
                      className: rg().connect_container,
                      children: [
                        (0, B.jsx)(rb, {
                          size: 48,
                          color: "#758bf0",
                          strokeWidth: 1.5,
                        }),
                        (0, B.jsx)("h2", { children: "Connect Wallet" }),
                        (0, B.jsx)("p", {
                          children:
                            "Connect your wallet to access your portfolio and start managing your assets",
                        }),
                        (0, B.jsx)(tb.NL.Custom, {
                          children: (e) => {
                            let { openConnectModal: l } = e;
                            return (0, B.jsx)("button", {
                              onClick: l,
                              className: rg().connect_button,
                              children: "Connect Wallet",
                            });
                          },
                        }),
                      ],
                    }),
                  }),
                ],
              });
        };
      Chart.register(CategoryScale),
        (Chart.defaults.font.family = "Euclid Circular B");
      let rv =
          ((y = !1),
          (b = (0, ti.MT)(
            function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : ta,
                l = arguments.length > 1 ? arguments[1] : void 0;
              switch (l.type) {
                case tr:
                  return persistStore_objectSpread({}, e, {
                    registry: [].concat(_toConsumableArray(e.registry), [
                      l.key,
                    ]),
                  });
                case e9:
                  var c = e.registry.indexOf(l.key),
                    d = _toConsumableArray(e.registry);
                  return (
                    d.splice(c, 1),
                    persistStore_objectSpread({}, e, {
                      registry: d,
                      bootstrapped: 0 === d.length,
                    })
                  );
                default:
                  return e;
              }
            },
            ta,
            g && g.enhancer ? g.enhancer : void 0
          )),
          (C = function (e) {
            b.dispatch({ type: tr, key: e });
          }),
          (P = function (e, l, c) {
            var d = { type: e9, payload: l, err: c, key: e };
            n6.dispatch(d),
              b.dispatch(d),
              y && I.getState().bootstrapped && (y(), (y = !1));
          }),
          (I = persistStore_objectSpread({}, b, {
            purge: function () {
              var e = [];
              return (
                n6.dispatch({
                  type: tn,
                  result: function (l) {
                    e.push(l);
                  },
                }),
                Promise.all(e)
              );
            },
            flush: function () {
              var e = [];
              return (
                n6.dispatch({
                  type: e8,
                  result: function (l) {
                    e.push(l);
                  },
                }),
                Promise.all(e)
              );
            },
            pause: function () {
              n6.dispatch({ type: te });
            },
            persist: function () {
              n6.dispatch({ type: tt, register: C, rehydrate: P });
            },
          })),
          (g && g.manualPersist) || I.persist(),
          I),
        rw = new rp();
      function App(e) {
        let { Component: l, pageProps: c } = e,
          d = (0, nw.useRouter)(),
          getDynamicCover = () =>
            d.pathname.includes("space")
              ? "https://app.noya.ai/space-cover.webp"
              : "https://app.noya.ai/noya-cover.webp";
        return (0, B.jsxs)(B.Fragment, {
          children: [
            (0, B.jsx)(n5(), {
              id: "GA-Script",
              strategy: "lazyOnload",
              src: "https://www.googletagmanager.com/gtag/js?id=G-QZ7G2KR9JM",
            }),
            (0, B.jsx)(n5(), {
              id: "GA-Script-command",
              strategy: "lazyOnload",
              children:
                "\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n        gtag('config', 'G-QZ7G2KR9JM', {\n        page_path: window.location.pathname,\n        });\n        ",
            }),
            (0, B.jsxs)(F(), {
              children: [
                (0, B.jsx)("title", {
                  children:
                    "NOYA - Scalable Omnichain DeFi Strategies using Smart Liquidity",
                }),
                (0, B.jsx)("meta", {
                  property: "application-name",
                  content:
                    "NOYA | Scalable Omnichain DeFi Strategies using Smart Liquidity",
                }),
                (0, B.jsx)("meta", {
                  name: "description",
                  content:
                    "NOYA executes scalable Omnichain DeFi strategies using AI and ZKML. These strategies are used to optimize yields, diversify risk, and maximize rewards.",
                }),
                (0, B.jsx)("meta", { name: "robots", content: "noodp" }),
                (0, B.jsx)("meta", {
                  httpEquiv: "Content-Language",
                  lang: "en-us",
                }),
                (0, B.jsx)("meta", {
                  name: "template",
                  content: "homepage-loggedout-longform",
                }),
                (0, B.jsx)("meta", { property: "og:title", content: "Noya" }),
                (0, B.jsx)("meta", {
                  property: "og:site_name",
                  content:
                    "NOYA | Scalable Omnichain DeFi Strategies using Smart Liquidity",
                }),
                (0, B.jsx)("meta", {
                  property: "og:description",
                  content:
                    "NOYA executes scalable Omnichain DeFi strategies using AI and ZKML. These strategies are used to optimize yields, diversify risk, and maximize rewards.",
                }),
                (0, B.jsx)("meta", {
                  property: "og:url",
                  content: "https://www.noya.ai",
                }),
                (0, B.jsx)("meta", { property: "og:type", content: "website" }),
                (0, B.jsx)("meta", {
                  property: "og:image",
                  content: getDynamicCover(),
                }),
                (0, B.jsx)("meta", {
                  property: "og:image:width",
                  content: "800",
                }),
                (0, B.jsx)("meta", {
                  property: "og:image:height",
                  content: "480",
                }),
                (0, B.jsx)("meta", {
                  name: "twitter:card",
                  content: "summary_large_image",
                }),
                (0, B.jsx)("meta", {
                  name: "twitter:site",
                  content: "@networknoya",
                }),
                (0, B.jsx)("meta", {
                  name: "twitter:title",
                  content:
                    "NOYA | Scalable Omnichain DeFi Strategies using Smart Liquidity",
                }),
                (0, B.jsx)("meta", {
                  name: "twitter:description",
                  content:
                    "NOYA executes scalable Omnichain DeFi strategies using AI and ZKML. These strategies are used to optimize yields, diversify risk, and maximize rewards.",
                }),
                (0, B.jsx)("meta", {
                  name: "twitter:image",
                  content: getDynamicCover(),
                }),
                (0, B.jsx)("meta", {
                  name: "viewport",
                  content: "width=device-width, initial-scale=1",
                }),
                (0, B.jsx)("link", {
                  rel: "shortcut icon",
                  href: "https://noya.ai/noya-logo.png",
                }),
                (0, B.jsx)("link", {
                  rel: "apple-touch-icon",
                  sizes: "180x180",
                  href: "/noya-logo.png",
                }),
                (0, B.jsx)("link", {
                  rel: "icon",
                  type: "image/jpg",
                  sizes: "32x32",
                  href: "/noya-logo.png",
                }),
                (0, B.jsx)("link", {
                  rel: "icon",
                  type: "image/jpg",
                  sizes: "16x16",
                  href: "/noya-logo.png",
                }),
                (0, B.jsx)("link", {
                  rel: "preload",
                  as: "video",
                  href: "/clicker-mount.wav",
                  type: "audio/wav",
                }),
                (0, B.jsx)("link", {
                  rel: "preload",
                  as: "video",
                  href: "/reward.wav",
                  type: "audio/wav",
                }),
                (0, B.jsx)("link", {
                  rel: "preload",
                  as: "video",
                  href: "/firstLoading.webm",
                  type: "video/webm",
                }),
                (0, B.jsx)("link", {
                  rel: "preload",
                  as: "video",
                  href: "/loading.mp4",
                  type: "video/mp4",
                }),
                (0, B.jsx)("link", {
                  rel: "preload",
                  as: "video",
                  href: "/firstLoading.mp4",
                  type: "video/mp4",
                }),
              ],
            }),
            (0, B.jsx)(V.zt, {
              store: n6,
              children: (0, B.jsxs)(tl, {
                persistor: rv,
                children: [
                  (0, B.jsx)(rn.F, {
                    config: t2.g,
                    children: (0, B.jsx)(rh.aH, {
                      client: rw,
                      children: (0, B.jsxs)(tb.pj, {
                        theme: darkTheme(),
                        initialChain: rf.u.id,
                        children: [
                          (0, B.jsx)(Modals, {}),
                          (0, B.jsx)(n4.x7, {
                            position: "top-center",
                            gutter: 12,
                            toastOptions: {
                              duration: 4e3,
                              style: {
                                background: "rgba(25, 23, 31, 0.95)",
                                color: "#ffffff",
                                border: "1px solid rgba(125, 111, 246, 0.3)",
                                borderRadius: "12px",
                                padding: "16px",
                                fontSize: "14px",
                                fontFamily: "Euclid Circular B, sans-serif",
                                fontWeight: "400",
                                backdropFilter: "blur(10px)",
                                boxShadow:
                                  "0px 0px 15px rgba(125, 111, 245, 0.25)",
                              },
                              success: {
                                style: {
                                  background: "rgba(25, 23, 31, 0.95)",
                                  border: "1px solid rgba(70, 242, 67, 0.4)",
                                  boxShadow:
                                    "0px 0px 15px rgba(70, 242, 67, 0.25)",
                                },
                                iconTheme: {
                                  primary: "#46f243",
                                  secondary: "#ffffff",
                                },
                              },
                              error: {
                                style: {
                                  background: "rgba(25, 23, 31, 0.95)",
                                  border: "1px solid rgba(255, 0, 0, 0.4)",
                                  boxShadow:
                                    "0px 0px 15px rgba(255, 0, 0, 0.25)",
                                },
                                iconTheme: {
                                  primary: "#ff0000",
                                  secondary: "#ffffff",
                                },
                              },
                              loading: {
                                style: {
                                  background: "rgba(25, 23, 31, 0.95)",
                                  border: "1px solid rgba(88, 225, 217, 0.4)",
                                  boxShadow:
                                    "0px 0px 15px rgba(88, 225, 217, 0.25)",
                                },
                                iconTheme: {
                                  primary: "#58e1d9",
                                  secondary: "#ffffff",
                                },
                              },
                            },
                          }),
                          (0, B.jsx)(Analytics, {}),
                          (0, B.jsx)(ConnectWalletOverlay, {
                            children: (0, B.jsx)(l, { ...c }),
                          }),
                        ],
                      }),
                    }),
                  }),
                  (0, B.jsx)(components_GlobalLoading, {}),
                ],
              }),
            }),
          ],
        });
      }
    },
    60715: function (e, l, c) {
      "use strict";
      c.d(l, {
        $h: function () {
          return I;
        },
        A2: function () {
          return ea;
        },
        A9: function () {
          return et;
        },
        CC: function () {
          return V;
        },
        KW: function () {
          return es;
        },
        L8: function () {
          return Y;
        },
        Lb: function () {
          return eo;
        },
        Mo: function () {
          return ec;
        },
        Sy: function () {
          return N;
        },
        Us: function () {
          return B;
        },
        Xk: function () {
          return P;
        },
        dl: function () {
          return $;
        },
        e1: function () {
          return Q;
        },
        gr: function () {
          return Z;
        },
        ir: function () {
          return en;
        },
        jl: function () {
          return C;
        },
        uT: function () {
          return F;
        },
        zW: function () {
          return G;
        },
      });
      var d = c(17296),
        m = c(89239);
      let g = {
          bondingManager: "0x0",
          vaultId: "",
          chains: [],
          protocols: [],
          tokens: [],
          accountingManagerAddress: "0x0",
          baseChain: { chainId: 1, chainName: "Ethereum" },
          baseToken: {
            address: "0x0",
            decimals: 18,
            symbol: "ETH",
            chainId: 1,
          },
          name: "",
          risk: 0,
          type: d.g9.others,
          accessLevels: [],
          description: "",
        },
        y = {
          currency: "USD",
          walletPopUp: !1,
          depositModal: { ...g, open: !1 },
          bondModal: { ...g, open: !1 },
          referralModal: { open: !1 },
          withdrawModal: { ...g, open: !1 },
          openDrawer: !1,
          watchVideoPopup: !1,
          successModal: { type: "waitlist", visible: !1 },
          watchZkmlVideoPopup: !1,
          verifyProofModal: {
            input: "",
            output: "",
            visible: !1,
            date: "",
            proof: "",
            publicInputs: "",
            verifierLink: "",
            otherInfo: void 0,
          },
          depositStatus: { pending: !1, asset: "", img: "", amount: 0 },
          withdrawStatus: { pending: !1, asset: "", img: "", amount: 0 },
          transactionEvent: void 0,
          websiteLoading: !0,
        },
        b = (0, m.oM)({
          name: "ModalsReducer",
          initialState: y,
          reducers: {
            setWalletPopUp: (e) => {
              e.walletPopUp = !e.walletPopUp;
            },
            setWebsiteLoading: (e, l) => {
              let { payload: c } = l;
              e.websiteLoading = c;
            },
            setDepositModalOpen: (e, l) => {
              let { payload: c } = l;
              e.depositModal = { open: !0, ...c };
            },
            setBondModalOpen: (e, l) => {
              let { payload: c } = l;
              e.bondModal = { open: !0, ...c };
            },
            setDepositModalClose: (e) => {
              e.depositModal.open = !1;
            },
            setBondModalClose: (e) => {
              e.bondModal.open = !1;
            },
            setWithdrawModalOpen: (e, l) => {
              let { payload: c } = l;
              e.withdrawModal = { open: !0, ...c };
            },
            setWithdrawModalClose: (e) => {
              e.withdrawModal.open = !1;
            },
            setReferralModalOpen: (e) => {
              e.referralModal.open = !0;
            },
            setReferralModalClose: (e) => {
              e.referralModal.open = !1;
            },
            setOpenDrawer: (e, l) => {
              let { payload: c } = l;
              e.openDrawer = c;
            },
            setWatchVideoPopup: (e, l) => {
              let { payload: c } = l;
              e.watchVideoPopup = c;
            },
            setSuccessModal: (e, l) => {
              let { payload: c } = l;
              (e.successModal.visible = !0), (e.successModal.type = c);
            },
            closeSuccessModal: (e) => {
              e.successModal.visible = !1;
            },
            setZkmlPopUp: (e, l) => {
              let { payload: c } = l;
              e.watchZkmlVideoPopup = c;
            },
            closeVerifyProofModal: (e) => {
              e.verifyProofModal.visible = !1;
            },
            openVerifyProofModal: (e, l) => {
              let { payload: c } = l;
              (e.verifyProofModal.input = c.input),
                (e.verifyProofModal.output = c.output),
                (e.verifyProofModal.date = c.date),
                (e.verifyProofModal.visible = !0),
                (e.verifyProofModal.proof = c.proof),
                (e.verifyProofModal.publicInputs = c.publicInputs),
                (e.verifyProofModal.verifierLink = c.verifierLink),
                (e.verifyProofModal.otherInfo = c.otherInfo);
            },
            setDepositStatus: (e, l) => {
              let { payload: c } = l;
              e.depositStatus = c;
            },
            setWithdrawStatus: (e, l) => {
              let { payload: c } = l;
              e.withdrawStatus = c;
            },
            setCurrentCurrency: (e, l) => {
              let { payload: c } = l;
              e.currency = c;
            },
            emitTransactionEvent: (e, l) => {
              let { payload: c } = l;
              e.transactionEvent = c;
            },
          },
        }),
        {
          setWalletPopUp: C,
          setDepositModalOpen: P,
          setBondModalOpen: I,
          setBondModalClose: B,
          setDepositModalClose: N,
          setWithdrawModalOpen: F,
          setWithdrawModalClose: V,
          setReferralModalOpen: G,
          setReferralModalClose: Q,
          setOpenDrawer: $,
          setWatchVideoPopup: Z,
          setSuccessModal: Y,
          closeSuccessModal: et,
          setZkmlPopUp: en,
          setDepositStatus: er,
          setWithdrawStatus: ei,
          openVerifyProofModal: eo,
          closeVerifyProofModal: ea,
          emitTransactionEvent: es,
          setWebsiteLoading: el,
          setCurrentCurrency: ec,
        } = b.actions;
      l.ZP = b.reducer;
    },
    88102: function (e, l, c) {
      "use strict";
      c.d(l, {
        Gu: function () {
          return y;
        },
      });
      var d = c(89239);
      let m = (0, d.oM)({
          name: "wallet",
          initialState: {
            account: void 0,
            wallet: { account: void 0 },
            isWhiteListed: !1,
          },
          reducers: {
            addAccount: (e, l) => {
              let { payload: c } = l;
              e.account = c;
            },
            setWalletAccount: (e, l) => {
              let { payload: c } = l;
              c ? (e.wallet = c) : (e.wallet = { account: void 0 });
            },
            setIsWhiteListed: (e, l) => {
              let { payload: c } = l;
              e.isWhiteListed = c;
            },
          },
        }),
        { addAccount: g, setWalletAccount: y, setIsWhiteListed: b } = m.actions;
      l.ZP = m.reducer;
    },
    28254: function (e, l, c) {
      "use strict";
      c.d(l, {
        C: function () {
          return g;
        },
        T: function () {
          return m;
        },
      });
      var d = c(26870);
      let m = d.I0,
        g = d.v9;
    },
    43829: function (e, l, c) {
      "use strict";
      c.d(l, {
        $o: function () {
          return ei;
        },
        C: function () {
          return eo;
        },
        C2: function () {
          return P;
        },
        Ru: function () {
          return Q;
        },
        Yv: function () {
          return G;
        },
        Yw: function () {
          return er;
        },
        ZR: function () {
          return Z;
        },
        Zf: function () {
          return V;
        },
        bk: function () {
          return C;
        },
        bw: function () {
          return $;
        },
        em: function () {
          return b;
        },
        gS: function () {
          return ea;
        },
        o4: function () {
          return F;
        },
        p$: function () {
          return en;
        },
        um: function () {
          return Y;
        },
        zu: function () {
          return I;
        },
      });
      var d = c(25074),
        m = c(26182);
      let g = d.Bl.injectEndpoints({
          endpoints: (e) => ({
            getVaultPositions: e.query({
              transformResponse: (e) => {
                var l;
                return (
                  (null == e
                    ? void 0
                    : null === (l = e.data) || void 0 === l
                    ? void 0
                    : l.holdingPositions) || []
                );
              },
              query: (e) => {
                let { vaultId: l, previous: c } = e;
                return {
                  url: "positions"
                    .concat(c ? "/previous" : "", "?vaultId=")
                    .concat(l),
                  method: "GET",
                };
              },
            }),
            getSplitVaultPositions: e.query({
              transformResponse: (e) => {
                var l;
                return (
                  (null == e
                    ? void 0
                    : null === (l = e.data) || void 0 === l
                    ? void 0
                    : l.holdingPositions) || []
                );
              },
              query: (e) => {
                let { vaultId: l, splitBy: c } = e;
                return {
                  url: "positions/split?vaultId="
                    .concat(l, "&splitBy=")
                    .concat(c),
                  method: "GET",
                };
              },
            }),
            getVaults: e.query({
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.vaults;
              },
              query: (e) => {
                let { address: l } = e;
                return { url: "data/vaults?address=".concat(l), method: "GET" };
              },
            }),
            getVaultByName: e.query({
              transformResponse: (e) => {
                var l;
                return (
                  (null == e
                    ? void 0
                    : null === (l = e.data) || void 0 === l
                    ? void 0
                    : l.vault) || {}
                );
              },
              query: (e) => "data/vaults/name/".concat(e),
            }),
            getTransactionsForAddress: e.query({
              transformResponse: (e) => {
                var l;
                return (
                  (null == e
                    ? void 0
                    : null === (l = e.data) || void 0 === l
                    ? void 0
                    : l.transactions) || []
                );
              },
              providesTags: ["Transaction"],
              transformErrorResponse: (e) => e,
              query: (e) => {
                let { address: l, vaultId: c } = e;
                return "data/transactionsByAddress/"
                  .concat(l)
                  .concat(c ? "?vaultId=".concat(c) : "");
              },
            }),
            getIntervalVaultTimeInfo: e.query({
              query: (e) => {
                let { vaultId: l, startDate: c, endDate: d, interval: m } = e;
                return "positions/chartDataV2?vaultId="
                  .concat(l, "&startDate=")
                  .concat(c, "&endDate=")
                  .concat(d, "&interval=")
                  .concat(m);
              },
              transformResponse: (e) => {
                let l = {
                  chartData: [],
                  averageAPY1D: 0,
                  averageAPYInPeriod: 0,
                };
                try {
                  let c = (null == e ? void 0 : e.data) || {},
                    d = c.chartData;
                  if (!d) return l;
                  let m = d.map((e) => {
                    var l, c, d, m, g, y;
                    return {
                      timestamp: e.timestamp,
                      totalTvl: e.totalTvl,
                      averageApy: 100 * e.averageAPY,
                      movingAverageAPY: 100 * (e.movingAverageAPY || 0),
                      apy:
                        100 *
                        ((null === (l = e.currentPositions[0]) || void 0 === l
                          ? void 0
                          : l.APY) || 0),
                      chain:
                        null === (c = e.currentPositions[0]) || void 0 === c
                          ? void 0
                          : c.chainId,
                      protocol:
                        (null === (d = e.currentPositions[0]) || void 0 === d
                          ? void 0
                          : d.protocol) || "",
                      protocolData:
                        (null === (m = e.currentPositions[0]) || void 0 === m
                          ? void 0
                          : m.protocolData) || "",
                      tokens:
                        (null === (g = e.currentPositions[0]) || void 0 === g
                          ? void 0
                          : g.tokens.split("-")) || [],
                      tvl:
                        (null === (y = e.currentPositions[0]) || void 0 === y
                          ? void 0
                          : y.tvl) || 0,
                      apyGroups: e.apyGroups.map((e) => ({
                        APY: 100 * e.APY,
                        apyGroupID: e.apyGroupID,
                        totalTvl: e.totalTvl,
                        _id: e._id,
                      })),
                      currentPositions: e.currentPositions
                        .map((e) => ({
                          chain: e.chainId,
                          protocol: e.protocol,
                          protocolData: e.protocolData,
                          tokens: e.tokens.split("-"),
                          tvl: e.tvl,
                          tvlInBase: e.tvl,
                          apy: 100 * e.APY,
                          isDebt: e.isDebt,
                          apyGroupID: e.apyGroupID,
                          id: e._id,
                        }))
                        .sort((e, l) => l.tvl - e.tvl),
                    };
                  });
                  return {
                    chartData: m,
                    averageAPY1D: c.averageAPY1D,
                    averageAPYInPeriod: c.averageAPYInPeriod,
                  };
                } catch (e) {
                  return l;
                }
              },
            }),
            getVaultTimeInfo: e.query({
              query: (e) => {
                let { vaultId: l, startDate: c, endDate: d } = e,
                  g = new Date(),
                  y = (0, m.Z)(g, 1);
                return (
                  c || (c = y.getTime()),
                  d || (d = g.getTime()),
                  "positions/chartData?vaultId="
                    .concat(l, "&startDate=")
                    .concat(c, "&endDate=")
                    .concat(d)
                );
              },
              transformResponse: (e) => {
                let l = {
                  chartData: [],
                  averageAPY1D: 0,
                  averageAPY1M: 0,
                  averageAPY1W: 0,
                };
                try {
                  let c = (null == e ? void 0 : e.data) || {},
                    d = c.chartData;
                  if (!d) return l;
                  let m = d.map((e) => {
                    var l, c, d, m, g, y;
                    return {
                      timestamp: e.timestamp,
                      totalTvl: e.totalTvl,
                      averageApy: 100 * e.averageAPY,
                      movingAverageAPY: 100 * (e.movingAverageAPY || 0),
                      apy:
                        100 *
                        ((null === (l = e.currentPositions[0]) || void 0 === l
                          ? void 0
                          : l.APY) || 0),
                      chain:
                        null === (c = e.currentPositions[0]) || void 0 === c
                          ? void 0
                          : c.chainId,
                      protocol:
                        (null === (d = e.currentPositions[0]) || void 0 === d
                          ? void 0
                          : d.protocol) || "",
                      protocolData:
                        (null === (m = e.currentPositions[0]) || void 0 === m
                          ? void 0
                          : m.protocolData) || "",
                      tokens:
                        (null === (g = e.currentPositions[0]) || void 0 === g
                          ? void 0
                          : g.tokens.split("-")) || [],
                      tvl:
                        (null === (y = e.currentPositions[0]) || void 0 === y
                          ? void 0
                          : y.tvl) || 0,
                      apyGroups: e.apyGroups.map((e) => ({
                        APY: 100 * e.APY,
                        apyGroupID: e.apyGroupID,
                        totalTvl: e.totalTvl,
                        _id: e._id,
                      })),
                      currentPositions: e.currentPositions
                        .map((e) => ({
                          chain: e.chainId,
                          protocol: e.protocol,
                          protocolData: e.protocolData,
                          tokens: e.tokens.split("-"),
                          tvl: e.tvl,
                          tvlInBase: e.tvl,
                          apy: 100 * e.APY,
                          isDebt: e.isDebt,
                          apyGroupID: e.apyGroupID,
                          id: e._id,
                        }))
                        .sort((e, l) => l.tvl - e.tvl),
                    };
                  });
                  return {
                    chartData: m,
                    averageAPY1D: c.averageAPY1D,
                    averageAPY1M: c.averageAPY1M,
                    averageAPY1W: c.averageAPY1W,
                  };
                } catch (e) {
                  return l;
                }
              },
            }),
            getValuation: e.query({
              query: () => "data/valuation",
              transformResponse: (e) => {
                var l;
                return (
                  (null == e
                    ? void 0
                    : null === (l = e.data) || void 0 === l
                    ? void 0
                    : l.valuationData) || {}
                );
              },
            }),
            getReadablePositions: e.query({
              transformResponse: (e) => (null == e ? void 0 : e.data) || {},
              query: (e) => {
                let { vaultId: l } = e;
                return "positions/readableHolding?vaultId=".concat(l);
              },
            }),
            getPositions: e.query({
              transformResponse: (e) => {
                var l;
                let c = null == e ? void 0 : e.data;
                return c
                  ? {
                      apyGroups:
                        null === (l = c.apyGroups) || void 0 === l
                          ? void 0
                          : l.map((e) => ({
                              _id: e._id,
                              APY: 100 * e.APY,
                              apyGroupID: e.apyGroupID,
                              totalTvl: e.totalTvl,
                            })),
                      averageAPY: c.averageAPY,
                      createdAt: c.createdAt,
                      currentPositions: c.currentPositions.map((e) => ({
                        apy: 100 * e.APY,
                        apyGroupID: e.apyGroupID,
                        chain: e.chainId,
                        id: e._id,
                        isDebt: e.isDebt,
                        otherData: e.otherData,
                        protocol: e.protocol,
                        protocolData: e.protocolData,
                        tokens: e.tokens.split("-"),
                        tvl: e.tvl,
                      })),
                      movingAverageAPY: c.movingAverageAPY,
                      timestamp: c.timestamp,
                      vaultId: c.vaultId,
                      id: c._id,
                      profit: c.profit,
                      updatedAt: c.updatedAt,
                      totalTvl: c.totalTvl,
                    }
                  : null;
              },
              query: (e) => {
                let { vaultId: l } = e;
                return "positions/positions?vaultId=".concat(l);
              },
            }),
            getAllTrustedPositions: e.query({
              query: () => ({ url: "positions/trusted/all", method: "GET" }),
              transformResponse: (e) => {
                var l;
                return (
                  (null == e
                    ? void 0
                    : null === (l = e.data) || void 0 === l
                    ? void 0
                    : l.trustedPositions) || []
                );
              },
            }),
            getLatestAverageAPY: e.query({
              query: () => "positions/latestAverageAPY",
              transformResponse: (e) => (null == e ? void 0 : e.data) || {},
            }),
            getVaultMovements: e.query({
              query: (e) => {
                let { vaultId: l } = e;
                return "data/movements?vaultId=".concat(l);
              },
              transformResponse: (e) => {
                var l;
                let c =
                  (null == e
                    ? void 0
                    : null === (l = e.data) || void 0 === l
                    ? void 0
                    : l.transactions) || [];
                return (c = c.map((e) => ({
                  ...e,
                  movements: e.movements.map((e) => {
                    var l, c;
                    return {
                      ...e,
                      startingPosition: {
                        ...e.startingPosition,
                        tokens: (null !== (l = e.startingPosition.tokens) &&
                        void 0 !== l
                          ? l
                          : ""
                        ).split("-"),
                      },
                      destination: {
                        ...e.destination,
                        tokens: (null !== (c = e.destination.tokens) &&
                        void 0 !== c
                          ? c
                          : ""
                        ).split("-"),
                      },
                    };
                  }),
                }))).sort(
                  (e, l) =>
                    new Date(l.createdAt).getTime() -
                    new Date(e.createdAt).getTime()
                );
              },
            }),
            getVerifiedTvl: e.query({
              query: (e) => {
                let { vaultId: l } = e;
                return "positions/getVerifiedTVL?vaultId=".concat(l);
              },
              transformResponse: (e) => (null == e ? void 0 : e.data) || {},
            }),
            getVerifiedTvls: e.query({
              query: () => "positions/latest-verified-tvls",
              transformResponse: (e) => (null == e ? void 0 : e.data) || [],
            }),
            getPoolsCount: e.query({
              query: () => "positions/poolsCount",
              transformResponse: (e) => (null == e ? void 0 : e.data) || 0,
            }),
            getVaultProfits: e.query({
              query: (e) => {
                let { address: l } = e;
                return "positions/profitsV2/?address=".concat(l);
              },
              transformResponse: (e) =>
                (null == e ? void 0 : e.data) || { vaultsProfits: {} },
            }),
          }),
        }),
        y = d.Bl.injectEndpoints({
          endpoints: (e) => ({
            getUserData: e.mutation({
              query: (e) => {
                let { userAddresses: l } = e;
                return {
                  url: "users/userData",
                  method: "POST",
                  body: { userAddresses: l },
                };
              },
              transformResponse: (e) => {
                let l = (null == e ? void 0 : e.data) || [];
                return l.map((e) => ({
                  ...e,
                  bondingObjects: JSON.parse(e.bondingObjects || "[]"),
                }));
              },
            }),
          }),
        }),
        {
          useGetVaultsQuery: b,
          useGetVaultByNameQuery: C,
          useGetTransactionsForAddressQuery: P,
          useLazyGetTransactionsForAddressQuery: I,
          useGetVaultPositionsQuery: B,
          useGetSplitVaultPositionsQuery: N,
          useGetVaultTimeInfoQuery: F,
          useGetValuationQuery: V,
          useGetReadablePositionsQuery: G,
          useGetAllTrustedPositionsQuery: Q,
          useGetLatestAverageAPYQuery: $,
          useGetVerifiedTvlsQuery: Z,
          useGetVaultMovementsQuery: Y,
          useGetVerifiedTvlQuery: et,
          useGetPoolsCountQuery: en,
          useGetPositionsQuery: er,
          useGetVaultProfitsQuery: ei,
          useGetIntervalVaultTimeInfoQuery: eo,
        } = g,
        { useGetUserDataMutation: ea } = y;
    },
    25074: function (e, l, c) {
      "use strict";
      c.d(l, {
        Bl: function () {
          return Q;
        },
        mA: function () {
          return G;
        },
        cB: function () {
          return $;
        },
        Hs: function () {
          return Z;
        },
      });
      var d = c(66034),
        m = c(26870),
        g = c(73649),
        y = c(89239),
        b = c(50959);
      function capitalize(e) {
        return e.replace(e[0], e[0].toUpperCase());
      }
      function isInfiniteQueryDefinition(e) {
        return "infinitequery" === e.type;
      }
      function safeAssign(e, ...l) {
        return Object.assign(e, ...l);
      }
      c(21481);
      var C = Symbol();
      function useStableQueryArgs(e, l, c, d) {
        let m = (0, b.useMemo)(
            () => ({
              queryArgs: e,
              serialized:
                "object" == typeof e
                  ? l({ queryArgs: e, endpointDefinition: c, endpointName: d })
                  : e,
            }),
            [e, l, c, d]
          ),
          g = (0, b.useRef)(m);
        return (
          (0, b.useEffect)(() => {
            g.current.serialized !== m.serialized && (g.current = m);
          }, [m]),
          g.current.serialized === m.serialized ? g.current.queryArgs : e
        );
      }
      function useShallowStableValue(e) {
        let l = (0, b.useRef)(e);
        return (
          (0, b.useEffect)(() => {
            (0, m.wU)(l.current, e) || (l.current = e);
          }, [e]),
          (0, m.wU)(l.current, e) ? l.current : e
        );
      }
      var P = !!(
          "undefined" != typeof window &&
          void 0 !== window.document &&
          void 0 !== window.document.createElement
        ),
        I =
          "undefined" != typeof navigator &&
          "ReactNative" === navigator.product,
        B = P || I ? b.useLayoutEffect : b.useEffect,
        noPendingQueryStateSelector = (e) =>
          e.isUninitialized
            ? {
                ...e,
                isUninitialized: !1,
                isFetching: !0,
                isLoading: void 0 === e.data,
                status: d.oZ.pending,
              }
            : e;
      function pick(e, ...l) {
        let c = {};
        return (
          l.forEach((l) => {
            c[l] = e[l];
          }),
          c
        );
      }
      var N = ["data", "status", "isLoading", "isSuccess", "isError", "error"],
        F = Symbol(),
        V = (0, d.Tk)(
          (0, d.hF)(),
          (({
            batch: e = m.dC,
            hooks: l = { useDispatch: m.I0, useSelector: m.v9, useStore: m.oR },
            createSelector: c = g.P1,
            unstable__sideEffectsInRender: P = !1,
            ...I
          } = {}) => ({
            name: F,
            init(g, { serializeQueryArgs: I }, F) {
              let {
                buildQueryHooks: V,
                buildInfiniteQueryHooks: G,
                buildMutationHook: Q,
                usePrefetch: $,
              } = (function ({
                api: e,
                moduleOptions: {
                  batch: l,
                  hooks: { useDispatch: c, useSelector: g, useStore: P },
                  unstable__sideEffectsInRender: I,
                  createSelector: F,
                },
                serializeQueryArgs: V,
                context: G,
              }) {
                let Q = I ? (e) => e() : b.useEffect;
                return {
                  buildQueryHooks: function (m) {
                    let useQuerySubscription = (e, l = {}) => {
                        let [c] = useQuerySubscriptionCommonImpl(m, e, l);
                        return (
                          usePromiseRefUnsubscribeOnUnmount(c),
                          (0, b.useMemo)(
                            () => ({
                              refetch: () => refetchOrErrorIfUnmounted(c),
                            }),
                            [c]
                          )
                        );
                      },
                      useLazyQuerySubscription = ({
                        refetchOnReconnect: d,
                        refetchOnFocus: g,
                        pollingInterval: y = 0,
                        skipPollingIfUnfocused: P = !1,
                      } = {}) => {
                        let { initiate: I } = e.endpoints[m],
                          B = c(),
                          [N, F] = (0, b.useState)(C),
                          V = (0, b.useRef)(void 0),
                          G = useShallowStableValue({
                            refetchOnReconnect: d,
                            refetchOnFocus: g,
                            pollingInterval: y,
                            skipPollingIfUnfocused: P,
                          });
                        Q(() => {
                          let e = V.current?.subscriptionOptions;
                          G !== e && V.current?.updateSubscriptionOptions(G);
                        }, [G]);
                        let $ = (0, b.useRef)(G);
                        Q(() => {
                          $.current = G;
                        }, [G]);
                        let Z = (0, b.useCallback)(
                            function (e, c = !1) {
                              let d;
                              return (
                                l(() => {
                                  V.current?.unsubscribe(),
                                    (V.current = d =
                                      B(
                                        I(e, {
                                          subscriptionOptions: $.current,
                                          forceRefetch: !c,
                                        })
                                      )),
                                    F(e);
                                }),
                                d
                              );
                            },
                            [B, I]
                          ),
                          Y = (0, b.useCallback)(() => {
                            V.current?.queryCacheKey &&
                              B(
                                e.internalActions.removeQueryResult({
                                  queryCacheKey: V.current?.queryCacheKey,
                                })
                              );
                          }, [B]);
                        return (
                          (0, b.useEffect)(
                            () => () => {
                              V?.current?.unsubscribe();
                            },
                            []
                          ),
                          (0, b.useEffect)(() => {
                            N === C || V.current || Z(N, !0);
                          }, [N, Z]),
                          (0, b.useMemo)(() => [Z, N, { reset: Y }], [Z, N, Y])
                        );
                      },
                      g = buildUseQueryState(m, queryStatePreSelector);
                    return {
                      useQueryState: g,
                      useQuerySubscription,
                      useLazyQuerySubscription,
                      useLazyQuery(e) {
                        let [l, c, { reset: d }] = useLazyQuerySubscription(e),
                          m = g(c, { ...e, skip: c === C }),
                          y = (0, b.useMemo)(() => ({ lastArg: c }), [c]);
                        return (0, b.useMemo)(
                          () => [l, { ...m, reset: d }, y],
                          [l, m, d, y]
                        );
                      },
                      useQuery(e, l) {
                        let c = useQuerySubscription(e, l),
                          m = g(e, {
                            selectFromResult:
                              e === d.CN || l?.skip
                                ? void 0
                                : noPendingQueryStateSelector,
                            ...l,
                          }),
                          y = pick(m, ...N);
                        return (
                          (0, b.useDebugValue)(y),
                          (0, b.useMemo)(() => ({ ...m, ...c }), [m, c])
                        );
                      },
                    };
                  },
                  buildInfiniteQueryHooks: function (e) {
                    let useInfiniteQuerySubscription = (c, m = {}) => {
                        let [g, y, C, P] = useQuerySubscriptionCommonImpl(
                            e,
                            c,
                            m
                          ),
                          I = (0, b.useRef)(P);
                        Q(() => {
                          I.current = P;
                        }, [P]);
                        let B = (0, b.useCallback)(
                          function (e, c) {
                            let d;
                            return (
                              l(() => {
                                g.current?.unsubscribe(),
                                  (g.current = d =
                                    y(
                                      C(e, {
                                        subscriptionOptions: I.current,
                                        direction: c,
                                      })
                                    ));
                              }),
                              d
                            );
                          },
                          [g, y, C]
                        );
                        usePromiseRefUnsubscribeOnUnmount(g);
                        let N = useStableQueryArgs(
                            m.skip ? d.CN : c,
                            d.OL,
                            G.endpointDefinitions[e],
                            e
                          ),
                          F = (0, b.useCallback)(
                            () => refetchOrErrorIfUnmounted(g),
                            [g]
                          );
                        return (0, b.useMemo)(
                          () => ({
                            trigger: B,
                            refetch: F,
                            fetchNextPage: () => B(N, "forward"),
                            fetchPreviousPage: () => B(N, "backward"),
                          }),
                          [F, B, N]
                        );
                      },
                      c = buildUseQueryState(e, infiniteQueryStatePreSelector);
                    return {
                      useInfiniteQueryState: c,
                      useInfiniteQuerySubscription,
                      useInfiniteQuery(e, l) {
                        let {
                            refetch: m,
                            fetchNextPage: g,
                            fetchPreviousPage: y,
                          } = useInfiniteQuerySubscription(e, l),
                          C = c(e, {
                            selectFromResult:
                              e === d.CN || l?.skip
                                ? void 0
                                : noPendingQueryStateSelector,
                            ...l,
                          }),
                          P = pick(C, ...N, "hasNextPage", "hasPreviousPage");
                        return (
                          (0, b.useDebugValue)(P),
                          (0, b.useMemo)(
                            () => ({
                              ...C,
                              fetchNextPage: g,
                              fetchPreviousPage: y,
                              refetch: m,
                            }),
                            [C, g, y, m]
                          )
                        );
                      },
                    };
                  },
                  buildMutationHook: function (d) {
                    return ({ selectFromResult: y, fixedCacheKey: C } = {}) => {
                      let { select: P, initiate: I } = e.endpoints[d],
                        B = c(),
                        [V, G] = (0, b.useState)();
                      (0, b.useEffect)(
                        () => () => {
                          V?.arg.fixedCacheKey || V?.reset();
                        },
                        [V]
                      );
                      let Q = (0, b.useCallback)(
                          function (e) {
                            let l = B(I(e, { fixedCacheKey: C }));
                            return G(l), l;
                          },
                          [B, I, C]
                        ),
                        { requestId: $ } = V || {},
                        Z = (0, b.useMemo)(
                          () =>
                            P({ fixedCacheKey: C, requestId: V?.requestId }),
                          [C, V, P]
                        ),
                        Y = (0, b.useMemo)(() => (y ? F([Z], y) : Z), [y, Z]),
                        et = g(Y, m.wU),
                        en = null == C ? V?.arg.originalArgs : void 0,
                        er = (0, b.useCallback)(() => {
                          l(() => {
                            V && G(void 0),
                              C &&
                                B(
                                  e.internalActions.removeMutationResult({
                                    requestId: $,
                                    fixedCacheKey: C,
                                  })
                                );
                          });
                        }, [B, C, V, $]),
                        ei = pick(et, ...N, "endpointName");
                      (0, b.useDebugValue)(ei);
                      let eo = (0, b.useMemo)(
                        () => ({ ...et, originalArgs: en, reset: er }),
                        [et, en, er]
                      );
                      return (0, b.useMemo)(() => [Q, eo], [Q, eo]);
                    };
                  },
                  usePrefetch: function (l, d) {
                    let m = c(),
                      g = useShallowStableValue(d);
                    return (0, b.useCallback)(
                      (c, d) => m(e.util.prefetch(l, c, { ...g, ...d })),
                      [l, m, g]
                    );
                  },
                };
                function queryStatePreSelector(e, l, c) {
                  if (l?.endpointName && e.isUninitialized) {
                    let { endpointName: e } = l,
                      m = G.endpointDefinitions[e];
                    c !== d.CN &&
                      V({
                        queryArgs: l.originalArgs,
                        endpointDefinition: m,
                        endpointName: e,
                      }) ===
                        V({
                          queryArgs: c,
                          endpointDefinition: m,
                          endpointName: e,
                        }) &&
                      (l = void 0);
                  }
                  let m = e.isSuccess ? e.data : l?.data;
                  void 0 === m && (m = e.data);
                  let g = void 0 !== m,
                    y = e.isLoading,
                    b = (!l || l.isLoading || l.isUninitialized) && !g && y,
                    C =
                      e.isSuccess ||
                      (g && ((y && !l?.isError) || e.isUninitialized));
                  return {
                    ...e,
                    data: m,
                    currentData: e.data,
                    isFetching: y,
                    isLoading: b,
                    isSuccess: C,
                  };
                }
                function infiniteQueryStatePreSelector(e, l, c) {
                  if (l?.endpointName && e.isUninitialized) {
                    let { endpointName: e } = l,
                      m = G.endpointDefinitions[e];
                    c !== d.CN &&
                      V({
                        queryArgs: l.originalArgs,
                        endpointDefinition: m,
                        endpointName: e,
                      }) ===
                        V({
                          queryArgs: c,
                          endpointDefinition: m,
                          endpointName: e,
                        }) &&
                      (l = void 0);
                  }
                  let m = e.isSuccess ? e.data : l?.data;
                  void 0 === m && (m = e.data);
                  let g = void 0 !== m,
                    y = e.isLoading,
                    b = (!l || l.isLoading || l.isUninitialized) && !g && y,
                    C = e.isSuccess || (y && g);
                  return {
                    ...e,
                    data: m,
                    currentData: e.data,
                    isFetching: y,
                    isLoading: b,
                    isSuccess: C,
                  };
                }
                function useQuerySubscriptionCommonImpl(
                  l,
                  m,
                  {
                    refetchOnReconnect: g,
                    refetchOnFocus: y,
                    refetchOnMountOrArgChange: C,
                    skip: P = !1,
                    pollingInterval: I = 0,
                    skipPollingIfUnfocused: B = !1,
                    ...N
                  } = {}
                ) {
                  let { initiate: F } = e.endpoints[l],
                    V = c(),
                    $ = (0, b.useRef)(void 0);
                  if (!$.current) {
                    let l = V(
                      e.internalActions.internal_getRTKQSubscriptions()
                    );
                    $.current = l;
                  }
                  let Z = useStableQueryArgs(
                      P ? d.CN : m,
                      d.OL,
                      G.endpointDefinitions[l],
                      l
                    ),
                    Y = useShallowStableValue({
                      refetchOnReconnect: g,
                      refetchOnFocus: y,
                      pollingInterval: I,
                      skipPollingIfUnfocused: B,
                    }),
                    et = N.initialPageParam,
                    en = useShallowStableValue(et),
                    er = (0, b.useRef)(void 0),
                    { queryCacheKey: ei, requestId: eo } = er.current || {},
                    ea = !1;
                  ei && eo && (ea = $.current.isRequestSubscribed(ei, eo));
                  let es = !ea && void 0 !== er.current;
                  return (
                    Q(() => {
                      es && (er.current = void 0);
                    }, [es]),
                    Q(() => {
                      let e = er.current;
                      if (Z === d.CN) {
                        e?.unsubscribe(), (er.current = void 0);
                        return;
                      }
                      let c = er.current?.subscriptionOptions;
                      if (e && e.arg === Z)
                        Y !== c && e.updateSubscriptionOptions(Y);
                      else {
                        e?.unsubscribe();
                        let c = V(
                          F(Z, {
                            subscriptionOptions: Y,
                            forceRefetch: C,
                            ...(isInfiniteQueryDefinition(
                              G.endpointDefinitions[l]
                            )
                              ? { initialPageParam: en }
                              : {}),
                          })
                        );
                        er.current = c;
                      }
                    }, [V, F, C, Z, Y, es, en, l]),
                    [er, V, F, Y]
                  );
                }
                function buildUseQueryState(l, c) {
                  return (y, { skip: C = !1, selectFromResult: I } = {}) => {
                    let { select: N } = e.endpoints[l],
                      Q = useStableQueryArgs(
                        C ? d.CN : y,
                        V,
                        G.endpointDefinitions[l],
                        l
                      ),
                      $ = (0, b.useRef)(void 0),
                      Z = (0, b.useMemo)(
                        () =>
                          F([N(Q), (e, l) => l, (e) => Q], c, {
                            memoizeOptions: { resultEqualityCheck: m.wU },
                          }),
                        [N, Q]
                      ),
                      Y = (0, b.useMemo)(
                        () =>
                          I
                            ? F([Z], I, {
                                devModeChecks: {
                                  identityFunctionCheck: "never",
                                },
                              })
                            : Z,
                        [Z, I]
                      ),
                      et = g((e) => Y(e, $.current), m.wU),
                      en = P(),
                      er = Z(en.getState(), $.current);
                    return (
                      B(() => {
                        $.current = er;
                      }, [er]),
                      et
                    );
                  };
                }
                function usePromiseRefUnsubscribeOnUnmount(e) {
                  (0, b.useEffect)(
                    () => () => {
                      e.current?.unsubscribe?.(), (e.current = void 0);
                    },
                    [e]
                  );
                }
                function refetchOrErrorIfUnmounted(e) {
                  if (!e.current) throw Error((0, y.rJ)(38));
                  return e.current.refetch();
                }
              })({
                api: g,
                moduleOptions: {
                  batch: e,
                  hooks: l,
                  unstable__sideEffectsInRender: P,
                  createSelector: c,
                },
                serializeQueryArgs: I,
                context: F,
              });
              return (
                safeAssign(g, { usePrefetch: $ }),
                safeAssign(F, { batch: e }),
                {
                  injectEndpoint(e, l) {
                    if ("query" === l.type) {
                      let {
                        useQuery: l,
                        useLazyQuery: c,
                        useLazyQuerySubscription: d,
                        useQueryState: m,
                        useQuerySubscription: y,
                      } = V(e);
                      safeAssign(g.endpoints[e], {
                        useQuery: l,
                        useLazyQuery: c,
                        useLazyQuerySubscription: d,
                        useQueryState: m,
                        useQuerySubscription: y,
                      }),
                        (g[`use${capitalize(e)}Query`] = l),
                        (g[`useLazy${capitalize(e)}Query`] = c);
                    }
                    if ("mutation" === l.type) {
                      let l = Q(e);
                      safeAssign(g.endpoints[e], { useMutation: l }),
                        (g[`use${capitalize(e)}Mutation`] = l);
                    } else if (isInfiniteQueryDefinition(l)) {
                      let {
                        useInfiniteQuery: l,
                        useInfiniteQuerySubscription: c,
                        useInfiniteQueryState: d,
                      } = G(e);
                      safeAssign(g.endpoints[e], {
                        useInfiniteQuery: l,
                        useInfiniteQuerySubscription: c,
                        useInfiniteQueryState: d,
                      }),
                        (g[`use${capitalize(e)}InfiniteQuery`] = l);
                    }
                  },
                }
              );
            },
          }))()
        );
      let G = V({
          reducerPath: "mainApi",
          tagTypes: [
            "user",
            "leaderboard",
            "events",
            "referralCodes",
            "notifications",
            "twitterPosts",
            "popup",
            "rewards",
          ],
          baseQuery: (0, d.ni)({
            baseUrl: "".concat("https://api.noya.ai/noya_space", "/api"),
          }),
          endpoints: () => ({}),
        }),
        Q = V({
          reducerPath: "dataApi",
          tagTypes: ["whitelist", "Transaction"],
          baseQuery: (0, d.ni)({
            baseUrl: "".concat("https://api.noya.ai/data"),
          }),
          endpoints: () => ({}),
        }),
        $ = V({
          reducerPath: "schedulerApi",
          tagTypes: ["tvl"],
          baseQuery: (0, d.ni)({
            baseUrl: "".concat("https://api.noya.ai/data_s", "/api"),
          }),
          endpoints: () => ({}),
        }),
        Z = V({
          reducerPath: "userSchedulerApi",
          tagTypes: ["net-worth"],
          baseQuery: (0, d.ni)({
            baseUrl: "".concat("https://api.noya.ai/data_u_s", "/api"),
          }),
          endpoints: () => ({}),
        });
    },
    58791: function (e, l, c) {
      "use strict";
      c.d(l, {
        At: function () {
          return er;
        },
        F4: function () {
          return ep;
        },
        Hf: function () {
          return eh;
        },
        JM: function () {
          return ey;
        },
        Jm: function () {
          return ef;
        },
        Ky: function () {
          return ei;
        },
        Nf: function () {
          return y;
        },
        Pr: function () {
          return el;
        },
        Qy: function () {
          return ed;
        },
        WM: function () {
          return eg;
        },
        Wn: function () {
          return N;
        },
        Zf: function () {
          return Z;
        },
        eP: function () {
          return P;
        },
        hV: function () {
          return eo;
        },
        mI: function () {
          return F;
        },
        nd: function () {
          return b;
        },
        nx: function () {
          return ec;
        },
        ny: function () {
          return ea;
        },
        oV: function () {
          return Q;
        },
        qQ: function () {
          return es;
        },
        sJ: function () {
          return eu;
        },
        ux: function () {
          return C;
        },
      });
      var d = c(25074);
      let m = d.mA.injectEndpoints({
          endpoints: (e) => ({
            getUserData: e.query({
              query: (e) => "users/".concat(e.address),
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.user;
              },
              providesTags: ["user"],
            }),
            getChains: e.query({
              query: () => "vaults/chains/updated",
              transformResponse: (e) => (null == e ? void 0 : e.data),
            }),
            getUserEnsProfile: e.query({
              query: (e) => "https://ensdata.net/".concat(e.address),
              providesTags: ["user"],
            }),
            getLeaderboard: e.query({
              query: () => "users/leaderboard",
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.users;
              },
              providesTags: ["leaderboard"],
            }),
            getUserEvents: e.query({
              query: (e) =>
                "/events/"
                  .concat(e.address, "?startDate=")
                  .concat(e.startDate, "&endDate=")
                  .concat(e.endDate),
              transformResponse: (e) => (null == e ? void 0 : e.data),
              providesTags: ["events"],
            }),
            getUserRewards: e.query({
              query: (e) => {
                var l, c;
                return "/users/rewards/"
                  .concat(e.address, "?limit=")
                  .concat(
                    null !== (l = e.limit) && void 0 !== l ? l : 10,
                    "&page="
                  )
                  .concat(null !== (c = e.page) && void 0 !== c ? c : 1);
              },
              transformResponse: (e) => {
                var l;
                let c =
                    null == e
                      ? void 0
                      : null === (l = e.data) || void 0 === l
                      ? void 0
                      : l.rewards,
                  d = (null == c ? void 0 : c.docs) || [],
                  m = d.reduce((e, l) => {
                    let c = l.week;
                    return e[c] ? (e[c].points += l.points) : (e[c] = l), e;
                  }, {});
                return {
                  ...c,
                  docs: Object.values(m).sort((e, l) => l.week - e.week),
                };
              },
              providesTags: ["rewards"],
            }),
            getSuccessfulReferrals: e.query({
              query: (e) => {
                var l, c;
                return "/events/referrals/"
                  .concat(e.address, "?limit=")
                  .concat(
                    null !== (l = e.limit) && void 0 !== l ? l : 10,
                    "&page="
                  )
                  .concat(null !== (c = e.page) && void 0 !== c ? c : 1);
              },
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.users;
              },
              providesTags: ["events"],
            }),
            getNotifications: e.query({
              query: (e) => "users/".concat(e.address, "/notifications"),
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.notifications;
              },
              providesTags: ["notifications"],
            }),
            getPopUp: e.query({
              query: (e) => "users/".concat(e.address, "/popup"),
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.notification;
              },
              providesTags: ["popup"],
            }),
            getLatestTwitterPosts: e.query({
              query: () => "twitter/latest-tweets",
              transformResponse: (e) => {
                var l, c;
                return null == e
                  ? void 0
                  : null === (c = e.tweets) || void 0 === c
                  ? void 0
                  : null === (l = c._realData) || void 0 === l
                  ? void 0
                  : l.data;
              },
              providesTags: ["twitterPosts"],
            }),
            getUserFromCode: e.query({
              query: (e) => "users/".concat(e.referralCode, "/user-from-code"),
              transformResponse: (e) => (null == e ? void 0 : e.data),
              providesTags: ["referralCodes"],
            }),
          }),
        }),
        g = d.mA.injectEndpoints({
          endpoints: (e) => ({
            spin: e.mutation({
              query: (e) => ({
                url: "users/spin/".concat(e.address),
                method: "POST",
              }),
              transformResponse: (e) => (null == e ? void 0 : e.data),
              onQueryStarted: async (e, l) => {
                let { address: c } = e,
                  { dispatch: d, queryFulfilled: g } = l,
                  y = null;
                try {
                  let { data: e } = await g,
                    l = null == e ? void 0 : e.user;
                  if (!l) throw Error("No user data");
                  y = d(
                    m.util.updateQueryData(
                      "getUserData",
                      { address: c },
                      (e) => {
                        Object.assign(e, l);
                      }
                    )
                  );
                } catch (e) {
                  y && y.undo();
                }
              },
            }),
            createUser: e.mutation({
              query: (e) => ({ url: "users/create", method: "POST", body: e }),
              transformResponse: (e) => {
                var l;
                return (
                  console.log("response", e),
                  null == e
                    ? void 0
                    : null === (l = e.data) || void 0 === l
                    ? void 0
                    : l.user
                );
              },
              onQueryStarted: async (e, l) => {
                let { address: c } = e,
                  { dispatch: d, queryFulfilled: g } = l,
                  y = null;
                try {
                  let { data: e } = await g;
                  y = d(
                    m.util.updateQueryData(
                      "getUserData",
                      { address: c },
                      (l) => {
                        Object.assign(l, e);
                      }
                    )
                  );
                } catch (e) {
                  y && y.undo();
                }
              },
            }),
            sendVerificationEmail: e.mutation({
              query: (e) => ({
                url: "users/send-verification-email",
                method: "POST",
                body: e,
              }),
            }),
            verifyEmail: e.mutation({
              query: (e) => ({
                url: "users/verify-email",
                method: "POST",
                body: e,
              }),
              transformResponse: (e) => (null == e ? void 0 : e.data),
              invalidatesTags: ["user"],
            }),
            readNotifications: e.mutation({
              query: (e) => ({
                url: "users/".concat(e.address, "/notifications/all"),
                method: "POST",
              }),
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.notifications;
              },
              onQueryStarted: async (e, l) => {
                let { address: c } = e,
                  { dispatch: d, queryFulfilled: g } = l,
                  y = null;
                try {
                  await g,
                    (y = d(
                      m.util.updateQueryData(
                        "getNotifications",
                        { address: c },
                        (e) => {
                          e.forEach((e) => {
                            e.read = !0;
                          });
                        }
                      )
                    ));
                } catch (e) {
                  y && y.undo();
                }
              },
            }),
            deleteNotification: e.mutation({
              query: (e) => ({
                url: "users/".concat(e.address, "/notifications/delete"),
                method: "DELETE",
                body: e,
              }),
              onQueryStarted: async (e, l) => {
                let { address: c, notificationId: d } = e,
                  { dispatch: g, queryFulfilled: y } = l,
                  b = g(
                    m.util.updateQueryData(
                      "getNotifications",
                      { address: c },
                      (e) => {
                        let l = e.findIndex((e) => e._id === d);
                        e.splice(l, 1);
                      }
                    )
                  );
                try {
                  await y;
                } catch (e) {
                  b && b.undo();
                }
              },
            }),
            generateCustomReferralLink: e.mutation({
              query: (e) => ({
                url: "users/".concat(e.address, "/custom-referral-link"),
                method: "POST",
                body: e,
              }),
              onQueryStarted: async (e, l) => {
                let { address: c } = e,
                  { dispatch: d, queryFulfilled: g } = l,
                  y = null;
                try {
                  var b;
                  let e = await g,
                    l =
                      null === (b = null == e ? void 0 : e.data) || void 0 === b
                        ? void 0
                        : b.user;
                  if (!l) throw Error("No user data");
                  y = d(
                    m.util.updateQueryData(
                      "getUserData",
                      { address: c },
                      (e) => {
                        Object.assign(e, l);
                      }
                    )
                  );
                } catch (e) {
                  y && y.undo();
                }
              },
            }),
            sendTwitterPost: e.mutation({
              query: (e) => ({
                url: "users/".concat(e.address, "/twitter-post"),
                method: "POST",
                body: e,
              }),
              transformResponse: (e) => (null == e ? void 0 : e.data),
              onQueryStarted: async (e, l) => {
                let { address: c } = e,
                  { dispatch: d, queryFulfilled: g } = l,
                  y = null;
                try {
                  var b;
                  let e = await g,
                    l =
                      null === (b = null == e ? void 0 : e.data) || void 0 === b
                        ? void 0
                        : b.user;
                  if (!l) throw Error("No user data");
                  y = d(
                    m.util.updateQueryData(
                      "getUserData",
                      { address: c },
                      (e) => {
                        Object.assign(e, l);
                      }
                    )
                  );
                } catch (e) {
                  y && y.undo();
                }
              },
            }),
            disconnectTwitter: e.mutation({
              query: (e) => ({
                url: "users/".concat(e.address, "/twitter-disconnect"),
                method: "POST",
              }),
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.user;
              },
              onQueryStarted: async (e, l) => {
                let { address: c } = e,
                  { dispatch: d, queryFulfilled: g } = l,
                  y = null;
                try {
                  let { data: e } = await g;
                  y = d(
                    m.util.updateQueryData(
                      "getUserData",
                      { address: c },
                      (l) => {
                        Object.assign(l, e);
                      }
                    )
                  );
                } catch (e) {
                  y && y.undo();
                }
              },
            }),
            deleteAllNotifications: e.mutation({
              query: (e) => ({
                url: "users/".concat(e.address, "/notifications/delete/all"),
                method: "DELETE",
              }),
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.notifications;
              },
              onQueryStarted: async (e, l) => {
                let { address: c } = e,
                  { dispatch: d, queryFulfilled: g } = l,
                  y = d(
                    m.util.updateQueryData(
                      "getNotifications",
                      { address: c },
                      (e) => {
                        e.splice(0, e.length);
                      }
                    )
                  );
                try {
                  await g;
                } catch (e) {
                  y && y.undo();
                }
              },
            }),
            setUserSignature: e.mutation({
              query: (e) => ({
                url: "users/set-signature",
                method: "POST",
                body: e,
              }),
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.user;
              },
              onQueryStarted: async (e, l) => {
                let { address: c } = e,
                  { dispatch: d, queryFulfilled: g } = l,
                  y = null;
                try {
                  let { data: e } = await g;
                  y = d(
                    m.util.updateQueryData(
                      "getUserData",
                      { address: c },
                      (l) => {
                        Object.assign(l, e);
                      }
                    )
                  );
                } catch (e) {
                  y && y.undo();
                }
              },
            }),
            dailyCheckIn: e.mutation({
              query: (e) => ({
                url: "users/check-in/".concat(e.address),
                method: "POST",
                body: { signature: e.signature },
              }),
              transformResponse: (e) => {
                var l;
                return null == e
                  ? void 0
                  : null === (l = e.data) || void 0 === l
                  ? void 0
                  : l.user;
              },
              invalidatesTags: ["user"],
            }),
          }),
        }),
        {
          useGetUserDataQuery: y,
          useLazyGetUserDataQuery: b,
          useGetLeaderboardQuery: C,
          useGetUserEventsQuery: P,
          useLazyGetUserEventsQuery: I,
          useGetSuccessfulReferralsQuery: B,
          useLazyGetSuccessfulReferralsQuery: N,
          useGetNotificationsQuery: F,
          useGetUserEnsProfileQuery: V,
          useGetPopUpQuery: G,
          useLazyGetPopUpQuery: Q,
          useGetLatestTwitterPostsQuery: $,
          useLazyGetUserFromCodeQuery: Z,
          useGetUserFromCodeQuery: Y,
          useGetUserRewardsQuery: et,
          useLazyGetLatestTwitterPostsQuery: en,
          useLazyGetUserRewardsQuery: er,
          useGetChainsQuery: ei,
          useLazyGetChainsQuery: eo,
        } = m,
        {
          useCreateUserMutation: ea,
          useVerifyEmailMutation: es,
          useSendVerificationEmailMutation: el,
          useReadNotificationsMutation: ec,
          useDeleteNotificationMutation: eu,
          useGenerateCustomReferralLinkMutation: ed,
          useSendTwitterPostMutation: ep,
          useDisconnectTwitterMutation: eh,
          useDeleteAllNotificationsMutation: ef,
          useSetUserSignatureMutation: em,
          useSpinMutation: eg,
          useDailyCheckInMutation: ey,
        } = g;
    },
    85703: function (e, l, c) {
      "use strict";
      c.d(l, {
        cn: function () {
          return cn;
        },
        ZP: function () {
          return ea;
        },
        eD: function () {
          return editAlpha;
        },
        dN: function () {
          return formatAmount;
        },
        ix: function () {
          return getAverageColor;
        },
        so: function () {
          return getProtocolLink;
        },
        U: function () {
          return getTokenColor;
        },
        tY: function () {
          return getVaultLinks;
        },
        cg: function () {
          return toRgba;
        },
      });
      var d = c(11527);
      /*! Fast Average Color | © 2025 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */ function toHex(
        e
      ) {
        var l = e.toString(16);
        return 1 === l.length ? "0" + l : l;
      }
      function arrayToHex(e) {
        return "#" + e.map(toHex).join("");
      }
      function isIgnoredColor(e, l, c) {
        for (var d = 0; d < c.length; d++)
          if (
            (function (e, l, c) {
              switch (c.length) {
                case 3:
                  if (
                    255 !== e[l + 3] ||
                    (e[l] === c[0] && e[l + 1] === c[1] && e[l + 2] === c[2])
                  )
                    return !0;
                  break;
                case 4:
                  if (
                    e[l + 3] && c[3]
                      ? e[l] === c[0] &&
                        e[l + 1] === c[1] &&
                        e[l + 2] === c[2] &&
                        e[l + 3] === c[3]
                      : e[l + 3] === c[3]
                  )
                    return !0;
                  break;
                case 5:
                  if (
                    (function (e, l, c) {
                      var d = c[0],
                        m = c[1],
                        g = c[2],
                        y = c[3],
                        b = c[4],
                        C = e[l + 3],
                        P = inRange(C, y, b);
                      return y
                        ? !!(
                            (!C && P) ||
                            (inRange(e[l], d, b) &&
                              inRange(e[l + 1], m, b) &&
                              inRange(e[l + 2], g, b) &&
                              P)
                          )
                        : P;
                    })(e, l, c)
                  )
                    return !0;
                  break;
                default:
                  return !1;
              }
            })(e, l, c[d])
          )
            return !0;
        return !1;
      }
      function inRange(e, l, c) {
        return e >= l - c && e <= l + c;
      }
      function dominantAlgorithm(e, l, c) {
        for (
          var d = {},
            m = c.dominantDivider || 24,
            g = c.ignoredColor,
            y = c.step,
            b = [0, 0, 0, 0, 0],
            C = 0;
          C < l;
          C += y
        ) {
          var P = e[C],
            I = e[C + 1],
            B = e[C + 2],
            N = e[C + 3];
          if (!(g && isIgnoredColor(e, C, g))) {
            var F =
              Math.round(P / m) +
              "," +
              Math.round(I / m) +
              "," +
              Math.round(B / m);
            d[F]
              ? (d[F] = [
                  d[F][0] + P * N,
                  d[F][1] + I * N,
                  d[F][2] + B * N,
                  d[F][3] + N,
                  d[F][4] + 1,
                ])
              : (d[F] = [P * N, I * N, B * N, N, 1]),
              b[4] < d[F][4] && (b = d[F]);
          }
        }
        var V = b[0],
          G = b[1],
          Q = b[2],
          $ = b[3],
          Z = b[4];
        return $
          ? [
              Math.round(V / $),
              Math.round(G / $),
              Math.round(Q / $),
              Math.round($ / Z),
            ]
          : c.defaultColor;
      }
      function simpleAlgorithm(e, l, c) {
        for (
          var d = 0,
            m = 0,
            g = 0,
            y = 0,
            b = 0,
            C = c.ignoredColor,
            P = c.step,
            I = 0;
          I < l;
          I += P
        ) {
          var B = e[I + 3],
            N = e[I] * B,
            F = e[I + 1] * B,
            V = e[I + 2] * B;
          !(C && isIgnoredColor(e, I, C)) &&
            ((d += N), (m += F), (g += V), (y += B), b++);
        }
        return y
          ? [
              Math.round(d / y),
              Math.round(m / y),
              Math.round(g / y),
              Math.round(y / b),
            ]
          : c.defaultColor;
      }
      function sqrtAlgorithm(e, l, c) {
        for (
          var d = 0,
            m = 0,
            g = 0,
            y = 0,
            b = 0,
            C = c.ignoredColor,
            P = c.step,
            I = 0;
          I < l;
          I += P
        ) {
          var B = e[I],
            N = e[I + 1],
            F = e[I + 2],
            V = e[I + 3];
          !(C && isIgnoredColor(e, I, C)) &&
            ((d += B * B * V),
            (m += N * N * V),
            (g += F * F * V),
            (y += V),
            b++);
        }
        return y
          ? [
              Math.round(Math.sqrt(d / y)),
              Math.round(Math.sqrt(m / y)),
              Math.round(Math.sqrt(g / y)),
              Math.round(y / b),
            ]
          : c.defaultColor;
      }
      function getDefaultColor(e) {
        return getOption(e, "defaultColor", [0, 0, 0, 0]);
      }
      function getOption(e, l, c) {
        return void 0 === e[l] ? c : e[l];
      }
      function getSrc(e) {
        return "undefined" != typeof HTMLCanvasElement &&
          e instanceof HTMLCanvasElement
          ? "canvas"
          : m && e instanceof OffscreenCanvas
          ? "offscreencanvas"
          : isInstanceOfVideoFrame(e)
          ? "videoframe"
          : "undefined" != typeof ImageBitmap && e instanceof ImageBitmap
          ? "imagebitmap"
          : e.src;
      }
      function isInstanceOfHTMLImageElement(e) {
        return (
          "undefined" != typeof HTMLImageElement &&
          e instanceof HTMLImageElement
        );
      }
      var m = "undefined" != typeof OffscreenCanvas;
      function isInstanceOfVideoFrame(e) {
        return "undefined" != typeof VideoFrame && e instanceof VideoFrame;
      }
      var g = "undefined" == typeof window;
      function getError(e) {
        return Error("FastAverageColor: " + e);
      }
      function outputError(e, l) {
        l || console.error(e);
      }
      var y = (function () {
          function FastAverageColor() {
            (this.canvas = null), (this.ctx = null);
          }
          return (
            (FastAverageColor.prototype.getColorAsync = function (e, l) {
              if (!e)
                return Promise.reject(
                  getError("call .getColorAsync() without resource")
                );
              if ("string" == typeof e) {
                if ("undefined" == typeof Image)
                  return Promise.reject(
                    getError(
                      "resource as string is not supported in this environment"
                    )
                  );
                var c = new Image();
                return (
                  (c.crossOrigin = (l && l.crossOrigin) || ""),
                  (c.src = e),
                  this.bindImageEvents(c, l)
                );
              }
              if (isInstanceOfHTMLImageElement(e) && !e.complete)
                return this.bindImageEvents(e, l);
              var d = this.getColor(e, l);
              return d.error ? Promise.reject(d.error) : Promise.resolve(d);
            }),
            (FastAverageColor.prototype.getColor = function (e, l) {
              var c,
                d,
                y,
                b,
                C,
                P,
                I,
                B,
                N = getDefaultColor((l = l || {}));
              if (!e) {
                var F = getError("call .getColor() without resource");
                return outputError(F, l.silent), this.prepareResult(N, F);
              }
              var V =
                ((c = (function (e) {
                  if (isInstanceOfHTMLImageElement(e)) {
                    var l = e.naturalWidth,
                      c = e.naturalHeight;
                    return (
                      e.naturalWidth ||
                        -1 === e.src.search(/\.svg(\?|$)/i) ||
                        (l = c = 100),
                      { width: l, height: c }
                    );
                  }
                  return "undefined" != typeof HTMLVideoElement &&
                    e instanceof HTMLVideoElement
                    ? { width: e.videoWidth, height: e.videoHeight }
                    : isInstanceOfVideoFrame(e)
                    ? { width: e.codedWidth, height: e.codedHeight }
                    : { width: e.width, height: e.height };
                })(e)),
                (y = getOption((d = l), "left", 0)),
                (b = getOption(d, "top", 0)),
                (C = getOption(d, "width", c.width)),
                (P = getOption(d, "height", c.height)),
                (I = C),
                (B = P),
                "precision" === d.mode ||
                  (C > P
                    ? (B = Math.round((I = 100) / (C / P)))
                    : (I = Math.round((B = 100) / (P / C))),
                  (I > C || B > P || I < 10 || B < 10) && ((I = C), (B = P))),
                {
                  srcLeft: y,
                  srcTop: b,
                  srcWidth: C,
                  srcHeight: P,
                  destWidth: I,
                  destHeight: B,
                });
              if (
                !V.srcWidth ||
                !V.srcHeight ||
                !V.destWidth ||
                !V.destHeight
              ) {
                var F = getError(
                  'incorrect sizes for resource "'.concat(getSrc(e), '"')
                );
                return outputError(F, l.silent), this.prepareResult(N, F);
              }
              if (
                !this.canvas &&
                ((this.canvas = g
                  ? m
                    ? new OffscreenCanvas(1, 1)
                    : null
                  : document.createElement("canvas")),
                !this.canvas)
              ) {
                var F = getError(
                  "OffscreenCanvas is not supported in this browser"
                );
                return outputError(F, l.silent), this.prepareResult(N, F);
              }
              if (!this.ctx) {
                if (
                  ((this.ctx = this.canvas.getContext("2d", {
                    willReadFrequently: !0,
                  })),
                  !this.ctx)
                ) {
                  var F = getError(
                    "Canvas Context 2D is not supported in this browser"
                  );
                  return outputError(F, l.silent), this.prepareResult(N);
                }
                this.ctx.imageSmoothingEnabled = !1;
              }
              (this.canvas.width = V.destWidth),
                (this.canvas.height = V.destHeight);
              try {
                this.ctx.clearRect(0, 0, V.destWidth, V.destHeight),
                  this.ctx.drawImage(
                    e,
                    V.srcLeft,
                    V.srcTop,
                    V.srcWidth,
                    V.srcHeight,
                    0,
                    0,
                    V.destWidth,
                    V.destHeight
                  );
                var G = this.ctx.getImageData(
                  0,
                  0,
                  V.destWidth,
                  V.destHeight
                ).data;
                return this.prepareResult(this.getColorFromArray4(G, l));
              } catch (c) {
                var F = getError(
                  "security error (CORS) for resource ".concat(
                    getSrc(e),
                    ".\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image"
                  )
                );
                return (
                  outputError(F, l.silent),
                  l.silent || console.error(c),
                  this.prepareResult(N, F)
                );
              }
            }),
            (FastAverageColor.prototype.getColorFromArray4 = function (e, l) {
              l = l || {};
              var c,
                d,
                m = e.length,
                g = getDefaultColor(l);
              if (m < 4) return g;
              var y = 4 * (l.step || 1);
              switch (l.algorithm || "sqrt") {
                case "simple":
                  c = simpleAlgorithm;
                  break;
                case "sqrt":
                  c = sqrtAlgorithm;
                  break;
                case "dominant":
                  c = dominantAlgorithm;
                  break;
                default:
                  throw getError(
                    "".concat(l.algorithm, " is unknown algorithm")
                  );
              }
              return c(e, m - (m % 4), {
                defaultColor: g,
                ignoredColor: (d = l.ignoredColor)
                  ? Array.isArray(d[0])
                    ? d
                    : [d]
                  : [],
                step: y,
                dominantDivider: l.dominantDivider,
              });
            }),
            (FastAverageColor.prototype.prepareResult = function (e, l) {
              var c = e.slice(0, 3),
                d = [e[0], e[1], e[2], e[3] / 255],
                m = (299 * e[0] + 587 * e[1] + 114 * e[2]) / 1e3 < 128;
              return {
                value: [e[0], e[1], e[2], e[3]],
                rgb: "rgb(" + c.join(",") + ")",
                rgba: "rgba(" + d.join(",") + ")",
                hex: arrayToHex(c),
                hexa: arrayToHex(e),
                isDark: m,
                isLight: !m,
                error: l,
              };
            }),
            (FastAverageColor.prototype.destroy = function () {
              this.canvas &&
                ((this.canvas.width = 1),
                (this.canvas.height = 1),
                (this.canvas = null)),
                (this.ctx = null);
            }),
            (FastAverageColor.prototype.bindImageEvents = function (e, l) {
              var c = this;
              return new Promise(function (d, m) {
                var onload = function () {
                    unbindEvents();
                    var g = c.getColor(e, l);
                    g.error ? m(g.error) : d(g);
                  },
                  onerror = function () {
                    unbindEvents(),
                      m(getError('Error loading image "'.concat(e.src, '"')));
                  },
                  onabort = function () {
                    unbindEvents(),
                      m(getError('Image "'.concat(e.src, '" loading aborted')));
                  },
                  unbindEvents = function () {
                    e.removeEventListener("load", onload),
                      e.removeEventListener("error", onerror),
                      e.removeEventListener("abort", onabort);
                  };
                e.addEventListener("load", onload),
                  e.addEventListener("error", onerror),
                  e.addEventListener("abort", onabort);
              });
            }),
            FastAverageColor
          );
        })(),
        b = c(17296),
        C = c(71628),
        P = c(10994);
      let I = {
          dateTimeDelimiter: /[T ]/,
          timeZoneDelimiter: /[Z ]/i,
          timezone: /([Z+-].*)$/,
        },
        B = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,
        N =
          /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,
        F = /^([+-])(\d{2})(?::?(\d{2}))?$/;
      function parseDateUnit(e) {
        return e ? parseInt(e) : 1;
      }
      function parseTimeUnit(e) {
        return (e && parseFloat(e.replace(",", "."))) || 0;
      }
      let V = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      function isLeapYearIndex(e) {
        return e % 400 == 0 || (e % 4 == 0 && e % 100 != 0);
      }
      var date_fns_parseISO = function (e, l) {
          let c, d;
          let m = l?.additionalDigits ?? 2,
            g = (function (e) {
              let l;
              let c = {},
                d = e.split(I.dateTimeDelimiter);
              if (d.length > 2) return c;
              if (
                (/:/.test(d[0])
                  ? (l = d[0])
                  : ((c.date = d[0]),
                    (l = d[1]),
                    I.timeZoneDelimiter.test(c.date) &&
                      ((c.date = e.split(I.timeZoneDelimiter)[0]),
                      (l = e.substr(c.date.length, e.length)))),
                l)
              ) {
                let e = I.timezone.exec(l);
                e
                  ? ((c.time = l.replace(e[1], "")), (c.timezone = e[1]))
                  : (c.time = l);
              }
              return c;
            })(e);
          if (g.date) {
            let e = (function (e, l) {
              let c = RegExp(
                  "^(?:(\\d{4}|[+-]\\d{" +
                    (4 + l) +
                    "})|(\\d{2}|[+-]\\d{" +
                    (2 + l) +
                    "})$)"
                ),
                d = e.match(c);
              if (!d) return { year: NaN, restDateString: "" };
              let m = d[1] ? parseInt(d[1]) : null,
                g = d[2] ? parseInt(d[2]) : null;
              return {
                year: null === g ? m : 100 * g,
                restDateString: e.slice((d[1] || d[2]).length),
              };
            })(g.date, m);
            c = (function (e, l) {
              if (null === l) return new Date(NaN);
              let c = e.match(B);
              if (!c) return new Date(NaN);
              let d = !!c[4],
                m = parseDateUnit(c[1]),
                g = parseDateUnit(c[2]) - 1,
                y = parseDateUnit(c[3]),
                b = parseDateUnit(c[4]),
                C = parseDateUnit(c[5]) - 1;
              if (d)
                return b >= 1 && b <= 53 && C >= 0 && C <= 6
                  ? (function (e, l, c) {
                      let d = new Date(0);
                      d.setUTCFullYear(e, 0, 4);
                      let m = d.getUTCDay() || 7;
                      return (
                        d.setUTCDate(
                          d.getUTCDate() + ((l - 1) * 7 + c + 1 - m)
                        ),
                        d
                      );
                    })(l, b, C)
                  : new Date(NaN);
              {
                let e = new Date(0);
                return g >= 0 &&
                  g <= 11 &&
                  y >= 1 &&
                  y <= (V[g] || (isLeapYearIndex(l) ? 29 : 28)) &&
                  m >= 1 &&
                  m <= (isLeapYearIndex(l) ? 366 : 365)
                  ? (e.setUTCFullYear(l, g, Math.max(m, y)), e)
                  : new Date(NaN);
              }
            })(e.restDateString, e.year);
          }
          if (!c || isNaN(c.getTime())) return new Date(NaN);
          let y = c.getTime(),
            b = 0;
          if (
            g.time &&
            isNaN(
              (b = (function (e) {
                let l = e.match(N);
                if (!l) return NaN;
                let c = parseTimeUnit(l[1]),
                  d = parseTimeUnit(l[2]),
                  m = parseTimeUnit(l[3]);
                return (
                  24 === c
                    ? 0 === d && 0 === m
                    : m >= 0 && m < 60 && d >= 0 && d < 60 && c >= 0 && c < 25
                )
                  ? c * P.vh + d * P.yJ + 1e3 * m
                  : NaN;
              })(g.time))
            )
          )
            return new Date(NaN);
          if (g.timezone) {
            if (
              isNaN(
                (d = (function (e) {
                  if ("Z" === e) return 0;
                  let l = e.match(F);
                  if (!l) return 0;
                  let c = "+" === l[1] ? -1 : 1,
                    d = parseInt(l[2]),
                    m = (l[3] && parseInt(l[3])) || 0;
                  return m >= 0 && m <= 59 ? c * (d * P.vh + m * P.yJ) : NaN;
                })(g.timezone))
              )
            )
              return new Date(NaN);
          } else {
            let e = new Date(y + b),
              l = new Date(0);
            return (
              l.setFullYear(
                e.getUTCFullYear(),
                e.getUTCMonth(),
                e.getUTCDate()
              ),
              l.setHours(
                e.getUTCHours(),
                e.getUTCMinutes(),
                e.getUTCSeconds(),
                e.getUTCMilliseconds()
              ),
              l
            );
          }
          return new Date(y + b + d);
        },
        G = c(11022),
        date_fns_differenceInSeconds = function (e, l, c) {
          var d;
          let m = (+(0, G.Q)(e) - +(0, G.Q)(l)) / 1e3;
          return ((d = c?.roundingMethod),
          (e) => {
            let l = d ? Math[d] : Math.trunc,
              c = l(e);
            return 0 === c ? 0 : c;
          })(m);
        },
        Q = c(4814),
        $ = c(5761),
        Z = c(68563),
        Y = c(39838),
        et = c.n(Y);
      let formatNumberWithAbbreviation = (e) => {
          let l = e,
            c = 0;
          for (; l >= 1e3; ) (l /= 1e3), c++;
          let d = 2;
          return (
            l < 10 && (d = 3),
            l < 1 && (d = 4),
            Number(l.toFixed(d)).toString() + ["", "K", "M", "B", "T"][c]
          );
        },
        roundToTwo = (e) => {
          if (!e) return 0;
          if ("string" == typeof e) return parseFloat(e);
          if ("number" == typeof e && isNaN(e)) return 0;
          let l = Math.round((e + Number.EPSILON) * 100) / 100;
          return l;
        },
        roundToFour = (e) => {
          if (!e) return 0;
          if ("string" == typeof e) return parseFloat(e);
          if ("number" == typeof e && isNaN(e)) return 0;
          let l = Math.round((e + Number.EPSILON) * 1e4) / 1e4;
          return l;
        };
      function cn() {
        for (var e = arguments.length, l = Array(e), c = 0; c < e; c++)
          l[c] = arguments[c];
        return (0, $.m6)((0, Q.W)(l));
      }
      let formatSeconds = (e) => {
        let l = "",
          c = Math.floor(e / 31536e3);
        c > 0 && (l += "".concat(c, "y "));
        let d = Math.floor((e % 31536e3) / 2592e3);
        d > 0 && (l += "".concat(d, "m "));
        let m = Math.floor((e % 2592e3) / 86400);
        return m > 0 && (l += "".concat(m, " days ")), l.trim();
      };
      function getTokenColor(e) {
        return {
          eth: "#627EEA",
          btc: "#F7931A",
          usdc: "#2775ca",
          usdbc: "#2775CA",
          dai: "#eac461",
          usdt: "#26a17b",
          weth: "#e94287",
          wsteth: "#00a3ff",
          sdai: "#85c23f",
          susds: "#35cb98",
        }[e];
      }
      function toRgba(e) {
        if (
          !(function (e) {
            let l = new Option().style;
            return (l.color = e), "" !== l.color;
          })(e)
        )
          return "rgba(0, 0, 0, 1)";
        if (e.startsWith("rgba")) return e;
        if (e.startsWith("#"))
          return (function (e) {
            let l,
              c,
              d,
              m =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : 1;
            return (
              3 === (e = e.replace(/^#/, "")).length
                ? ((l = parseInt(e[0] + e[0], 16)),
                  (c = parseInt(e[1] + e[1], 16)),
                  (d = parseInt(e[2] + e[2], 16)))
                : 6 === e.length
                ? ((l = parseInt(e.slice(0, 2), 16)),
                  (c = parseInt(e.slice(2, 4), 16)),
                  (d = parseInt(e.slice(4, 6), 16)))
                : ((l = 0), (c = 0), (d = 0)),
              (l = isNaN(l) ? 0 : l),
              (c = isNaN(c) ? 0 : c),
              (d = isNaN(d) ? 0 : d),
              "rgba("
                .concat(l, ", ")
                .concat(c, ", ")
                .concat(d, ", ")
                .concat(m, ")")
            );
          })(e);
        {
          var l;
          if (!e.startsWith("rgb")) return "rgba(0, 0, 0, 1)";
          let [c, d, m] = (null === (l = e.match(/\d+/g)) || void 0 === l
            ? void 0
            : l.map(Number)) || [0, 0, 0];
          return "rgba(".concat(c, ", ").concat(d, ", ").concat(m, ", 1)");
        }
      }
      function editAlpha(e, l) {
        var c;
        let d = toRgba(e),
          [m, g, y, b] = (null === (c = d.match(/\d+/g)) || void 0 === c
            ? void 0
            : c.map(Number)) || [0, 0, 0, 1];
        return "rgba("
          .concat(m, ", ")
          .concat(g, ", ")
          .concat(y, ", ")
          .concat(l, ")");
      }
      let formatAmount = (e) => {
          if (0 === e) return "0";
          let l = Math.abs(e),
            c = e.toFixed(
              l < 5e-6
                ? 8
                : l < 5e-4
                ? 6
                : l < 0.5
                ? 4
                : l < 1
                ? 4
                : l < 10
                ? 3
                : l < 100
                ? 2
                : l < 1e3
                ? 1
                : 0
            );
          return c.replace(/\.?0+$/, "");
        },
        en = (function (e) {
          let l = new Map();
          return function () {
            for (var c = arguments.length, d = Array(c), m = 0; m < c; m++)
              d[m] = arguments[m];
            let g = JSON.stringify(d);
            if (l.has(g)) return l.get(g);
            let y = e(...d);
            return l.set(g, y), y;
          };
        })((e, l) => {
          if (!e || !l) return 0;
          let c = 0,
            d = 0;
          return (
            l.forEach((l, m) => {
              let g = new (et())(e, l).distance;
              g <= c && ((c = g), (d = m));
            }),
            d
          );
        }),
        getAverageColor = async (e) => {
          try {
            let l = new y(),
              c = await l.getColorAsync(
                "/_next/image?url=".concat(
                  encodeURIComponent(e),
                  "&w=1080&q=75"
                )
              );
            return console.log(e, c.hex), c.error ? "#5f58a0" : c.hex;
          } catch (e) {
            return console.log(e), "#5f58a0";
          }
        },
        er = {
          AaveV3Ethereum: "proto_mainnet_v3",
          "AaveV3ETH-LIDO": "proto_lido_v3",
          "AaveV3ETH-ETHERFI": "proto_etherfi_v3",
          AaveV3Optimism: "proto_optimism_v3",
          AaveV3Polygon: "proto_polygon_v3",
          AaveV3Base: "proto_base_v3",
          AaveV3Arbitrum: "proto_arbitrum_v3",
          AaveV3Avalanche: "proto_avalanche_v3",
          AaveV3BSC: "proto_bnb_v3",
          AaveV3Gnosis: "proto_gnosis_v3",
          AaveV3Scroll: "proto_scroll_v3",
          AaveV3zkSync: "proto_zksync_v3",
          AaveV3Linea: "proto_linea_v3",
        },
        ei = { 1: "ethereum", 8453: "base" };
      function getProtocolLink(e) {
        var l, c, d, m;
        switch (
          null == e
            ? void 0
            : null === (l = e.protocol) || void 0 === l
            ? void 0
            : l.toLowerCase()
        ) {
          case "aave":
            return "https://app.aave.com/reserve-overview/?underlyingAsset="
              .concat(
                null === (d = e.tokens) || void 0 === d
                  ? void 0
                  : null === (c = d[0]) || void 0 === c
                  ? void 0
                  : c.toLowerCase(),
                "&marketName="
              )
              .concat(er[e.protocolData]);
          case "morpho":
            return "https://app.morpho.org/"
              .concat(
                ei[
                  null == e
                    ? void 0
                    : null === (m = e.chain) || void 0 === m
                    ? void 0
                    : m.toString()
                ],
                "/market/"
              )
              .concat(e.protocolData);
        }
      }
      let getVaultLinks = (e, l) =>
          e && l
            ? ""
                .concat("https://api.noya.ai/pics", "/")
                .concat(l, "/")
                .concat(String(e).toLowerCase(), ".png")
            : "",
        eo = {
          getReferredUser: (e) =>
            (0, d.jsxs)("p", {
              className:
                "text-center font-EuclidCircularB line-clamp-1 flex items-center gap-2 justify-center text-[12px] sm:text-[14px]",
              children: [
                (0, d.jsx)("span", {
                  className: "text-center font-bold",
                  children: "Referred User",
                }),
                (0, d.jsx)("span", {
                  className: "text-center font-normal text-[#FFFFFF80]",
                  children: e,
                }),
              ],
            }),
          getRewardDescription: (e) => {
            let l =
              "text-center font-EuclidCircularB line-clamp-1 flex items-center gap-2 justify-center text-[12px] sm:text-[14px]";
            return e.grantedByAdmin
              ? (0, d.jsxs)("p", {
                  className: l,
                  children: [
                    (0, d.jsx)("span", {
                      className: "".concat(l, " font-bold"),
                      children: "You were awarded",
                    }),
                    (0, d.jsxs)("span", {
                      className: "".concat(l, " font-normal text-[#FFFFFF80]"),
                      children: [
                        formatNumberWithAbbreviation(roundToTwo(e.stars)),
                        " stars",
                      ],
                    }),
                  ],
                })
              : (0, d.jsxs)("p", {
                  className: l,
                  children: [
                    (0, d.jsx)("span", {
                      className: "".concat(l, " font-bold"),
                      children: "You got",
                    }),
                    (0, d.jsxs)("span", {
                      className: "".concat(l, " font-normal text-[#FFFFFF80]"),
                      children: [
                        formatNumberWithAbbreviation(roundToTwo(e.stars)),
                        " stars",
                      ],
                    }),
                    (0, d.jsx)("span", {
                      className: "".concat(l, " font-bold"),
                      children: "for",
                    }),
                    (0, d.jsxs)("span", {
                      className: "".concat(l, " font-normal text-[#FFFFFF80]"),
                      children: ["week ", e.week],
                    }),
                  ],
                });
          },
          getNotificationAction: (e, l) => {
            if (!e.action) return "";
            let c = window.location.pathname.replace("/", ""),
              d = e.extra,
              m = {};
            if (d)
              try {
                m = JSON.parse(d);
              } catch (e) {}
            switch (e.action) {
              case "spins":
                return "/space-race";
              case "discord":
                return l.discord
                  ? "https://discord.com/channels/1100874221959249932/1101085939327045712"
                  : ""
                      .concat(
                        "https://api.noya.ai/noya_space",
                        "/auth/discord?address="
                      )
                      .concat(l.address, "&redirect=")
                      .concat(encodeURIComponent(c));
              case "twitter":
                return ""
                  .concat(
                    "https://api.noya.ai/noya_space",
                    "/auth/twitter?address="
                  )
                  .concat(l.address, "&redirect=")
                  .concat(encodeURIComponent(c));
              case "bond":
                if (null == m ? void 0 : m.vaultName)
                  return "/vaults/".concat(m.vaultName);
                return "/";
              default:
                if (e.action.includes("vault"))
                  return "/vaults/".concat(e.action.split("-")[1]);
                if (e.action.includes("spin")) return "/space-race";
                if (e.action.includes("twitter"))
                  return l.discord
                    ? "https://discord.com/channels/1100874221959249932/1101085939327045712"
                    : ""
                        .concat(
                          "https://api.noya.ai/noya_space",
                          "/auth/discord?address="
                        )
                        .concat(l.address, "&redirect=")
                        .concat(encodeURIComponent(c));
                if (e.action.includes("discord"))
                  return ""
                    .concat(
                      "https://api.noya.ai/noya_space",
                      "/auth/twitter?address="
                    )
                    .concat(l.address, "&redirect=")
                    .concat(encodeURIComponent(c));
                return e.action;
            }
          },
          getNotificationActionTitle: (e, l) => {
            switch (e.action) {
              case "discord":
                return l.discord ? "Verify Discord" : "Join Our Discord";
              case "twitter":
                return "Open X";
              case "bond":
                return "Bond";
              default:
                if (e.action.includes("twitter")) return "Open X";
                if (e.action.includes("discord")) return "Open Discord";
                return "Open Vaults";
            }
          },
          roundToTwo,
          timeLeft: (e, l) => {
            let c = new Date(),
              d = date_fns_differenceInSeconds(c, e);
            return formatSeconds(l - d);
          },
          formatNumberWithAbbreviation,
          findClosestIndex: en,
          formatPrice: (e, l, c) =>
            "APY" === l
              ? "".concat(eo.formatWithExponential(e), "%")
              : ""
                  .concat("USD" === c || "USDC" === c ? "$" : "")
                  .concat(eo.formatWithExponential(e))
                  .concat("USD" !== c && "USDC" !== c ? " ".concat(c) : ""),
          getImageSrc: function (e) {
            let l =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : "space";
            return e
              ? ""
                  .concat(
                    "space" === l
                      ? "https://api.noya.ai/noya_space"
                      : "https://api.noya.ai/data",
                    "/file/"
                  )
                  .concat(e.filename)
              : "";
          },
          getDeFiLlamaImgSrc: (e) => {
            let {
              id: l,
              width: c = 40,
              height: d = 40,
              type: m = "chains",
              name: g,
            } = e;
            return "chains" === m
              ? (null == g ? void 0 : g.toLowerCase()) === "loading"
                ? "/loading.gif"
                : (null == g ? void 0 : g.toLowerCase().includes("zksync"))
                ? "/zk-logo.png"
                : (null == g ? void 0 : g.toLowerCase().includes("idle"))
                ? "/man.png"
                : (null == g ? void 0 : g.toLowerCase().includes("bsc"))
                ? "/chains/bsc.png"
                : (null == g ? void 0 : g.toLowerCase().includes("binance"))
                ? "/chains/binance.png"
                : "https://icons.llamao.fi/icons/"
                    .concat(m, "/rsz_")
                    .concat(null == g ? void 0 : g.toLowerCase(), "?w=")
                    .concat(c, "&h=")
                    .concat(d)
              : l
              ? l.toLocaleLowerCase().includes("idle")
                ? "/man.png"
                : l.toLowerCase().includes("aave")
                ? "https://icons.llamao.fi/icons/protocols/aave?w="
                    .concat(c, "&h=")
                    .concat(d)
                : l.toLowerCase().includes("morpho")
                ? "https://icons.llamao.fi/icons/protocols/morpho?w="
                    .concat(c, "&h=")
                    .concat(d)
                : l.toLowerCase().includes("lido")
                ? "https://icons.llamao.fi/icons/protocols/lido?w="
                    .concat(c, "&h=")
                    .concat(d)
                : "https://icons.llamao.fi/icons/"
                    .concat(m, "/")
                    .concat(l, "?w=")
                    .concat(c, "&h=")
                    .concat(d)
              : "";
          },
          secondsToMonths: (e) => {
            let l = e / 2592e3;
            return l < 1
              ? "0 Months"
              : l <= 3
              ? "3 Months"
              : l <= 6
              ? "6 Months"
              : "1 Year";
          },
          cn,
          formatDateBasedOnFrequency: function (e) {
            let { date: l, frequency: c } = e,
              d = date_fns_parseISO(l);
            switch (c) {
              case "1D":
                return (0, C.ZP)(d, "HH:mm");
              case "1W":
                return (0, C.ZP)(d, "EEE");
              case "1M":
              default:
                return (0, C.ZP)(d, "MMM dd");
              case "1Y":
                return (0, C.ZP)(d, "MMM");
            }
          },
          getPercentDifference: (e, l) => (e && l ? ((e - l) / l) * 100 : 0),
          tooltipFormatter: (e, l) => {
            switch (l) {
              case "1D":
                return (0, C.ZP)(new Date(e), "h:mm a");
              case "1W":
              case "1M":
              default:
                return (0, C.ZP)(new Date(e), "MMM d, yyyy");
              case "1Y":
                return (0, C.ZP)(new Date(e), "MMM, yyyy");
            }
          },
          getProtocolColor: (e) => {
            var l;
            if (!e) return "#5f58a0";
            let c = {
                "uniswap-v2": "#f0538e",
                concentrator: "#00a6fc",
                "uniswap-v3": "#ec2972",
                aura: "#7631d9",
                hop: "#e287af",
                ribbon: "#fc2a54",
                premia: "#5294fc",
                "gmd/protocol": "#5ad9f1",
                synapse: "#c465fc",
                sommelier: "#ec5e55",
                sturdy: "#5173ed",
                "pancakeswap-amm-v3": "#d1884f",
                "aave-v2": "#aa59a2",
                "yearn-finance": "#0b0b0b",
                "balancer-v2": "#050404",
                convex: "#e9d7b4",
                idle: "#627EEA",
                velodrome: "#feab37",
                beefy: "#050404",
                stakedao: "#310c5c",
                sherlock: "#8725e8",
                goldfinch: "#1d223b",
                iron__bank: "#34bb49",
                arrakis__v1: "#e7702e",
                angle: "#a42890",
                deri__protocol: "#4f83b9",
                curve: "#b2f946",
                compound: "#02d395",
                "aave-v3": "#569bb8",
                stargate: "#999999",
                lido: "#5e6aff",
              },
              d = Object.keys(c),
              m = e.toLowerCase(),
              g = d.find((e) => e.toLowerCase() === m);
            if (g) return c[g];
            let y = d.map((l) => {
                let c = (l.length - Math.abs(l.length - e.length)) / l.length;
                return { protocol: l, percentage: c };
              }),
              b = y.sort((e, l) => l.percentage - e.percentage);
            return c[
              null == b
                ? void 0
                : null === (l = b[0]) || void 0 === l
                ? void 0
                : l.protocol
            ];
          },
          getChainColor: (e) =>
            "string" == typeof e
              ? {
                  base: "#1BA4F1",
                  ethereum: "#627EEA",
                  polygon: "#b49ce4",
                  optimism: "#F30E0E",
                  arbitrum: "#162c4f",
                  gnosis: "#09765e",
                  avalanche: "#162c4f",
                  scroll: "#ffeeda",
                }[(e = e.toLowerCase())]
              : {
                  42161: "#162c4f",
                  1: "#627EEA",
                  10: "#F30E0E",
                  137: "#b49ce4",
                  56: "#f4f001",
                  8453: "#1BA4F1",
                  100: "#09765e",
                  534352: "#ffeeda",
                }[e],
          getSymbolFromVaultType: (e) => {
            switch (e) {
              case b.g9.ETH:
                return "ETH";
              case b.g9.BTC:
                return "BTC";
              case b.g9.stables:
                return "USDC";
              default:
                return "ETH";
            }
          },
          formatWithExponential: (e) => {
            let l = "string" == typeof e ? parseFloat(e) : e;
            return 9e-5 > Math.abs(l) && 0 !== l
              ? l.toExponential(2)
              : (l = l < 0.01 ? roundToFour(l) : roundToTwo(l)) < 1e3
              ? l.toString()
              : formatNumberWithAbbreviation(l);
          },
          roundToFour,
          getTokenColor,
          showToast: function (e) {
            let l =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : "error",
              c = arguments.length > 2 ? arguments[2] : void 0;
            Z.ZP[l](
              (l) =>
                (0, d.jsxs)("span", {
                  className:
                    "flex items-center justify-between w-fit bg-[#100f14] border border-[#7d6ff6] font-['Euclid_Circular_B'] text-white",
                  children: [
                    (0, d.jsx)("span", {
                      className: "text-[14px] font-normal",
                      children: e,
                    }),
                    (0, d.jsx)("div", {
                      className: cn(
                        "h-[35px] w-[155px] p-[1px] bg-gradient-to-r from-[#58e1d9] via-[#7d6ff6] to-[#7d6ff6] rounded-[5px] ml-4",
                        null == c ? void 0 : c.containerClassName
                      ),
                      children: (0, d.jsx)("button", {
                        onClick: () => {
                          var e;
                          Z.ZP.dismiss(l.id),
                            null == c ||
                              null === (e = c.onClick) ||
                              void 0 === e ||
                              e.call(c);
                        },
                        className: cn(
                          "h-full w-full bg-black cursor-pointer hover:bg-[rgba(25,23,31,1)] rounded-[5px] font-['Russo_One'] text-[14px] text-white transition-all duration-300 px-2",
                          null == c ? void 0 : c.buttonClassName
                        ),
                        children: (null == c ? void 0 : c.text) || "Dismiss",
                      }),
                    }),
                  ],
                }),
              {
                duration: 4e3,
                style: {
                  background: "#100f14",
                  border: "1px solid #7d6ff6",
                  padding: "12px 16px",
                  color: "#ffffff",
                },
              }
            );
          },
          getProtocolLink,
        };
      var ea = eo;
    },
    17296: function (e, l, c) {
      "use strict";
      var d, m, g, y, b, C, P, I, B, N;
      c.d(l, {
        g9: function () {
          return d;
        },
        iI: function () {
          return b;
        },
        og: function () {
          return y;
        },
      }),
        ((C = d || (d = {})).all = "All"),
        (C.stables = "Stables"),
        (C.ETH = "ETH"),
        (C.BTC = "BTC"),
        (C.others = "Others"),
        ((P = m || (m = {})).UpperAdmin = "upper_admin"),
        (P.Admin = "admin"),
        (P.BetaTester = "beta_tester"),
        (P.User = "user"),
        ((I = g || (g = {})).DEPOSIT = "deposit"),
        (I.SPIN = "spin"),
        (I.BOND_3 = "bond-3"),
        (I.BOND_6 = "bond-6"),
        (I.BOND_12 = "bond-12"),
        (I.TWITTER = "twitter"),
        (I.DISCORD = "discord"),
        (I.EMAIL = "email"),
        (I.TWITTER_POST = "twitter-post"),
        (I.POINTS_GRANTED = "points-granted"),
        ((B = y || (y = {})).waitingForCalculation = "WFC"),
        (B.waitingForProcess = "WFP"),
        (B.done = "done"),
        ((N = b || (b = {})).deposit = "deposit"),
        (N.withdraw = "withdraw"),
        (N.bond = "bond");
    },
    59440: function (e, l, c) {
      "use strict";
      var d = c(50959);
      l.Z = () => {
        let [e, l] = (0, d.useState)({ width: void 0, height: void 0 });
        return (
          (0, d.useEffect)(() => {
            function handleResize() {
              l({ width: window.innerWidth, height: window.innerHeight });
            }
            return (
              window.addEventListener("resize", handleResize),
              handleResize(),
              () => window.removeEventListener("resize", handleResize)
            );
          }, []),
          e
        );
      };
    },
    22919: function () {},
    78402: function () {},
    58576: function () {},
    93241: function () {},
    36230: function () {},
    56266: function (e) {
      e.exports = {
        overlay_wrapper: "ConnectWalletOverlay_overlay_wrapper__7Chym",
        overlay_content: "ConnectWalletOverlay_overlay_content__WovPd",
        overlay_blur: "ConnectWalletOverlay_overlay_blur__a7PAU",
        fadeIn: "ConnectWalletOverlay_fadeIn__AbvIi",
        connect_container: "ConnectWalletOverlay_connect_container__VQnv8",
        slideUp: "ConnectWalletOverlay_slideUp__xBQCU",
        connect_button: "ConnectWalletOverlay_connect_button__4PnJI",
      };
    },
    30423: function (e) {
      e.exports = {
        Drawer_container: "Drawer_Drawer_container__0EXhf",
        "show-up": "Drawer_show-up___SbtX",
        Drawer_header: "Drawer_Drawer_header__q9ikr",
        Drawer_header_icon: "Drawer_Drawer_header_icon__q9j67",
        Drawer_header_close: "Drawer_Drawer_header_close__XBA9N",
        Drawer_links_box: "Drawer_Drawer_links_box__3Uc5e",
        Drawer_socials_box: "Drawer_Drawer_socials_box__cUpCT",
        Drawer_socials_box_icon: "Drawer_Drawer_socials_box_icon___Nbj_",
        Drawer_connect_box: "Drawer_Drawer_connect_box__3K6D6",
      };
    },
    34532: function (e) {
      e.exports = {
        BondModal_wrapper: "BondModal_BondModal_wrapper__XjbcS",
        BondModal_container: "BondModal_BondModal_container___of97",
        BondModal_leftGlow: "BondModal_BondModal_leftGlow__ALND3",
        BondModal_rightGlow: "BondModal_BondModal_rightGlow__RDrH7",
        BondModal_close: "BondModal_BondModal_close__N6Dby",
        BondModal_head: "BondModal_BondModal_head__N_q_f",
        BondModal_head_left: "BondModal_BondModal_head_left__zituf",
        breakLine: "BondModal_breakLine__5IeYj",
        BondModal_description_box: "BondModal_BondModal_description_box__vZHao",
        BondModal_params_box: "BondModal_BondModal_params_box__42P2g",
        BondModal_param: "BondModal_BondModal_param__1JUOh",
        BondModal_param_dashed: "BondModal_BondModal_param_dashed__IU_TY",
        BondModal_param_box: "BondModal_BondModal_param_box___by2u",
        BondModal_strategy_param_box:
          "BondModal_BondModal_strategy_param_box__5i701",
        BondModal_strategy_box: "BondModal_BondModal_strategy_box__OveYn",
        BondModal_strategy_right: "BondModal_BondModal_strategy_right__1KY0_",
        BondModal_strategy_left: "BondModal_BondModal_strategy_left__PERsx",
        BondModal_select_container_box:
          "BondModal_BondModal_select_container_box__sYegx",
        BondModal_select_box: "BondModal_BondModal_select_box__pClUk",
        BondModal_select: "BondModal_BondModal_select__Fw7hZ",
        BondModal_select_Text_Image:
          "BondModal_BondModal_select_Text_Image__NMJ_g",
        BondModal_select_img: "BondModal_BondModal_select_img__aFOnm",
        BondModal_select_icon: "BondModal_BondModal_select_icon__9w835",
        BondModal_bottom_box: "BondModal_BondModal_bottom_box__UiFtn",
        color_1: "BondModal_color_1__5XBh3",
        img: "BondModal_img__0vB2e",
        rotate: "BondModal_rotate__uwZs5",
      };
    },
    11446: function (e) {
      e.exports = {
        ConnectPopUp_wrapper: "ConnectPopUp_ConnectPopUp_wrapper__wB_HA",
        "show-up": "ConnectPopUp_show-up___miTp",
        ConnectPopUp_container: "ConnectPopUp_ConnectPopUp_container__VhIEX",
        ConnectPopUp_container_close:
          "ConnectPopUp_ConnectPopUp_container_close__8YNrB",
        ConnectPopUp_title: "ConnectPopUp_ConnectPopUp_title__lQbIr",
        breakLine: "ConnectPopUp_breakLine__fRovX",
        ConnectPopUp_Warning_Text:
          "ConnectPopUp_ConnectPopUp_Warning_Text__7haet",
        ConnectPopUp_wallets_box:
          "ConnectPopUp_ConnectPopUp_wallets_box__8CruY",
        ConnectPopUp_wallet: "ConnectPopUp_ConnectPopUp_wallet__mnXJ8",
        ConnectPopUp_wallet_disable:
          "ConnectPopUp_ConnectPopUp_wallet_disable__2zRwz",
        "fade-in": "ConnectPopUp_fade-in__YSQ00",
        ConnectPopUp_wallet_selected:
          "ConnectPopUp_ConnectPopUp_wallet_selected__p93dV",
        ConnectPopUp_wallet_image:
          "ConnectPopUp_ConnectPopUp_wallet_image__dfaSj",
        ConnectPopUp_terms_box: "ConnectPopUp_ConnectPopUp_terms_box__ikamb",
        ConnectPopUp_checkbox: "ConnectPopUp_ConnectPopUp_checkbox__CeGs7",
        ConnectPopUp_shadow: "ConnectPopUp_ConnectPopUp_shadow__LXt_i",
      };
    },
    99490: function (e) {
      e.exports = {
        DepositModal_wrapper: "DepositModal_DepositModal_wrapper__NFptO",
        DepositModal_container: "DepositModal_DepositModal_container__h4_Wk",
        DepositModal_leftGlow: "DepositModal_DepositModal_leftGlow__5Q9LR",
        DepositModal_rightGlow: "DepositModal_DepositModal_rightGlow__QUA9b",
        DepositModal_close: "DepositModal_DepositModal_close__YXsDY",
        DepositModal_head: "DepositModal_DepositModal_head__rXLQx",
        DepositModal_head_left: "DepositModal_DepositModal_head_left__9jdD6",
        breakLine: "DepositModal_breakLine__zaK9Z",
        DepositModal_description_box:
          "DepositModal_DepositModal_description_box__O4yOt",
        DepositModal_params_box: "DepositModal_DepositModal_params_box__RFiVD",
        DepositModal_param: "DepositModal_DepositModal_param__KNvG4",
        DepositModal_param_dashed:
          "DepositModal_DepositModal_param_dashed__9m46L",
        DepositModal_param_box: "DepositModal_DepositModal_param_box__Mfw9p",
        DepositModal_strategy_param_box:
          "DepositModal_DepositModal_strategy_param_box__3JBcM",
        DepositModal_strategy_box:
          "DepositModal_DepositModal_strategy_box__tdSB8",
        DepositModal_strategy_right:
          "DepositModal_DepositModal_strategy_right__sh745",
        DepositModal_select_container_box:
          "DepositModal_DepositModal_select_container_box__ew5SO",
        DepositModal_select_box: "DepositModal_DepositModal_select_box__X6SNO",
        DepositModal_select: "DepositModal_DepositModal_select__4RYXI",
        DepositModal_select_Text_Image:
          "DepositModal_DepositModal_select_Text_Image__nGrIF",
        DepositModal_select_img: "DepositModal_DepositModal_select_img__EUp_Z",
        DepositModal_select_icon:
          "DepositModal_DepositModal_select_icon__sGX6E",
        DepositModal_bottom_box: "DepositModal_DepositModal_bottom_box__bJJ_y",
        color_1: "DepositModal_color_1__eP23L",
        img: "DepositModal_img__qCopU",
        rotate: "DepositModal_rotate__uYrGM",
      };
    },
    71045: function (e) {
      e.exports = {
        DragScale_container: "DragScale_DragScale_container___1yZz",
        DragScale_title: "DragScale_DragScale_title__rSzUd",
        DragScale_data_box: "DragScale_DragScale_data_box__o4GTM",
        DragScale_data_amount_box: "DragScale_DragScale_data_amount_box__BQxBI",
        divider: "DragScale_divider__Ox3pp",
        DragScale_select_box: "DragScale_DragScale_select_box__NJWIq",
        DragScale_select_line: "DragScale_DragScale_select_line__aocPc",
        DragScale_select_progress: "DragScale_DragScale_select_progress__qtof1",
        DragScale_select_trigger: "DragScale_DragScale_select_trigger__0KFEq",
        DragScale_select_precents_box:
          "DragScale_DragScale_select_precents_box__Ef_Xl",
      };
    },
    92530: function (e) {
      e.exports = {
        DropDown_container: "DropDown_DropDown_container__Azjc0",
        DropDown_item: "DropDown_DropDown_item__7d8cD",
        DropDown_item_selected: "DropDown_DropDown_item_selected__k2LOh",
        DropDown_item_img: "DropDown_DropDown_item_img__HkOzS",
        DropDown_item_time_icon: "DropDown_DropDown_item_time_icon__Tancd",
      };
    },
    58252: function (e) {
      e.exports = {
        ReferralModal_wrapper: "ReferralModal_ReferralModal_wrapper__5qM9J",
        ReferralModal_container: "ReferralModal_ReferralModal_container__5srG2",
        ReferralModal_leftGlow: "ReferralModal_ReferralModal_leftGlow__601Lw",
        ReferralModal_rightGlow: "ReferralModal_ReferralModal_rightGlow__ZNp4P",
        ReferralModal_close: "ReferralModal_ReferralModal_close__G1CNo",
        ReferralModal_head: "ReferralModal_ReferralModal_head__tVX5U",
        breakLine: "ReferralModal_breakLine__c_MWF",
        ReferralModal_description_box:
          "ReferralModal_ReferralModal_description_box__5aOMJ",
        ReferralModal_content_box:
          "ReferralModal_ReferralModal_content_box__4GpEB",
        ReferralModal_content_title:
          "ReferralModal_ReferralModal_content_title__Rr8No",
        ReferralModal_link_container:
          "ReferralModal_ReferralModal_link_container__EuBGu",
        ReferralModal_link_label:
          "ReferralModal_ReferralModal_link_label__m6fDU",
        ReferralModal_link_text: "ReferralModal_ReferralModal_link_text__HZQSI",
        ReferralModal_steps_grid:
          "ReferralModal_ReferralModal_steps_grid__izkg6",
        ReferralModal_step_item: "ReferralModal_ReferralModal_step_item__7Agjf",
        ReferralModal_step_emoji:
          "ReferralModal_ReferralModal_step_emoji__6X2zT",
        ReferralModal_step_text: "ReferralModal_ReferralModal_step_text__bBl3R",
        ReferralModal_bottom_box:
          "ReferralModal_ReferralModal_bottom_box__uP2JF",
        ReferralModal_copy_button:
          "ReferralModal_ReferralModal_copy_button__vEsqK",
        color_1: "ReferralModal_color_1__v0PPU",
      };
    },
    54656: function (e) {
      e.exports = {
        SuccessModal_wrapper: "SuccessModal_SuccessModal_wrapper__05pHv",
        "show-up": "SuccessModal_show-up__knfOT",
        SuccessModal_container: "SuccessModal_SuccessModal_container__90qPd",
        SuccessModal_container_close:
          "SuccessModal_SuccessModal_container_close__hEXnq",
        SuccessModal_glow: "SuccessModal_SuccessModal_glow__SBC5F",
        SuccessModal_content: "SuccessModal_SuccessModal_content__Sf1F1",
        SuccessModal_content_title:
          "SuccessModal_SuccessModal_content_title__PHi1h",
        SuccessModal_content_line:
          "SuccessModal_SuccessModal_content_line__zDlL_",
        SuccessModal_content_status:
          "SuccessModal_SuccessModal_content_status__eIP4J",
        SuccessModal_content_status_img:
          "SuccessModal_SuccessModal_content_status_img__pNaAw",
        SuccessModal_content_text1:
          "SuccessModal_SuccessModal_content_text1__AdmPy",
        SuccessModal_content_text2:
          "SuccessModal_SuccessModal_content_text2__i2UuM",
        SuccessModal_content_buttons_box:
          "SuccessModal_SuccessModal_content_buttons_box__nZleb",
        SuccessModal_content_close_button:
          "SuccessModal_SuccessModal_content_close_button__b4LmX",
        color_1: "SuccessModal_color_1__A1SXo",
        SuccessModal_content_back_wrapper:
          "SuccessModal_SuccessModal_content_back_wrapper__LHHF_",
        SuccessModal_content_back_button:
          "SuccessModal_SuccessModal_content_back_button__QvBfx",
      };
    },
    27995: function (e) {
      e.exports = {
        VerifyProof_wrapper: "VerifyProof_VerifyProof_wrapper__8PdbC",
        VerifyProof_container: "VerifyProof_VerifyProof_container__3AIIr",
        VerifyProof_container_close:
          "VerifyProof_VerifyProof_container_close__WHS2s",
        VerifyProof_content: "VerifyProof_VerifyProof_content__VRjoA",
        VerifyProof_content_title:
          "VerifyProof_VerifyProof_content_title__gE4Id",
        VerifyProof_content_line: "VerifyProof_VerifyProof_content_line__hTHPP",
        VerifyProof_content_pools_box:
          "VerifyProof_VerifyProof_content_pools_box__K6_yO",
        VerifyProof_content_pools_box_flesh:
          "VerifyProof_VerifyProof_content_pools_box_flesh__a0gpg",
        VerifyProof_content_pool: "VerifyProof_VerifyProof_content_pool__MX6tx",
        VerifyProof_content_proof_box:
          "VerifyProof_VerifyProof_content_proof_box__9bfm6",
        VerifyProof_content_proof_box_item:
          "VerifyProof_VerifyProof_content_proof_box_item__KZDs1",
        VerifyProof_content_proof_box_info:
          "VerifyProof_VerifyProof_content_proof_box_info__UsOzr",
        VerifyProof_content_proof_box_icon:
          "VerifyProof_VerifyProof_content_proof_box_icon__VkEY6",
        VerifyProof_content_price_box:
          "VerifyProof_VerifyProof_content_price_box__N3uwF",
        VerifyProof_content_price:
          "VerifyProof_VerifyProof_content_price__RgFcW",
        VerifyProof_content_guid_container:
          "VerifyProof_VerifyProof_content_guid_container__tIwi2",
        VerifyProof_content_guid_title:
          "VerifyProof_VerifyProof_content_guid_title__0MEeG",
        VerifyProof_content_guid_title_line1:
          "VerifyProof_VerifyProof_content_guid_title_line1__dlvE6",
        VerifyProof_content_guid_title_line2:
          "VerifyProof_VerifyProof_content_guid_title_line2__bSO8M",
        VerifyProof_content_guid_bottom:
          "VerifyProof_VerifyProof_content_guid_bottom__ZYa3K",
        VerifyProof_content_guid_bottom_item:
          "VerifyProof_VerifyProof_content_guid_bottom_item__wIGRi",
        guidButton_wrapper: "VerifyProof_guidButton_wrapper__cAojI",
        guidButton: "VerifyProof_guidButton__iO70U",
        color_1: "VerifyProof_color_1__0eThC",
        VerifyProof_content_buttons_container:
          "VerifyProof_VerifyProof_content_buttons_container__IQtoY",
        VerifyProof_content_close_button:
          "VerifyProof_VerifyProof_content_close_button__hf9Sh",
      };
    },
    3792: function (e) {
      e.exports = {
        WV_Popup_Wrapper: "watch-video-popup-style_WV_Popup_Wrapper__lyCRp",
        "show-up": "watch-video-popup-style_show-up__nWOsJ",
        WV_Popup_Container: "watch-video-popup-style_WV_Popup_Container__6Z9go",
        WV_Popup_close: "watch-video-popup-style_WV_Popup_close__2_gEr",
      };
    },
    51999: function (e) {
      e.exports = {
        WithdrawModal_wrapper: "WithdrawModal_WithdrawModal_wrapper__ZD0rF",
        WithdrawModal_container: "WithdrawModal_WithdrawModal_container__CCiPZ",
        WithdrawModal_leftGlow: "WithdrawModal_WithdrawModal_leftGlow__KJPkg",
        WithdrawModal_rightGlow: "WithdrawModal_WithdrawModal_rightGlow__uVFGP",
        WithdrawModal_close: "WithdrawModal_WithdrawModal_close__Eg9zp",
        breakLine: "WithdrawModal_breakLine__4SW_j",
        WithdrawModal_head: "WithdrawModal_WithdrawModal_head__XeAb5",
        WithdrawModal_head_left: "WithdrawModal_WithdrawModal_head_left__6ur5h",
        WithdrawModal_description_box:
          "WithdrawModal_WithdrawModal_description_box__aLmVN",
        WithdrawModal_params_box:
          "WithdrawModal_WithdrawModal_params_box__qSKrC",
        WithdrawModal_param: "WithdrawModal_WithdrawModal_param__LhmCA",
        WithdrawModal_param_dashed:
          "WithdrawModal_WithdrawModal_param_dashed__2HANA",
        WithdrawModal_param_box: "WithdrawModal_WithdrawModal_param_box__qqFem",
        WithdrawModal_strategy_box:
          "WithdrawModal_WithdrawModal_strategy_box__B6qf_",
        WithdrawModal_strategy_param_box:
          "WithdrawModal_WithdrawModal_strategy_param_box__nkvGr",
        WithdrawModal_select_container_box:
          "WithdrawModal_WithdrawModal_select_container_box__2iSZf",
        WithdrawModal_select_box:
          "WithdrawModal_WithdrawModal_select_box__JlcTE",
        WithdrawModal_select: "WithdrawModal_WithdrawModal_select__j_4gq",
        WithdrawModal_select_Text_Image:
          "WithdrawModal_WithdrawModal_select_Text_Image__jYT7w",
        WithdrawModal_select_img:
          "WithdrawModal_WithdrawModal_select_img__jXK9m",
        WithdrawModal_select_icon:
          "WithdrawModal_WithdrawModal_select_icon__a8QMv",
        WithdrawModal_bottom_box:
          "WithdrawModal_WithdrawModal_bottom_box__TjKcP",
        img: "WithdrawModal_img___Xoa_",
        rotate: "WithdrawModal_rotate__RBUCC",
        color_1: "WithdrawModal_color_1__6vPK6",
      };
    },
    70432: function (e) {
      e.exports = {
        ZKML_video_wrapper: "ZkmlVideo_ZKML_video_wrapper__w6dJM",
        "show-up": "ZkmlVideo_show-up__PTwrw",
        ZKML_video_Container: "ZkmlVideo_ZKML_video_Container__y66_z",
        ZKML_video_close: "ZkmlVideo_ZKML_video_close__yVtP5",
      };
    },
    53309: function (e) {
      !(function () {
        var l = {
            229: function (e) {
              var l,
                c,
                d,
                m = (e.exports = {});
              function defaultSetTimout() {
                throw Error("setTimeout has not been defined");
              }
              function defaultClearTimeout() {
                throw Error("clearTimeout has not been defined");
              }
              function runTimeout(e) {
                if (l === setTimeout) return setTimeout(e, 0);
                if ((l === defaultSetTimout || !l) && setTimeout)
                  return (l = setTimeout), setTimeout(e, 0);
                try {
                  return l(e, 0);
                } catch (c) {
                  try {
                    return l.call(null, e, 0);
                  } catch (c) {
                    return l.call(this, e, 0);
                  }
                }
              }
              !(function () {
                try {
                  l =
                    "function" == typeof setTimeout
                      ? setTimeout
                      : defaultSetTimout;
                } catch (e) {
                  l = defaultSetTimout;
                }
                try {
                  c =
                    "function" == typeof clearTimeout
                      ? clearTimeout
                      : defaultClearTimeout;
                } catch (e) {
                  c = defaultClearTimeout;
                }
              })();
              var g = [],
                y = !1,
                b = -1;
              function cleanUpNextTick() {
                y &&
                  d &&
                  ((y = !1),
                  d.length ? (g = d.concat(g)) : (b = -1),
                  g.length && drainQueue());
              }
              function drainQueue() {
                if (!y) {
                  var e = runTimeout(cleanUpNextTick);
                  y = !0;
                  for (var l = g.length; l; ) {
                    for (d = g, g = []; ++b < l; ) d && d[b].run();
                    (b = -1), (l = g.length);
                  }
                  (d = null),
                    (y = !1),
                    (function (e) {
                      if (c === clearTimeout) return clearTimeout(e);
                      if ((c === defaultClearTimeout || !c) && clearTimeout)
                        return (c = clearTimeout), clearTimeout(e);
                      try {
                        c(e);
                      } catch (l) {
                        try {
                          return c.call(null, e);
                        } catch (l) {
                          return c.call(this, e);
                        }
                      }
                    })(e);
                }
              }
              function Item(e, l) {
                (this.fun = e), (this.array = l);
              }
              function noop() {}
              (m.nextTick = function (e) {
                var l = Array(arguments.length - 1);
                if (arguments.length > 1)
                  for (var c = 1; c < arguments.length; c++)
                    l[c - 1] = arguments[c];
                g.push(new Item(e, l)),
                  1 !== g.length || y || runTimeout(drainQueue);
              }),
                (Item.prototype.run = function () {
                  this.fun.apply(null, this.array);
                }),
                (m.title = "browser"),
                (m.browser = !0),
                (m.env = {}),
                (m.argv = []),
                (m.version = ""),
                (m.versions = {}),
                (m.on = noop),
                (m.addListener = noop),
                (m.once = noop),
                (m.off = noop),
                (m.removeListener = noop),
                (m.removeAllListeners = noop),
                (m.emit = noop),
                (m.prependListener = noop),
                (m.prependOnceListener = noop),
                (m.listeners = function (e) {
                  return [];
                }),
                (m.binding = function (e) {
                  throw Error("process.binding is not supported");
                }),
                (m.cwd = function () {
                  return "/";
                }),
                (m.chdir = function (e) {
                  throw Error("process.chdir is not supported");
                }),
                (m.umask = function () {
                  return 0;
                });
            },
          },
          c = {};
        function __nccwpck_require__(e) {
          var d = c[e];
          if (void 0 !== d) return d.exports;
          var m = (c[e] = { exports: {} }),
            g = !0;
          try {
            l[e](m, m.exports, __nccwpck_require__), (g = !1);
          } finally {
            g && delete c[e];
          }
          return m.exports;
        }
        __nccwpck_require__.ab = "//";
        var d = __nccwpck_require__(229);
        e.exports = d;
      })();
    },
    32515: function (e, l, c) {
      e.exports = c(99915);
    },
    59581: function (e, l, c) {
      e.exports = c(37674);
    },
    23874: function (e, l, c) {
      e.exports = c(64431);
    },
    69405: function (e, l, c) {
      e.exports = c(14104);
    },
    79096: function (e, l, c) {
      e.exports = c(22298);
    },
    83893: function (e, l, c) {
      e.exports = c(18769);
    },
    20061: function (e, l, c) {
      let d = c(2999),
        m = c(43451),
        g = c(42513),
        y = c(51478);
      function renderCanvas(e, l, c, g, y) {
        let b = [].slice.call(arguments, 1),
          C = b.length,
          P = "function" == typeof b[C - 1];
        if (!P && !d()) throw Error("Callback required as last argument");
        if (P) {
          if (C < 2) throw Error("Too few arguments provided");
          2 === C
            ? ((y = c), (c = l), (l = g = void 0))
            : 3 === C &&
              (l.getContext && void 0 === y
                ? ((y = g), (g = void 0))
                : ((y = g), (g = c), (c = l), (l = void 0)));
        } else {
          if (C < 1) throw Error("Too few arguments provided");
          return (
            1 === C
              ? ((c = l), (l = g = void 0))
              : 2 !== C || l.getContext || ((g = c), (c = l), (l = void 0)),
            new Promise(function (d, y) {
              try {
                let y = m.create(c, g);
                d(e(y, l, g));
              } catch (e) {
                y(e);
              }
            })
          );
        }
        try {
          let d = m.create(c, g);
          y(null, e(d, l, g));
        } catch (e) {
          y(e);
        }
      }
      (l.create = m.create),
        (l.toCanvas = renderCanvas.bind(null, g.render)),
        (l.toDataURL = renderCanvas.bind(null, g.renderToDataURL)),
        (l.toString = renderCanvas.bind(null, function (e, l, c) {
          return y.render(e, c);
        }));
    },
    2999: function (e) {
      e.exports = function () {
        return (
          "function" == typeof Promise &&
          Promise.prototype &&
          Promise.prototype.then
        );
      };
    },
    96684: function (e, l, c) {
      let d = c(79006).getSymbolSize;
      (l.getRowColCoords = function (e) {
        if (1 === e) return [];
        let l = Math.floor(e / 7) + 2,
          c = d(e),
          m = 145 === c ? 26 : 2 * Math.ceil((c - 13) / (2 * l - 2)),
          g = [c - 7];
        for (let e = 1; e < l - 1; e++) g[e] = g[e - 1] - m;
        return g.push(6), g.reverse();
      }),
        (l.getPositions = function (e) {
          let c = [],
            d = l.getRowColCoords(e),
            m = d.length;
          for (let e = 0; e < m; e++)
            for (let l = 0; l < m; l++)
              (0 !== e || 0 !== l) &&
                (0 !== e || l !== m - 1) &&
                (e !== m - 1 || 0 !== l) &&
                c.push([d[e], d[l]]);
          return c;
        });
    },
    89012: function (e, l, c) {
      let d = c(21493),
        m = [
          "0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "H",
          "I",
          "J",
          "K",
          "L",
          "M",
          "N",
          "O",
          "P",
          "Q",
          "R",
          "S",
          "T",
          "U",
          "V",
          "W",
          "X",
          "Y",
          "Z",
          " ",
          "$",
          "%",
          "*",
          "+",
          "-",
          ".",
          "/",
          ":",
        ];
      function AlphanumericData(e) {
        (this.mode = d.ALPHANUMERIC), (this.data = e);
      }
      (AlphanumericData.getBitsLength = function (e) {
        return 11 * Math.floor(e / 2) + 6 * (e % 2);
      }),
        (AlphanumericData.prototype.getLength = function () {
          return this.data.length;
        }),
        (AlphanumericData.prototype.getBitsLength = function () {
          return AlphanumericData.getBitsLength(this.data.length);
        }),
        (AlphanumericData.prototype.write = function (e) {
          let l;
          for (l = 0; l + 2 <= this.data.length; l += 2) {
            let c = 45 * m.indexOf(this.data[l]);
            (c += m.indexOf(this.data[l + 1])), e.put(c, 11);
          }
          this.data.length % 2 && e.put(m.indexOf(this.data[l]), 6);
        }),
        (e.exports = AlphanumericData);
    },
    16597: function (e) {
      function BitBuffer() {
        (this.buffer = []), (this.length = 0);
      }
      (BitBuffer.prototype = {
        get: function (e) {
          return ((this.buffer[Math.floor(e / 8)] >>> (7 - (e % 8))) & 1) == 1;
        },
        put: function (e, l) {
          for (let c = 0; c < l; c++)
            this.putBit(((e >>> (l - c - 1)) & 1) == 1);
        },
        getLengthInBits: function () {
          return this.length;
        },
        putBit: function (e) {
          let l = Math.floor(this.length / 8);
          this.buffer.length <= l && this.buffer.push(0),
            e && (this.buffer[l] |= 128 >>> this.length % 8),
            this.length++;
        },
      }),
        (e.exports = BitBuffer);
    },
    79913: function (e) {
      function BitMatrix(e) {
        if (!e || e < 1)
          throw Error("BitMatrix size must be defined and greater than 0");
        (this.size = e),
          (this.data = new Uint8Array(e * e)),
          (this.reservedBit = new Uint8Array(e * e));
      }
      (BitMatrix.prototype.set = function (e, l, c, d) {
        let m = e * this.size + l;
        (this.data[m] = c), d && (this.reservedBit[m] = !0);
      }),
        (BitMatrix.prototype.get = function (e, l) {
          return this.data[e * this.size + l];
        }),
        (BitMatrix.prototype.xor = function (e, l, c) {
          this.data[e * this.size + l] ^= c;
        }),
        (BitMatrix.prototype.isReserved = function (e, l) {
          return this.reservedBit[e * this.size + l];
        }),
        (e.exports = BitMatrix);
    },
    89735: function (e, l, c) {
      let d = c(21493);
      function ByteData(e) {
        (this.mode = d.BYTE),
          "string" == typeof e
            ? (this.data = new TextEncoder().encode(e))
            : (this.data = new Uint8Array(e));
      }
      (ByteData.getBitsLength = function (e) {
        return 8 * e;
      }),
        (ByteData.prototype.getLength = function () {
          return this.data.length;
        }),
        (ByteData.prototype.getBitsLength = function () {
          return ByteData.getBitsLength(this.data.length);
        }),
        (ByteData.prototype.write = function (e) {
          for (let l = 0, c = this.data.length; l < c; l++)
            e.put(this.data[l], 8);
        }),
        (e.exports = ByteData);
    },
    13675: function (e, l, c) {
      let d = c(17630),
        m = [
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4,
          4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8,
          10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6,
          11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23,
          25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12,
          23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29,
          40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51,
          60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74,
          24, 47, 65, 77, 25, 49, 68, 81,
        ],
        g = [
          7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48,
          72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110,
          160, 192, 72, 130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308,
          104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280,
          408, 480, 168, 308, 448, 532, 180, 338, 504, 588, 196, 364, 546, 650,
          224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504,
          750, 900, 300, 560, 810, 960, 312, 588, 870, 1050, 336, 644, 952,
          1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140,
          1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350,
          1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590,
          1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860,
          2220, 720, 1316, 1950, 2310, 750, 1372, 2040, 2430,
        ];
      (l.getBlocksCount = function (e, l) {
        switch (l) {
          case d.L:
            return m[(e - 1) * 4 + 0];
          case d.M:
            return m[(e - 1) * 4 + 1];
          case d.Q:
            return m[(e - 1) * 4 + 2];
          case d.H:
            return m[(e - 1) * 4 + 3];
          default:
            return;
        }
      }),
        (l.getTotalCodewordsCount = function (e, l) {
          switch (l) {
            case d.L:
              return g[(e - 1) * 4 + 0];
            case d.M:
              return g[(e - 1) * 4 + 1];
            case d.Q:
              return g[(e - 1) * 4 + 2];
            case d.H:
              return g[(e - 1) * 4 + 3];
            default:
              return;
          }
        });
    },
    17630: function (e, l) {
      (l.L = { bit: 1 }),
        (l.M = { bit: 0 }),
        (l.Q = { bit: 3 }),
        (l.H = { bit: 2 }),
        (l.isValid = function (e) {
          return e && void 0 !== e.bit && e.bit >= 0 && e.bit < 4;
        }),
        (l.from = function (e, c) {
          if (l.isValid(e)) return e;
          try {
            return (function (e) {
              if ("string" != typeof e) throw Error("Param is not a string");
              let c = e.toLowerCase();
              switch (c) {
                case "l":
                case "low":
                  return l.L;
                case "m":
                case "medium":
                  return l.M;
                case "q":
                case "quartile":
                  return l.Q;
                case "h":
                case "high":
                  return l.H;
                default:
                  throw Error("Unknown EC Level: " + e);
              }
            })(e);
          } catch (e) {
            return c;
          }
        });
    },
    80844: function (e, l, c) {
      let d = c(79006).getSymbolSize;
      l.getPositions = function (e) {
        let l = d(e);
        return [
          [0, 0],
          [l - 7, 0],
          [0, l - 7],
        ];
      };
    },
    20114: function (e, l, c) {
      let d = c(79006),
        m = d.getBCHDigit(1335);
      l.getEncodedBits = function (e, l) {
        let c = (e.bit << 3) | l,
          g = c << 10;
        for (; d.getBCHDigit(g) - m >= 0; ) g ^= 1335 << (d.getBCHDigit(g) - m);
        return ((c << 10) | g) ^ 21522;
      };
    },
    63278: function (e, l) {
      let c = new Uint8Array(512),
        d = new Uint8Array(256);
      !(function () {
        let e = 1;
        for (let l = 0; l < 255; l++)
          (c[l] = e), (d[e] = l), 256 & (e <<= 1) && (e ^= 285);
        for (let e = 255; e < 512; e++) c[e] = c[e - 255];
      })(),
        (l.log = function (e) {
          if (e < 1) throw Error("log(" + e + ")");
          return d[e];
        }),
        (l.exp = function (e) {
          return c[e];
        }),
        (l.mul = function (e, l) {
          return 0 === e || 0 === l ? 0 : c[d[e] + d[l]];
        });
    },
    59359: function (e, l, c) {
      let d = c(21493),
        m = c(79006);
      function KanjiData(e) {
        (this.mode = d.KANJI), (this.data = e);
      }
      (KanjiData.getBitsLength = function (e) {
        return 13 * e;
      }),
        (KanjiData.prototype.getLength = function () {
          return this.data.length;
        }),
        (KanjiData.prototype.getBitsLength = function () {
          return KanjiData.getBitsLength(this.data.length);
        }),
        (KanjiData.prototype.write = function (e) {
          let l;
          for (l = 0; l < this.data.length; l++) {
            let c = m.toSJIS(this.data[l]);
            if (c >= 33088 && c <= 40956) c -= 33088;
            else if (c >= 57408 && c <= 60351) c -= 49472;
            else
              throw Error(
                "Invalid SJIS character: " +
                  this.data[l] +
                  "\nMake sure your charset is UTF-8"
              );
            (c = ((c >>> 8) & 255) * 192 + (255 & c)), e.put(c, 13);
          }
        }),
        (e.exports = KanjiData);
    },
    95040: function (e, l) {
      l.Patterns = {
        PATTERN000: 0,
        PATTERN001: 1,
        PATTERN010: 2,
        PATTERN011: 3,
        PATTERN100: 4,
        PATTERN101: 5,
        PATTERN110: 6,
        PATTERN111: 7,
      };
      let c = { N1: 3, N2: 3, N3: 40, N4: 10 };
      (l.isValid = function (e) {
        return null != e && "" !== e && !isNaN(e) && e >= 0 && e <= 7;
      }),
        (l.from = function (e) {
          return l.isValid(e) ? parseInt(e, 10) : void 0;
        }),
        (l.getPenaltyN1 = function (e) {
          let l = e.size,
            d = 0,
            m = 0,
            g = 0,
            y = null,
            b = null;
          for (let C = 0; C < l; C++) {
            (m = g = 0), (y = b = null);
            for (let P = 0; P < l; P++) {
              let l = e.get(C, P);
              l === y
                ? m++
                : (m >= 5 && (d += c.N1 + (m - 5)), (y = l), (m = 1)),
                (l = e.get(P, C)) === b
                  ? g++
                  : (g >= 5 && (d += c.N1 + (g - 5)), (b = l), (g = 1));
            }
            m >= 5 && (d += c.N1 + (m - 5)), g >= 5 && (d += c.N1 + (g - 5));
          }
          return d;
        }),
        (l.getPenaltyN2 = function (e) {
          let l = e.size,
            d = 0;
          for (let c = 0; c < l - 1; c++)
            for (let m = 0; m < l - 1; m++) {
              let l =
                e.get(c, m) +
                e.get(c, m + 1) +
                e.get(c + 1, m) +
                e.get(c + 1, m + 1);
              (4 === l || 0 === l) && d++;
            }
          return d * c.N2;
        }),
        (l.getPenaltyN3 = function (e) {
          let l = e.size,
            d = 0,
            m = 0,
            g = 0;
          for (let c = 0; c < l; c++) {
            m = g = 0;
            for (let y = 0; y < l; y++)
              (m = ((m << 1) & 2047) | e.get(c, y)),
                y >= 10 && (1488 === m || 93 === m) && d++,
                (g = ((g << 1) & 2047) | e.get(y, c)),
                y >= 10 && (1488 === g || 93 === g) && d++;
          }
          return d * c.N3;
        }),
        (l.getPenaltyN4 = function (e) {
          let l = 0,
            d = e.data.length;
          for (let c = 0; c < d; c++) l += e.data[c];
          let m = Math.abs(Math.ceil((100 * l) / d / 5) - 10);
          return m * c.N4;
        }),
        (l.applyMask = function (e, c) {
          let d = c.size;
          for (let m = 0; m < d; m++)
            for (let g = 0; g < d; g++)
              c.isReserved(g, m) ||
                c.xor(
                  g,
                  m,
                  (function (e, c, d) {
                    switch (e) {
                      case l.Patterns.PATTERN000:
                        return (c + d) % 2 == 0;
                      case l.Patterns.PATTERN001:
                        return c % 2 == 0;
                      case l.Patterns.PATTERN010:
                        return d % 3 == 0;
                      case l.Patterns.PATTERN011:
                        return (c + d) % 3 == 0;
                      case l.Patterns.PATTERN100:
                        return (Math.floor(c / 2) + Math.floor(d / 3)) % 2 == 0;
                      case l.Patterns.PATTERN101:
                        return ((c * d) % 2) + ((c * d) % 3) == 0;
                      case l.Patterns.PATTERN110:
                        return (((c * d) % 2) + ((c * d) % 3)) % 2 == 0;
                      case l.Patterns.PATTERN111:
                        return (((c * d) % 3) + ((c + d) % 2)) % 2 == 0;
                      default:
                        throw Error("bad maskPattern:" + e);
                    }
                  })(e, g, m)
                );
        }),
        (l.getBestMask = function (e, c) {
          let d = Object.keys(l.Patterns).length,
            m = 0,
            g = 1 / 0;
          for (let y = 0; y < d; y++) {
            c(y), l.applyMask(y, e);
            let d =
              l.getPenaltyN1(e) +
              l.getPenaltyN2(e) +
              l.getPenaltyN3(e) +
              l.getPenaltyN4(e);
            l.applyMask(y, e), d < g && ((g = d), (m = y));
          }
          return m;
        });
    },
    21493: function (e, l, c) {
      let d = c(43327),
        m = c(95270);
      (l.NUMERIC = { id: "Numeric", bit: 1, ccBits: [10, 12, 14] }),
        (l.ALPHANUMERIC = { id: "Alphanumeric", bit: 2, ccBits: [9, 11, 13] }),
        (l.BYTE = { id: "Byte", bit: 4, ccBits: [8, 16, 16] }),
        (l.KANJI = { id: "Kanji", bit: 8, ccBits: [8, 10, 12] }),
        (l.MIXED = { bit: -1 }),
        (l.getCharCountIndicator = function (e, l) {
          if (!e.ccBits) throw Error("Invalid mode: " + e);
          if (!d.isValid(l)) throw Error("Invalid version: " + l);
          return l >= 1 && l < 10
            ? e.ccBits[0]
            : l < 27
            ? e.ccBits[1]
            : e.ccBits[2];
        }),
        (l.getBestModeForData = function (e) {
          return m.testNumeric(e)
            ? l.NUMERIC
            : m.testAlphanumeric(e)
            ? l.ALPHANUMERIC
            : m.testKanji(e)
            ? l.KANJI
            : l.BYTE;
        }),
        (l.toString = function (e) {
          if (e && e.id) return e.id;
          throw Error("Invalid mode");
        }),
        (l.isValid = function (e) {
          return e && e.bit && e.ccBits;
        }),
        (l.from = function (e, c) {
          if (l.isValid(e)) return e;
          try {
            return (function (e) {
              if ("string" != typeof e) throw Error("Param is not a string");
              let c = e.toLowerCase();
              switch (c) {
                case "numeric":
                  return l.NUMERIC;
                case "alphanumeric":
                  return l.ALPHANUMERIC;
                case "kanji":
                  return l.KANJI;
                case "byte":
                  return l.BYTE;
                default:
                  throw Error("Unknown mode: " + e);
              }
            })(e);
          } catch (e) {
            return c;
          }
        });
    },
    92818: function (e, l, c) {
      let d = c(21493);
      function NumericData(e) {
        (this.mode = d.NUMERIC), (this.data = e.toString());
      }
      (NumericData.getBitsLength = function (e) {
        return 10 * Math.floor(e / 3) + (e % 3 ? (e % 3) * 3 + 1 : 0);
      }),
        (NumericData.prototype.getLength = function () {
          return this.data.length;
        }),
        (NumericData.prototype.getBitsLength = function () {
          return NumericData.getBitsLength(this.data.length);
        }),
        (NumericData.prototype.write = function (e) {
          let l, c;
          for (l = 0; l + 3 <= this.data.length; l += 3)
            (c = parseInt(this.data.substr(l, 3), 10)), e.put(c, 10);
          let d = this.data.length - l;
          d > 0 &&
            ((c = parseInt(this.data.substr(l), 10)), e.put(c, 3 * d + 1));
        }),
        (e.exports = NumericData);
    },
    42631: function (e, l, c) {
      let d = c(63278);
      (l.mul = function (e, l) {
        let c = new Uint8Array(e.length + l.length - 1);
        for (let m = 0; m < e.length; m++)
          for (let g = 0; g < l.length; g++) c[m + g] ^= d.mul(e[m], l[g]);
        return c;
      }),
        (l.mod = function (e, l) {
          let c = new Uint8Array(e);
          for (; c.length - l.length >= 0; ) {
            let e = c[0];
            for (let m = 0; m < l.length; m++) c[m] ^= d.mul(l[m], e);
            let m = 0;
            for (; m < c.length && 0 === c[m]; ) m++;
            c = c.slice(m);
          }
          return c;
        }),
        (l.generateECPolynomial = function (e) {
          let c = new Uint8Array([1]);
          for (let m = 0; m < e; m++)
            c = l.mul(c, new Uint8Array([1, d.exp(m)]));
          return c;
        });
    },
    43451: function (e, l, c) {
      let d = c(79006),
        m = c(17630),
        g = c(16597),
        y = c(79913),
        b = c(96684),
        C = c(80844),
        P = c(95040),
        I = c(13675),
        B = c(87057),
        N = c(13761),
        F = c(20114),
        V = c(21493),
        G = c(17506);
      function setupFormatInfo(e, l, c) {
        let d, m;
        let g = e.size,
          y = F.getEncodedBits(l, c);
        for (d = 0; d < 15; d++)
          (m = ((y >> d) & 1) == 1),
            d < 6
              ? e.set(d, 8, m, !0)
              : d < 8
              ? e.set(d + 1, 8, m, !0)
              : e.set(g - 15 + d, 8, m, !0),
            d < 8
              ? e.set(8, g - d - 1, m, !0)
              : d < 9
              ? e.set(8, 15 - d - 1 + 1, m, !0)
              : e.set(8, 15 - d - 1, m, !0);
        e.set(g - 8, 8, 1, !0);
      }
      l.create = function (e, l) {
        let c, F;
        if (void 0 === e || "" === e) throw Error("No input text");
        let Q = m.M;
        return (
          void 0 !== l &&
            ((Q = m.from(l.errorCorrectionLevel, m.M)),
            (c = N.from(l.version)),
            (F = P.from(l.maskPattern)),
            l.toSJISFunc && d.setToSJISFunction(l.toSJISFunc)),
          (function (e, l, c, m) {
            let F;
            if (Array.isArray(e)) F = G.fromArray(e);
            else if ("string" == typeof e) {
              let d = l;
              if (!d) {
                let l = G.rawSplit(e);
                d = N.getBestVersionForData(l, c);
              }
              F = G.fromString(e, d || 40);
            } else throw Error("Invalid data");
            let Q = N.getBestVersionForData(F, c);
            if (!Q)
              throw Error(
                "The amount of data is too big to be stored in a QR Code"
              );
            if (l) {
              if (l < Q)
                throw Error(
                  "\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: " +
                    Q +
                    ".\n"
                );
            } else l = Q;
            let $ = (function (e, l, c) {
                let m = new g();
                c.forEach(function (l) {
                  m.put(l.mode.bit, 4),
                    m.put(l.getLength(), V.getCharCountIndicator(l.mode, e)),
                    l.write(m);
                });
                let y = d.getSymbolTotalCodewords(e),
                  b = I.getTotalCodewordsCount(e, l),
                  C = (y - b) * 8;
                for (
                  m.getLengthInBits() + 4 <= C && m.put(0, 4);
                  m.getLengthInBits() % 8 != 0;

                )
                  m.putBit(0);
                let P = (C - m.getLengthInBits()) / 8;
                for (let e = 0; e < P; e++) m.put(e % 2 ? 17 : 236, 8);
                return (function (e, l, c) {
                  let m, g;
                  let y = d.getSymbolTotalCodewords(l),
                    b = I.getTotalCodewordsCount(l, c),
                    C = y - b,
                    P = I.getBlocksCount(l, c),
                    N = y % P,
                    F = P - N,
                    V = Math.floor(y / P),
                    G = Math.floor(C / P),
                    Q = G + 1,
                    $ = V - G,
                    Z = new B($),
                    Y = 0,
                    et = Array(P),
                    en = Array(P),
                    er = 0,
                    ei = new Uint8Array(e.buffer);
                  for (let e = 0; e < P; e++) {
                    let l = e < F ? G : Q;
                    (et[e] = ei.slice(Y, Y + l)),
                      (en[e] = Z.encode(et[e])),
                      (Y += l),
                      (er = Math.max(er, l));
                  }
                  let eo = new Uint8Array(y),
                    ea = 0;
                  for (m = 0; m < er; m++)
                    for (g = 0; g < P; g++)
                      m < et[g].length && (eo[ea++] = et[g][m]);
                  for (m = 0; m < $; m++)
                    for (g = 0; g < P; g++) eo[ea++] = en[g][m];
                  return eo;
                })(m, e, l);
              })(l, c, F),
              Z = d.getSymbolSize(l),
              Y = new y(Z);
            return (
              (function (e, l) {
                let c = e.size,
                  d = C.getPositions(l);
                for (let l = 0; l < d.length; l++) {
                  let m = d[l][0],
                    g = d[l][1];
                  for (let l = -1; l <= 7; l++)
                    if (!(m + l <= -1) && !(c <= m + l))
                      for (let d = -1; d <= 7; d++)
                        g + d <= -1 ||
                          c <= g + d ||
                          ((l >= 0 && l <= 6 && (0 === d || 6 === d)) ||
                          (d >= 0 && d <= 6 && (0 === l || 6 === l)) ||
                          (l >= 2 && l <= 4 && d >= 2 && d <= 4)
                            ? e.set(m + l, g + d, !0, !0)
                            : e.set(m + l, g + d, !1, !0));
                }
              })(Y, l),
              (function (e) {
                let l = e.size;
                for (let c = 8; c < l - 8; c++) {
                  let l = c % 2 == 0;
                  e.set(c, 6, l, !0), e.set(6, c, l, !0);
                }
              })(Y),
              (function (e, l) {
                let c = b.getPositions(l);
                for (let l = 0; l < c.length; l++) {
                  let d = c[l][0],
                    m = c[l][1];
                  for (let l = -2; l <= 2; l++)
                    for (let c = -2; c <= 2; c++)
                      -2 === l ||
                      2 === l ||
                      -2 === c ||
                      2 === c ||
                      (0 === l && 0 === c)
                        ? e.set(d + l, m + c, !0, !0)
                        : e.set(d + l, m + c, !1, !0);
                }
              })(Y, l),
              setupFormatInfo(Y, c, 0),
              l >= 7 &&
                (function (e, l) {
                  let c, d, m;
                  let g = e.size,
                    y = N.getEncodedBits(l);
                  for (let l = 0; l < 18; l++)
                    (c = Math.floor(l / 3)),
                      (d = (l % 3) + g - 8 - 3),
                      (m = ((y >> l) & 1) == 1),
                      e.set(c, d, m, !0),
                      e.set(d, c, m, !0);
                })(Y, l),
              (function (e, l) {
                let c = e.size,
                  d = -1,
                  m = c - 1,
                  g = 7,
                  y = 0;
                for (let b = c - 1; b > 0; b -= 2)
                  for (6 === b && b--; ; ) {
                    for (let c = 0; c < 2; c++)
                      if (!e.isReserved(m, b - c)) {
                        let d = !1;
                        y < l.length && (d = ((l[y] >>> g) & 1) == 1),
                          e.set(m, b - c, d),
                          -1 == --g && (y++, (g = 7));
                      }
                    if ((m += d) < 0 || c <= m) {
                      (m -= d), (d = -d);
                      break;
                    }
                  }
              })(Y, $),
              isNaN(m) &&
                (m = P.getBestMask(Y, setupFormatInfo.bind(null, Y, c))),
              P.applyMask(m, Y),
              setupFormatInfo(Y, c, m),
              {
                modules: Y,
                version: l,
                errorCorrectionLevel: c,
                maskPattern: m,
                segments: F,
              }
            );
          })(e, c, Q, F)
        );
      };
    },
    87057: function (e, l, c) {
      let d = c(42631);
      function ReedSolomonEncoder(e) {
        (this.genPoly = void 0),
          (this.degree = e),
          this.degree && this.initialize(this.degree);
      }
      (ReedSolomonEncoder.prototype.initialize = function (e) {
        (this.degree = e), (this.genPoly = d.generateECPolynomial(this.degree));
      }),
        (ReedSolomonEncoder.prototype.encode = function (e) {
          if (!this.genPoly) throw Error("Encoder not initialized");
          let l = new Uint8Array(e.length + this.degree);
          l.set(e);
          let c = d.mod(l, this.genPoly),
            m = this.degree - c.length;
          if (m > 0) {
            let e = new Uint8Array(this.degree);
            return e.set(c, m), e;
          }
          return c;
        }),
        (e.exports = ReedSolomonEncoder);
    },
    95270: function (e, l) {
      let c = "[0-9]+",
        d =
          "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
      d = d.replace(/u/g, "\\u");
      let m = "(?:(?![A-Z0-9 $%*+\\-./:]|" + d + ")(?:.|[\r\n]))+";
      (l.KANJI = RegExp(d, "g")),
        (l.BYTE_KANJI = RegExp("[^A-Z0-9 $%*+\\-./:]+", "g")),
        (l.BYTE = RegExp(m, "g")),
        (l.NUMERIC = RegExp(c, "g")),
        (l.ALPHANUMERIC = RegExp("[A-Z $%*+\\-./:]+", "g"));
      let g = RegExp("^" + d + "$"),
        y = RegExp("^" + c + "$"),
        b = RegExp("^[A-Z0-9 $%*+\\-./:]+$");
      (l.testKanji = function (e) {
        return g.test(e);
      }),
        (l.testNumeric = function (e) {
          return y.test(e);
        }),
        (l.testAlphanumeric = function (e) {
          return b.test(e);
        });
    },
    17506: function (e, l, c) {
      let d = c(21493),
        m = c(92818),
        g = c(89012),
        y = c(89735),
        b = c(59359),
        C = c(95270),
        P = c(79006),
        I = c(35376);
      function getStringByteLength(e) {
        return unescape(encodeURIComponent(e)).length;
      }
      function getSegments(e, l, c) {
        let d;
        let m = [];
        for (; null !== (d = e.exec(c)); )
          m.push({ data: d[0], index: d.index, mode: l, length: d[0].length });
        return m;
      }
      function getSegmentsFromString(e) {
        let l, c;
        let m = getSegments(C.NUMERIC, d.NUMERIC, e),
          g = getSegments(C.ALPHANUMERIC, d.ALPHANUMERIC, e);
        P.isKanjiModeEnabled()
          ? ((l = getSegments(C.BYTE, d.BYTE, e)),
            (c = getSegments(C.KANJI, d.KANJI, e)))
          : ((l = getSegments(C.BYTE_KANJI, d.BYTE, e)), (c = []));
        let y = m.concat(g, l, c);
        return y
          .sort(function (e, l) {
            return e.index - l.index;
          })
          .map(function (e) {
            return { data: e.data, mode: e.mode, length: e.length };
          });
      }
      function getSegmentBitsLength(e, l) {
        switch (l) {
          case d.NUMERIC:
            return m.getBitsLength(e);
          case d.ALPHANUMERIC:
            return g.getBitsLength(e);
          case d.KANJI:
            return b.getBitsLength(e);
          case d.BYTE:
            return y.getBitsLength(e);
        }
      }
      function buildSingleSegment(e, l) {
        let c;
        let C = d.getBestModeForData(e);
        if ((c = d.from(l, C)) !== d.BYTE && c.bit < C.bit)
          throw Error(
            '"' +
              e +
              '" cannot be encoded with mode ' +
              d.toString(c) +
              ".\n Suggested mode is: " +
              d.toString(C)
          );
        switch ((c !== d.KANJI || P.isKanjiModeEnabled() || (c = d.BYTE), c)) {
          case d.NUMERIC:
            return new m(e);
          case d.ALPHANUMERIC:
            return new g(e);
          case d.KANJI:
            return new b(e);
          case d.BYTE:
            return new y(e);
        }
      }
      (l.fromArray = function (e) {
        return e.reduce(function (e, l) {
          return (
            "string" == typeof l
              ? e.push(buildSingleSegment(l, null))
              : l.data && e.push(buildSingleSegment(l.data, l.mode)),
            e
          );
        }, []);
      }),
        (l.fromString = function (e, c) {
          let m = getSegmentsFromString(e, P.isKanjiModeEnabled()),
            g = (function (e) {
              let l = [];
              for (let c = 0; c < e.length; c++) {
                let m = e[c];
                switch (m.mode) {
                  case d.NUMERIC:
                    l.push([
                      m,
                      { data: m.data, mode: d.ALPHANUMERIC, length: m.length },
                      { data: m.data, mode: d.BYTE, length: m.length },
                    ]);
                    break;
                  case d.ALPHANUMERIC:
                    l.push([
                      m,
                      { data: m.data, mode: d.BYTE, length: m.length },
                    ]);
                    break;
                  case d.KANJI:
                    l.push([
                      m,
                      {
                        data: m.data,
                        mode: d.BYTE,
                        length: getStringByteLength(m.data),
                      },
                    ]);
                    break;
                  case d.BYTE:
                    l.push([
                      {
                        data: m.data,
                        mode: d.BYTE,
                        length: getStringByteLength(m.data),
                      },
                    ]);
                }
              }
              return l;
            })(m),
            y = (function (e, l) {
              let c = {},
                m = { start: {} },
                g = ["start"];
              for (let y = 0; y < e.length; y++) {
                let b = e[y],
                  C = [];
                for (let e = 0; e < b.length; e++) {
                  let P = b[e],
                    I = "" + y + e;
                  C.push(I), (c[I] = { node: P, lastCount: 0 }), (m[I] = {});
                  for (let e = 0; e < g.length; e++) {
                    let y = g[e];
                    c[y] && c[y].node.mode === P.mode
                      ? ((m[y][I] =
                          getSegmentBitsLength(
                            c[y].lastCount + P.length,
                            P.mode
                          ) - getSegmentBitsLength(c[y].lastCount, P.mode)),
                        (c[y].lastCount += P.length))
                      : (c[y] && (c[y].lastCount = P.length),
                        (m[y][I] =
                          getSegmentBitsLength(P.length, P.mode) +
                          4 +
                          d.getCharCountIndicator(P.mode, l)));
                  }
                }
                g = C;
              }
              for (let e = 0; e < g.length; e++) m[g[e]].end = 0;
              return { map: m, table: c };
            })(g, c),
            b = I.find_path(y.map, "start", "end"),
            C = [];
          for (let e = 1; e < b.length - 1; e++) C.push(y.table[b[e]].node);
          return l.fromArray(
            C.reduce(function (e, l) {
              let c = e.length - 1 >= 0 ? e[e.length - 1] : null;
              return (
                c && c.mode === l.mode
                  ? (e[e.length - 1].data += l.data)
                  : e.push(l),
                e
              );
            }, [])
          );
        }),
        (l.rawSplit = function (e) {
          return l.fromArray(getSegmentsFromString(e, P.isKanjiModeEnabled()));
        });
    },
    79006: function (e, l) {
      let c;
      let d = [
        0, 26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581,
        655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828,
        1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532,
        3706,
      ];
      (l.getSymbolSize = function (e) {
        if (!e) throw Error('"version" cannot be null or undefined');
        if (e < 1 || e > 40)
          throw Error('"version" should be in range from 1 to 40');
        return 4 * e + 17;
      }),
        (l.getSymbolTotalCodewords = function (e) {
          return d[e];
        }),
        (l.getBCHDigit = function (e) {
          let l = 0;
          for (; 0 !== e; ) l++, (e >>>= 1);
          return l;
        }),
        (l.setToSJISFunction = function (e) {
          if ("function" != typeof e)
            throw Error('"toSJISFunc" is not a valid function.');
          c = e;
        }),
        (l.isKanjiModeEnabled = function () {
          return void 0 !== c;
        }),
        (l.toSJIS = function (e) {
          return c(e);
        });
    },
    43327: function (e, l) {
      l.isValid = function (e) {
        return !isNaN(e) && e >= 1 && e <= 40;
      };
    },
    13761: function (e, l, c) {
      let d = c(79006),
        m = c(13675),
        g = c(17630),
        y = c(21493),
        b = c(43327),
        C = d.getBCHDigit(7973);
      function getReservedBitsCount(e, l) {
        return y.getCharCountIndicator(e, l) + 4;
      }
      (l.from = function (e, l) {
        return b.isValid(e) ? parseInt(e, 10) : l;
      }),
        (l.getCapacity = function (e, l, c) {
          if (!b.isValid(e)) throw Error("Invalid QR Code version");
          void 0 === c && (c = y.BYTE);
          let g = d.getSymbolTotalCodewords(e),
            C = m.getTotalCodewordsCount(e, l),
            P = (g - C) * 8;
          if (c === y.MIXED) return P;
          let I = P - getReservedBitsCount(c, e);
          switch (c) {
            case y.NUMERIC:
              return Math.floor((I / 10) * 3);
            case y.ALPHANUMERIC:
              return Math.floor((I / 11) * 2);
            case y.KANJI:
              return Math.floor(I / 13);
            case y.BYTE:
            default:
              return Math.floor(I / 8);
          }
        }),
        (l.getBestVersionForData = function (e, c) {
          let d;
          let m = g.from(c, g.M);
          if (Array.isArray(e)) {
            if (e.length > 1)
              return (function (e, c) {
                for (let d = 1; d <= 40; d++) {
                  let m = (function (e, l) {
                    let c = 0;
                    return (
                      e.forEach(function (e) {
                        let d = getReservedBitsCount(e.mode, l);
                        c += d + e.getBitsLength();
                      }),
                      c
                    );
                  })(e, d);
                  if (m <= l.getCapacity(d, c, y.MIXED)) return d;
                }
              })(e, m);
            if (0 === e.length) return 1;
            d = e[0];
          } else d = e;
          return (function (e, c, d) {
            for (let m = 1; m <= 40; m++)
              if (c <= l.getCapacity(m, d, e)) return m;
          })(d.mode, d.getLength(), m);
        }),
        (l.getEncodedBits = function (e) {
          if (!b.isValid(e) || e < 7) throw Error("Invalid QR Code version");
          let l = e << 12;
          for (; d.getBCHDigit(l) - C >= 0; )
            l ^= 7973 << (d.getBCHDigit(l) - C);
          return (e << 12) | l;
        });
    },
    42513: function (e, l, c) {
      let d = c(93878);
      (l.render = function (e, l, c) {
        var m;
        let g = c,
          y = l;
        void 0 !== g || (l && l.getContext) || ((g = l), (l = void 0)),
          l ||
            (y = (function () {
              try {
                return document.createElement("canvas");
              } catch (e) {
                throw Error("You need to specify a canvas element");
              }
            })()),
          (g = d.getOptions(g));
        let b = d.getImageWidth(e.modules.size, g),
          C = y.getContext("2d"),
          P = C.createImageData(b, b);
        return (
          d.qrToImageData(P.data, e, g),
          (m = y),
          C.clearRect(0, 0, m.width, m.height),
          m.style || (m.style = {}),
          (m.height = b),
          (m.width = b),
          (m.style.height = b + "px"),
          (m.style.width = b + "px"),
          C.putImageData(P, 0, 0),
          y
        );
      }),
        (l.renderToDataURL = function (e, c, d) {
          let m = d;
          void 0 !== m || (c && c.getContext) || ((m = c), (c = void 0)),
            m || (m = {});
          let g = l.render(e, c, m),
            y = m.type || "image/png",
            b = m.rendererOpts || {};
          return g.toDataURL(y, b.quality);
        });
    },
    51478: function (e, l, c) {
      let d = c(93878);
      function getColorAttrib(e, l) {
        let c = e.a / 255,
          d = l + '="' + e.hex + '"';
        return c < 1
          ? d + " " + l + '-opacity="' + c.toFixed(2).slice(1) + '"'
          : d;
      }
      function svgCmd(e, l, c) {
        let d = e + l;
        return void 0 !== c && (d += " " + c), d;
      }
      l.render = function (e, l, c) {
        let m = d.getOptions(l),
          g = e.modules.size,
          y = e.modules.data,
          b = g + 2 * m.margin,
          C = m.color.light.a
            ? "<path " +
              getColorAttrib(m.color.light, "fill") +
              ' d="M0 0h' +
              b +
              "v" +
              b +
              'H0z"/>'
            : "",
          P =
            "<path " +
            getColorAttrib(m.color.dark, "stroke") +
            ' d="' +
            (function (e, l, c) {
              let d = "",
                m = 0,
                g = !1,
                y = 0;
              for (let b = 0; b < e.length; b++) {
                let C = Math.floor(b % l),
                  P = Math.floor(b / l);
                C || g || (g = !0),
                  e[b]
                    ? (y++,
                      (b > 0 && C > 0 && e[b - 1]) ||
                        ((d += g
                          ? svgCmd("M", C + c, 0.5 + P + c)
                          : svgCmd("m", m, 0)),
                        (m = 0),
                        (g = !1)),
                      (C + 1 < l && e[b + 1]) ||
                        ((d += svgCmd("h", y)), (y = 0)))
                    : m++;
              }
              return d;
            })(y, g, m.margin) +
            '"/>',
          I = m.width
            ? 'width="' + m.width + '" height="' + m.width + '" '
            : "",
          B =
            '<svg xmlns="http://www.w3.org/2000/svg" ' +
            I +
            ('viewBox="0 0 ' + b) +
            " " +
            b +
            '" shape-rendering="crispEdges">' +
            C +
            P +
            "</svg>\n";
        return "function" == typeof c && c(null, B), B;
      };
    },
    93878: function (e, l) {
      function hex2rgba(e) {
        if (("number" == typeof e && (e = e.toString()), "string" != typeof e))
          throw Error("Color should be defined as hex string");
        let l = e.slice().replace("#", "").split("");
        if (l.length < 3 || 5 === l.length || l.length > 8)
          throw Error("Invalid hex color: " + e);
        (3 === l.length || 4 === l.length) &&
          (l = Array.prototype.concat.apply(
            [],
            l.map(function (e) {
              return [e, e];
            })
          )),
          6 === l.length && l.push("F", "F");
        let c = parseInt(l.join(""), 16);
        return {
          r: (c >> 24) & 255,
          g: (c >> 16) & 255,
          b: (c >> 8) & 255,
          a: 255 & c,
          hex: "#" + l.slice(0, 6).join(""),
        };
      }
      (l.getOptions = function (e) {
        e || (e = {}), e.color || (e.color = {});
        let l =
            void 0 === e.margin || null === e.margin || e.margin < 0
              ? 4
              : e.margin,
          c = e.width && e.width >= 21 ? e.width : void 0,
          d = e.scale || 4;
        return {
          width: c,
          scale: c ? 4 : d,
          margin: l,
          color: {
            dark: hex2rgba(e.color.dark || "#000000ff"),
            light: hex2rgba(e.color.light || "#ffffffff"),
          },
          type: e.type,
          rendererOpts: e.rendererOpts || {},
        };
      }),
        (l.getScale = function (e, l) {
          return l.width && l.width >= e + 2 * l.margin
            ? l.width / (e + 2 * l.margin)
            : l.scale;
        }),
        (l.getImageWidth = function (e, c) {
          let d = l.getScale(e, c);
          return Math.floor((e + 2 * c.margin) * d);
        }),
        (l.qrToImageData = function (e, c, d) {
          let m = c.modules.size,
            g = c.modules.data,
            y = l.getScale(m, d),
            b = Math.floor((m + 2 * d.margin) * y),
            C = d.margin * y,
            P = [d.color.light, d.color.dark];
          for (let l = 0; l < b; l++)
            for (let c = 0; c < b; c++) {
              let I = (l * b + c) * 4,
                B = d.color.light;
              if (l >= C && c >= C && l < b - C && c < b - C) {
                let e = Math.floor((l - C) / y),
                  d = Math.floor((c - C) / y);
                B = P[g[e * m + d] ? 1 : 0];
              }
              (e[I++] = B.r), (e[I++] = B.g), (e[I++] = B.b), (e[I] = B.a);
            }
        });
    },
    60198: function (e, l) {
      "use strict";
      /** @license React v16.13.1
       * react-is.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */ var c = "function" == typeof Symbol && Symbol.for,
        d = c ? Symbol.for("react.element") : 60103,
        m = c ? Symbol.for("react.portal") : 60106,
        g = c ? Symbol.for("react.fragment") : 60107,
        y = c ? Symbol.for("react.strict_mode") : 60108,
        b = c ? Symbol.for("react.profiler") : 60114,
        C = c ? Symbol.for("react.provider") : 60109,
        P = c ? Symbol.for("react.context") : 60110,
        I = c ? Symbol.for("react.async_mode") : 60111,
        B = c ? Symbol.for("react.concurrent_mode") : 60111,
        N = c ? Symbol.for("react.forward_ref") : 60112,
        F = c ? Symbol.for("react.suspense") : 60113,
        V = c ? Symbol.for("react.suspense_list") : 60120,
        G = c ? Symbol.for("react.memo") : 60115,
        Q = c ? Symbol.for("react.lazy") : 60116,
        $ = c ? Symbol.for("react.block") : 60121,
        Z = c ? Symbol.for("react.fundamental") : 60117,
        Y = c ? Symbol.for("react.responder") : 60118,
        et = c ? Symbol.for("react.scope") : 60119;
      function z(e) {
        if ("object" == typeof e && null !== e) {
          var l = e.$$typeof;
          switch (l) {
            case d:
              switch ((e = e.type)) {
                case I:
                case B:
                case g:
                case b:
                case y:
                case F:
                  return e;
                default:
                  switch ((e = e && e.$$typeof)) {
                    case P:
                    case N:
                    case Q:
                    case G:
                    case C:
                      return e;
                    default:
                      return l;
                  }
              }
            case m:
              return l;
          }
        }
      }
      function A(e) {
        return z(e) === B;
      }
      (l.AsyncMode = I),
        (l.ConcurrentMode = B),
        (l.ContextConsumer = P),
        (l.ContextProvider = C),
        (l.Element = d),
        (l.ForwardRef = N),
        (l.Fragment = g),
        (l.Lazy = Q),
        (l.Memo = G),
        (l.Portal = m),
        (l.Profiler = b),
        (l.StrictMode = y),
        (l.Suspense = F),
        (l.isAsyncMode = function (e) {
          return A(e) || z(e) === I;
        }),
        (l.isConcurrentMode = A),
        (l.isContextConsumer = function (e) {
          return z(e) === P;
        }),
        (l.isContextProvider = function (e) {
          return z(e) === C;
        }),
        (l.isElement = function (e) {
          return "object" == typeof e && null !== e && e.$$typeof === d;
        }),
        (l.isForwardRef = function (e) {
          return z(e) === N;
        }),
        (l.isFragment = function (e) {
          return z(e) === g;
        }),
        (l.isLazy = function (e) {
          return z(e) === Q;
        }),
        (l.isMemo = function (e) {
          return z(e) === G;
        }),
        (l.isPortal = function (e) {
          return z(e) === m;
        }),
        (l.isProfiler = function (e) {
          return z(e) === b;
        }),
        (l.isStrictMode = function (e) {
          return z(e) === y;
        }),
        (l.isSuspense = function (e) {
          return z(e) === F;
        }),
        (l.isValidElementType = function (e) {
          return (
            "string" == typeof e ||
            "function" == typeof e ||
            e === g ||
            e === B ||
            e === b ||
            e === y ||
            e === F ||
            e === V ||
            ("object" == typeof e &&
              null !== e &&
              (e.$$typeof === Q ||
                e.$$typeof === G ||
                e.$$typeof === C ||
                e.$$typeof === P ||
                e.$$typeof === N ||
                e.$$typeof === Z ||
                e.$$typeof === Y ||
                e.$$typeof === et ||
                e.$$typeof === $))
          );
        }),
        (l.typeOf = z);
    },
    56237: function (e, l, c) {
      "use strict";
      e.exports = c(60198);
    },
    98621: function (e, l) {
      "use strict";
      /**
       * @license React
       * react-is.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */ var c = Symbol.for("react.element"),
        d = Symbol.for("react.portal"),
        m = Symbol.for("react.fragment"),
        g = Symbol.for("react.strict_mode"),
        y = Symbol.for("react.profiler"),
        b = Symbol.for("react.provider"),
        C = Symbol.for("react.context"),
        P = Symbol.for("react.server_context"),
        I = Symbol.for("react.forward_ref"),
        B = Symbol.for("react.suspense"),
        N = Symbol.for("react.suspense_list"),
        F = Symbol.for("react.memo"),
        V = Symbol.for("react.lazy");
      Symbol.for("react.offscreen"),
        Symbol.for("react.module.reference"),
        (l.isFragment = function (e) {
          return (
            (function (e) {
              if ("object" == typeof e && null !== e) {
                var l = e.$$typeof;
                switch (l) {
                  case c:
                    switch ((e = e.type)) {
                      case m:
                      case y:
                      case g:
                      case B:
                      case N:
                        return e;
                      default:
                        switch ((e = e && e.$$typeof)) {
                          case P:
                          case C:
                          case I:
                          case V:
                          case F:
                          case b:
                            return e;
                          default:
                            return l;
                        }
                    }
                  case d:
                    return l;
                }
              }
            })(e) === m
          );
        });
    },
    36479: function (e, l, c) {
      "use strict";
      e.exports = c(98621);
    },
    26870: function (e, l, c) {
      "use strict";
      c.d(l, {
        zt: function () {
          return components_Provider;
        },
        dC: function () {
          return g.unstable_batchedUpdates;
        },
        wU: function () {
          return shallowEqual_shallowEqual;
        },
        I0: function () {
          return Q;
        },
        v9: function () {
          return B;
        },
        oR: function () {
          return G;
        },
      });
      var d = c(76223),
        m = c(38361),
        g = c(10422);
      let batch = function (e) {
          e();
        },
        getBatch = () => batch;
      var y = c(50959);
      let b = Symbol.for("react-redux-context"),
        C = "undefined" != typeof globalThis ? globalThis : {},
        P = (function () {
          var e;
          if (!y.createContext) return {};
          let l = null != (e = C[b]) ? e : (C[b] = new Map()),
            c = l.get(y.createContext);
          return (
            c || ((c = y.createContext(null)), l.set(y.createContext, c)), c
          );
        })();
      function createReduxContextHook(e = P) {
        return function () {
          let l = (0, y.useContext)(e);
          return l;
        };
      }
      let I = createReduxContextHook(),
        useSyncExternalStoreWithSelector = () => {
          throw Error("uSES not initialized!");
        },
        refEquality = (e, l) => e === l,
        B = (function (e = P) {
          let l = e === P ? I : createReduxContextHook(e);
          return function (e, c = {}) {
            let {
                equalityFn: d = refEquality,
                stabilityCheck: m,
                noopCheck: g,
              } = "function" == typeof c ? { equalityFn: c } : c,
              {
                store: b,
                subscription: C,
                getServerState: P,
                stabilityCheck: I,
                noopCheck: B,
              } = l();
            (0, y.useRef)(!0);
            let N = (0, y.useCallback)(
                {
                  [e.name](l) {
                    let c = e(l);
                    return c;
                  },
                }[e.name],
                [e, I, m]
              ),
              F = useSyncExternalStoreWithSelector(
                C.addNestedSub,
                b.getState,
                P || b.getState,
                N,
                d
              );
            return (0, y.useDebugValue)(F), F;
          };
        })();
      c(72535), c(36479);
      let N = { notify() {}, get: () => [] },
        F = !!(
          "undefined" != typeof window &&
          void 0 !== window.document &&
          void 0 !== window.document.createElement
        ),
        V = F ? y.useLayoutEffect : y.useEffect;
      var components_Provider = function ({
        store: e,
        context: l,
        children: c,
        serverState: d,
        stabilityCheck: m = "once",
        noopCheck: g = "once",
      }) {
        let b = y.useMemo(() => {
            let l = (function (e, l) {
              let c;
              let d = N,
                m = 0,
                g = !1;
              function handleChangeWrapper() {
                y.onStateChange && y.onStateChange();
              }
              function trySubscribe() {
                m++,
                  c ||
                    ((c = l
                      ? l.addNestedSub(handleChangeWrapper)
                      : e.subscribe(handleChangeWrapper)),
                    (d = (function () {
                      let e = getBatch(),
                        l = null,
                        c = null;
                      return {
                        clear() {
                          (l = null), (c = null);
                        },
                        notify() {
                          e(() => {
                            let e = l;
                            for (; e; ) e.callback(), (e = e.next);
                          });
                        },
                        get() {
                          let e = [],
                            c = l;
                          for (; c; ) e.push(c), (c = c.next);
                          return e;
                        },
                        subscribe(e) {
                          let d = !0,
                            m = (c = { callback: e, next: null, prev: c });
                          return (
                            m.prev ? (m.prev.next = m) : (l = m),
                            function () {
                              d &&
                                null !== l &&
                                ((d = !1),
                                m.next ? (m.next.prev = m.prev) : (c = m.prev),
                                m.prev ? (m.prev.next = m.next) : (l = m.next));
                            }
                          );
                        },
                      };
                    })()));
              }
              function tryUnsubscribe() {
                m--, c && 0 === m && (c(), (c = void 0), d.clear(), (d = N));
              }
              let y = {
                addNestedSub: function (e) {
                  trySubscribe();
                  let l = d.subscribe(e),
                    c = !1;
                  return () => {
                    c || ((c = !0), l(), tryUnsubscribe());
                  };
                },
                notifyNestedSubs: function () {
                  d.notify();
                },
                handleChangeWrapper,
                isSubscribed: function () {
                  return g;
                },
                trySubscribe: function () {
                  g || ((g = !0), trySubscribe());
                },
                tryUnsubscribe: function () {
                  g && ((g = !1), tryUnsubscribe());
                },
                getListeners: () => d,
              };
              return y;
            })(e);
            return {
              store: e,
              subscription: l,
              getServerState: d ? () => d : void 0,
              stabilityCheck: m,
              noopCheck: g,
            };
          }, [e, d, m, g]),
          C = y.useMemo(() => e.getState(), [e]);
        return (
          V(() => {
            let { subscription: l } = b;
            return (
              (l.onStateChange = l.notifyNestedSubs),
              l.trySubscribe(),
              C !== e.getState() && l.notifyNestedSubs(),
              () => {
                l.tryUnsubscribe(), (l.onStateChange = void 0);
              }
            );
          }, [b, C]),
          y.createElement((l || P).Provider, { value: b }, c)
        );
      };
      function createStoreHook(e = P) {
        let l = e === P ? I : createReduxContextHook(e);
        return function () {
          let { store: e } = l();
          return e;
        };
      }
      let G = createStoreHook(),
        Q = (function (e = P) {
          let l = e === P ? G : createStoreHook(e);
          return function () {
            let e = l();
            return e.dispatch;
          };
        })();
      function is(e, l) {
        return e === l
          ? 0 !== e || 0 !== l || 1 / e == 1 / l
          : e != e && l != l;
      }
      function shallowEqual_shallowEqual(e, l) {
        if (is(e, l)) return !0;
        if (
          "object" != typeof e ||
          null === e ||
          "object" != typeof l ||
          null === l
        )
          return !1;
        let c = Object.keys(e),
          d = Object.keys(l);
        if (c.length !== d.length) return !1;
        for (let d = 0; d < c.length; d++)
          if (
            !Object.prototype.hasOwnProperty.call(l, c[d]) ||
            !is(e[c[d]], l[c[d]])
          )
            return !1;
        return !0;
      }
      (useSyncExternalStoreWithSelector = m.useSyncExternalStoreWithSelector),
        d.useSyncExternalStore,
        (batch = g.unstable_batchedUpdates);
    },
    99013: function (e, l, c) {
      "use strict";
      l.Z = function (e) {
        var l = (0, m.default)(e);
        return {
          getItem: function (e) {
            return new Promise(function (c, d) {
              c(l.getItem(e));
            });
          },
          setItem: function (e, c) {
            return new Promise(function (d, m) {
              d(l.setItem(e, c));
            });
          },
          removeItem: function (e) {
            return new Promise(function (c, d) {
              c(l.removeItem(e));
            });
          },
        };
      };
      var d,
        m = (d = c(48410)) && d.__esModule ? d : { default: d };
    },
    48410: function (e, l) {
      "use strict";
      function _typeof(e) {
        return (_typeof =
          "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
            ? function (e) {
                return typeof e;
              }
            : function (e) {
                return e &&
                  "function" == typeof Symbol &&
                  e.constructor === Symbol &&
                  e !== Symbol.prototype
                  ? "symbol"
                  : typeof e;
              })(e);
      }
      function noop() {}
      (l.__esModule = !0),
        (l.default = function (e) {
          var l = "".concat(e, "Storage");
          return !(function (e) {
            if (
              ("undefined" == typeof self ? "undefined" : _typeof(self)) !==
                "object" ||
              !(e in self)
            )
              return !1;
            try {
              var l = self[e],
                c = "redux-persist ".concat(e, " test");
              l.setItem(c, "test"), l.getItem(c), l.removeItem(c);
            } catch (e) {
              return !1;
            }
            return !0;
          })(l)
            ? c
            : self[l];
        });
      var c = { getItem: noop, setItem: noop, removeItem: noop };
    },
    79225: function (e, l, c) {
      var d;
      !(function (m, g) {
        "use strict";
        var y = "function",
          b = "undefined",
          C = "object",
          P = "string",
          I = "major",
          B = "model",
          N = "name",
          F = "type",
          V = "vendor",
          G = "version",
          Q = "architecture",
          $ = "console",
          Z = "mobile",
          Y = "tablet",
          et = "smarttv",
          en = "wearable",
          er = "embedded",
          ei = "Amazon",
          eo = "Apple",
          ea = "ASUS",
          es = "BlackBerry",
          el = "Browser",
          ec = "Chrome",
          eu = "Firefox",
          ed = "Google",
          ep = "Huawei",
          eh = "Microsoft",
          ef = "Motorola",
          em = "Opera",
          eg = "Samsung",
          ey = "Sharp",
          eb = "Sony",
          ev = "Xiaomi",
          ew = "Zebra",
          ex = "Facebook",
          e_ = "Chromium OS",
          eC = "Mac OS",
          eE = " Browser",
          extend = function (e, l) {
            var c = {};
            for (var d in e)
              l[d] && l[d].length % 2 == 0
                ? (c[d] = l[d].concat(e[d]))
                : (c[d] = e[d]);
            return c;
          },
          enumerize = function (e) {
            for (var l = {}, c = 0; c < e.length; c++)
              l[e[c].toUpperCase()] = e[c];
            return l;
          },
          has = function (e, l) {
            return typeof e === P && -1 !== lowerize(l).indexOf(lowerize(e));
          },
          lowerize = function (e) {
            return e.toLowerCase();
          },
          trim = function (e, l) {
            if (typeof e === P)
              return (
                (e = e.replace(/^\s\s*/, "")),
                typeof l === b ? e : e.substring(0, 500)
              );
          },
          rgxMapper = function (e, l) {
            for (var c, d, m, b, P, I, B = 0; B < l.length && !P; ) {
              var N = l[B],
                F = l[B + 1];
              for (c = d = 0; c < N.length && !P && N[c]; )
                if ((P = N[c++].exec(e)))
                  for (m = 0; m < F.length; m++)
                    (I = P[++d]),
                      typeof (b = F[m]) === C && b.length > 0
                        ? 2 === b.length
                          ? typeof b[1] == y
                            ? (this[b[0]] = b[1].call(this, I))
                            : (this[b[0]] = b[1])
                          : 3 === b.length
                          ? typeof b[1] !== y || (b[1].exec && b[1].test)
                            ? (this[b[0]] = I ? I.replace(b[1], b[2]) : g)
                            : (this[b[0]] = I ? b[1].call(this, I, b[2]) : g)
                          : 4 === b.length &&
                            (this[b[0]] = I
                              ? b[3].call(this, I.replace(b[1], b[2]))
                              : g)
                        : (this[b] = I || g);
              B += 2;
            }
          },
          strMapper = function (e, l) {
            for (var c in l)
              if (typeof l[c] === C && l[c].length > 0) {
                for (var d = 0; d < l[c].length; d++)
                  if (has(l[c][d], e)) return "?" === c ? g : c;
              } else if (has(l[c], e)) return "?" === c ? g : c;
            return l.hasOwnProperty("*") ? l["*"] : e;
          },
          eA = {
            ME: "4.90",
            "NT 3.11": "NT3.51",
            "NT 4.0": "NT4.0",
            2e3: "NT 5.0",
            XP: ["NT 5.1", "NT 5.2"],
            Vista: "NT 6.0",
            7: "NT 6.1",
            8: "NT 6.2",
            8.1: "NT 6.3",
            10: ["NT 6.4", "NT 10.0"],
            RT: "ARM",
          },
          eS = {
            browser: [
              [/\b(?:crmo|crios)\/([\w\.]+)/i],
              [G, [N, "Chrome"]],
              [/edg(?:e|ios|a)?\/([\w\.]+)/i],
              [G, [N, "Edge"]],
              [
                /(opera mini)\/([-\w\.]+)/i,
                /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
                /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i,
              ],
              [N, G],
              [/opios[\/ ]+([\w\.]+)/i],
              [G, [N, em + " Mini"]],
              [/\bop(?:rg)?x\/([\w\.]+)/i],
              [G, [N, em + " GX"]],
              [/\bopr\/([\w\.]+)/i],
              [G, [N, em]],
              [/\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i],
              [G, [N, "Baidu"]],
              [/\b(?:mxbrowser|mxios|myie2)\/?([-\w\.]*)\b/i],
              [G, [N, "Maxthon"]],
              [
                /(kindle)\/([\w\.]+)/i,
                /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\/ ]?([\w\.]*)/i,
                /(avant|iemobile|slim(?:browser|boat|jet))[\/ ]?([\d\.]*)/i,
                /(?:ms|\()(ie) ([\w\.]+)/i,
                /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon)\/([-\w\.]+)/i,
                /(heytap|ovi|115)browser\/([\d\.]+)/i,
                /(weibo)__([\d\.]+)/i,
              ],
              [N, G],
              [/quark(?:pc)?\/([-\w\.]+)/i],
              [G, [N, "Quark"]],
              [/\bddg\/([\w\.]+)/i],
              [G, [N, "DuckDuckGo"]],
              [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],
              [G, [N, "UC" + el]],
              [
                /microm.+\bqbcore\/([\w\.]+)/i,
                /\bqbcore\/([\w\.]+).+microm/i,
                /micromessenger\/([\w\.]+)/i,
              ],
              [G, [N, "WeChat"]],
              [/konqueror\/([\w\.]+)/i],
              [G, [N, "Konqueror"]],
              [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],
              [G, [N, "IE"]],
              [/ya(?:search)?browser\/([\w\.]+)/i],
              [G, [N, "Yandex"]],
              [/slbrowser\/([\w\.]+)/i],
              [G, [N, "Smart Lenovo " + el]],
              [/(avast|avg)\/([\w\.]+)/i],
              [[N, /(.+)/, "$1 Secure " + el], G],
              [/\bfocus\/([\w\.]+)/i],
              [G, [N, eu + " Focus"]],
              [/\bopt\/([\w\.]+)/i],
              [G, [N, em + " Touch"]],
              [/coc_coc\w+\/([\w\.]+)/i],
              [G, [N, "Coc Coc"]],
              [/dolfin\/([\w\.]+)/i],
              [G, [N, "Dolphin"]],
              [/coast\/([\w\.]+)/i],
              [G, [N, em + " Coast"]],
              [/miuibrowser\/([\w\.]+)/i],
              [G, [N, "MIUI" + eE]],
              [/fxios\/([\w\.-]+)/i],
              [G, [N, eu]],
              [/\bqihoobrowser\/?([\w\.]*)/i],
              [G, [N, "360"]],
              [/\b(qq)\/([\w\.]+)/i],
              [[N, /(.+)/, "$1Browser"], G],
              [/(oculus|sailfish|huawei|vivo|pico)browser\/([\w\.]+)/i],
              [[N, /(.+)/, "$1" + eE], G],
              [/samsungbrowser\/([\w\.]+)/i],
              [G, [N, eg + " Internet"]],
              [/metasr[\/ ]?([\d\.]+)/i],
              [G, [N, "Sogou Explorer"]],
              [/(sogou)mo\w+\/([\d\.]+)/i],
              [[N, "Sogou Mobile"], G],
              [
                /(electron)\/([\w\.]+) safari/i,
                /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
                /m?(qqbrowser|2345(?=browser|chrome|explorer))\w*[\/ ]?v?([\w\.]+)/i,
              ],
              [N, G],
              [/(lbbrowser|rekonq)/i, /\[(linkedin)app\]/i],
              [N],
              [
                /ome\/([\w\.]+) \w* ?(iron) saf/i,
                /ome\/([\w\.]+).+qihu (360)[es]e/i,
              ],
              [G, N],
              [/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],
              [[N, ex], G],
              [
                /(Klarna)\/([\w\.]+)/i,
                /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
                /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
                /safari (line)\/([\w\.]+)/i,
                /\b(line)\/([\w\.]+)\/iab/i,
                /(alipay)client\/([\w\.]+)/i,
                /(twitter)(?:and| f.+e\/([\w\.]+))/i,
                /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i,
              ],
              [N, G],
              [/\bgsa\/([\w\.]+) .*safari\//i],
              [G, [N, "GSA"]],
              [/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],
              [G, [N, "TikTok"]],
              [/headlesschrome(?:\/([\w\.]+)| )/i],
              [G, [N, ec + " Headless"]],
              [/ wv\).+(chrome)\/([\w\.]+)/i],
              [[N, ec + " WebView"], G],
              [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],
              [G, [N, "Android " + el]],
              [/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],
              [N, G],
              [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],
              [G, [N, "Mobile Safari"]],
              [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],
              [G, N],
              [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],
              [
                N,
                [
                  G,
                  strMapper,
                  {
                    "1.0": "/8",
                    1.2: "/1",
                    1.3: "/3",
                    "2.0": "/412",
                    "2.0.2": "/416",
                    "2.0.3": "/417",
                    "2.0.4": "/419",
                    "?": "/",
                  },
                ],
              ],
              [/(webkit|khtml)\/([\w\.]+)/i],
              [N, G],
              [/(navigator|netscape\d?)\/([-\w\.]+)/i],
              [[N, "Netscape"], G],
              [/(wolvic|librewolf)\/([\w\.]+)/i],
              [N, G],
              [/mobile vr; rv:([\w\.]+)\).+firefox/i],
              [G, [N, eu + " Reality"]],
              [
                /ekiohf.+(flow)\/([\w\.]+)/i,
                /(swiftfox)/i,
                /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\/ ]?([\w\.\+]+)/i,
                /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                /(firefox)\/([\w\.]+)/i,
                /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
                /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                /(links) \(([\w\.]+)/i,
              ],
              [N, [G, /_/g, "."]],
              [/(cobalt)\/([\w\.]+)/i],
              [N, [G, /master.|lts./, ""]],
            ],
            cpu: [
              [/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],
              [[Q, "amd64"]],
              [/(ia32(?=;))/i],
              [[Q, lowerize]],
              [/((?:i[346]|x)86)[;\)]/i],
              [[Q, "ia32"]],
              [/\b(aarch64|arm(v?8e?l?|_?64))\b/i],
              [[Q, "arm64"]],
              [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],
              [[Q, "armhf"]],
              [/windows (ce|mobile); ppc;/i],
              [[Q, "arm"]],
              [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],
              [[Q, /ower/, "", lowerize]],
              [/(sun4\w)[;\)]/i],
              [[Q, "sparc"]],
              [
                /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i,
              ],
              [[Q, lowerize]],
            ],
            device: [
              [
                /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i,
              ],
              [B, [V, eg], [F, Y]],
              [
                /\b((?:s[cgp]h|gt|sm)-(?![lr])\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
                /samsung[- ]((?!sm-[lr])[-\w]+)/i,
                /sec-(sgh\w+)/i,
              ],
              [B, [V, eg], [F, Z]],
              [/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],
              [B, [V, eo], [F, Z]],
              [
                /\((ipad);[-\w\),; ]+apple/i,
                /applecoremedia\/[\w\.]+ \((ipad)/i,
                /\b(ipad)\d\d?,\d\d?[;\]].+ios/i,
              ],
              [B, [V, eo], [F, Y]],
              [/(macintosh);/i],
              [B, [V, eo]],
              [/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],
              [B, [V, ey], [F, Z]],
              [/(?:honor)([-\w ]+)[;\)]/i],
              [B, [V, "Honor"], [F, Z]],
              [/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],
              [B, [V, ep], [F, Y]],
              [
                /(?:huawei)([-\w ]+)[;\)]/i,
                /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i,
              ],
              [B, [V, ep], [F, Z]],
              [
                /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
                /\b; (\w+) build\/hm\1/i,
                /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
                /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
                /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
                /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\))/i,
              ],
              [
                [B, /_/g, " "],
                [V, ev],
                [F, Z],
              ],
              [
                /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
                /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i,
              ],
              [
                [B, /_/g, " "],
                [V, ev],
                [F, Y],
              ],
              [
                /; (\w+) bui.+ oppo/i,
                /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i,
              ],
              [B, [V, "OPPO"], [F, Z]],
              [/\b(opd2\d{3}a?) bui/i],
              [B, [V, "OPPO"], [F, Y]],
              [/vivo (\w+)(?: bui|\))/i, /\b(v[12]\d{3}\w?[at])(?: bui|;)/i],
              [B, [V, "Vivo"], [F, Z]],
              [/\b(rmx[1-3]\d{3})(?: bui|;|\))/i],
              [B, [V, "Realme"], [F, Z]],
              [
                /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                /\bmot(?:orola)?[- ](\w*)/i,
                /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i,
              ],
              [B, [V, ef], [F, Z]],
              [/\b(mz60\d|xoom[2 ]{0,2}) build\//i],
              [B, [V, ef], [F, Y]],
              [/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],
              [B, [V, "LG"], [F, Y]],
              [
                /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                /\blg-?([\d\w]+) bui/i,
              ],
              [B, [V, "LG"], [F, Z]],
              [
                /(ideatab[-\w ]+)/i,
                /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i,
              ],
              [B, [V, "Lenovo"], [F, Y]],
              [/(?:maemo|nokia).*(n900|lumia \d+)/i, /nokia[-_ ]?([-\w\.]*)/i],
              [
                [B, /_/g, " "],
                [V, "Nokia"],
                [F, Z],
              ],
              [/(pixel c)\b/i],
              [B, [V, ed], [F, Y]],
              [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],
              [B, [V, ed], [F, Z]],
              [
                /droid.+; (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i,
              ],
              [B, [V, eb], [F, Z]],
              [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i],
              [
                [B, "Xperia Tablet"],
                [V, eb],
                [F, Y],
              ],
              [
                / (kb2005|in20[12]5|be20[12][59])\b/i,
                /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i,
              ],
              [B, [V, "OnePlus"], [F, Z]],
              [
                /(alexa)webm/i,
                /(kf[a-z]{2}wi|aeo(?!bc)\w\w)( bui|\))/i,
                /(kf[a-z]+)( bui|\)).+silk\//i,
              ],
              [B, [V, ei], [F, Y]],
              [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],
              [
                [B, /(.+)/g, "Fire Phone $1"],
                [V, ei],
                [F, Z],
              ],
              [/(playbook);[-\w\),; ]+(rim)/i],
              [B, V, [F, Y]],
              [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i],
              [B, [V, es], [F, Z]],
              [
                /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i,
              ],
              [B, [V, ea], [F, Y]],
              [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],
              [B, [V, ea], [F, Z]],
              [/(nexus 9)/i],
              [B, [V, "HTC"], [F, Y]],
              [
                /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
                /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i,
              ],
              [V, [B, /_/g, " "], [F, Z]],
              [
                /droid [\w\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\w*(\)| bui)/i,
              ],
              [B, [V, "TCL"], [F, Y]],
              [/(itel) ((\w+))/i],
              [
                [V, lowerize],
                B,
                [F, strMapper, { tablet: ["p10001l", "w7001"], "*": "mobile" }],
              ],
              [/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],
              [B, [V, "Acer"], [F, Y]],
              [/droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i],
              [B, [V, "Meizu"], [F, Z]],
              [/; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i],
              [B, [V, "Ulefone"], [F, Z]],
              [
                /; (energy ?\w+)(?: bui|\))/i,
                /; energizer ([\w ]+)(?: bui|\))/i,
              ],
              [B, [V, "Energizer"], [F, Z]],
              [/; cat (b35);/i, /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\))/i],
              [B, [V, "Cat"], [F, Z]],
              [/((?:new )?andromax[\w- ]+)(?: bui|\))/i],
              [B, [V, "Smartfren"], [F, Z]],
              [/droid.+; (a(?:015|06[35]|142p?))/i],
              [B, [V, "Nothing"], [F, Z]],
              [
                /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\w]*)/i,
                /; (imo) ((?!tab)[\w ]+?)(?: bui|\))/i,
                /(hp) ([\w ]+\w)/i,
                /(asus)-?(\w+)/i,
                /(microsoft); (lumia[\w ]+)/i,
                /(lenovo)[-_ ]?([-\w]+)/i,
                /(jolla)/i,
                /(oppo) ?([\w ]+) bui/i,
              ],
              [V, B, [F, Z]],
              [
                /(imo) (tab \w+)/i,
                /(kobo)\s(ereader|touch)/i,
                /(archos) (gamepad2?)/i,
                /(hp).+(touchpad(?!.+tablet)|tablet)/i,
                /(kindle)\/([\w\.]+)/i,
                /(nook)[\w ]+build\/(\w+)/i,
                /(dell) (strea[kpr\d ]*[\dko])/i,
                /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
                /(trinity)[- ]*(t\d{3}) bui/i,
                /(gigaset)[- ]+(q\w{1,9}) bui/i,
                /(vodafone) ([\w ]+)(?:\)| bui)/i,
              ],
              [V, B, [F, Y]],
              [/(surface duo)/i],
              [B, [V, eh], [F, Y]],
              [/droid [\d\.]+; (fp\du?)(?: b|\))/i],
              [B, [V, "Fairphone"], [F, Z]],
              [/(u304aa)/i],
              [B, [V, "AT&T"], [F, Z]],
              [/\bsie-(\w*)/i],
              [B, [V, "Siemens"], [F, Z]],
              [/\b(rct\w+) b/i],
              [B, [V, "RCA"], [F, Y]],
              [/\b(venue[\d ]{2,7}) b/i],
              [B, [V, "Dell"], [F, Y]],
              [/\b(q(?:mv|ta)\w+) b/i],
              [B, [V, "Verizon"], [F, Y]],
              [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],
              [B, [V, "Barnes & Noble"], [F, Y]],
              [/\b(tm\d{3}\w+) b/i],
              [B, [V, "NuVision"], [F, Y]],
              [/\b(k88) b/i],
              [B, [V, "ZTE"], [F, Y]],
              [/\b(nx\d{3}j) b/i],
              [B, [V, "ZTE"], [F, Z]],
              [/\b(gen\d{3}) b.+49h/i],
              [B, [V, "Swiss"], [F, Z]],
              [/\b(zur\d{3}) b/i],
              [B, [V, "Swiss"], [F, Y]],
              [/\b((zeki)?tb.*\b) b/i],
              [B, [V, "Zeki"], [F, Y]],
              [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i],
              [[V, "Dragon Touch"], B, [F, Y]],
              [/\b(ns-?\w{0,9}) b/i],
              [B, [V, "Insignia"], [F, Y]],
              [/\b((nxa|next)-?\w{0,9}) b/i],
              [B, [V, "NextBook"], [F, Y]],
              [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],
              [[V, "Voice"], B, [F, Z]],
              [/\b(lvtel\-)?(v1[12]) b/i],
              [[V, "LvTel"], B, [F, Z]],
              [/\b(ph-1) /i],
              [B, [V, "Essential"], [F, Z]],
              [/\b(v(100md|700na|7011|917g).*\b) b/i],
              [B, [V, "Envizen"], [F, Y]],
              [/\b(trio[-\w\. ]+) b/i],
              [B, [V, "MachSpeed"], [F, Y]],
              [/\btu_(1491) b/i],
              [B, [V, "Rotor"], [F, Y]],
              [/(shield[\w ]+) b/i],
              [B, [V, "Nvidia"], [F, Y]],
              [/(sprint) (\w+)/i],
              [V, B, [F, Z]],
              [/(kin\.[onetw]{3})/i],
              [
                [B, /\./g, " "],
                [V, eh],
                [F, Z],
              ],
              [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],
              [B, [V, ew], [F, Y]],
              [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],
              [B, [V, ew], [F, Z]],
              [/smart-tv.+(samsung)/i],
              [V, [F, et]],
              [/hbbtv.+maple;(\d+)/i],
              [
                [B, /^/, "SmartTV"],
                [V, eg],
                [F, et],
              ],
              [/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],
              [
                [V, "LG"],
                [F, et],
              ],
              [/(apple) ?tv/i],
              [V, [B, eo + " TV"], [F, et]],
              [/crkey/i],
              [
                [B, ec + "cast"],
                [V, ed],
                [F, et],
              ],
              [/droid.+aft(\w+)( bui|\))/i],
              [B, [V, ei], [F, et]],
              [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i],
              [B, [V, ey], [F, et]],
              [/(bravia[\w ]+)( bui|\))/i],
              [B, [V, eb], [F, et]],
              [/(mitv-\w{5}) bui/i],
              [B, [V, ev], [F, et]],
              [/Hbbtv.*(technisat) (.*);/i],
              [V, B, [F, et]],
              [
                /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
                /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i,
              ],
              [
                [V, trim],
                [B, trim],
                [F, et],
              ],
              [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],
              [[F, et]],
              [/(ouya)/i, /(nintendo) ([wids3utch]+)/i],
              [V, B, [F, $]],
              [/droid.+; (shield) bui/i],
              [B, [V, "Nvidia"], [F, $]],
              [/(playstation [345portablevi]+)/i],
              [B, [V, eb], [F, $]],
              [/\b(xbox(?: one)?(?!; xbox))[\); ]/i],
              [B, [V, eh], [F, $]],
              [/\b(sm-[lr]\d\d[05][fnuw]?s?)\b/i],
              [B, [V, eg], [F, en]],
              [/((pebble))app/i],
              [V, B, [F, en]],
              [/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],
              [B, [V, eo], [F, en]],
              [/droid.+; (glass) \d/i],
              [B, [V, ed], [F, en]],
              [/droid.+; (wt63?0{2,3})\)/i],
              [B, [V, ew], [F, en]],
              [/droid.+; (glass) \d/i],
              [B, [V, ed], [F, en]],
              [/(pico) (4|neo3(?: link|pro)?)/i],
              [V, B, [F, en]],
              [/; (quest( \d| pro)?)/i],
              [B, [V, ex], [F, en]],
              [/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],
              [V, [F, er]],
              [/(aeobc)\b/i],
              [B, [V, ei], [F, er]],
              [
                /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i,
              ],
              [B, [F, Z]],
              [/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],
              [B, [F, Y]],
              [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],
              [[F, Y]],
              [
                /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i,
              ],
              [[F, Z]],
              [/(android[-\w\. ]{0,9});.+buil/i],
              [B, [V, "Generic"]],
            ],
            engine: [
              [/windows.+ edge\/([\w\.]+)/i],
              [G, [N, "EdgeHTML"]],
              [/(arkweb)\/([\w\.]+)/i],
              [N, G],
              [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],
              [G, [N, "Blink"]],
              [
                /(presto)\/([\w\.]+)/i,
                /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\/([\w\.]+)/i,
                /ekioh(flow)\/([\w\.]+)/i,
                /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
                /(icab)[\/ ]([23]\.[\d\.]+)/i,
                /\b(libweb)/i,
              ],
              [N, G],
              [/rv\:([\w\.]{1,9})\b.+(gecko)/i],
              [G, N],
            ],
            os: [
              [/microsoft (windows) (vista|xp)/i],
              [N, G],
              [/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i],
              [N, [G, strMapper, eA]],
              [
                /windows nt 6\.2; (arm)/i,
                /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
                /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i,
              ],
              [
                [G, strMapper, eA],
                [N, "Windows"],
              ],
              [
                /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
                /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
                /cfnetwork\/.+darwin/i,
              ],
              [
                [G, /_/g, "."],
                [N, "iOS"],
              ],
              [
                /(mac os x) ?([\w\. ]*)/i,
                /(macintosh|mac_powerpc\b)(?!.+haiku)/i,
              ],
              [
                [N, eC],
                [G, /_/g, "."],
              ],
              [/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],
              [G, N],
              [
                /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish|openharmony)[-\/ ]?([\w\.]*)/i,
                /(blackberry)\w*\/([\w\.]*)/i,
                /(tizen|kaios)[\/ ]([\w\.]+)/i,
                /\((series40);/i,
              ],
              [N, G],
              [/\(bb(10);/i],
              [G, [N, es]],
              [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],
              [G, [N, "Symbian"]],
              [
                /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i,
              ],
              [G, [N, eu + " OS"]],
              [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],
              [G, [N, "webOS"]],
              [/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],
              [G, [N, "watchOS"]],
              [/crkey\/([\d\.]+)/i],
              [G, [N, ec + "cast"]],
              [/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],
              [[N, e_], G],
              [
                /panasonic;(viera)/i,
                /(netrange)mmh/i,
                /(nettv)\/(\d+\.[\w\.]+)/i,
                /(nintendo|playstation) ([wids345portablevuch]+)/i,
                /(xbox); +xbox ([^\);]+)/i,
                /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
                /(mint)[\/\(\) ]?(\w*)/i,
                /(mageia|vectorlinux)[; ]/i,
                /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                /(hurd|linux) ?([\w\.]*)/i,
                /(gnu) ?([\w\.]*)/i,
                /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
                /(haiku) (\w+)/i,
              ],
              [N, G],
              [/(sunos) ?([\w\.\d]*)/i],
              [[N, "Solaris"], G],
              [
                /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
                /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
                /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
                /(unix) ?([\w\.]*)/i,
              ],
              [N, G],
            ],
          },
          UAParser = function (e, l) {
            if (
              (typeof e === C && ((l = e), (e = g)),
              !(this instanceof UAParser))
            )
              return new UAParser(e, l).getResult();
            var c = typeof m !== b && m.navigator ? m.navigator : g,
              d = e || (c && c.userAgent ? c.userAgent : ""),
              $ = c && c.userAgentData ? c.userAgentData : g,
              et = l ? extend(eS, l) : eS,
              en = c && c.userAgent == d;
            return (
              (this.getBrowser = function () {
                var e,
                  l = {};
                return (
                  (l[N] = g),
                  (l[G] = g),
                  rgxMapper.call(l, d, et.browser),
                  (l[I] =
                    typeof (e = l[G]) === P
                      ? e.replace(/[^\d\.]/g, "").split(".")[0]
                      : g),
                  en &&
                    c &&
                    c.brave &&
                    typeof c.brave.isBrave == y &&
                    (l[N] = "Brave"),
                  l
                );
              }),
              (this.getCPU = function () {
                var e = {};
                return (e[Q] = g), rgxMapper.call(e, d, et.cpu), e;
              }),
              (this.getDevice = function () {
                var e = {};
                return (
                  (e[V] = g),
                  (e[B] = g),
                  (e[F] = g),
                  rgxMapper.call(e, d, et.device),
                  en && !e[F] && $ && $.mobile && (e[F] = Z),
                  en &&
                    "Macintosh" == e[B] &&
                    c &&
                    typeof c.standalone !== b &&
                    c.maxTouchPoints &&
                    c.maxTouchPoints > 2 &&
                    ((e[B] = "iPad"), (e[F] = Y)),
                  e
                );
              }),
              (this.getEngine = function () {
                var e = {};
                return (
                  (e[N] = g), (e[G] = g), rgxMapper.call(e, d, et.engine), e
                );
              }),
              (this.getOS = function () {
                var e = {};
                return (
                  (e[N] = g),
                  (e[G] = g),
                  rgxMapper.call(e, d, et.os),
                  en &&
                    !e[N] &&
                    $ &&
                    $.platform &&
                    "Unknown" != $.platform &&
                    (e[N] = $.platform
                      .replace(/chrome os/i, e_)
                      .replace(/macos/i, eC)),
                  e
                );
              }),
              (this.getResult = function () {
                return {
                  ua: this.getUA(),
                  browser: this.getBrowser(),
                  engine: this.getEngine(),
                  os: this.getOS(),
                  device: this.getDevice(),
                  cpu: this.getCPU(),
                };
              }),
              (this.getUA = function () {
                return d;
              }),
              (this.setUA = function (e) {
                return (
                  (d = typeof e === P && e.length > 500 ? trim(e, 500) : e),
                  this
                );
              }),
              this.setUA(d),
              this
            );
          };
        (UAParser.VERSION = "1.0.40"),
          (UAParser.BROWSER = enumerize([N, G, I])),
          (UAParser.CPU = enumerize([Q])),
          (UAParser.DEVICE = enumerize([B, V, F, $, Z, et, Y, en, er])),
          (UAParser.ENGINE = UAParser.OS = enumerize([N, G])),
          typeof l !== b
            ? (e.exports && (l = e.exports = UAParser), (l.UAParser = UAParser))
            : c.amdO
            ? g !==
                (d = function () {
                  return UAParser;
                }.call(l, c, l, e)) && (e.exports = d)
            : typeof m !== b && (m.UAParser = UAParser);
        var ek = typeof m !== b && (m.jQuery || m.Zepto);
        if (ek && !ek.ua) {
          var eP = new UAParser();
          (ek.ua = eP.getResult()),
            (ek.ua.get = function () {
              return eP.getUA();
            }),
            (ek.ua.set = function (e) {
              eP.setUA(e);
              var l = eP.getResult();
              for (var c in l) ek.ua[c] = l[c];
            });
        }
      })("object" == typeof window ? window : this);
    },
    93370: function (e, l, c) {
      "use strict";
      /**
       * @license React
       * use-sync-external-store-shim.production.js
       *
       * Copyright (c) Meta Platforms, Inc. and affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */ var d = c(50959),
        m =
          "function" == typeof Object.is
            ? Object.is
            : function (e, l) {
                return (
                  (e === l && (0 !== e || 1 / e == 1 / l)) || (e != e && l != l)
                );
              },
        g = d.useState,
        y = d.useEffect,
        b = d.useLayoutEffect,
        C = d.useDebugValue;
      function checkIfSnapshotChanged(e) {
        var l = e.getSnapshot;
        e = e.value;
        try {
          var c = l();
          return !m(e, c);
        } catch (e) {
          return !0;
        }
      }
      var P =
        "undefined" == typeof window ||
        void 0 === window.document ||
        void 0 === window.document.createElement
          ? function (e, l) {
              return l();
            }
          : function (e, l) {
              var c = l(),
                d = g({ inst: { value: c, getSnapshot: l } }),
                m = d[0].inst,
                P = d[1];
              return (
                b(
                  function () {
                    (m.value = c),
                      (m.getSnapshot = l),
                      checkIfSnapshotChanged(m) && P({ inst: m });
                  },
                  [e, c, l]
                ),
                y(
                  function () {
                    return (
                      checkIfSnapshotChanged(m) && P({ inst: m }),
                      e(function () {
                        checkIfSnapshotChanged(m) && P({ inst: m });
                      })
                    );
                  },
                  [e]
                ),
                C(c),
                c
              );
            };
      l.useSyncExternalStore =
        void 0 !== d.useSyncExternalStore ? d.useSyncExternalStore : P;
    },
    54025: function (e, l, c) {
      "use strict";
      /**
       * @license React
       * use-sync-external-store-shim/with-selector.production.js
       *
       * Copyright (c) Meta Platforms, Inc. and affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */ var d = c(50959),
        m = c(17056),
        g =
          "function" == typeof Object.is
            ? Object.is
            : function (e, l) {
                return (
                  (e === l && (0 !== e || 1 / e == 1 / l)) || (e != e && l != l)
                );
              },
        y = m.useSyncExternalStore,
        b = d.useRef,
        C = d.useEffect,
        P = d.useMemo,
        I = d.useDebugValue;
      l.useSyncExternalStoreWithSelector = function (e, l, c, d, m) {
        var B = b(null);
        if (null === B.current) {
          var N = { hasValue: !1, value: null };
          B.current = N;
        } else N = B.current;
        var F = y(
          e,
          (B = P(
            function () {
              function memoizedSelector(l) {
                if (!b) {
                  if (
                    ((b = !0), (e = l), (l = d(l)), void 0 !== m && N.hasValue)
                  ) {
                    var c = N.value;
                    if (m(c, l)) return (y = c);
                  }
                  return (y = l);
                }
                if (((c = y), g(e, l))) return c;
                var C = d(l);
                return void 0 !== m && m(c, C)
                  ? ((e = l), c)
                  : ((e = l), (y = C));
              }
              var e,
                y,
                b = !1,
                C = void 0 === c ? null : c;
              return [
                function () {
                  return memoizedSelector(l());
                },
                null === C
                  ? void 0
                  : function () {
                      return memoizedSelector(C());
                    },
              ];
            },
            [l, c, d, m]
          ))[0],
          B[1]
        );
        return (
          C(
            function () {
              (N.hasValue = !0), (N.value = F);
            },
            [F]
          ),
          I(F),
          F
        );
      };
    },
    17056: function (e, l, c) {
      "use strict";
      e.exports = c(93370);
    },
    63236: function (e, l, c) {
      "use strict";
      e.exports = c(54025);
    },
    21409: function (e, l, c) {
      "use strict";
      /**
       * @license React
       * use-sync-external-store-shim.production.js
       *
       * Copyright (c) Meta Platforms, Inc. and affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */ var d = c(50959),
        m =
          "function" == typeof Object.is
            ? Object.is
            : function (e, l) {
                return (
                  (e === l && (0 !== e || 1 / e == 1 / l)) || (e != e && l != l)
                );
              },
        g = d.useState,
        y = d.useEffect,
        b = d.useLayoutEffect,
        C = d.useDebugValue;
      function checkIfSnapshotChanged(e) {
        var l = e.getSnapshot;
        e = e.value;
        try {
          var c = l();
          return !m(e, c);
        } catch (e) {
          return !0;
        }
      }
      var P =
        "undefined" == typeof window ||
        void 0 === window.document ||
        void 0 === window.document.createElement
          ? function (e, l) {
              return l();
            }
          : function (e, l) {
              var c = l(),
                d = g({ inst: { value: c, getSnapshot: l } }),
                m = d[0].inst,
                P = d[1];
              return (
                b(
                  function () {
                    (m.value = c),
                      (m.getSnapshot = l),
                      checkIfSnapshotChanged(m) && P({ inst: m });
                  },
                  [e, c, l]
                ),
                y(
                  function () {
                    return (
                      checkIfSnapshotChanged(m) && P({ inst: m }),
                      e(function () {
                        checkIfSnapshotChanged(m) && P({ inst: m });
                      })
                    );
                  },
                  [e]
                ),
                C(c),
                c
              );
            };
      l.useSyncExternalStore =
        void 0 !== d.useSyncExternalStore ? d.useSyncExternalStore : P;
    },
    53107: function (e, l, c) {
      "use strict";
      /**
       * @license React
       * use-sync-external-store-shim/with-selector.production.js
       *
       * Copyright (c) Meta Platforms, Inc. and affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */ var d = c(50959),
        m = c(76223),
        g =
          "function" == typeof Object.is
            ? Object.is
            : function (e, l) {
                return (
                  (e === l && (0 !== e || 1 / e == 1 / l)) || (e != e && l != l)
                );
              },
        y = m.useSyncExternalStore,
        b = d.useRef,
        C = d.useEffect,
        P = d.useMemo,
        I = d.useDebugValue;
      l.useSyncExternalStoreWithSelector = function (e, l, c, d, m) {
        var B = b(null);
        if (null === B.current) {
          var N = { hasValue: !1, value: null };
          B.current = N;
        } else N = B.current;
        var F = y(
          e,
          (B = P(
            function () {
              function memoizedSelector(l) {
                if (!b) {
                  if (
                    ((b = !0), (e = l), (l = d(l)), void 0 !== m && N.hasValue)
                  ) {
                    var c = N.value;
                    if (m(c, l)) return (y = c);
                  }
                  return (y = l);
                }
                if (((c = y), g(e, l))) return c;
                var C = d(l);
                return void 0 !== m && m(c, C)
                  ? ((e = l), c)
                  : ((e = l), (y = C));
              }
              var e,
                y,
                b = !1,
                C = void 0 === c ? null : c;
              return [
                function () {
                  return memoizedSelector(l());
                },
                null === C
                  ? void 0
                  : function () {
                      return memoizedSelector(C());
                    },
              ];
            },
            [l, c, d, m]
          ))[0],
          B[1]
        );
        return (
          C(
            function () {
              (N.hasValue = !0), (N.value = F);
            },
            [F]
          ),
          I(F),
          F
        );
      };
    },
    76223: function (e, l, c) {
      "use strict";
      e.exports = c(21409);
    },
    38361: function (e, l, c) {
      "use strict";
      e.exports = c(53107);
    },
    82187: function (e, l) {
      var c;
      /*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/ !(function () {
        "use strict";
        var d = {}.hasOwnProperty;
        function classNames() {
          for (var e = "", l = 0; l < arguments.length; l++) {
            var c = arguments[l];
            c &&
              (e = appendClass(
                e,
                (function (e) {
                  if ("string" == typeof e || "number" == typeof e) return e;
                  if ("object" != typeof e) return "";
                  if (Array.isArray(e)) return classNames.apply(null, e);
                  if (
                    e.toString !== Object.prototype.toString &&
                    !e.toString.toString().includes("[native code]")
                  )
                    return e.toString();
                  var l = "";
                  for (var c in e)
                    d.call(e, c) && e[c] && (l = appendClass(l, c));
                  return l;
                })(c)
              ));
          }
          return e;
        }
        function appendClass(e, l) {
          return l ? (e ? e + " " + l : e + l) : e;
        }
        e.exports
          ? ((classNames.default = classNames), (e.exports = classNames))
          : void 0 !==
              (c = function () {
                return classNames;
              }.apply(l, [])) && (e.exports = c);
      })();
    },
    63166: function (e, l, c) {
      "use strict";
      c.d(l, {
        x7: function () {
          return floating_ui_dom_arrow;
        },
        Me: function () {
          return autoUpdate;
        },
        oo: function () {
          return floating_ui_dom_computePosition;
        },
        RR: function () {
          return floating_ui_dom_flip;
        },
        Cp: function () {
          return floating_ui_dom_hide;
        },
        dr: function () {
          return floating_ui_dom_limitShift;
        },
        cv: function () {
          return floating_ui_dom_offset;
        },
        uY: function () {
          return floating_ui_dom_shift;
        },
        dp: function () {
          return floating_ui_dom_size;
        },
      });
      let d = ["top", "right", "bottom", "left"],
        m = Math.min,
        g = Math.max,
        y = Math.round,
        b = Math.floor,
        createCoords = (e) => ({ x: e, y: e }),
        C = { left: "right", right: "left", bottom: "top", top: "bottom" },
        P = { start: "end", end: "start" };
      function floating_ui_utils_evaluate(e, l) {
        return "function" == typeof e ? e(l) : e;
      }
      function floating_ui_utils_getSide(e) {
        return e.split("-")[0];
      }
      function floating_ui_utils_getAlignment(e) {
        return e.split("-")[1];
      }
      function getOppositeAxis(e) {
        return "x" === e ? "y" : "x";
      }
      function getAxisLength(e) {
        return "y" === e ? "height" : "width";
      }
      function floating_ui_utils_getSideAxis(e) {
        return ["top", "bottom"].includes(floating_ui_utils_getSide(e))
          ? "y"
          : "x";
      }
      function floating_ui_utils_getOppositeAlignmentPlacement(e) {
        return e.replace(/start|end/g, (e) => P[e]);
      }
      function getOppositePlacement(e) {
        return e.replace(/left|right|bottom|top/g, (e) => C[e]);
      }
      function floating_ui_utils_getPaddingObject(e) {
        return "number" != typeof e
          ? { top: 0, right: 0, bottom: 0, left: 0, ...e }
          : { top: e, right: e, bottom: e, left: e };
      }
      function floating_ui_utils_rectToClientRect(e) {
        let { x: l, y: c, width: d, height: m } = e;
        return {
          width: d,
          height: m,
          top: c,
          left: l,
          right: l + d,
          bottom: c + m,
          x: l,
          y: c,
        };
      }
      function computeCoordsFromPlacement(e, l, c) {
        let d,
          { reference: m, floating: g } = e,
          y = floating_ui_utils_getSideAxis(l),
          b = getOppositeAxis(floating_ui_utils_getSideAxis(l)),
          C = getAxisLength(b),
          P = floating_ui_utils_getSide(l),
          I = "y" === y,
          B = m.x + m.width / 2 - g.width / 2,
          N = m.y + m.height / 2 - g.height / 2,
          F = m[C] / 2 - g[C] / 2;
        switch (P) {
          case "top":
            d = { x: B, y: m.y - g.height };
            break;
          case "bottom":
            d = { x: B, y: m.y + m.height };
            break;
          case "right":
            d = { x: m.x + m.width, y: N };
            break;
          case "left":
            d = { x: m.x - g.width, y: N };
            break;
          default:
            d = { x: m.x, y: m.y };
        }
        switch (floating_ui_utils_getAlignment(l)) {
          case "start":
            d[b] -= F * (c && I ? -1 : 1);
            break;
          case "end":
            d[b] += F * (c && I ? -1 : 1);
        }
        return d;
      }
      let computePosition = async (e, l, c) => {
        let {
            placement: d = "bottom",
            strategy: m = "absolute",
            middleware: g = [],
            platform: y,
          } = c,
          b = g.filter(Boolean),
          C = await (null == y.isRTL ? void 0 : y.isRTL(l)),
          P = await y.getElementRects({
            reference: e,
            floating: l,
            strategy: m,
          }),
          { x: I, y: B } = computeCoordsFromPlacement(P, d, C),
          N = d,
          F = {},
          V = 0;
        for (let c = 0; c < b.length; c++) {
          let { name: g, fn: G } = b[c],
            {
              x: Q,
              y: $,
              data: Z,
              reset: Y,
            } = await G({
              x: I,
              y: B,
              initialPlacement: d,
              placement: N,
              strategy: m,
              middlewareData: F,
              rects: P,
              platform: y,
              elements: { reference: e, floating: l },
            });
          (I = null != Q ? Q : I),
            (B = null != $ ? $ : B),
            (F = { ...F, [g]: { ...F[g], ...Z } }),
            Y &&
              V <= 50 &&
              (V++,
              "object" == typeof Y &&
                (Y.placement && (N = Y.placement),
                Y.rects &&
                  (P =
                    !0 === Y.rects
                      ? await y.getElementRects({
                          reference: e,
                          floating: l,
                          strategy: m,
                        })
                      : Y.rects),
                ({ x: I, y: B } = computeCoordsFromPlacement(P, N, C))),
              (c = -1));
        }
        return { x: I, y: B, placement: N, strategy: m, middlewareData: F };
      };
      async function detectOverflow(e, l) {
        var c;
        void 0 === l && (l = {});
        let { x: d, y: m, platform: g, rects: y, elements: b, strategy: C } = e,
          {
            boundary: P = "clippingAncestors",
            rootBoundary: I = "viewport",
            elementContext: B = "floating",
            altBoundary: N = !1,
            padding: F = 0,
          } = floating_ui_utils_evaluate(l, e),
          V = floating_ui_utils_getPaddingObject(F),
          G = b[N ? ("floating" === B ? "reference" : "floating") : B],
          Q = floating_ui_utils_rectToClientRect(
            await g.getClippingRect({
              element:
                null ==
                  (c = await (null == g.isElement ? void 0 : g.isElement(G))) ||
                c
                  ? G
                  : G.contextElement ||
                    (await (null == g.getDocumentElement
                      ? void 0
                      : g.getDocumentElement(b.floating))),
              boundary: P,
              rootBoundary: I,
              strategy: C,
            })
          ),
          $ =
            "floating" === B
              ? {
                  x: d,
                  y: m,
                  width: y.floating.width,
                  height: y.floating.height,
                }
              : y.reference,
          Z = await (null == g.getOffsetParent
            ? void 0
            : g.getOffsetParent(b.floating)),
          Y = ((await (null == g.isElement ? void 0 : g.isElement(Z))) &&
            (await (null == g.getScale ? void 0 : g.getScale(Z)))) || {
            x: 1,
            y: 1,
          },
          et = floating_ui_utils_rectToClientRect(
            g.convertOffsetParentRelativeRectToViewportRelativeRect
              ? await g.convertOffsetParentRelativeRectToViewportRelativeRect({
                  elements: b,
                  rect: $,
                  offsetParent: Z,
                  strategy: C,
                })
              : $
          );
        return {
          top: (Q.top - et.top + V.top) / Y.y,
          bottom: (et.bottom - Q.bottom + V.bottom) / Y.y,
          left: (Q.left - et.left + V.left) / Y.x,
          right: (et.right - Q.right + V.right) / Y.x,
        };
      }
      function getSideOffsets(e, l) {
        return {
          top: e.top - l.height,
          right: e.right - l.width,
          bottom: e.bottom - l.height,
          left: e.left - l.width,
        };
      }
      function isAnySideFullyClipped(e) {
        return d.some((l) => e[l] >= 0);
      }
      async function convertValueToCoords(e, l) {
        let { placement: c, platform: d, elements: m } = e,
          g = await (null == d.isRTL ? void 0 : d.isRTL(m.floating)),
          y = floating_ui_utils_getSide(c),
          b = floating_ui_utils_getAlignment(c),
          C = "y" === floating_ui_utils_getSideAxis(c),
          P = ["left", "top"].includes(y) ? -1 : 1,
          I = g && C ? -1 : 1,
          B = floating_ui_utils_evaluate(l, e),
          {
            mainAxis: N,
            crossAxis: F,
            alignmentAxis: V,
          } = "number" == typeof B
            ? { mainAxis: B, crossAxis: 0, alignmentAxis: null }
            : {
                mainAxis: B.mainAxis || 0,
                crossAxis: B.crossAxis || 0,
                alignmentAxis: B.alignmentAxis,
              };
        return (
          b && "number" == typeof V && (F = "end" === b ? -1 * V : V),
          C ? { x: F * I, y: N * P } : { x: N * P, y: F * I }
        );
      }
      function hasWindow() {
        return "undefined" != typeof window;
      }
      function getNodeName(e) {
        return isNode(e) ? (e.nodeName || "").toLowerCase() : "#document";
      }
      function getWindow(e) {
        var l;
        return (
          (null == e || null == (l = e.ownerDocument)
            ? void 0
            : l.defaultView) || window
        );
      }
      function getDocumentElement(e) {
        var l;
        return null ==
          (l = (isNode(e) ? e.ownerDocument : e.document) || window.document)
          ? void 0
          : l.documentElement;
      }
      function isNode(e) {
        return (
          !!hasWindow() && (e instanceof Node || e instanceof getWindow(e).Node)
        );
      }
      function isElement(e) {
        return (
          !!hasWindow() &&
          (e instanceof Element || e instanceof getWindow(e).Element)
        );
      }
      function isHTMLElement(e) {
        return (
          !!hasWindow() &&
          (e instanceof HTMLElement || e instanceof getWindow(e).HTMLElement)
        );
      }
      function isShadowRoot(e) {
        return (
          !!hasWindow() &&
          "undefined" != typeof ShadowRoot &&
          (e instanceof ShadowRoot || e instanceof getWindow(e).ShadowRoot)
        );
      }
      function isOverflowElement(e) {
        let {
          overflow: l,
          overflowX: c,
          overflowY: d,
          display: m,
        } = getComputedStyle(e);
        return (
          /auto|scroll|overlay|hidden|clip/.test(l + d + c) &&
          !["inline", "contents"].includes(m)
        );
      }
      function isTopLayer(e) {
        return [":popover-open", ":modal"].some((l) => {
          try {
            return e.matches(l);
          } catch (e) {
            return !1;
          }
        });
      }
      function isContainingBlock(e) {
        let l = isWebKit(),
          c = isElement(e) ? getComputedStyle(e) : e;
        return (
          ["transform", "translate", "scale", "rotate", "perspective"].some(
            (e) => !!c[e] && "none" !== c[e]
          ) ||
          (!!c.containerType && "normal" !== c.containerType) ||
          (!l && !!c.backdropFilter && "none" !== c.backdropFilter) ||
          (!l && !!c.filter && "none" !== c.filter) ||
          [
            "transform",
            "translate",
            "scale",
            "rotate",
            "perspective",
            "filter",
          ].some((e) => (c.willChange || "").includes(e)) ||
          ["paint", "layout", "strict", "content"].some((e) =>
            (c.contain || "").includes(e)
          )
        );
      }
      function isWebKit() {
        return (
          "undefined" != typeof CSS &&
          !!CSS.supports &&
          CSS.supports("-webkit-backdrop-filter", "none")
        );
      }
      function isLastTraversableNode(e) {
        return ["html", "body", "#document"].includes(getNodeName(e));
      }
      function getComputedStyle(e) {
        return getWindow(e).getComputedStyle(e);
      }
      function getNodeScroll(e) {
        return isElement(e)
          ? { scrollLeft: e.scrollLeft, scrollTop: e.scrollTop }
          : { scrollLeft: e.scrollX, scrollTop: e.scrollY };
      }
      function getParentNode(e) {
        if ("html" === getNodeName(e)) return e;
        let l =
          e.assignedSlot ||
          e.parentNode ||
          (isShadowRoot(e) && e.host) ||
          getDocumentElement(e);
        return isShadowRoot(l) ? l.host : l;
      }
      function getOverflowAncestors(e, l, c) {
        var d;
        void 0 === l && (l = []), void 0 === c && (c = !0);
        let m = (function getNearestOverflowAncestor(e) {
            let l = getParentNode(e);
            return isLastTraversableNode(l)
              ? e.ownerDocument
                ? e.ownerDocument.body
                : e.body
              : isHTMLElement(l) && isOverflowElement(l)
              ? l
              : getNearestOverflowAncestor(l);
          })(e),
          g = m === (null == (d = e.ownerDocument) ? void 0 : d.body),
          y = getWindow(m);
        if (g) {
          let e = getFrameElement(y);
          return l.concat(
            y,
            y.visualViewport || [],
            isOverflowElement(m) ? m : [],
            e && c ? getOverflowAncestors(e) : []
          );
        }
        return l.concat(m, getOverflowAncestors(m, [], c));
      }
      function getFrameElement(e) {
        return e.parent && Object.getPrototypeOf(e.parent)
          ? e.frameElement
          : null;
      }
      function getCssDimensions(e) {
        let l = getComputedStyle(e),
          c = parseFloat(l.width) || 0,
          d = parseFloat(l.height) || 0,
          m = isHTMLElement(e),
          g = m ? e.offsetWidth : c,
          b = m ? e.offsetHeight : d,
          C = y(c) !== g || y(d) !== b;
        return C && ((c = g), (d = b)), { width: c, height: d, $: C };
      }
      function unwrapElement(e) {
        return isElement(e) ? e : e.contextElement;
      }
      function getScale(e) {
        let l = unwrapElement(e);
        if (!isHTMLElement(l)) return createCoords(1);
        let c = l.getBoundingClientRect(),
          { width: d, height: m, $: g } = getCssDimensions(l),
          b = (g ? y(c.width) : c.width) / d,
          C = (g ? y(c.height) : c.height) / m;
        return (
          (b && Number.isFinite(b)) || (b = 1),
          (C && Number.isFinite(C)) || (C = 1),
          { x: b, y: C }
        );
      }
      let I = createCoords(0);
      function getVisualOffsets(e) {
        let l = getWindow(e);
        return isWebKit() && l.visualViewport
          ? { x: l.visualViewport.offsetLeft, y: l.visualViewport.offsetTop }
          : I;
      }
      function getBoundingClientRect(e, l, c, d) {
        var m;
        void 0 === l && (l = !1), void 0 === c && (c = !1);
        let g = e.getBoundingClientRect(),
          y = unwrapElement(e),
          b = createCoords(1);
        l && (d ? isElement(d) && (b = getScale(d)) : (b = getScale(e)));
        let C = (void 0 === (m = c) && (m = !1),
          d && (!m || d === getWindow(y)) && m)
            ? getVisualOffsets(y)
            : createCoords(0),
          P = (g.left + C.x) / b.x,
          I = (g.top + C.y) / b.y,
          B = g.width / b.x,
          N = g.height / b.y;
        if (y) {
          let e = getWindow(y),
            l = d && isElement(d) ? getWindow(d) : d,
            c = e,
            m = getFrameElement(c);
          for (; m && d && l !== c; ) {
            let e = getScale(m),
              l = m.getBoundingClientRect(),
              d = getComputedStyle(m),
              g = l.left + (m.clientLeft + parseFloat(d.paddingLeft)) * e.x,
              y = l.top + (m.clientTop + parseFloat(d.paddingTop)) * e.y;
            (P *= e.x),
              (I *= e.y),
              (B *= e.x),
              (N *= e.y),
              (P += g),
              (I += y),
              (m = getFrameElement((c = getWindow(m))));
          }
        }
        return floating_ui_utils_rectToClientRect({
          width: B,
          height: N,
          x: P,
          y: I,
        });
      }
      function getWindowScrollBarX(e, l) {
        let c = getNodeScroll(e).scrollLeft;
        return l
          ? l.left + c
          : getBoundingClientRect(getDocumentElement(e)).left + c;
      }
      function getHTMLOffset(e, l, c) {
        void 0 === c && (c = !1);
        let d = e.getBoundingClientRect(),
          m = d.left + l.scrollLeft - (c ? 0 : getWindowScrollBarX(e, d)),
          g = d.top + l.scrollTop;
        return { x: m, y: g };
      }
      function getClientRectFromClippingAncestor(e, l, c) {
        let d;
        if ("viewport" === l)
          d = (function (e, l) {
            let c = getWindow(e),
              d = getDocumentElement(e),
              m = c.visualViewport,
              g = d.clientWidth,
              y = d.clientHeight,
              b = 0,
              C = 0;
            if (m) {
              (g = m.width), (y = m.height);
              let e = isWebKit();
              (!e || (e && "fixed" === l)) &&
                ((b = m.offsetLeft), (C = m.offsetTop));
            }
            return { width: g, height: y, x: b, y: C };
          })(e, c);
        else if ("document" === l)
          d = (function (e) {
            let l = getDocumentElement(e),
              c = getNodeScroll(e),
              d = e.ownerDocument.body,
              m = g(l.scrollWidth, l.clientWidth, d.scrollWidth, d.clientWidth),
              y = g(
                l.scrollHeight,
                l.clientHeight,
                d.scrollHeight,
                d.clientHeight
              ),
              b = -c.scrollLeft + getWindowScrollBarX(e),
              C = -c.scrollTop;
            return (
              "rtl" === getComputedStyle(d).direction &&
                (b += g(l.clientWidth, d.clientWidth) - m),
              { width: m, height: y, x: b, y: C }
            );
          })(getDocumentElement(e));
        else if (isElement(l))
          d = (function (e, l) {
            let c = getBoundingClientRect(e, !0, "fixed" === l),
              d = c.top + e.clientTop,
              m = c.left + e.clientLeft,
              g = isHTMLElement(e) ? getScale(e) : createCoords(1),
              y = e.clientWidth * g.x,
              b = e.clientHeight * g.y,
              C = m * g.x,
              P = d * g.y;
            return { width: y, height: b, x: C, y: P };
          })(l, c);
        else {
          let c = getVisualOffsets(e);
          d = { x: l.x - c.x, y: l.y - c.y, width: l.width, height: l.height };
        }
        return floating_ui_utils_rectToClientRect(d);
      }
      function isStaticPositioned(e) {
        return "static" === getComputedStyle(e).position;
      }
      function getTrueOffsetParent(e, l) {
        if (!isHTMLElement(e) || "fixed" === getComputedStyle(e).position)
          return null;
        if (l) return l(e);
        let c = e.offsetParent;
        return getDocumentElement(e) === c && (c = c.ownerDocument.body), c;
      }
      function getOffsetParent(e, l) {
        let c = getWindow(e);
        if (isTopLayer(e)) return c;
        if (!isHTMLElement(e)) {
          let l = getParentNode(e);
          for (; l && !isLastTraversableNode(l); ) {
            if (isElement(l) && !isStaticPositioned(l)) return l;
            l = getParentNode(l);
          }
          return c;
        }
        let d = getTrueOffsetParent(e, l);
        for (
          ;
          d &&
          ["table", "td", "th"].includes(getNodeName(d)) &&
          isStaticPositioned(d);

        )
          d = getTrueOffsetParent(d, l);
        return d &&
          isLastTraversableNode(d) &&
          isStaticPositioned(d) &&
          !isContainingBlock(d)
          ? c
          : d ||
              (function (e) {
                let l = getParentNode(e);
                for (; isHTMLElement(l) && !isLastTraversableNode(l); ) {
                  if (isContainingBlock(l)) return l;
                  if (isTopLayer(l)) break;
                  l = getParentNode(l);
                }
                return null;
              })(e) ||
              c;
      }
      let getElementRects = async function (e) {
          let l = this.getOffsetParent || getOffsetParent,
            c = this.getDimensions,
            d = await c(e.floating);
          return {
            reference: (function (e, l, c) {
              let d = isHTMLElement(l),
                m = getDocumentElement(l),
                g = "fixed" === c,
                y = getBoundingClientRect(e, !0, g, l),
                b = { scrollLeft: 0, scrollTop: 0 },
                C = createCoords(0);
              if (d || (!d && !g)) {
                if (
                  (("body" !== getNodeName(l) || isOverflowElement(m)) &&
                    (b = getNodeScroll(l)),
                  d)
                ) {
                  let e = getBoundingClientRect(l, !0, g, l);
                  (C.x = e.x + l.clientLeft), (C.y = e.y + l.clientTop);
                } else m && (C.x = getWindowScrollBarX(m));
              }
              let P = !m || d || g ? createCoords(0) : getHTMLOffset(m, b),
                I = y.left + b.scrollLeft - C.x - P.x,
                B = y.top + b.scrollTop - C.y - P.y;
              return { x: I, y: B, width: y.width, height: y.height };
            })(e.reference, await l(e.floating), e.strategy),
            floating: { x: 0, y: 0, width: d.width, height: d.height },
          };
        },
        B = {
          convertOffsetParentRelativeRectToViewportRelativeRect: function (e) {
            let { elements: l, rect: c, offsetParent: d, strategy: m } = e,
              g = "fixed" === m,
              y = getDocumentElement(d),
              b = !!l && isTopLayer(l.floating);
            if (d === y || (b && g)) return c;
            let C = { scrollLeft: 0, scrollTop: 0 },
              P = createCoords(1),
              I = createCoords(0),
              B = isHTMLElement(d);
            if (
              (B || (!B && !g)) &&
              (("body" !== getNodeName(d) || isOverflowElement(y)) &&
                (C = getNodeScroll(d)),
              isHTMLElement(d))
            ) {
              let e = getBoundingClientRect(d);
              (P = getScale(d)),
                (I.x = e.x + d.clientLeft),
                (I.y = e.y + d.clientTop);
            }
            let N = !y || B || g ? createCoords(0) : getHTMLOffset(y, C, !0);
            return {
              width: c.width * P.x,
              height: c.height * P.y,
              x: c.x * P.x - C.scrollLeft * P.x + I.x + N.x,
              y: c.y * P.y - C.scrollTop * P.y + I.y + N.y,
            };
          },
          getDocumentElement: getDocumentElement,
          getClippingRect: function (e) {
            let { element: l, boundary: c, rootBoundary: d, strategy: y } = e,
              b =
                "clippingAncestors" === c
                  ? isTopLayer(l)
                    ? []
                    : (function (e, l) {
                        let c = l.get(e);
                        if (c) return c;
                        let d = getOverflowAncestors(e, [], !1).filter(
                            (e) => isElement(e) && "body" !== getNodeName(e)
                          ),
                          m = null,
                          g = "fixed" === getComputedStyle(e).position,
                          y = g ? getParentNode(e) : e;
                        for (; isElement(y) && !isLastTraversableNode(y); ) {
                          let l = getComputedStyle(y),
                            c = isContainingBlock(y);
                          c || "fixed" !== l.position || (m = null);
                          let b = g
                            ? !c && !m
                            : (!c &&
                                "static" === l.position &&
                                !!m &&
                                ["absolute", "fixed"].includes(m.position)) ||
                              (isOverflowElement(y) &&
                                !c &&
                                (function hasFixedPositionAncestor(e, l) {
                                  let c = getParentNode(e);
                                  return (
                                    !(
                                      c === l ||
                                      !isElement(c) ||
                                      isLastTraversableNode(c)
                                    ) &&
                                    ("fixed" === getComputedStyle(c).position ||
                                      hasFixedPositionAncestor(c, l))
                                  );
                                })(e, y));
                          b ? (d = d.filter((e) => e !== y)) : (m = l),
                            (y = getParentNode(y));
                        }
                        return l.set(e, d), d;
                      })(l, this._c)
                  : [].concat(c),
              C = [...b, d],
              P = C[0],
              I = C.reduce((e, c) => {
                let d = getClientRectFromClippingAncestor(l, c, y);
                return (
                  (e.top = g(d.top, e.top)),
                  (e.right = m(d.right, e.right)),
                  (e.bottom = m(d.bottom, e.bottom)),
                  (e.left = g(d.left, e.left)),
                  e
                );
              }, getClientRectFromClippingAncestor(l, P, y));
            return {
              width: I.right - I.left,
              height: I.bottom - I.top,
              x: I.left,
              y: I.top,
            };
          },
          getOffsetParent,
          getElementRects,
          getClientRects: function (e) {
            return Array.from(e.getClientRects());
          },
          getDimensions: function (e) {
            let { width: l, height: c } = getCssDimensions(e);
            return { width: l, height: c };
          },
          getScale,
          isElement: isElement,
          isRTL: function (e) {
            return "rtl" === getComputedStyle(e).direction;
          },
        };
      function rectsAreEqual(e, l) {
        return (
          e.x === l.x &&
          e.y === l.y &&
          e.width === l.width &&
          e.height === l.height
        );
      }
      function autoUpdate(e, l, c, d) {
        let y;
        void 0 === d && (d = {});
        let {
            ancestorScroll: C = !0,
            ancestorResize: P = !0,
            elementResize: I = "function" == typeof ResizeObserver,
            layoutShift: B = "function" == typeof IntersectionObserver,
            animationFrame: N = !1,
          } = d,
          F = unwrapElement(e),
          V =
            C || P
              ? [
                  ...(F ? getOverflowAncestors(F) : []),
                  ...getOverflowAncestors(l),
                ]
              : [];
        V.forEach((e) => {
          C && e.addEventListener("scroll", c, { passive: !0 }),
            P && e.addEventListener("resize", c);
        });
        let G =
            F && B
              ? (function (e, l) {
                  let c,
                    d = null,
                    y = getDocumentElement(e);
                  function cleanup() {
                    var e;
                    clearTimeout(c),
                      null == (e = d) || e.disconnect(),
                      (d = null);
                  }
                  return (
                    !(function refresh(C, P) {
                      void 0 === C && (C = !1),
                        void 0 === P && (P = 1),
                        cleanup();
                      let I = e.getBoundingClientRect(),
                        { left: B, top: N, width: F, height: V } = I;
                      if ((C || l(), !F || !V)) return;
                      let G = b(N),
                        Q = b(y.clientWidth - (B + F)),
                        $ = b(y.clientHeight - (N + V)),
                        Z = b(B),
                        Y = {
                          rootMargin:
                            -G + "px " + -Q + "px " + -$ + "px " + -Z + "px",
                          threshold: g(0, m(1, P)) || 1,
                        },
                        et = !0;
                      function handleObserve(l) {
                        let d = l[0].intersectionRatio;
                        if (d !== P) {
                          if (!et) return refresh();
                          d
                            ? refresh(!1, d)
                            : (c = setTimeout(() => {
                                refresh(!1, 1e-7);
                              }, 1e3));
                        }
                        1 !== d ||
                          rectsAreEqual(I, e.getBoundingClientRect()) ||
                          refresh(),
                          (et = !1);
                      }
                      try {
                        d = new IntersectionObserver(handleObserve, {
                          ...Y,
                          root: y.ownerDocument,
                        });
                      } catch (e) {
                        d = new IntersectionObserver(handleObserve, Y);
                      }
                      d.observe(e);
                    })(!0),
                    cleanup
                  );
                })(F, c)
              : null,
          Q = -1,
          $ = null;
        I &&
          (($ = new ResizeObserver((e) => {
            let [d] = e;
            d &&
              d.target === F &&
              $ &&
              ($.unobserve(l),
              cancelAnimationFrame(Q),
              (Q = requestAnimationFrame(() => {
                var e;
                null == (e = $) || e.observe(l);
              }))),
              c();
          })),
          F && !N && $.observe(F),
          $.observe(l));
        let Z = N ? getBoundingClientRect(e) : null;
        return (
          N &&
            (function frameLoop() {
              let l = getBoundingClientRect(e);
              Z && !rectsAreEqual(Z, l) && c(),
                (Z = l),
                (y = requestAnimationFrame(frameLoop));
            })(),
          c(),
          () => {
            var e;
            V.forEach((e) => {
              C && e.removeEventListener("scroll", c),
                P && e.removeEventListener("resize", c);
            }),
              null == G || G(),
              null == (e = $) || e.disconnect(),
              ($ = null),
              N && cancelAnimationFrame(y);
          }
        );
      }
      let floating_ui_dom_offset = function (e) {
          return (
            void 0 === e && (e = 0),
            {
              name: "offset",
              options: e,
              async fn(l) {
                var c, d;
                let { x: m, y: g, placement: y, middlewareData: b } = l,
                  C = await convertValueToCoords(l, e);
                return y === (null == (c = b.offset) ? void 0 : c.placement) &&
                  null != (d = b.arrow) &&
                  d.alignmentOffset
                  ? {}
                  : { x: m + C.x, y: g + C.y, data: { ...C, placement: y } };
              },
            }
          );
        },
        floating_ui_dom_shift = function (e) {
          return (
            void 0 === e && (e = {}),
            {
              name: "shift",
              options: e,
              async fn(l) {
                let { x: c, y: d, placement: y } = l,
                  {
                    mainAxis: b = !0,
                    crossAxis: C = !1,
                    limiter: P = {
                      fn: (e) => {
                        let { x: l, y: c } = e;
                        return { x: l, y: c };
                      },
                    },
                    ...I
                  } = floating_ui_utils_evaluate(e, l),
                  B = { x: c, y: d },
                  N = await detectOverflow(l, I),
                  F = floating_ui_utils_getSideAxis(
                    floating_ui_utils_getSide(y)
                  ),
                  V = getOppositeAxis(F),
                  G = B[V],
                  Q = B[F];
                if (b) {
                  let e = G + N["y" === V ? "top" : "left"],
                    l = G - N["y" === V ? "bottom" : "right"];
                  G = g(e, m(G, l));
                }
                if (C) {
                  let e = "y" === F ? "top" : "left",
                    l = "y" === F ? "bottom" : "right",
                    c = Q + N[e],
                    d = Q - N[l];
                  Q = g(c, m(Q, d));
                }
                let $ = P.fn({ ...l, [V]: G, [F]: Q });
                return {
                  ...$,
                  data: { x: $.x - c, y: $.y - d, enabled: { [V]: b, [F]: C } },
                };
              },
            }
          );
        },
        floating_ui_dom_flip = function (e) {
          return (
            void 0 === e && (e = {}),
            {
              name: "flip",
              options: e,
              async fn(l) {
                var c, d, m, g, y;
                let {
                    placement: b,
                    middlewareData: C,
                    rects: P,
                    initialPlacement: I,
                    platform: B,
                    elements: N,
                  } = l,
                  {
                    mainAxis: F = !0,
                    crossAxis: V = !0,
                    fallbackPlacements: G,
                    fallbackStrategy: Q = "bestFit",
                    fallbackAxisSideDirection: $ = "none",
                    flipAlignment: Z = !0,
                    ...Y
                  } = floating_ui_utils_evaluate(e, l);
                if (null != (c = C.arrow) && c.alignmentOffset) return {};
                let et = floating_ui_utils_getSide(b),
                  en = floating_ui_utils_getSideAxis(I),
                  er = floating_ui_utils_getSide(I) === I,
                  ei = await (null == B.isRTL ? void 0 : B.isRTL(N.floating)),
                  eo =
                    G ||
                    (er || !Z
                      ? [getOppositePlacement(I)]
                      : (function (e) {
                          let l = getOppositePlacement(e);
                          return [
                            floating_ui_utils_getOppositeAlignmentPlacement(e),
                            l,
                            floating_ui_utils_getOppositeAlignmentPlacement(l),
                          ];
                        })(I)),
                  ea = "none" !== $;
                !G &&
                  ea &&
                  eo.push(
                    ...(function (e, l, c, d) {
                      let m = floating_ui_utils_getAlignment(e),
                        g = (function (e, l, c) {
                          let d = ["left", "right"],
                            m = ["right", "left"];
                          switch (e) {
                            case "top":
                            case "bottom":
                              if (c) return l ? m : d;
                              return l ? d : m;
                            case "left":
                            case "right":
                              return l ? ["top", "bottom"] : ["bottom", "top"];
                            default:
                              return [];
                          }
                        })(floating_ui_utils_getSide(e), "start" === c, d);
                      return (
                        m &&
                          ((g = g.map((e) => e + "-" + m)),
                          l &&
                            (g = g.concat(
                              g.map(
                                floating_ui_utils_getOppositeAlignmentPlacement
                              )
                            ))),
                        g
                      );
                    })(I, Z, $, ei)
                  );
                let es = [I, ...eo],
                  el = await detectOverflow(l, Y),
                  ec = [],
                  eu = (null == (d = C.flip) ? void 0 : d.overflows) || [];
                if ((F && ec.push(el[et]), V)) {
                  let e = (function (e, l, c) {
                    void 0 === c && (c = !1);
                    let d = floating_ui_utils_getAlignment(e),
                      m = getOppositeAxis(floating_ui_utils_getSideAxis(e)),
                      g = getAxisLength(m),
                      y =
                        "x" === m
                          ? d === (c ? "end" : "start")
                            ? "right"
                            : "left"
                          : "start" === d
                          ? "bottom"
                          : "top";
                    return (
                      l.reference[g] > l.floating[g] &&
                        (y = getOppositePlacement(y)),
                      [y, getOppositePlacement(y)]
                    );
                  })(b, P, ei);
                  ec.push(el[e[0]], el[e[1]]);
                }
                if (
                  ((eu = [...eu, { placement: b, overflows: ec }]),
                  !ec.every((e) => e <= 0))
                ) {
                  let e = ((null == (m = C.flip) ? void 0 : m.index) || 0) + 1,
                    l = es[e];
                  if (l)
                    return {
                      data: { index: e, overflows: eu },
                      reset: { placement: l },
                    };
                  let c =
                    null ==
                    (g = eu
                      .filter((e) => e.overflows[0] <= 0)
                      .sort((e, l) => e.overflows[1] - l.overflows[1])[0])
                      ? void 0
                      : g.placement;
                  if (!c)
                    switch (Q) {
                      case "bestFit": {
                        let e =
                          null ==
                          (y = eu
                            .filter((e) => {
                              if (ea) {
                                let l = floating_ui_utils_getSideAxis(
                                  e.placement
                                );
                                return l === en || "y" === l;
                              }
                              return !0;
                            })
                            .map((e) => [
                              e.placement,
                              e.overflows
                                .filter((e) => e > 0)
                                .reduce((e, l) => e + l, 0),
                            ])
                            .sort((e, l) => e[1] - l[1])[0])
                            ? void 0
                            : y[0];
                        e && (c = e);
                        break;
                      }
                      case "initialPlacement":
                        c = I;
                    }
                  if (b !== c) return { reset: { placement: c } };
                }
                return {};
              },
            }
          );
        },
        floating_ui_dom_size = function (e) {
          return (
            void 0 === e && (e = {}),
            {
              name: "size",
              options: e,
              async fn(l) {
                var c, d;
                let y, b;
                let { placement: C, rects: P, platform: I, elements: B } = l,
                  { apply: N = () => {}, ...F } = floating_ui_utils_evaluate(
                    e,
                    l
                  ),
                  V = await detectOverflow(l, F),
                  G = floating_ui_utils_getSide(C),
                  Q = floating_ui_utils_getAlignment(C),
                  $ = "y" === floating_ui_utils_getSideAxis(C),
                  { width: Z, height: Y } = P.floating;
                "top" === G || "bottom" === G
                  ? ((y = G),
                    (b =
                      Q ===
                      ((await (null == I.isRTL ? void 0 : I.isRTL(B.floating)))
                        ? "start"
                        : "end")
                        ? "left"
                        : "right"))
                  : ((b = G), (y = "end" === Q ? "top" : "bottom"));
                let et = Y - V.top - V.bottom,
                  en = Z - V.left - V.right,
                  er = m(Y - V[y], et),
                  ei = m(Z - V[b], en),
                  eo = !l.middlewareData.shift,
                  ea = er,
                  es = ei;
                if (
                  (null != (c = l.middlewareData.shift) &&
                    c.enabled.x &&
                    (es = en),
                  null != (d = l.middlewareData.shift) &&
                    d.enabled.y &&
                    (ea = et),
                  eo && !Q)
                ) {
                  let e = g(V.left, 0),
                    l = g(V.right, 0),
                    c = g(V.top, 0),
                    d = g(V.bottom, 0);
                  $
                    ? (es =
                        Z -
                        2 * (0 !== e || 0 !== l ? e + l : g(V.left, V.right)))
                    : (ea =
                        Y -
                        2 * (0 !== c || 0 !== d ? c + d : g(V.top, V.bottom)));
                }
                await N({ ...l, availableWidth: es, availableHeight: ea });
                let el = await I.getDimensions(B.floating);
                return Z !== el.width || Y !== el.height
                  ? { reset: { rects: !0 } }
                  : {};
              },
            }
          );
        },
        floating_ui_dom_hide = function (e) {
          return (
            void 0 === e && (e = {}),
            {
              name: "hide",
              options: e,
              async fn(l) {
                let { rects: c } = l,
                  { strategy: d = "referenceHidden", ...m } =
                    floating_ui_utils_evaluate(e, l);
                switch (d) {
                  case "referenceHidden": {
                    let e = await detectOverflow(l, {
                        ...m,
                        elementContext: "reference",
                      }),
                      d = getSideOffsets(e, c.reference);
                    return {
                      data: {
                        referenceHiddenOffsets: d,
                        referenceHidden: isAnySideFullyClipped(d),
                      },
                    };
                  }
                  case "escaped": {
                    let e = await detectOverflow(l, { ...m, altBoundary: !0 }),
                      d = getSideOffsets(e, c.floating);
                    return {
                      data: {
                        escapedOffsets: d,
                        escaped: isAnySideFullyClipped(d),
                      },
                    };
                  }
                  default:
                    return {};
                }
              },
            }
          );
        },
        floating_ui_dom_arrow = (e) => ({
          name: "arrow",
          options: e,
          async fn(l) {
            let {
                x: c,
                y: d,
                placement: y,
                rects: b,
                platform: C,
                elements: P,
                middlewareData: I,
              } = l,
              { element: B, padding: N = 0 } =
                floating_ui_utils_evaluate(e, l) || {};
            if (null == B) return {};
            let F = floating_ui_utils_getPaddingObject(N),
              V = { x: c, y: d },
              G = getOppositeAxis(floating_ui_utils_getSideAxis(y)),
              Q = getAxisLength(G),
              $ = await C.getDimensions(B),
              Z = "y" === G,
              Y = Z ? "clientHeight" : "clientWidth",
              et = b.reference[Q] + b.reference[G] - V[G] - b.floating[Q],
              en = V[G] - b.reference[G],
              er = await (null == C.getOffsetParent
                ? void 0
                : C.getOffsetParent(B)),
              ei = er ? er[Y] : 0;
            (ei && (await (null == C.isElement ? void 0 : C.isElement(er)))) ||
              (ei = P.floating[Y] || b.floating[Q]);
            let eo = ei / 2 - $[Q] / 2 - 1,
              ea = m(F[Z ? "top" : "left"], eo),
              es = m(F[Z ? "bottom" : "right"], eo),
              el = ei - $[Q] - es,
              ec = ei / 2 - $[Q] / 2 + (et / 2 - en / 2),
              eu = g(ea, m(ec, el)),
              ed =
                !I.arrow &&
                null != floating_ui_utils_getAlignment(y) &&
                ec !== eu &&
                b.reference[Q] / 2 - (ec < ea ? ea : es) - $[Q] / 2 < 0,
              ep = ed ? (ec < ea ? ec - ea : ec - el) : 0;
            return {
              [G]: V[G] + ep,
              data: {
                [G]: eu,
                centerOffset: ec - eu - ep,
                ...(ed && { alignmentOffset: ep }),
              },
              reset: ed,
            };
          },
        }),
        floating_ui_dom_limitShift = function (e) {
          return (
            void 0 === e && (e = {}),
            {
              options: e,
              fn(l) {
                let {
                    x: c,
                    y: d,
                    placement: m,
                    rects: g,
                    middlewareData: y,
                  } = l,
                  {
                    offset: b = 0,
                    mainAxis: C = !0,
                    crossAxis: P = !0,
                  } = floating_ui_utils_evaluate(e, l),
                  I = { x: c, y: d },
                  B = floating_ui_utils_getSideAxis(m),
                  N = getOppositeAxis(B),
                  F = I[N],
                  V = I[B],
                  G = floating_ui_utils_evaluate(b, l),
                  Q =
                    "number" == typeof G
                      ? { mainAxis: G, crossAxis: 0 }
                      : { mainAxis: 0, crossAxis: 0, ...G };
                if (C) {
                  let e = "y" === N ? "height" : "width",
                    l = g.reference[N] - g.floating[e] + Q.mainAxis,
                    c = g.reference[N] + g.reference[e] - Q.mainAxis;
                  F < l ? (F = l) : F > c && (F = c);
                }
                if (P) {
                  var $, Z;
                  let e = "y" === N ? "width" : "height",
                    l = ["top", "left"].includes(floating_ui_utils_getSide(m)),
                    c =
                      g.reference[B] -
                      g.floating[e] +
                      ((l && (null == ($ = y.offset) ? void 0 : $[B])) || 0) +
                      (l ? 0 : Q.crossAxis),
                    d =
                      g.reference[B] +
                      g.reference[e] +
                      (l ? 0 : (null == (Z = y.offset) ? void 0 : Z[B]) || 0) -
                      (l ? Q.crossAxis : 0);
                  V < c ? (V = c) : V > d && (V = d);
                }
                return { [N]: F, [B]: V };
              },
            }
          );
        },
        floating_ui_dom_computePosition = (e, l, c) => {
          let d = new Map(),
            m = { platform: B, ...c },
            g = { ...m.platform, _c: d };
          return computePosition(e, l, { ...m, platform: g });
        };
    },
    83708: function (e, l, c) {
      "use strict";
      c.d(l, {
        secp256k1: function () {
          return ef;
        },
      });
      var d = c(8088),
        m = c(69131),
        g = c(68431);
      let HMAC = class HMAC extends g.kb {
        constructor(e, l) {
          super(), (this.finished = !1), (this.destroyed = !1), (0, m.z3)(e);
          let c = (0, g.O0)(l);
          if (
            ((this.iHash = e.create()), "function" != typeof this.iHash.update)
          )
            throw Error("Expected instance of class which extends utils.Hash");
          (this.blockLen = this.iHash.blockLen),
            (this.outputLen = this.iHash.outputLen);
          let d = this.blockLen,
            y = new Uint8Array(d);
          y.set(c.length > d ? e.create().update(c).digest() : c);
          for (let e = 0; e < y.length; e++) y[e] ^= 54;
          this.iHash.update(y), (this.oHash = e.create());
          for (let e = 0; e < y.length; e++) y[e] ^= 106;
          this.oHash.update(y), y.fill(0);
        }
        update(e) {
          return (0, m.$h)(this), this.iHash.update(e), this;
        }
        digestInto(e) {
          (0, m.$h)(this),
            (0, m.gk)(e, this.outputLen),
            (this.finished = !0),
            this.iHash.digestInto(e),
            this.oHash.update(e),
            this.oHash.digestInto(e),
            this.destroy();
        }
        digest() {
          let e = new Uint8Array(this.oHash.outputLen);
          return this.digestInto(e), e;
        }
        _cloneInto(e) {
          e || (e = Object.create(Object.getPrototypeOf(this), {}));
          let {
            oHash: l,
            iHash: c,
            finished: d,
            destroyed: m,
            blockLen: g,
            outputLen: y,
          } = this;
          return (
            (e.finished = d),
            (e.destroyed = m),
            (e.blockLen = g),
            (e.outputLen = y),
            (e.oHash = l._cloneInto(e.oHash)),
            (e.iHash = c._cloneInto(e.iHash)),
            e
          );
        }
        destroy() {
          (this.destroyed = !0), this.oHash.destroy(), this.iHash.destroy();
        }
      };
      let hmac = (e, l, c) => new HMAC(e, l).update(c).digest();
      hmac.create = (e, l) => new HMAC(e, l);
      /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ let y =
          BigInt(0),
        b = BigInt(1);
      function isBytes(e) {
        return (
          e instanceof Uint8Array ||
          (ArrayBuffer.isView(e) && "Uint8Array" === e.constructor.name)
        );
      }
      function abytes(e) {
        if (!isBytes(e)) throw Error("Uint8Array expected");
      }
      function abool(e, l) {
        if ("boolean" != typeof l)
          throw Error(e + " boolean expected, got " + l);
      }
      function numberToHexUnpadded(e) {
        let l = e.toString(16);
        return 1 & l.length ? "0" + l : l;
      }
      function hexToNumber(e) {
        if ("string" != typeof e)
          throw Error("hex string expected, got " + typeof e);
        return "" === e ? y : BigInt("0x" + e);
      }
      let C =
          "function" == typeof Uint8Array.from([]).toHex &&
          "function" == typeof Uint8Array.fromHex,
        P = Array.from({ length: 256 }, (e, l) =>
          l.toString(16).padStart(2, "0")
        );
      function bytesToHex(e) {
        if ((abytes(e), C)) return e.toHex();
        let l = "";
        for (let c = 0; c < e.length; c++) l += P[e[c]];
        return l;
      }
      let I = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
      function asciiToBase16(e) {
        return e >= I._0 && e <= I._9
          ? e - I._0
          : e >= I.A && e <= I.F
          ? e - (I.A - 10)
          : e >= I.a && e <= I.f
          ? e - (I.a - 10)
          : void 0;
      }
      function hexToBytes(e) {
        if ("string" != typeof e)
          throw Error("hex string expected, got " + typeof e);
        if (C) return Uint8Array.fromHex(e);
        let l = e.length,
          c = l / 2;
        if (l % 2)
          throw Error("hex string expected, got unpadded hex of length " + l);
        let d = new Uint8Array(c);
        for (let l = 0, m = 0; l < c; l++, m += 2) {
          let c = asciiToBase16(e.charCodeAt(m)),
            g = asciiToBase16(e.charCodeAt(m + 1));
          if (void 0 === c || void 0 === g) {
            let l = e[m] + e[m + 1];
            throw Error(
              'hex string expected, got non-hex character "' +
                l +
                '" at index ' +
                m
            );
          }
          d[l] = 16 * c + g;
        }
        return d;
      }
      function utils_bytesToNumberBE(e) {
        return hexToNumber(bytesToHex(e));
      }
      function utils_bytesToNumberLE(e) {
        return abytes(e), hexToNumber(bytesToHex(Uint8Array.from(e).reverse()));
      }
      function utils_numberToBytesBE(e, l) {
        return hexToBytes(e.toString(16).padStart(2 * l, "0"));
      }
      function numberToBytesLE(e, l) {
        return utils_numberToBytesBE(e, l).reverse();
      }
      function utils_ensureBytes(e, l, c) {
        let d;
        if ("string" == typeof l)
          try {
            d = hexToBytes(l);
          } catch (l) {
            throw Error(e + " must be hex string or Uint8Array, cause: " + l);
          }
        else if (isBytes(l)) d = Uint8Array.from(l);
        else throw Error(e + " must be hex string or Uint8Array");
        let m = d.length;
        if ("number" == typeof c && m !== c)
          throw Error(e + " of length " + c + " expected, got " + m);
        return d;
      }
      function utils_concatBytes(...e) {
        let l = 0;
        for (let c = 0; c < e.length; c++) {
          let d = e[c];
          abytes(d), (l += d.length);
        }
        let c = new Uint8Array(l);
        for (let l = 0, d = 0; l < e.length; l++) {
          let m = e[l];
          c.set(m, d), (d += m.length);
        }
        return c;
      }
      let isPosBig = (e) => "bigint" == typeof e && y <= e;
      function utils_inRange(e, l, c) {
        return isPosBig(e) && isPosBig(l) && isPosBig(c) && l <= e && e < c;
      }
      function utils_aInRange(e, l, c, d) {
        if (!utils_inRange(l, c, d))
          throw Error(
            "expected valid " + e + ": " + c + " <= n < " + d + ", got " + l
          );
      }
      let utils_bitMask = (e) => (b << BigInt(e)) - b,
        u8n = (e) => new Uint8Array(e),
        u8fr = (e) => Uint8Array.from(e),
        B = {
          bigint: (e) => "bigint" == typeof e,
          function: (e) => "function" == typeof e,
          boolean: (e) => "boolean" == typeof e,
          string: (e) => "string" == typeof e,
          stringOrUint8Array: (e) => "string" == typeof e || isBytes(e),
          isSafeInteger: (e) => Number.isSafeInteger(e),
          array: (e) => Array.isArray(e),
          field: (e, l) => l.Fp.isValid(e),
          hash: (e) =>
            "function" == typeof e && Number.isSafeInteger(e.outputLen),
        };
      function validateObject(e, l, c = {}) {
        let checkField = (l, c, d) => {
          let m = B[c];
          if ("function" != typeof m) throw Error("invalid validator function");
          let g = e[l];
          if ((!d || void 0 !== g) && !m(g, e))
            throw Error(
              "param " + String(l) + " is invalid. Expected " + c + ", got " + g
            );
        };
        for (let [e, c] of Object.entries(l)) checkField(e, c, !1);
        for (let [e, l] of Object.entries(c)) checkField(e, l, !0);
        return e;
      }
      function memoized(e) {
        let l = new WeakMap();
        return (c, ...d) => {
          let m = l.get(c);
          if (void 0 !== m) return m;
          let g = e(c, ...d);
          return l.set(c, g), g;
        };
      }
      /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ let N =
          BigInt(0),
        F = BigInt(1),
        V = BigInt(2),
        G = BigInt(3),
        Q = BigInt(4),
        $ = BigInt(5),
        Z = BigInt(8);
      function modular_mod(e, l) {
        let c = e % l;
        return c >= N ? c : l + c;
      }
      function pow2(e, l, c) {
        let d = e;
        for (; l-- > N; ) (d *= d), (d %= c);
        return d;
      }
      function invert(e, l) {
        if (e === N) throw Error("invert: expected non-zero number");
        if (l <= N) throw Error("invert: expected positive modulus, got " + l);
        let c = modular_mod(e, l),
          d = l,
          m = N,
          g = F,
          y = F,
          b = N;
        for (; c !== N; ) {
          let e = d / c,
            l = d % c,
            C = m - y * e,
            P = g - b * e;
          (d = c), (c = l), (m = y), (g = b), (y = C), (b = P);
        }
        let C = d;
        if (C !== F) throw Error("invert: does not exist");
        return modular_mod(m, l);
      }
      let Y = [
        "create",
        "isValid",
        "is0",
        "neg",
        "inv",
        "sqrt",
        "sqr",
        "eql",
        "add",
        "sub",
        "mul",
        "pow",
        "div",
        "addN",
        "subN",
        "mulN",
        "sqrN",
      ];
      function nLength(e, l) {
        let c = void 0 !== l ? l : e.toString(2).length;
        return { nBitLength: c, nByteLength: Math.ceil(c / 8) };
      }
      function Field(e, l, c = !1, d = {}) {
        let m;
        if (e <= N) throw Error("invalid field: expected ORDER > 0, got " + e);
        let { nBitLength: g, nByteLength: y } = nLength(e, l);
        if (y > 2048)
          throw Error("invalid field: expected ORDER of <= 2048 bytes");
        let b = Object.freeze({
          ORDER: e,
          isLE: c,
          BITS: g,
          BYTES: y,
          MASK: utils_bitMask(g),
          ZERO: N,
          ONE: F,
          create: (l) => modular_mod(l, e),
          isValid: (l) => {
            if ("bigint" != typeof l)
              throw Error(
                "invalid field element: expected bigint, got " + typeof l
              );
            return N <= l && l < e;
          },
          is0: (e) => e === N,
          isOdd: (e) => (e & F) === F,
          neg: (l) => modular_mod(-l, e),
          eql: (e, l) => e === l,
          sqr: (l) => modular_mod(l * l, e),
          add: (l, c) => modular_mod(l + c, e),
          sub: (l, c) => modular_mod(l - c, e),
          mul: (l, c) => modular_mod(l * c, e),
          pow: (e, l) =>
            (function (e, l, c) {
              if (c < N) throw Error("invalid exponent, negatives unsupported");
              if (c === N) return e.ONE;
              if (c === F) return l;
              let d = e.ONE,
                m = l;
              for (; c > N; )
                c & F && (d = e.mul(d, m)), (m = e.sqr(m)), (c >>= F);
              return d;
            })(b, e, l),
          div: (l, c) => modular_mod(l * invert(c, e), e),
          sqrN: (e) => e * e,
          addN: (e, l) => e + l,
          subN: (e, l) => e - l,
          mulN: (e, l) => e * l,
          inv: (l) => invert(l, e),
          sqrt:
            d.sqrt ||
            ((l) => (
              m ||
                (m = (function (e) {
                  if (e % Q === G) {
                    let l = (e + F) / Q;
                    return function (e, c) {
                      let d = e.pow(c, l);
                      if (!e.eql(e.sqr(d), c))
                        throw Error("Cannot find square root");
                      return d;
                    };
                  }
                  if (e % Z === $) {
                    let l = (e - $) / Z;
                    return function (e, c) {
                      let d = e.mul(c, V),
                        m = e.pow(d, l),
                        g = e.mul(c, m),
                        y = e.mul(e.mul(g, V), m),
                        b = e.mul(g, e.sub(y, e.ONE));
                      if (!e.eql(e.sqr(b), c))
                        throw Error("Cannot find square root");
                      return b;
                    };
                  }
                  return (function (e) {
                    let l, c, d;
                    let m = (e - F) / V;
                    for (l = e - F, c = 0; l % V === N; l /= V, c++);
                    for (
                      d = V;
                      d < e &&
                      (function (e, l, c) {
                        if (l < N)
                          throw Error(
                            "invalid exponent, negatives unsupported"
                          );
                        if (c <= N) throw Error("invalid modulus");
                        if (c === F) return N;
                        let d = F;
                        for (; l > N; )
                          l & F && (d = (d * e) % c),
                            (e = (e * e) % c),
                            (l >>= F);
                        return d;
                      })(d, m, e) !==
                        e - F;
                      d++
                    )
                      if (d > 1e3)
                        throw Error(
                          "Cannot find square root: likely non-prime P"
                        );
                    if (1 === c) {
                      let l = (e + F) / Q;
                      return function (e, c) {
                        let d = e.pow(c, l);
                        if (!e.eql(e.sqr(d), c))
                          throw Error("Cannot find square root");
                        return d;
                      };
                    }
                    let g = (l + F) / V;
                    return function (e, y) {
                      if (e.pow(y, m) === e.neg(e.ONE))
                        throw Error("Cannot find square root");
                      let b = c,
                        C = e.pow(e.mul(e.ONE, d), l),
                        P = e.pow(y, g),
                        I = e.pow(y, l);
                      for (; !e.eql(I, e.ONE); ) {
                        if (e.eql(I, e.ZERO)) return e.ZERO;
                        let l = 1;
                        for (let c = e.sqr(I); l < b && !e.eql(c, e.ONE); l++)
                          c = e.sqr(c);
                        let c = e.pow(C, F << BigInt(b - l - 1));
                        (C = e.sqr(c)),
                          (P = e.mul(P, c)),
                          (I = e.mul(I, C)),
                          (b = l);
                      }
                      return P;
                    };
                  })(e);
                })(e)),
              m(b, l)
            )),
          invertBatch: (e) =>
            (function (e, l) {
              let c = Array(l.length),
                d = l.reduce(
                  (l, d, m) => (e.is0(d) ? l : ((c[m] = l), e.mul(l, d))),
                  e.ONE
                ),
                m = e.inv(d);
              return (
                l.reduceRight(
                  (l, d, m) =>
                    e.is0(d) ? l : ((c[m] = e.mul(l, c[m])), e.mul(l, d)),
                  m
                ),
                c
              );
            })(b, e),
          cmov: (e, l, c) => (c ? l : e),
          toBytes: (e) =>
            c ? numberToBytesLE(e, y) : utils_numberToBytesBE(e, y),
          fromBytes: (e) => {
            if (e.length !== y)
              throw Error(
                "Field.fromBytes: expected " + y + " bytes, got " + e.length
              );
            return c ? utils_bytesToNumberLE(e) : utils_bytesToNumberBE(e);
          },
        });
        return Object.freeze(b);
      }
      function getFieldBytesLength(e) {
        if ("bigint" != typeof e) throw Error("field order must be bigint");
        let l = e.toString(2).length;
        return Math.ceil(l / 8);
      }
      function getMinHashLength(e) {
        let l = getFieldBytesLength(e);
        return l + Math.ceil(l / 2);
      }
      /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ let et =
          BigInt(0),
        en = BigInt(1);
      function constTimeNegate(e, l) {
        let c = l.negate();
        return e ? c : l;
      }
      function validateW(e, l) {
        if (!Number.isSafeInteger(e) || e <= 0 || e > l)
          throw Error(
            "invalid window size, expected [1.." + l + "], got W=" + e
          );
      }
      function calcWOpts(e, l) {
        validateW(e, l);
        let c = Math.ceil(l / e) + 1,
          d = 2 ** (e - 1),
          m = 2 ** e,
          g = utils_bitMask(e),
          y = BigInt(e);
        return { windows: c, windowSize: d, mask: g, maxNumber: m, shiftBy: y };
      }
      function calcOffsets(e, l, c) {
        let { windowSize: d, mask: m, maxNumber: g, shiftBy: y } = c,
          b = Number(e & m),
          C = e >> y;
        b > d && ((b -= g), (C += en));
        let P = l * d,
          I = P + Math.abs(b) - 1,
          B = 0 === b,
          N = b < 0;
        return {
          nextN: C,
          offset: I,
          isZero: B,
          isNeg: N,
          isNegF: l % 2 != 0,
          offsetF: P,
        };
      }
      let er = new WeakMap(),
        ei = new WeakMap();
      function getW(e) {
        return ei.get(e) || 1;
      }
      function validateBasic(e) {
        return (
          !(function (e) {
            let l = Y.reduce((e, l) => ((e[l] = "function"), e), {
              ORDER: "bigint",
              MASK: "bigint",
              BYTES: "isSafeInteger",
              BITS: "isSafeInteger",
            });
            validateObject(e, l);
          })(e.Fp),
          validateObject(
            e,
            { n: "bigint", h: "bigint", Gx: "field", Gy: "field" },
            { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }
          ),
          Object.freeze({ ...nLength(e.n, e.nBitLength), ...e, p: e.Fp.ORDER })
        );
      }
      /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ function validateSigVerOpts(
        e
      ) {
        void 0 !== e.lowS && abool("lowS", e.lowS),
          void 0 !== e.prehash && abool("prehash", e.prehash);
      }
      let eo = {
          Err: class extends Error {
            constructor(e = "") {
              super(e);
            }
          },
          _tlv: {
            encode: (e, l) => {
              let { Err: c } = eo;
              if (e < 0 || e > 256) throw new c("tlv.encode: wrong tag");
              if (1 & l.length) throw new c("tlv.encode: unpadded data");
              let d = l.length / 2,
                m = numberToHexUnpadded(d);
              if ((m.length / 2) & 128)
                throw new c("tlv.encode: long form length too big");
              let g = d > 127 ? numberToHexUnpadded((m.length / 2) | 128) : "",
                y = numberToHexUnpadded(e);
              return y + g + m + l;
            },
            decode(e, l) {
              let { Err: c } = eo,
                d = 0;
              if (e < 0 || e > 256) throw new c("tlv.encode: wrong tag");
              if (l.length < 2 || l[d++] !== e)
                throw new c("tlv.decode: wrong tlv");
              let m = l[d++],
                g = !!(128 & m),
                y = 0;
              if (g) {
                let e = 127 & m;
                if (!e)
                  throw new c(
                    "tlv.decode(long): indefinite length not supported"
                  );
                if (e > 4)
                  throw new c("tlv.decode(long): byte length is too big");
                let g = l.subarray(d, d + e);
                if (g.length !== e)
                  throw new c("tlv.decode: length bytes not complete");
                if (0 === g[0])
                  throw new c("tlv.decode(long): zero leftmost byte");
                for (let e of g) y = (y << 8) | e;
                if (((d += e), y < 128))
                  throw new c("tlv.decode(long): not minimal encoding");
              } else y = m;
              let b = l.subarray(d, d + y);
              if (b.length !== y) throw new c("tlv.decode: wrong value length");
              return { v: b, l: l.subarray(d + y) };
            },
          },
          _int: {
            encode(e) {
              let { Err: l } = eo;
              if (e < ea)
                throw new l("integer: negative integers are not allowed");
              let c = numberToHexUnpadded(e);
              if (
                (8 & Number.parseInt(c[0], 16) && (c = "00" + c), 1 & c.length)
              )
                throw new l("unexpected DER parsing assertion: unpadded hex");
              return c;
            },
            decode(e) {
              let { Err: l } = eo;
              if (128 & e[0])
                throw new l("invalid signature integer: negative");
              if (0 === e[0] && !(128 & e[1]))
                throw new l(
                  "invalid signature integer: unnecessary leading zero"
                );
              return utils_bytesToNumberBE(e);
            },
          },
          toSig(e) {
            let { Err: l, _int: c, _tlv: d } = eo,
              m = utils_ensureBytes("signature", e),
              { v: g, l: y } = d.decode(48, m);
            if (y.length)
              throw new l("invalid signature: left bytes after parsing");
            let { v: b, l: C } = d.decode(2, g),
              { v: P, l: I } = d.decode(2, C);
            if (I.length)
              throw new l("invalid signature: left bytes after parsing");
            return { r: c.decode(b), s: c.decode(P) };
          },
          hexFromSig(e) {
            let { _tlv: l, _int: c } = eo,
              d = l.encode(2, c.encode(e.r)),
              m = l.encode(2, c.encode(e.s));
            return l.encode(48, d + m);
          },
        },
        ea = BigInt(0),
        es = BigInt(1),
        el = (BigInt(2), BigInt(3));
      BigInt(4);
      /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ let ec =
          BigInt(
            "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"
          ),
        eu = BigInt(
          "0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"
        ),
        ed = BigInt(1),
        ep = BigInt(2),
        divNearest = (e, l) => (e + l / ep) / l,
        eh = Field(ec, void 0, void 0, {
          sqrt: function (e) {
            let l = BigInt(3),
              c = BigInt(6),
              d = BigInt(11),
              m = BigInt(22),
              g = BigInt(23),
              y = BigInt(44),
              b = BigInt(88),
              C = (e * e * e) % ec,
              P = (C * C * e) % ec,
              I = (pow2(P, l, ec) * P) % ec,
              B = (pow2(I, l, ec) * P) % ec,
              N = (pow2(B, ep, ec) * C) % ec,
              F = (pow2(N, d, ec) * N) % ec,
              V = (pow2(F, m, ec) * F) % ec,
              G = (pow2(V, y, ec) * V) % ec,
              Q = (pow2(G, b, ec) * G) % ec,
              $ = (pow2(Q, y, ec) * V) % ec,
              Z = (pow2($, l, ec) * P) % ec,
              Y = (pow2(Z, g, ec) * F) % ec,
              et = (pow2(Y, c, ec) * C) % ec,
              en = pow2(et, ep, ec);
            if (!eh.eql(eh.sqr(en), e)) throw Error("Cannot find square root");
            return en;
          },
        }),
        ef = (function (e, l) {
          let create = (l) =>
            (function (e) {
              let l = (function (e) {
                  let l = validateBasic(e);
                  return (
                    validateObject(
                      l,
                      {
                        hash: "hash",
                        hmac: "function",
                        randomBytes: "function",
                      },
                      {
                        bits2int: "function",
                        bits2int_modN: "function",
                        lowS: "boolean",
                      }
                    ),
                    Object.freeze({ lowS: !0, ...l })
                  );
                })(e),
                { Fp: c, n: d } = l,
                m = c.BYTES + 1,
                g = 2 * c.BYTES + 1;
              function modN(e) {
                return modular_mod(e, d);
              }
              let {
                  ProjectivePoint: C,
                  normPrivateKeyToScalar: P,
                  weierstrassEquation: I,
                  isWithinCurveOrder: B,
                } = (function (e) {
                  var l;
                  let c = (function (e) {
                      let l = validateBasic(e);
                      validateObject(
                        l,
                        { a: "field", b: "field" },
                        {
                          allowedPrivateKeyLengths: "array",
                          wrapPrivateKey: "boolean",
                          isTorsionFree: "function",
                          clearCofactor: "function",
                          allowInfinityPoint: "boolean",
                          fromBytes: "function",
                          toBytes: "function",
                        }
                      );
                      let { endo: c, Fp: d, a: m } = l;
                      if (c) {
                        if (!d.eql(m, d.ZERO))
                          throw Error(
                            "invalid endomorphism, can only be defined for Koblitz curves that have a=0"
                          );
                        if (
                          "object" != typeof c ||
                          "bigint" != typeof c.beta ||
                          "function" != typeof c.splitScalar
                        )
                          throw Error(
                            "invalid endomorphism, expected beta: bigint and splitScalar: function"
                          );
                      }
                      return Object.freeze({ ...l });
                    })(e),
                    { Fp: d } = c,
                    m = Field(c.n, c.nBitLength),
                    g =
                      c.toBytes ||
                      ((e, l, c) => {
                        let m = l.toAffine();
                        return utils_concatBytes(
                          Uint8Array.from([4]),
                          d.toBytes(m.x),
                          d.toBytes(m.y)
                        );
                      }),
                    C =
                      c.fromBytes ||
                      ((e) => {
                        let l = e.subarray(1),
                          c = d.fromBytes(l.subarray(0, d.BYTES)),
                          m = d.fromBytes(l.subarray(d.BYTES, 2 * d.BYTES));
                        return { x: c, y: m };
                      });
                  function weierstrassEquation(e) {
                    let { a: l, b: m } = c,
                      g = d.sqr(e),
                      y = d.mul(g, e);
                    return d.add(d.add(y, d.mul(e, l)), m);
                  }
                  if (!d.eql(d.sqr(c.Gy), weierstrassEquation(c.Gx)))
                    throw Error("bad generator point: equation left != right");
                  function normPrivateKeyToScalar(e) {
                    let l;
                    let {
                      allowedPrivateKeyLengths: d,
                      nByteLength: m,
                      wrapPrivateKey: g,
                      n: y,
                    } = c;
                    if (d && "bigint" != typeof e) {
                      if (
                        (isBytes(e) && (e = bytesToHex(e)),
                        "string" != typeof e || !d.includes(e.length))
                      )
                        throw Error("invalid private key");
                      e = e.padStart(2 * m, "0");
                    }
                    try {
                      l =
                        "bigint" == typeof e
                          ? e
                          : utils_bytesToNumberBE(
                              utils_ensureBytes("private key", e, m)
                            );
                    } catch (l) {
                      throw Error(
                        "invalid private key, expected hex or " +
                          m +
                          " bytes, got " +
                          typeof e
                      );
                    }
                    return (
                      g && (l = modular_mod(l, y)),
                      utils_aInRange("private key", l, es, y),
                      l
                    );
                  }
                  function aprjpoint(e) {
                    if (!(e instanceof Point))
                      throw Error("ProjectivePoint expected");
                  }
                  let P = memoized((e, l) => {
                      let { px: c, py: m, pz: g } = e;
                      if (d.eql(g, d.ONE)) return { x: c, y: m };
                      let y = e.is0();
                      null == l && (l = y ? d.ONE : d.inv(g));
                      let b = d.mul(c, l),
                        C = d.mul(m, l),
                        P = d.mul(g, l);
                      if (y) return { x: d.ZERO, y: d.ZERO };
                      if (!d.eql(P, d.ONE)) throw Error("invZ was invalid");
                      return { x: b, y: C };
                    }),
                    I = memoized((e) => {
                      if (e.is0()) {
                        if (c.allowInfinityPoint && !d.is0(e.py)) return;
                        throw Error("bad point: ZERO");
                      }
                      let { x: l, y: m } = e.toAffine();
                      if (!d.isValid(l) || !d.isValid(m))
                        throw Error("bad point: x or y not FE");
                      let g = d.sqr(m),
                        y = weierstrassEquation(l);
                      if (!d.eql(g, y))
                        throw Error("bad point: equation left != right");
                      if (!e.isTorsionFree())
                        throw Error("bad point: not in prime-order subgroup");
                      return !0;
                    });
                  let Point = class Point {
                    constructor(e, l, c) {
                      if (null == e || !d.isValid(e)) throw Error("x required");
                      if (null == l || !d.isValid(l)) throw Error("y required");
                      if (null == c || !d.isValid(c)) throw Error("z required");
                      (this.px = e),
                        (this.py = l),
                        (this.pz = c),
                        Object.freeze(this);
                    }
                    static fromAffine(e) {
                      let { x: l, y: c } = e || {};
                      if (!e || !d.isValid(l) || !d.isValid(c))
                        throw Error("invalid affine point");
                      if (e instanceof Point)
                        throw Error("projective point not allowed");
                      let is0 = (e) => d.eql(e, d.ZERO);
                      return is0(l) && is0(c)
                        ? Point.ZERO
                        : new Point(l, c, d.ONE);
                    }
                    get x() {
                      return this.toAffine().x;
                    }
                    get y() {
                      return this.toAffine().y;
                    }
                    static normalizeZ(e) {
                      let l = d.invertBatch(e.map((e) => e.pz));
                      return e
                        .map((e, c) => e.toAffine(l[c]))
                        .map(Point.fromAffine);
                    }
                    static fromHex(e) {
                      let l = Point.fromAffine(
                        C(utils_ensureBytes("pointHex", e))
                      );
                      return l.assertValidity(), l;
                    }
                    static fromPrivateKey(e) {
                      return Point.BASE.multiply(normPrivateKeyToScalar(e));
                    }
                    static msm(e, l) {
                      return (function (e, l, c, d) {
                        if (
                          (!(function (e, l) {
                            if (!Array.isArray(e))
                              throw Error("array expected");
                            e.forEach((e, c) => {
                              if (!(e instanceof l))
                                throw Error("invalid point at index " + c);
                            });
                          })(c, e),
                          !(function (e, l) {
                            if (!Array.isArray(e))
                              throw Error("array of scalars expected");
                            e.forEach((e, c) => {
                              if (!l.isValid(e))
                                throw Error("invalid scalar at index " + c);
                            });
                          })(d, l),
                          c.length !== d.length)
                        )
                          throw Error(
                            "arrays of points and scalars must have equal length"
                          );
                        let m = e.ZERO,
                          g = (function (e) {
                            let l;
                            for (l = 0; e > y; e >>= b, l += 1);
                            return l;
                          })(BigInt(c.length)),
                          C = g > 12 ? g - 3 : g > 4 ? g - 2 : g ? 2 : 1,
                          P = utils_bitMask(C),
                          I = Array(Number(P) + 1).fill(m),
                          B = Math.floor((l.BITS - 1) / C) * C,
                          N = m;
                        for (let e = B; e >= 0; e -= C) {
                          I.fill(m);
                          for (let l = 0; l < d.length; l++) {
                            let m = d[l],
                              g = Number((m >> BigInt(e)) & P);
                            I[g] = I[g].add(c[l]);
                          }
                          let l = m;
                          for (let e = I.length - 1, c = m; e > 0; e--)
                            (c = c.add(I[e])), (l = l.add(c));
                          if (((N = N.add(l)), 0 !== e))
                            for (let e = 0; e < C; e++) N = N.double();
                        }
                        return N;
                      })(Point, m, e, l);
                    }
                    _setWindowSize(e) {
                      N.setWindowSize(this, e);
                    }
                    assertValidity() {
                      I(this);
                    }
                    hasEvenY() {
                      let { y: e } = this.toAffine();
                      if (d.isOdd) return !d.isOdd(e);
                      throw Error("Field doesn't support isOdd");
                    }
                    equals(e) {
                      aprjpoint(e);
                      let { px: l, py: c, pz: m } = this,
                        { px: g, py: y, pz: b } = e,
                        C = d.eql(d.mul(l, b), d.mul(g, m)),
                        P = d.eql(d.mul(c, b), d.mul(y, m));
                      return C && P;
                    }
                    negate() {
                      return new Point(this.px, d.neg(this.py), this.pz);
                    }
                    double() {
                      let { a: e, b: l } = c,
                        m = d.mul(l, el),
                        { px: g, py: y, pz: b } = this,
                        C = d.ZERO,
                        P = d.ZERO,
                        I = d.ZERO,
                        B = d.mul(g, g),
                        N = d.mul(y, y),
                        F = d.mul(b, b),
                        V = d.mul(g, y);
                      return (
                        (V = d.add(V, V)),
                        (I = d.mul(g, b)),
                        (I = d.add(I, I)),
                        (C = d.mul(e, I)),
                        (P = d.mul(m, F)),
                        (P = d.add(C, P)),
                        (C = d.sub(N, P)),
                        (P = d.add(N, P)),
                        (P = d.mul(C, P)),
                        (C = d.mul(V, C)),
                        (I = d.mul(m, I)),
                        (F = d.mul(e, F)),
                        (V = d.sub(B, F)),
                        (V = d.mul(e, V)),
                        (V = d.add(V, I)),
                        (I = d.add(B, B)),
                        (B = d.add(I, B)),
                        (B = d.add(B, F)),
                        (B = d.mul(B, V)),
                        (P = d.add(P, B)),
                        (F = d.mul(y, b)),
                        (F = d.add(F, F)),
                        (B = d.mul(F, V)),
                        (C = d.sub(C, B)),
                        (I = d.mul(F, N)),
                        (I = d.add(I, I)),
                        (I = d.add(I, I)),
                        new Point(C, P, I)
                      );
                    }
                    add(e) {
                      aprjpoint(e);
                      let { px: l, py: m, pz: g } = this,
                        { px: y, py: b, pz: C } = e,
                        P = d.ZERO,
                        I = d.ZERO,
                        B = d.ZERO,
                        N = c.a,
                        F = d.mul(c.b, el),
                        V = d.mul(l, y),
                        G = d.mul(m, b),
                        Q = d.mul(g, C),
                        $ = d.add(l, m),
                        Z = d.add(y, b);
                      ($ = d.mul($, Z)),
                        (Z = d.add(V, G)),
                        ($ = d.sub($, Z)),
                        (Z = d.add(l, g));
                      let Y = d.add(y, C);
                      return (
                        (Z = d.mul(Z, Y)),
                        (Y = d.add(V, Q)),
                        (Z = d.sub(Z, Y)),
                        (Y = d.add(m, g)),
                        (P = d.add(b, C)),
                        (Y = d.mul(Y, P)),
                        (P = d.add(G, Q)),
                        (Y = d.sub(Y, P)),
                        (B = d.mul(N, Z)),
                        (P = d.mul(F, Q)),
                        (B = d.add(P, B)),
                        (P = d.sub(G, B)),
                        (B = d.add(G, B)),
                        (I = d.mul(P, B)),
                        (G = d.add(V, V)),
                        (G = d.add(G, V)),
                        (Q = d.mul(N, Q)),
                        (Z = d.mul(F, Z)),
                        (G = d.add(G, Q)),
                        (Q = d.sub(V, Q)),
                        (Q = d.mul(N, Q)),
                        (Z = d.add(Z, Q)),
                        (V = d.mul(G, Z)),
                        (I = d.add(I, V)),
                        (V = d.mul(Y, Z)),
                        (P = d.mul($, P)),
                        (P = d.sub(P, V)),
                        (V = d.mul($, G)),
                        (B = d.mul(Y, B)),
                        (B = d.add(B, V)),
                        new Point(P, I, B)
                      );
                    }
                    subtract(e) {
                      return this.add(e.negate());
                    }
                    is0() {
                      return this.equals(Point.ZERO);
                    }
                    wNAF(e) {
                      return N.wNAFCached(this, e, Point.normalizeZ);
                    }
                    multiplyUnsafe(e) {
                      let { endo: l, n: m } = c;
                      utils_aInRange("scalar", e, ea, m);
                      let g = Point.ZERO;
                      if (e === ea) return g;
                      if (this.is0() || e === es) return this;
                      if (!l || N.hasPrecomputes(this))
                        return N.wNAFCachedUnsafe(this, e, Point.normalizeZ);
                      let {
                          k1neg: y,
                          k1: b,
                          k2neg: C,
                          k2: P,
                        } = l.splitScalar(e),
                        I = g,
                        B = g,
                        F = this;
                      for (; b > ea || P > ea; )
                        b & es && (I = I.add(F)),
                          P & es && (B = B.add(F)),
                          (F = F.double()),
                          (b >>= es),
                          (P >>= es);
                      return (
                        y && (I = I.negate()),
                        C && (B = B.negate()),
                        (B = new Point(d.mul(B.px, l.beta), B.py, B.pz)),
                        I.add(B)
                      );
                    }
                    multiply(e) {
                      let l, m;
                      let { endo: g, n: y } = c;
                      if ((utils_aInRange("scalar", e, es, y), g)) {
                        let {
                            k1neg: c,
                            k1: y,
                            k2neg: b,
                            k2: C,
                          } = g.splitScalar(e),
                          { p: P, f: I } = this.wNAF(y),
                          { p: B, f: F } = this.wNAF(C);
                        (P = N.constTimeNegate(c, P)),
                          (B = N.constTimeNegate(b, B)),
                          (B = new Point(d.mul(B.px, g.beta), B.py, B.pz)),
                          (l = P.add(B)),
                          (m = I.add(F));
                      } else {
                        let { p: c, f: d } = this.wNAF(e);
                        (l = c), (m = d);
                      }
                      return Point.normalizeZ([l, m])[0];
                    }
                    multiplyAndAddUnsafe(e, l, c) {
                      let d = Point.BASE,
                        mul = (e, l) =>
                          l !== ea && l !== es && e.equals(d)
                            ? e.multiply(l)
                            : e.multiplyUnsafe(l),
                        m = mul(this, l).add(mul(e, c));
                      return m.is0() ? void 0 : m;
                    }
                    toAffine(e) {
                      return P(this, e);
                    }
                    isTorsionFree() {
                      let { h: e, isTorsionFree: l } = c;
                      if (e === es) return !0;
                      if (l) return l(Point, this);
                      throw Error(
                        "isTorsionFree() has not been declared for the elliptic curve"
                      );
                    }
                    clearCofactor() {
                      let { h: e, clearCofactor: l } = c;
                      return e === es
                        ? this
                        : l
                        ? l(Point, this)
                        : this.multiplyUnsafe(c.h);
                    }
                    toRawBytes(e = !0) {
                      return (
                        abool("isCompressed", e),
                        this.assertValidity(),
                        g(Point, this, e)
                      );
                    }
                    toHex(e = !0) {
                      return (
                        abool("isCompressed", e), bytesToHex(this.toRawBytes(e))
                      );
                    }
                  };
                  (Point.BASE = new Point(c.Gx, c.Gy, d.ONE)),
                    (Point.ZERO = new Point(d.ZERO, d.ONE, d.ZERO));
                  let B = c.nBitLength,
                    N =
                      ((l = c.endo ? Math.ceil(B / 2) : B),
                      {
                        constTimeNegate,
                        hasPrecomputes: (e) => 1 !== getW(e),
                        unsafeLadder(e, l, c = Point.ZERO) {
                          let d = e;
                          for (; l > et; )
                            l & en && (c = c.add(d)),
                              (d = d.double()),
                              (l >>= en);
                          return c;
                        },
                        precomputeWindow(e, c) {
                          let { windows: d, windowSize: m } = calcWOpts(c, l),
                            g = [],
                            y = e,
                            b = y;
                          for (let e = 0; e < d; e++) {
                            (b = y), g.push(b);
                            for (let e = 1; e < m; e++)
                              (b = b.add(y)), g.push(b);
                            y = b.double();
                          }
                          return g;
                        },
                        wNAF(e, c, d) {
                          let m = Point.ZERO,
                            g = Point.BASE,
                            y = calcWOpts(e, l);
                          for (let e = 0; e < y.windows; e++) {
                            let {
                              nextN: l,
                              offset: b,
                              isZero: C,
                              isNeg: P,
                              isNegF: I,
                              offsetF: B,
                            } = calcOffsets(d, e, y);
                            (d = l),
                              C
                                ? (g = g.add(constTimeNegate(I, c[B])))
                                : (m = m.add(constTimeNegate(P, c[b])));
                          }
                          return { p: m, f: g };
                        },
                        wNAFUnsafe(e, c, d, m = Point.ZERO) {
                          let g = calcWOpts(e, l);
                          for (let e = 0; e < g.windows && d !== et; e++) {
                            let {
                              nextN: l,
                              offset: y,
                              isZero: b,
                              isNeg: C,
                            } = calcOffsets(d, e, g);
                            if (((d = l), !b)) {
                              let e = c[y];
                              m = m.add(C ? e.negate() : e);
                            }
                          }
                          return m;
                        },
                        getPrecomputes(e, l, c) {
                          let d = er.get(l);
                          return (
                            d ||
                              ((d = this.precomputeWindow(l, e)),
                              1 !== e && er.set(l, c(d))),
                            d
                          );
                        },
                        wNAFCached(e, l, c) {
                          let d = getW(e);
                          return this.wNAF(d, this.getPrecomputes(d, e, c), l);
                        },
                        wNAFCachedUnsafe(e, l, c, d) {
                          let m = getW(e);
                          return 1 === m
                            ? this.unsafeLadder(e, l, d)
                            : this.wNAFUnsafe(
                                m,
                                this.getPrecomputes(m, e, c),
                                l,
                                d
                              );
                        },
                        setWindowSize(e, c) {
                          validateW(c, l), ei.set(e, c), er.delete(e);
                        },
                      });
                  return {
                    CURVE: c,
                    ProjectivePoint: Point,
                    normPrivateKeyToScalar,
                    weierstrassEquation,
                    isWithinCurveOrder: function (e) {
                      return utils_inRange(e, es, c.n);
                    },
                  };
                })({
                  ...l,
                  toBytes(e, l, d) {
                    let m = l.toAffine(),
                      g = c.toBytes(m.x);
                    return (abool("isCompressed", d), d)
                      ? utils_concatBytes(
                          Uint8Array.from([l.hasEvenY() ? 2 : 3]),
                          g
                        )
                      : utils_concatBytes(
                          Uint8Array.from([4]),
                          g,
                          c.toBytes(m.y)
                        );
                  },
                  fromBytes(e) {
                    let l = e.length,
                      d = e[0],
                      y = e.subarray(1);
                    if (l === m && (2 === d || 3 === d)) {
                      let e;
                      let l = utils_bytesToNumberBE(y);
                      if (!utils_inRange(l, es, c.ORDER))
                        throw Error("Point is not on curve");
                      let m = I(l);
                      try {
                        e = c.sqrt(m);
                      } catch (l) {
                        let e = l instanceof Error ? ": " + l.message : "";
                        throw Error("Point is not on curve" + e);
                      }
                      let g = (e & es) === es;
                      return (
                        ((1 & d) == 1) !== g && (e = c.neg(e)), { x: l, y: e }
                      );
                    }
                    if (l === g && 4 === d) {
                      let e = c.fromBytes(y.subarray(0, c.BYTES)),
                        l = c.fromBytes(y.subarray(c.BYTES, 2 * c.BYTES));
                      return { x: e, y: l };
                    }
                    throw Error(
                      "invalid Point, expected length of " +
                        m +
                        ", or uncompressed " +
                        g +
                        ", got " +
                        l
                    );
                  },
                }),
                numToNByteHex = (e) =>
                  bytesToHex(utils_numberToBytesBE(e, l.nByteLength));
              function isBiggerThanHalfOrder(e) {
                let l = d >> es;
                return e > l;
              }
              let slcNum = (e, l, c) => utils_bytesToNumberBE(e.slice(l, c));
              let Signature = class Signature {
                constructor(e, l, c) {
                  utils_aInRange("r", e, es, d),
                    utils_aInRange("s", l, es, d),
                    (this.r = e),
                    (this.s = l),
                    null != c && (this.recovery = c),
                    Object.freeze(this);
                }
                static fromCompact(e) {
                  let c = l.nByteLength;
                  return (
                    (e = utils_ensureBytes("compactSignature", e, 2 * c)),
                    new Signature(slcNum(e, 0, c), slcNum(e, c, 2 * c))
                  );
                }
                static fromDER(e) {
                  let { r: l, s: c } = eo.toSig(utils_ensureBytes("DER", e));
                  return new Signature(l, c);
                }
                assertValidity() {}
                addRecoveryBit(e) {
                  return new Signature(this.r, this.s, e);
                }
                recoverPublicKey(e) {
                  let { r: m, s: g, recovery: y } = this,
                    b = V(utils_ensureBytes("msgHash", e));
                  if (null == y || ![0, 1, 2, 3].includes(y))
                    throw Error("recovery id invalid");
                  let P = 2 === y || 3 === y ? m + l.n : m;
                  if (P >= c.ORDER) throw Error("recovery id 2 or 3 invalid");
                  let I = (1 & y) == 0 ? "02" : "03",
                    B = C.fromHex(I + numToNByteHex(P)),
                    N = invert(P, d),
                    F = modN(-b * N),
                    G = modN(g * N),
                    Q = C.BASE.multiplyAndAddUnsafe(B, F, G);
                  if (!Q) throw Error("point at infinify");
                  return Q.assertValidity(), Q;
                }
                hasHighS() {
                  return isBiggerThanHalfOrder(this.s);
                }
                normalizeS() {
                  return this.hasHighS()
                    ? new Signature(this.r, modN(-this.s), this.recovery)
                    : this;
                }
                toDERRawBytes() {
                  return hexToBytes(this.toDERHex());
                }
                toDERHex() {
                  return eo.hexFromSig({ r: this.r, s: this.s });
                }
                toCompactRawBytes() {
                  return hexToBytes(this.toCompactHex());
                }
                toCompactHex() {
                  return numToNByteHex(this.r) + numToNByteHex(this.s);
                }
              };
              function isProbPub(e) {
                let l = isBytes(e),
                  c = "string" == typeof e,
                  d = (l || c) && e.length;
                return l
                  ? d === m || d === g
                  : c
                  ? d === 2 * m || d === 2 * g
                  : e instanceof C;
              }
              let N =
                  l.bits2int ||
                  function (e) {
                    if (e.length > 8192) throw Error("input is too large");
                    let c = utils_bytesToNumberBE(e),
                      d = 8 * e.length - l.nBitLength;
                    return d > 0 ? c >> BigInt(d) : c;
                  },
                V =
                  l.bits2int_modN ||
                  function (e) {
                    return modN(N(e));
                  },
                G = utils_bitMask(l.nBitLength);
              function int2octets(e) {
                return (
                  utils_aInRange("num < 2^" + l.nBitLength, e, ea, G),
                  utils_numberToBytesBE(e, l.nByteLength)
                );
              }
              let Q = { lowS: l.lowS, prehash: !1 },
                $ = { lowS: l.lowS, prehash: !1 };
              return (
                C.BASE._setWindowSize(8),
                {
                  CURVE: l,
                  getPublicKey: function (e, l = !0) {
                    return C.fromPrivateKey(e).toRawBytes(l);
                  },
                  getSharedSecret: function (e, l, c = !0) {
                    if (isProbPub(e))
                      throw Error("first arg must be private key");
                    if (!isProbPub(l))
                      throw Error("second arg must be public key");
                    let d = C.fromHex(l);
                    return d.multiply(P(e)).toRawBytes(c);
                  },
                  sign: function (e, m, g = Q) {
                    let { seed: y, k2sig: b } = (function (e, m, g = Q) {
                        if (["recovered", "canonical"].some((e) => e in g))
                          throw Error("sign() legacy options not supported");
                        let { hash: y, randomBytes: b } = l,
                          { lowS: I, prehash: F, extraEntropy: G } = g;
                        null == I && (I = !0),
                          (e = utils_ensureBytes("msgHash", e)),
                          validateSigVerOpts(g),
                          F &&
                            (e = utils_ensureBytes("prehashed msgHash", y(e)));
                        let $ = V(e),
                          Z = P(m),
                          Y = [int2octets(Z), int2octets($)];
                        if (null != G && !1 !== G) {
                          let e = !0 === G ? b(c.BYTES) : G;
                          Y.push(utils_ensureBytes("extraEntropy", e));
                        }
                        let et = utils_concatBytes(...Y);
                        return {
                          seed: et,
                          k2sig: function (e) {
                            let l = N(e);
                            if (!B(l)) return;
                            let c = invert(l, d),
                              m = C.BASE.multiply(l).toAffine(),
                              g = modN(m.x);
                            if (g === ea) return;
                            let y = modN(c * modN($ + g * Z));
                            if (y === ea) return;
                            let b = (m.x === g ? 0 : 2) | Number(m.y & es),
                              P = y;
                            return (
                              I &&
                                isBiggerThanHalfOrder(y) &&
                                ((P = isBiggerThanHalfOrder(y) ? modN(-y) : y),
                                (b ^= 1)),
                              new Signature(g, P, b)
                            );
                          },
                        };
                      })(e, m, g),
                      I = (function (e, l, c) {
                        if ("number" != typeof e || e < 2)
                          throw Error("hashLen must be a number");
                        if ("number" != typeof l || l < 2)
                          throw Error("qByteLen must be a number");
                        if ("function" != typeof c)
                          throw Error("hmacFn must be a function");
                        let d = u8n(e),
                          m = u8n(e),
                          g = 0,
                          reset = () => {
                            d.fill(1), m.fill(0), (g = 0);
                          },
                          h = (...e) => c(m, d, ...e),
                          reseed = (e = u8n(0)) => {
                            (m = h(u8fr([0]), e)),
                              (d = h()),
                              0 !== e.length &&
                                ((m = h(u8fr([1]), e)), (d = h()));
                          },
                          gen = () => {
                            if (g++ >= 1e3)
                              throw Error("drbg: tried 1000 values");
                            let e = 0,
                              c = [];
                            for (; e < l; ) {
                              d = h();
                              let l = d.slice();
                              c.push(l), (e += d.length);
                            }
                            return utils_concatBytes(...c);
                          };
                        return (e, l) => {
                          let c;
                          for (reset(), reseed(e); !(c = l(gen())); ) reseed();
                          return reset(), c;
                        };
                      })(l.hash.outputLen, l.nByteLength, l.hmac);
                    return I(y, b);
                  },
                  verify: function (e, c, m, g = $) {
                    let y, b;
                    (c = utils_ensureBytes("msgHash", c)),
                      (m = utils_ensureBytes("publicKey", m));
                    let { lowS: P, prehash: I, format: B } = g;
                    if ((validateSigVerOpts(g), "strict" in g))
                      throw Error("options.strict was renamed to lowS");
                    if (void 0 !== B && "compact" !== B && "der" !== B)
                      throw Error("format must be compact or der");
                    let N = "string" == typeof e || isBytes(e),
                      F =
                        !N &&
                        !B &&
                        "object" == typeof e &&
                        null !== e &&
                        "bigint" == typeof e.r &&
                        "bigint" == typeof e.s;
                    if (!N && !F)
                      throw Error(
                        "invalid signature, expected Uint8Array, hex string or Signature instance"
                      );
                    try {
                      if ((F && (b = new Signature(e.r, e.s)), N)) {
                        try {
                          "compact" !== B && (b = Signature.fromDER(e));
                        } catch (e) {
                          if (!(e instanceof eo.Err)) throw e;
                        }
                        b || "der" === B || (b = Signature.fromCompact(e));
                      }
                      y = C.fromHex(m);
                    } catch (e) {
                      return !1;
                    }
                    if (!b || (P && b.hasHighS())) return !1;
                    I && (c = l.hash(c));
                    let { r: G, s: Q } = b,
                      Z = V(c),
                      Y = invert(Q, d),
                      et = modN(Z * Y),
                      en = modN(G * Y),
                      er = C.BASE.multiplyAndAddUnsafe(y, et, en)?.toAffine();
                    if (!er) return !1;
                    let ei = modN(er.x);
                    return ei === G;
                  },
                  ProjectivePoint: C,
                  Signature,
                  utils: {
                    isValidPrivateKey(e) {
                      try {
                        return P(e), !0;
                      } catch (e) {
                        return !1;
                      }
                    },
                    normPrivateKeyToScalar: P,
                    randomPrivateKey: () => {
                      let e = getMinHashLength(l.n);
                      return (function (e, l, c = !1) {
                        let d = e.length,
                          m = getFieldBytesLength(l),
                          g = getMinHashLength(l);
                        if (d < 16 || d < g || d > 1024)
                          throw Error(
                            "expected " + g + "-1024 bytes of input, got " + d
                          );
                        let y = c
                            ? utils_bytesToNumberLE(e)
                            : utils_bytesToNumberBE(e),
                          b = modular_mod(y, l - F) + F;
                        return c
                          ? numberToBytesLE(b, m)
                          : utils_numberToBytesBE(b, m);
                      })(l.randomBytes(e), l.n);
                    },
                    precompute: (e = 8, l = C.BASE) => (
                      l._setWindowSize(e), l.multiply(BigInt(3)), l
                    ),
                  },
                }
              );
            })({
              ...e,
              hash: l,
              hmac: (e, ...c) => hmac(l, e, (0, g.eV)(...c)),
              randomBytes: g.O6,
            });
          return { ...create(l), create };
        })(
          {
            a: BigInt(0),
            b: BigInt(7),
            Fp: eh,
            n: eu,
            Gx: BigInt(
              "55066263022277343669578718895168534326250603453777594175500187360389116729240"
            ),
            Gy: BigInt(
              "32670510020758816978083085130507043184471273380659243275938904335757337482424"
            ),
            h: BigInt(1),
            lowS: !0,
            endo: {
              beta: BigInt(
                "0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"
              ),
              splitScalar: (e) => {
                let l = BigInt("0x3086d221a7d46bcde86c90e49284eb15"),
                  c = -ed * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),
                  d = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),
                  m = BigInt("0x100000000000000000000000000000000"),
                  g = divNearest(l * e, eu),
                  y = divNearest(-c * e, eu),
                  b = modular_mod(e - g * l - y * d, eu),
                  C = modular_mod(-g * c - y * l, eu),
                  P = b > m,
                  I = C > m;
                if ((P && (b = eu - b), I && (C = eu - C), b > m || C > m))
                  throw Error("splitScalar: Endomorphism failed, k=" + e);
                return { k1neg: P, k1: b, k2neg: I, k2: C };
              },
            },
          },
          d.JQ
        );
      BigInt(0), ef.ProjectivePoint;
    },
    69131: function (e, l, c) {
      "use strict";
      function anumber(e) {
        if (!Number.isSafeInteger(e) || e < 0)
          throw Error("positive integer expected, got " + e);
      }
      function abytes(e, ...l) {
        if (
          !(
            e instanceof Uint8Array ||
            (ArrayBuffer.isView(e) && "Uint8Array" === e.constructor.name)
          )
        )
          throw Error("Uint8Array expected");
        if (l.length > 0 && !l.includes(e.length))
          throw Error(
            "Uint8Array expected of length " + l + ", got length=" + e.length
          );
      }
      function ahash(e) {
        if ("function" != typeof e || "function" != typeof e.create)
          throw Error("Hash should be wrapped by utils.wrapConstructor");
        anumber(e.outputLen), anumber(e.blockLen);
      }
      function aexists(e, l = !0) {
        if (e.destroyed) throw Error("Hash instance has been destroyed");
        if (l && e.finished)
          throw Error("Hash#digest() has already been called");
      }
      function aoutput(e, l) {
        abytes(e);
        let c = l.outputLen;
        if (e.length < c)
          throw Error(
            "digestInto() expects output buffer of length at least " + c
          );
      }
      c.d(l, {
        $h: function () {
          return aexists;
        },
        eB: function () {
          return aoutput;
        },
        gk: function () {
          return abytes;
        },
        k8: function () {
          return anumber;
        },
        z3: function () {
          return ahash;
        },
      });
    },
    8088: function (e, l, c) {
      "use strict";
      c.d(l, {
        JQ: function () {
          return C;
        },
      });
      var d = c(69131),
        m = c(68431);
      let HashMD = class HashMD extends m.kb {
        constructor(e, l, c, d) {
          super(),
            (this.finished = !1),
            (this.length = 0),
            (this.pos = 0),
            (this.destroyed = !1),
            (this.blockLen = e),
            (this.outputLen = l),
            (this.padOffset = c),
            (this.isLE = d),
            (this.buffer = new Uint8Array(e)),
            (this.view = (0, m.GL)(this.buffer));
        }
        update(e) {
          (0, d.$h)(this);
          let { view: l, buffer: c, blockLen: g } = this;
          e = (0, m.O0)(e);
          let y = e.length;
          for (let d = 0; d < y; ) {
            let b = Math.min(g - this.pos, y - d);
            if (b === g) {
              let l = (0, m.GL)(e);
              for (; g <= y - d; d += g) this.process(l, d);
              continue;
            }
            c.set(e.subarray(d, d + b), this.pos),
              (this.pos += b),
              (d += b),
              this.pos === g && (this.process(l, 0), (this.pos = 0));
          }
          return (this.length += e.length), this.roundClean(), this;
        }
        digestInto(e) {
          (0, d.$h)(this), (0, d.eB)(e, this), (this.finished = !0);
          let { buffer: l, view: c, blockLen: g, isLE: y } = this,
            { pos: b } = this;
          (l[b++] = 128),
            this.buffer.subarray(b).fill(0),
            this.padOffset > g - b && (this.process(c, 0), (b = 0));
          for (let e = b; e < g; e++) l[e] = 0;
          !(function (e, l, c, d) {
            if ("function" == typeof e.setBigUint64)
              return e.setBigUint64(l, c, d);
            let m = BigInt(32),
              g = BigInt(4294967295),
              y = Number((c >> m) & g),
              b = Number(c & g),
              C = d ? 4 : 0,
              P = d ? 0 : 4;
            e.setUint32(l + C, y, d), e.setUint32(l + P, b, d);
          })(c, g - 8, BigInt(8 * this.length), y),
            this.process(c, 0);
          let C = (0, m.GL)(e),
            P = this.outputLen;
          if (P % 4) throw Error("_sha2: outputLen should be aligned to 32bit");
          let I = P / 4,
            B = this.get();
          if (I > B.length) throw Error("_sha2: outputLen bigger than state");
          for (let e = 0; e < I; e++) C.setUint32(4 * e, B[e], y);
        }
        digest() {
          let { buffer: e, outputLen: l } = this;
          this.digestInto(e);
          let c = e.slice(0, l);
          return this.destroy(), c;
        }
        _cloneInto(e) {
          e || (e = new this.constructor()), e.set(...this.get());
          let {
            blockLen: l,
            buffer: c,
            length: d,
            finished: m,
            destroyed: g,
            pos: y,
          } = this;
          return (
            (e.length = d),
            (e.pos = y),
            (e.finished = m),
            (e.destroyed = g),
            d % l && e.buffer.set(c),
            e
          );
        }
      };
      let g = new Uint32Array([
          1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993,
          2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987,
          1925078388, 2162078206, 2614888103, 3248222580, 3835390401,
          4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692,
          1996064986, 2554220882, 2821834349, 2952996808, 3210313671,
          3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912,
          1294757372, 1396182291, 1695183700, 1986661051, 2177026350,
          2456956037, 2730485921, 2820302411, 3259730800, 3345764771,
          3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616,
          659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779,
          1955562222, 2024104815, 2227730452, 2361852424, 2428436474,
          2756734187, 3204031479, 3329325298,
        ]),
        y = new Uint32Array([
          1779033703, 3144134277, 1013904242, 2773480762, 1359893119,
          2600822924, 528734635, 1541459225,
        ]),
        b = new Uint32Array(64);
      let SHA256 = class SHA256 extends HashMD {
        constructor(e = 32) {
          super(64, e, 8, !1),
            (this.A = 0 | y[0]),
            (this.B = 0 | y[1]),
            (this.C = 0 | y[2]),
            (this.D = 0 | y[3]),
            (this.E = 0 | y[4]),
            (this.F = 0 | y[5]),
            (this.G = 0 | y[6]),
            (this.H = 0 | y[7]);
        }
        get() {
          let { A: e, B: l, C: c, D: d, E: m, F: g, G: y, H: b } = this;
          return [e, l, c, d, m, g, y, b];
        }
        set(e, l, c, d, m, g, y, b) {
          (this.A = 0 | e),
            (this.B = 0 | l),
            (this.C = 0 | c),
            (this.D = 0 | d),
            (this.E = 0 | m),
            (this.F = 0 | g),
            (this.G = 0 | y),
            (this.H = 0 | b);
        }
        process(e, l) {
          for (let c = 0; c < 16; c++, l += 4) b[c] = e.getUint32(l, !1);
          for (let e = 16; e < 64; e++) {
            let l = b[e - 15],
              c = b[e - 2],
              d = (0, m.np)(l, 7) ^ (0, m.np)(l, 18) ^ (l >>> 3),
              g = (0, m.np)(c, 17) ^ (0, m.np)(c, 19) ^ (c >>> 10);
            b[e] = (g + b[e - 7] + d + b[e - 16]) | 0;
          }
          let { A: c, B: d, C: y, D: C, E: P, F: I, G: B, H: N } = this;
          for (let e = 0; e < 64; e++) {
            var F, V, G, Q;
            let l = (0, m.np)(P, 6) ^ (0, m.np)(P, 11) ^ (0, m.np)(P, 25),
              $ = (N + l + (((F = P) & I) ^ (~F & B)) + g[e] + b[e]) | 0,
              Z = (0, m.np)(c, 2) ^ (0, m.np)(c, 13) ^ (0, m.np)(c, 22),
              Y = (Z + (((V = c) & (G = d)) ^ (V & (Q = y)) ^ (G & Q))) | 0;
            (N = B),
              (B = I),
              (I = P),
              (P = (C + $) | 0),
              (C = y),
              (y = d),
              (d = c),
              (c = ($ + Y) | 0);
          }
          (c = (c + this.A) | 0),
            (d = (d + this.B) | 0),
            (y = (y + this.C) | 0),
            (C = (C + this.D) | 0),
            (P = (P + this.E) | 0),
            (I = (I + this.F) | 0),
            (B = (B + this.G) | 0),
            (N = (N + this.H) | 0),
            this.set(c, d, y, C, P, I, B, N);
        }
        roundClean() {
          b.fill(0);
        }
        destroy() {
          this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
        }
      };
      let C = (0, m.hE)(() => new SHA256());
    },
    79439: function (e, l, c) {
      "use strict";
      c.d(l, {
        fr: function () {
          return Z;
        },
      });
      var d = c(69131);
      let m = BigInt(4294967296 - 1),
        g = BigInt(32),
        rotlSH = (e, l, c) => (e << c) | (l >>> (32 - c)),
        rotlSL = (e, l, c) => (l << c) | (e >>> (32 - c)),
        rotlBH = (e, l, c) => (l << (c - 32)) | (e >>> (64 - c)),
        rotlBL = (e, l, c) => (e << (c - 32)) | (l >>> (64 - c));
      var y = c(68431);
      let b = [],
        C = [],
        P = [],
        I = BigInt(0),
        B = BigInt(1),
        N = BigInt(2),
        F = BigInt(7),
        V = BigInt(256),
        G = BigInt(113);
      for (let e = 0, l = B, c = 1, d = 0; e < 24; e++) {
        ([c, d] = [d, (2 * c + 3 * d) % 5]),
          b.push(2 * (5 * d + c)),
          C.push((((e + 1) * (e + 2)) / 2) % 64);
        let m = I;
        for (let e = 0; e < 7; e++)
          (l = ((l << B) ^ ((l >> F) * G)) % V) & N &&
            (m ^= B << ((B << BigInt(e)) - B));
        P.push(m);
      }
      let [Q, $] = (function (e, l = !1) {
          let c = new Uint32Array(e.length),
            d = new Uint32Array(e.length);
          for (let y = 0; y < e.length; y++) {
            let { h: b, l: C } = (function (e, l = !1) {
              return l
                ? { h: Number(e & m), l: Number((e >> g) & m) }
                : { h: 0 | Number((e >> g) & m), l: 0 | Number(e & m) };
            })(e[y], l);
            [c[y], d[y]] = [b, C];
          }
          return [c, d];
        })(P, !0),
        rotlH = (e, l, c) => (c > 32 ? rotlBH(e, l, c) : rotlSH(e, l, c)),
        rotlL = (e, l, c) => (c > 32 ? rotlBL(e, l, c) : rotlSL(e, l, c));
      let Keccak = class Keccak extends y.kb {
        constructor(e, l, c, m = !1, g = 24) {
          if (
            (super(),
            (this.pos = 0),
            (this.posOut = 0),
            (this.finished = !1),
            (this.destroyed = !1),
            (this.enableXOF = !1),
            (this.blockLen = e),
            (this.suffix = l),
            (this.outputLen = c),
            (this.enableXOF = m),
            (this.rounds = g),
            (0, d.k8)(c),
            0 >= this.blockLen || this.blockLen >= 200)
          )
            throw Error("Sha3 supports only keccak-f1600 function");
          (this.state = new Uint8Array(200)),
            (this.state32 = (0, y.Jq)(this.state));
        }
        keccak() {
          y.iA || (0, y.l1)(this.state32),
            (function (e, l = 24) {
              let c = new Uint32Array(10);
              for (let d = 24 - l; d < 24; d++) {
                for (let l = 0; l < 10; l++)
                  c[l] = e[l] ^ e[l + 10] ^ e[l + 20] ^ e[l + 30] ^ e[l + 40];
                for (let l = 0; l < 10; l += 2) {
                  let d = (l + 8) % 10,
                    m = (l + 2) % 10,
                    g = c[m],
                    y = c[m + 1],
                    b = rotlH(g, y, 1) ^ c[d],
                    C = rotlL(g, y, 1) ^ c[d + 1];
                  for (let c = 0; c < 50; c += 10)
                    (e[l + c] ^= b), (e[l + c + 1] ^= C);
                }
                let l = e[2],
                  m = e[3];
                for (let c = 0; c < 24; c++) {
                  let d = C[c],
                    g = rotlH(l, m, d),
                    y = rotlL(l, m, d),
                    P = b[c];
                  (l = e[P]), (m = e[P + 1]), (e[P] = g), (e[P + 1] = y);
                }
                for (let l = 0; l < 50; l += 10) {
                  for (let d = 0; d < 10; d++) c[d] = e[l + d];
                  for (let d = 0; d < 10; d++)
                    e[l + d] ^= ~c[(d + 2) % 10] & c[(d + 4) % 10];
                }
                (e[0] ^= Q[d]), (e[1] ^= $[d]);
              }
              c.fill(0);
            })(this.state32, this.rounds),
            y.iA || (0, y.l1)(this.state32),
            (this.posOut = 0),
            (this.pos = 0);
        }
        update(e) {
          (0, d.$h)(this);
          let { blockLen: l, state: c } = this;
          e = (0, y.O0)(e);
          let m = e.length;
          for (let d = 0; d < m; ) {
            let g = Math.min(l - this.pos, m - d);
            for (let l = 0; l < g; l++) c[this.pos++] ^= e[d++];
            this.pos === l && this.keccak();
          }
          return this;
        }
        finish() {
          if (this.finished) return;
          this.finished = !0;
          let { state: e, suffix: l, pos: c, blockLen: d } = this;
          (e[c] ^= l),
            (128 & l) != 0 && c === d - 1 && this.keccak(),
            (e[d - 1] ^= 128),
            this.keccak();
        }
        writeInto(e) {
          (0, d.$h)(this, !1), (0, d.gk)(e), this.finish();
          let l = this.state,
            { blockLen: c } = this;
          for (let d = 0, m = e.length; d < m; ) {
            this.posOut >= c && this.keccak();
            let g = Math.min(c - this.posOut, m - d);
            e.set(l.subarray(this.posOut, this.posOut + g), d),
              (this.posOut += g),
              (d += g);
          }
          return e;
        }
        xofInto(e) {
          if (!this.enableXOF)
            throw Error("XOF is not possible for this instance");
          return this.writeInto(e);
        }
        xof(e) {
          return (0, d.k8)(e), this.xofInto(new Uint8Array(e));
        }
        digestInto(e) {
          if (((0, d.eB)(e, this), this.finished))
            throw Error("digest() was already called");
          return this.writeInto(e), this.destroy(), e;
        }
        digest() {
          return this.digestInto(new Uint8Array(this.outputLen));
        }
        destroy() {
          (this.destroyed = !0), this.state.fill(0);
        }
        _cloneInto(e) {
          let {
            blockLen: l,
            suffix: c,
            outputLen: d,
            rounds: m,
            enableXOF: g,
          } = this;
          return (
            e || (e = new Keccak(l, c, d, g, m)),
            e.state32.set(this.state32),
            (e.pos = this.pos),
            (e.posOut = this.posOut),
            (e.finished = this.finished),
            (e.rounds = m),
            (e.suffix = c),
            (e.outputLen = d),
            (e.enableXOF = g),
            (e.destroyed = this.destroyed),
            e
          );
        }
      };
      let Z = (0, y.hE)(() => new Keccak(136, 1, 32));
    },
    68431: function (e, l, c) {
      "use strict";
      c.d(l, {
        kb: function () {
          return Hash;
        },
        l1: function () {
          return byteSwap32;
        },
        eV: function () {
          return concatBytes;
        },
        GL: function () {
          return createView;
        },
        iA: function () {
          return g;
        },
        O6: function () {
          return randomBytes;
        },
        np: function () {
          return rotr;
        },
        O0: function () {
          return toBytes;
        },
        Jq: function () {
          return u32;
        },
        hE: function () {
          return wrapConstructor;
        },
      });
      let d =
        "object" == typeof globalThis && "crypto" in globalThis
          ? globalThis.crypto
          : void 0;
      var m = c(69131);
      function u32(e) {
        return new Uint32Array(
          e.buffer,
          e.byteOffset,
          Math.floor(e.byteLength / 4)
        );
      }
      function createView(e) {
        return new DataView(e.buffer, e.byteOffset, e.byteLength);
      }
      function rotr(e, l) {
        return (e << (32 - l)) | (e >>> l);
      }
      let g = 68 === new Uint8Array(new Uint32Array([287454020]).buffer)[0];
      function byteSwap32(e) {
        for (let c = 0; c < e.length; c++) {
          var l;
          e[c] =
            (((l = e[c]) << 24) & 4278190080) |
            ((l << 8) & 16711680) |
            ((l >>> 8) & 65280) |
            ((l >>> 24) & 255);
        }
      }
      function toBytes(e) {
        return (
          "string" == typeof e &&
            (e = (function (e) {
              if ("string" != typeof e)
                throw Error("utf8ToBytes expected string, got " + typeof e);
              return new Uint8Array(new TextEncoder().encode(e));
            })(e)),
          (0, m.gk)(e),
          e
        );
      }
      function concatBytes(...e) {
        let l = 0;
        for (let c = 0; c < e.length; c++) {
          let d = e[c];
          (0, m.gk)(d), (l += d.length);
        }
        let c = new Uint8Array(l);
        for (let l = 0, d = 0; l < e.length; l++) {
          let m = e[l];
          c.set(m, d), (d += m.length);
        }
        return c;
      }
      "function" == typeof Uint8Array.from([]).toHex && Uint8Array.fromHex;
      let Hash = class Hash {
        clone() {
          return this._cloneInto();
        }
      };
      function wrapConstructor(e) {
        let hashC = (l) => e().update(toBytes(l)).digest(),
          l = e();
        return (
          (hashC.outputLen = l.outputLen),
          (hashC.blockLen = l.blockLen),
          (hashC.create = () => e()),
          hashC
        );
      }
      function randomBytes(e = 32) {
        if (d && "function" == typeof d.getRandomValues)
          return d.getRandomValues(new Uint8Array(e));
        if (d && "function" == typeof d.randomBytes)
          return Uint8Array.from(d.randomBytes(e));
        throw Error("crypto.getRandomValues must be defined");
      }
    },
    92623: function (e, l, c) {
      "use strict";
      c.d(l, {
        w: function () {
          return baseTheme;
        },
      });
      var d =
          '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
        m = {
          rounded: `SFRounded, ui-rounded, "SF Pro Rounded", ${d}`,
          system: d,
        },
        g = {
          large: {
            actionButton: "9999px",
            connectButton: "12px",
            modal: "24px",
            modalMobile: "28px",
          },
          medium: {
            actionButton: "10px",
            connectButton: "8px",
            modal: "16px",
            modalMobile: "18px",
          },
          none: {
            actionButton: "0px",
            connectButton: "0px",
            modal: "0px",
            modalMobile: "0px",
          },
          small: {
            actionButton: "4px",
            connectButton: "4px",
            modal: "8px",
            modalMobile: "8px",
          },
        },
        y = {
          large: { modalOverlay: "blur(20px)" },
          none: { modalOverlay: "blur(0px)" },
          small: { modalOverlay: "blur(4px)" },
        },
        baseTheme = ({
          borderRadius: e = "large",
          fontStack: l = "rounded",
          overlayBlur: c = "none",
        }) => ({
          blurs: { modalOverlay: y[c].modalOverlay },
          fonts: { body: m[l] },
          radii: {
            actionButton: g[e].actionButton,
            connectButton: g[e].connectButton,
            menuButton: g[e].connectButton,
            modal: g[e].modal,
            modalMobile: g[e].modalMobile,
          },
        });
    },
    66737: function (e, l, c) {
      "use strict";
      c.d(l, {
        I: function () {
          return d;
        },
      });
      var d = `{
  "connect_wallet": {
    "label": "Connect Wallet",
    "wrong_network": {
      "label": "Wrong network"
    }
  },

  "intro": {
    "title": "What is a Wallet?",
    "description": "A wallet is used to send, receive, store, and display digital assets. It's also a new way to log in, without needing to create new accounts and passwords on every website.",
    "digital_asset": {
      "title": "A Home for your Digital Assets",
      "description": "Wallets are used to send, receive, store, and display digital assets like Ethereum and NFTs."
    },
    "login": {
      "title": "A New Way to Log In",
      "description": "Instead of creating new accounts and passwords on every website, just connect your wallet."
    },
    "get": {
      "label": "Get a Wallet"
    },
    "learn_more": {
      "label": "Learn More"
    }
  },

  "sign_in": {
    "label": "Verify your account",
    "description": "To finish connecting, you must sign a message in your wallet to verify that you are the owner of this account.",
    "message": {
      "send": "Sign message",
      "preparing": "Preparing message...",
      "cancel": "Cancel",
      "preparing_error": "Error preparing message, please retry!"
    },
    "signature": {
      "waiting": "Waiting for signature...",
      "verifying": "Verifying signature...",
      "signing_error": "Error signing message, please retry!",
      "verifying_error": "Error verifying signature, please retry!",
      "oops_error": "Oops, something went wrong!"
    }
  },

  "connect": {
    "label": "Connect",
    "title": "Connect a Wallet",
    "new_to_ethereum": {
      "description": "New to Ethereum wallets?",
      "learn_more": {
        "label": "Learn More"
      }
    },
    "learn_more": {
      "label": "Learn more"
    },
    "recent": "Recent",
    "status": {
      "opening": "Opening %{wallet}...",
      "connecting": "Connecting",
      "connect_mobile": "Continue in %{wallet}",
      "not_installed": "%{wallet} is not installed",
      "not_available": "%{wallet} is not available",
      "confirm": "Confirm connection in the extension",
      "confirm_mobile": "Accept connection request in the wallet"
    },
    "secondary_action": {
      "get": {
        "description": "Don't have %{wallet}?",
        "label": "GET"
      },
      "install": {
        "label": "INSTALL"
      },
      "retry": {
        "label": "RETRY"
      }
    },
    "walletconnect": {
      "description": {
        "full": "Need the official WalletConnect modal?",
        "compact": "Need the WalletConnect modal?"
      },
      "open": {
        "label": "OPEN"
      }
    }
  },

  "connect_scan": {
    "title": "Scan with %{wallet}",
    "fallback_title": "Scan with your phone"
  },

  "connector_group": {
    "installed": "Installed",
    "recommended": "Recommended",
    "other": "Other",
    "popular": "Popular",
    "more": "More",
    "others": "Others"
  },

  "get": {
    "title": "Get a Wallet",
    "action": {
      "label": "GET"
    },
    "mobile": {
      "description": "Mobile Wallet"
    },
    "extension": {
      "description": "Browser Extension"
    },
    "mobile_and_extension": {
      "description": "Mobile Wallet and Extension"
    },
    "mobile_and_desktop": {
      "description": "Mobile and Desktop Wallet"
    },
    "looking_for": {
      "title": "Not what you're looking for?",
      "mobile": {
        "description": "Select a wallet on the main screen to get started with a different wallet provider."
      },
      "desktop": {
        "compact_description": "Select a wallet on the main screen to get started with a different wallet provider.",
        "wide_description": "Select a wallet on the left to get started with a different wallet provider."
      }
    }
  },

  "get_options": {
    "title": "Get started with %{wallet}",
    "short_title": "Get %{wallet}",
    "mobile": {
      "title": "%{wallet} for Mobile",
      "description": "Use the mobile wallet to explore the world of Ethereum.",
      "download": {
        "label": "Get the app"
      }
    },
    "extension": {
      "title": "%{wallet} for %{browser}",
      "description": "Access your wallet right from your favorite web browser.",
      "download": {
        "label": "Add to %{browser}"
      }
    },
    "desktop": {
      "title": "%{wallet} for %{platform}",
      "description": "Access your wallet natively from your powerful desktop.",
      "download": {
        "label": "Add to %{platform}"
      }
    }
  },

  "get_mobile": {
    "title": "Install %{wallet}",
    "description": "Scan with your phone to download on iOS or Android",
    "continue": {
      "label": "Continue"
    }
  },

  "get_instructions": {
    "mobile": {
      "connect": {
        "label": "Connect"
      },
      "learn_more": {
        "label": "Learn More"
      }
    },
    "extension": {
      "refresh": {
        "label": "Refresh"
      },
      "learn_more": {
        "label": "Learn More"
      }
    },
    "desktop": {
      "connect": {
        "label": "Connect"
      },
      "learn_more": {
        "label": "Learn More"
      }
    }
  },

  "chains": {
    "title": "Switch Networks",
    "wrong_network": "Wrong network detected, switch or disconnect to continue.",
    "confirm": "Confirm in Wallet",
    "switching_not_supported": "Your wallet does not support switching networks from %{appName}. Try switching networks from within your wallet instead.",
    "switching_not_supported_fallback": "Your wallet does not support switching networks from this app. Try switching networks from within your wallet instead.",
    "disconnect": "Disconnect",
    "connected": "Connected"
  },

  "profile": {
    "disconnect": {
      "label": "Disconnect"
    },
    "copy_address": {
      "label": "Copy Address",
      "copied": "Copied!"
    },
    "explorer": {
      "label": "View more on explorer"
    },
    "transactions": {
      "description": "%{appName} transactions will appear here...",
      "description_fallback": "Your transactions will appear here...",
      "recent": {
        "title": "Recent Transactions"
      },
      "clear": {
        "label": "Clear All"
      }
    }
  },

  "wallet_connectors": {
    "argent": {
      "qr_code": {
        "step1": {
          "description": "Put Argent on your home screen for faster access to your wallet.",
          "title": "Open the Argent app"
        },
        "step2": {
          "description": "Create a wallet and username, or import an existing wallet.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the Scan QR button"
        }
      }
    },

    "berasig": {
      "extension": {
        "step1": {
          "title": "Install the BeraSig extension",
          "description": "We recommend pinning BeraSig to your taskbar for easier access to your wallet."
        },
        "step2": {
          "title": "Create a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "best": {
      "qr_code": {
        "step1": {
          "title": "Open the Best Wallet app",
          "description": "Add Best Wallet to your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap the QR icon and scan",
          "description": "Tap the QR icon on your homescreen, scan the code and confirm the prompt to connect."
        }
      }
    },

    "bifrost": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting Bifrost Wallet on your home screen for quicker access.",
          "title": "Open the Bifrost Wallet app"
        },
        "step2": {
          "description": "Create or import a wallet using your recovery phrase.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the scan button"
        }
      }
    },

    "bitget": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting Bitget Wallet on your home screen for quicker access.",
          "title": "Open the Bitget Wallet app"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the scan button"
        }
      },

      "extension": {
        "step1": {
          "description": "We recommend pinning Bitget Wallet to your taskbar for quicker access to your wallet.",
          "title": "Install the Bitget Wallet extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "bitski": {
      "extension": {
        "step1": {
          "description": "We recommend pinning Bitski to your taskbar for quicker access to your wallet.",
          "title": "Install the Bitski extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "bitverse": {
      "qr_code": {
        "step1": {
          "title": "Open the Bitverse Wallet app",
          "description": "Add Bitverse Wallet to your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap the QR icon and scan",
          "description": "Tap the QR icon on your homescreen, scan the code and confirm the prompt to connect."
        }
      }
    },

    "bloom": {
      "desktop": {
        "step1": {
          "title": "Open the Bloom Wallet app",
          "description": "We recommend putting Bloom Wallet on your home screen for quicker access."
        },
        "step2": {
          "description": "Create or import a wallet using your recovery phrase.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you have a wallet, click on Connect to connect via Bloom. A connection prompt in the app will appear for you to confirm the connection.",
          "title": "Click on Connect"
        }
      }
    },

    "bybit": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting Bybit on your home screen for faster access to your wallet.",
          "title": "Open the Bybit app"
        },
        "step2": {
          "description": "You can easily backup your wallet using our backup feature on your phone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the scan button"
        }
      },

      "extension": {
        "step1": {
          "description": "Click at the top right of your browser and pin Bybit Wallet for easy access.",
          "title": "Install the Bybit Wallet extension"
        },
        "step2": {
          "description": "Create a new wallet or import an existing one.",
          "title": "Create or Import a wallet"
        },
        "step3": {
          "description": "Once you set up Bybit Wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "binance": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting Binance on your home screen for faster access to your wallet.",
          "title": "Open the Binance app"
        },
        "step2": {
          "description": "You can easily backup your wallet using our backup feature on your phone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the WalletConnect button"
        }
      }
    },

    "coin98": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting Coin98 Wallet on your home screen for faster access to your wallet.",
          "title": "Open the Coin98 Wallet app"
        },
        "step2": {
          "description": "You can easily backup your wallet using our backup feature on your phone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the WalletConnect button"
        }
      },

      "extension": {
        "step1": {
          "description": "Click at the top right of your browser and pin Coin98 Wallet for easy access.",
          "title": "Install the Coin98 Wallet extension"
        },
        "step2": {
          "description": "Create a new wallet or import an existing one.",
          "title": "Create or Import a wallet"
        },
        "step3": {
          "description": "Once you set up Coin98 Wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "coinbase": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting Coinbase Wallet on your home screen for quicker access.",
          "title": "Open the Coinbase Wallet app"
        },
        "step2": {
          "description": "You can easily backup your wallet using the cloud backup feature.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the scan button"
        }
      },

      "extension": {
        "step1": {
          "description": "We recommend pinning Coinbase Wallet to your taskbar for quicker access to your wallet.",
          "title": "Install the Coinbase Wallet extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "compass": {
      "extension": {
        "step1": {
          "description": "We recommend pinning Compass Wallet to your taskbar for quicker access to your wallet.",
          "title": "Install the Compass Wallet extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "core": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting Core on your home screen for faster access to your wallet.",
          "title": "Open the Core app"
        },
        "step2": {
          "description": "You can easily backup your wallet using our backup feature on your phone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the WalletConnect button"
        }
      },

      "extension": {
        "step1": {
          "description": "We recommend pinning Core to your taskbar for quicker access to your wallet.",
          "title": "Install the Core extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "fox": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting FoxWallet on your home screen for quicker access.",
          "title": "Open the FoxWallet app"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the scan button"
        }
      }
    },

    "frontier": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting Frontier Wallet on your home screen for quicker access.",
          "title": "Open the Frontier Wallet app"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the scan button"
        }
      },

      "extension": {
        "step1": {
          "description": "We recommend pinning Frontier Wallet to your taskbar for quicker access to your wallet.",
          "title": "Install the Frontier Wallet extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "im_token": {
      "qr_code": {
        "step1": {
          "title": "Open the imToken app",
          "description": "Put imToken app on your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap Scanner Icon in top right corner",
          "description": "Choose New Connection, then scan the QR code and confirm the prompt to connect."
        }
      }
    },

    "iopay": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting ioPay on your home screen for faster access to your wallet.",
          "title": "Open the ioPay app"
        },
        "step2": {
          "description": "You can easily backup your wallet using our backup feature on your phone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the WalletConnect button"
        }
      }
    },

    "kaikas": {
      "extension": {
        "step1": {
          "description": "We recommend pinning Kaikas to your taskbar for quicker access to your wallet.",
          "title": "Install the Kaikas extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      },
      "qr_code": {
        "step1": {
          "title": "Open the Kaikas app",
          "description": "Put Kaikas app on your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap Scanner Icon in top right corner",
          "description": "Choose New Connection, then scan the QR code and confirm the prompt to connect."
        }
      }
    },

    "kaia": {
      "extension": {
        "step1": {
          "description": "We recommend pinning Kaia to your taskbar for quicker access to your wallet.",
          "title": "Install the Kaia extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      },
      "qr_code": {
        "step1": {
          "title": "Open the Kaia app",
          "description": "Put Kaia app on your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap Scanner Icon in top right corner",
          "description": "Choose New Connection, then scan the QR code and confirm the prompt to connect."
        }
      }
    },

    "kraken": {
      "qr_code": {
        "step1": {
          "title": "Open the Kraken Wallet app",
          "description": "Add Kraken Wallet to your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap the QR icon and scan",
          "description": "Tap the QR icon on your homescreen, scan the code and confirm the prompt to connect."
        }
      }
    },

    "kresus": {
      "qr_code": {
        "step1": {
          "title": "Open the Kresus Wallet app",
          "description": "Add Kresus Wallet to your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap the QR icon and scan",
          "description": "Tap the QR icon on your homescreen, scan the code and confirm the prompt to connect."
        }
      }
    },

    "magicEden": {
      "extension": {
        "step1": {
          "title": "Install the Magic Eden extension",
          "description": "We recommend pinning Magic Eden to your taskbar for easier access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret recovery phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "metamask": {
      "qr_code": {
        "step1": {
          "title": "Open the MetaMask app",
          "description": "We recommend putting MetaMask on your home screen for quicker access."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Tap the scan button",
          "description": "After you scan, a connection prompt will appear for you to connect your wallet."
        }
      },

      "extension": {
        "step1": {
          "title": "Install the MetaMask extension",
          "description": "We recommend pinning MetaMask to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "nestwallet": {
      "extension": {
        "step1": {
          "title": "Install the NestWallet extension",
          "description": "We recommend pinning NestWallet to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "okx": {
      "qr_code": {
        "step1": {
          "title": "Open the OKX Wallet app",
          "description": "We recommend putting OKX Wallet on your home screen for quicker access."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Tap the scan button",
          "description": "After you scan, a connection prompt will appear for you to connect your wallet."
        }
      },

      "extension": {
        "step1": {
          "title": "Install the OKX Wallet extension",
          "description": "We recommend pinning OKX Wallet to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "omni": {
      "qr_code": {
        "step1": {
          "title": "Open the Omni app",
          "description": "Add Omni to your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap the QR icon and scan",
          "description": "Tap the QR icon on your home screen, scan the code and confirm the prompt to connect."
        }
      }
    },

    "1inch": {
      "qr_code": {
        "step1": {
          "description": "Put 1inch Wallet on your home screen for faster access to your wallet.",
          "title": "Open the 1inch Wallet app"
        },
        "step2": {
          "description": "Create a wallet and username, or import an existing wallet.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the Scan QR button"
        }
      }
    },

    "token_pocket": {
      "qr_code": {
        "step1": {
          "title": "Open the TokenPocket app",
          "description": "We recommend putting TokenPocket on your home screen for quicker access."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Tap the scan button",
          "description": "After you scan, a connection prompt will appear for you to connect your wallet."
        }
      },

      "extension": {
        "step1": {
          "title": "Install the TokenPocket extension",
          "description": "We recommend pinning TokenPocket to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "trust": {
      "qr_code": {
        "step1": {
          "title": "Open the Trust Wallet app",
          "description": "Put Trust Wallet on your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap WalletConnect in Settings",
          "description": "Choose New Connection, then scan the QR code and confirm the prompt to connect."
        }
      },

      "extension": {
        "step1": {
          "title": "Install the Trust Wallet extension",
          "description": "Click at the top right of your browser and pin Trust Wallet for easy access."
        },
        "step2": {
          "title": "Create or Import a wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up Trust Wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "uniswap": {
      "qr_code": {
        "step1": {
          "title": "Open the Uniswap app",
          "description": "Add Uniswap Wallet to your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap the QR icon and scan",
          "description": "Tap the QR icon on your homescreen, scan the code and confirm the prompt to connect."
        }
      }
    },

    "zerion": {
      "qr_code": {
        "step1": {
          "title": "Open the Zerion app",
          "description": "We recommend putting Zerion on your home screen for quicker access."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Tap the scan button",
          "description": "After you scan, a connection prompt will appear for you to connect your wallet."
        }
      },

      "extension": {
        "step1": {
          "title": "Install the Zerion extension",
          "description": "We recommend pinning Zerion to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "rainbow": {
      "qr_code": {
        "step1": {
          "title": "Open the Rainbow app",
          "description": "We recommend putting Rainbow on your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "You can easily backup your wallet using our backup feature on your phone."
        },
        "step3": {
          "title": "Tap the scan button",
          "description": "After you scan, a connection prompt will appear for you to connect your wallet."
        }
      }
    },

    "enkrypt": {
      "extension": {
        "step1": {
          "description": "We recommend pinning Enkrypt Wallet to your taskbar for quicker access to your wallet.",
          "title": "Install the Enkrypt Wallet extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "frame": {
      "extension": {
        "step1": {
          "description": "We recommend pinning Frame to your taskbar for quicker access to your wallet.",
          "title": "Install Frame & the companion extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "one_key": {
      "extension": {
        "step1": {
          "title": "Install the OneKey Wallet extension",
          "description": "We recommend pinning OneKey Wallet to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "paraswap": {
      "qr_code": {
        "step1": {
          "title": "Open the ParaSwap app",
          "description": "Add ParaSwap Wallet to your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap the QR icon and scan",
          "description": "Tap the QR icon on your homescreen, scan the code and confirm the prompt to connect."
        }
      }
    },

    "phantom": {
      "extension": {
        "step1": {
          "title": "Install the Phantom extension",
          "description": "We recommend pinning Phantom to your taskbar for easier access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret recovery phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "rabby": {
      "extension": {
        "step1": {
          "title": "Install the Rabby extension",
          "description": "We recommend pinning Rabby to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "ronin": {
      "qr_code": {
        "step1": {
          "description": "We recommend putting Ronin Wallet on your home screen for quicker access.",
          "title": "Open the Ronin Wallet app"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "After you scan, a connection prompt will appear for you to connect your wallet.",
          "title": "Tap the scan button"
        }
      },

      "extension": {
        "step1": {
          "description": "We recommend pinning Ronin Wallet to your taskbar for quicker access to your wallet.",
          "title": "Install the Ronin Wallet extension"
        },
        "step2": {
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone.",
          "title": "Create or Import a Wallet"
        },
        "step3": {
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension.",
          "title": "Refresh your browser"
        }
      }
    },

    "ramper": {
      "extension": {
        "step1": {
          "title": "Install the Ramper extension",
          "description": "We recommend pinning Ramper to your taskbar for easier access to your wallet."
        },
        "step2": {
          "title": "Create a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "safeheron": {
      "extension": {
        "step1": {
          "title": "Install the Core extension",
          "description": "We recommend pinning Safeheron to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "taho": {
      "extension": {
        "step1": {
          "title": "Install the Taho extension",
          "description": "We recommend pinning Taho to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "wigwam": {
      "extension": {
        "step1": {
          "title": "Install the Wigwam extension",
          "description": "We recommend pinning Wigwam to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "talisman": {
      "extension": {
        "step1": {
          "title": "Install the Talisman extension",
          "description": "We recommend pinning Talisman to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import an Ethereum Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your recovery phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "xdefi": {
      "extension": {
        "step1": {
          "title": "Install the XDEFI Wallet extension",
          "description": "We recommend pinning XDEFI Wallet to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "zeal": {
      "qr_code": {
        "step1": {
          "title": "Open the Zeal app",
          "description": "Add Zeal Wallet to your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap the QR icon and scan",
          "description": "Tap the QR icon on your homescreen, scan the code and confirm the prompt to connect."
        }
      },
      "extension": {
        "step1": {
          "title": "Install the Zeal extension",
          "description": "We recommend pinning Zeal to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "safepal": {
      "extension": {
        "step1": {
          "title": "Install the SafePal Wallet extension",
          "description": "Click at the top right of your browser and pin SafePal Wallet for easy access."
        },
        "step2": {
          "title": "Create or Import a wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up SafePal Wallet, click below to refresh the browser and load up the extension."
        }
      },
      "qr_code": {
        "step1": {
          "title": "Open the SafePal Wallet app",
          "description": "Put SafePal Wallet on your home screen for faster access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap WalletConnect in Settings",
          "description": "Choose New Connection, then scan the QR code and confirm the prompt to connect."
        }
      }
    },

    "desig": {
      "extension": {
        "step1": {
          "title": "Install the Desig extension",
          "description": "We recommend pinning Desig to your taskbar for easier access to your wallet."
        },
        "step2": {
          "title": "Create a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      }
    },

    "subwallet": {
      "extension": {
        "step1": {
          "title": "Install the SubWallet extension",
          "description": "We recommend pinning SubWallet to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your recovery phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      },
      "qr_code": {
        "step1": {
          "title": "Open the SubWallet app",
          "description": "We recommend putting SubWallet on your home screen for quicker access."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Tap the scan button",
          "description": "After you scan, a connection prompt will appear for you to connect your wallet."
        }
      }
    },

    "clv": {
      "extension": {
        "step1": {
          "title": "Install the CLV Wallet extension",
          "description": "We recommend pinning CLV Wallet to your taskbar for quicker access to your wallet."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Refresh your browser",
          "description": "Once you set up your wallet, click below to refresh the browser and load up the extension."
        }
      },
      "qr_code": {
        "step1": {
          "title": "Open the CLV Wallet app",
          "description": "We recommend putting CLV Wallet on your home screen for quicker access."
        },
        "step2": {
          "title": "Create or Import a Wallet",
          "description": "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone."
        },
        "step3": {
          "title": "Tap the scan button",
          "description": "After you scan, a connection prompt will appear for you to connect your wallet."
        }
      }
    },

    "okto": {
      "qr_code": {
        "step1": {
          "title": "Open the Okto app",
          "description": "Add Okto to your home screen for quick access"
        },
        "step2": {
          "title": "Create an MPC Wallet",
          "description": "Create an account and generate a wallet"
        },
        "step3": {
          "title": "Tap WalletConnect in Settings",
          "description": "Tap the Scan QR icon at the top right and confirm the prompt to connect."
        }
      }
    },

    "ledger": {
      "desktop": {
        "step1": {
          "title": "Open the Ledger Live app",
          "description": "We recommend putting Ledger Live on your home screen for quicker access."
        },
        "step2": {
          "title": "Set up your Ledger",
          "description": "Set up a new Ledger or connect to an existing one."
        },
        "step3": {
          "title": "Connect",
          "description": "A connection prompt will appear for you to connect your wallet."
        }
      },
      "qr_code": {
        "step1": {
          "title": "Open the Ledger Live app",
          "description": "We recommend putting Ledger Live on your home screen for quicker access."
        },
        "step2": {
          "title": "Set up your Ledger",
          "description": "You can either sync with the desktop app or connect your Ledger."
        },
        "step3": {
          "title": "Scan the code",
          "description": "Tap WalletConnect then Switch to Scanner. After you scan, a connection prompt will appear for you to connect your wallet."
        }
      }
    },

    "valora": {
      "qr_code": {
        "step1": {
          "title": "Open the Valora app",
          "description": "We recommend putting Valora on your home screen for quicker access."
        },
        "step2": {
          "title": "Create or import a wallet",
          "description": "Create a new wallet or import an existing one."
        },
        "step3": {
          "title": "Tap the scan button",
          "description": "After you scan, a connection prompt will appear for you to connect your wallet."
        }
      }
    }
  }
}
`;
    },
    52690: function (e, l, c) {
      "use strict";
      let d, m, g, y, b, C, P, I, B, N, F, V, G, Q, $, Z;
      c.d(l, {
        NL: function () {
          return ConnectButton;
        },
        pj: function () {
          return RainbowKitProvider;
        },
        vX: function () {
          return getDefaultConfig;
        },
        We: function () {
          return useConnectModal;
        },
      });
      var Y,
        et,
        en,
        er,
        ei,
        eo,
        ea,
        es = c(92623),
        el = {
          blue: { accentColor: "#0E76FD", accentColorForeground: "#FFF" },
          green: { accentColor: "#1DB847", accentColorForeground: "#FFF" },
          orange: { accentColor: "#FF801F", accentColorForeground: "#FFF" },
          pink: { accentColor: "#FF5CA0", accentColorForeground: "#FFF" },
          purple: { accentColor: "#5F5AFA", accentColorForeground: "#FFF" },
          red: { accentColor: "#FA423C", accentColorForeground: "#FFF" },
        },
        ec = el.blue,
        lightTheme = ({
          accentColor: e = ec.accentColor,
          accentColorForeground: l = ec.accentColorForeground,
          ...c
        } = {}) => ({
          ...(0, es.w)(c),
          colors: {
            accentColor: e,
            accentColorForeground: l,
            actionButtonBorder: "rgba(0, 0, 0, 0.04)",
            actionButtonBorderMobile: "rgba(0, 0, 0, 0.06)",
            actionButtonSecondaryBackground: "rgba(0, 0, 0, 0.06)",
            closeButton: "rgba(60, 66, 66, 0.8)",
            closeButtonBackground: "rgba(0, 0, 0, 0.06)",
            connectButtonBackground: "#FFF",
            connectButtonBackgroundError: "#FF494A",
            connectButtonInnerBackground:
              "linear-gradient(0deg, rgba(0, 0, 0, 0.03), rgba(0, 0, 0, 0.06))",
            connectButtonText: "#25292E",
            connectButtonTextError: "#FFF",
            connectionIndicator: "#30E000",
            downloadBottomCardBackground:
              "linear-gradient(126deg, rgba(255, 255, 255, 0) 9.49%, rgba(171, 171, 171, 0.04) 71.04%), #FFFFFF",
            downloadTopCardBackground:
              "linear-gradient(126deg, rgba(171, 171, 171, 0.2) 9.49%, rgba(255, 255, 255, 0) 71.04%), #FFFFFF",
            error: "#FF494A",
            generalBorder: "rgba(0, 0, 0, 0.06)",
            generalBorderDim: "rgba(0, 0, 0, 0.03)",
            menuItemBackground: "rgba(60, 66, 66, 0.1)",
            modalBackdrop: "rgba(0, 0, 0, 0.3)",
            modalBackground: "#FFF",
            modalBorder: "transparent",
            modalText: "#25292E",
            modalTextDim: "rgba(60, 66, 66, 0.3)",
            modalTextSecondary: "rgba(60, 66, 66, 0.6)",
            profileAction: "#FFF",
            profileActionHover: "rgba(255, 255, 255, 0.5)",
            profileForeground: "rgba(60, 66, 66, 0.06)",
            selectedOptionBorder: "rgba(60, 66, 66, 0.1)",
            standby: "#FFD641",
          },
          shadows: {
            connectButton: "0px 4px 12px rgba(0, 0, 0, 0.1)",
            dialog: "0px 8px 32px rgba(0, 0, 0, 0.32)",
            profileDetailsAction: "0px 2px 6px rgba(37, 41, 46, 0.04)",
            selectedOption: "0px 2px 6px rgba(0, 0, 0, 0.24)",
            selectedWallet: "0px 2px 6px rgba(0, 0, 0, 0.12)",
            walletLogo: "0px 2px 16px rgba(0, 0, 0, 0.16)",
          },
        });
      lightTheme.accentColors = el;
      var eu = c(66737),
        ed = c(50959),
        addRecipe = function (e, l) {
          return (
            Object.defineProperty(e, "__recipe__", { value: l, writable: !1 }),
            e
          );
        };
      function createNormalizeValueFn(e) {
        var { conditions: l } = e;
        if (!l) throw Error("Styles have no conditions");
        return addRecipe(
          function (e) {
            if (
              "string" == typeof e ||
              "number" == typeof e ||
              "boolean" == typeof e
            ) {
              if (!l.defaultCondition) throw Error("No default condition");
              return { [l.defaultCondition]: e };
            }
            if (Array.isArray(e)) {
              if (!("responsiveArray" in l))
                throw Error("Responsive arrays are not supported");
              var c = {};
              for (var d in l.responsiveArray)
                null != e[d] && (c[l.responsiveArray[d]] = e[d]);
              return c;
            }
            return e;
          },
          {
            importPath: "@vanilla-extract/sprinkles/createUtils",
            importName: "createNormalizeValueFn",
            args: [{ conditions: e.conditions }],
          }
        );
      }
      function ownKeys(e, l) {
        var c = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var d = Object.getOwnPropertySymbols(e);
          l &&
            (d = d.filter(function (l) {
              return Object.getOwnPropertyDescriptor(e, l).enumerable;
            })),
            c.push.apply(c, d);
        }
        return c;
      }
      function _objectSpread2(e) {
        for (var l = 1; l < arguments.length; l++) {
          var c = null != arguments[l] ? arguments[l] : {};
          l % 2
            ? ownKeys(Object(c), !0).forEach(function (l) {
                !(function (e, l, c) {
                  var d;
                  (l =
                    "symbol" ==
                    typeof (d = (function (e, l) {
                      if ("object" != typeof e || !e) return e;
                      var c = e[Symbol.toPrimitive];
                      if (void 0 !== c) {
                        var d = c.call(e, l || "default");
                        if ("object" != typeof d) return d;
                        throw TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return ("string" === l ? String : Number)(e);
                    })(l, "string"))
                      ? d
                      : String(d)) in e
                    ? Object.defineProperty(e, l, {
                        value: c,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                      })
                    : (e[l] = c);
                })(e, l, c[l]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(c))
            : ownKeys(Object(c)).forEach(function (l) {
                Object.defineProperty(
                  e,
                  l,
                  Object.getOwnPropertyDescriptor(c, l)
                );
              });
        }
        return e;
      }
      var createSprinkles_74286718_esm_createSprinkles = (e) =>
          function () {
            for (var l = arguments.length, c = Array(l), d = 0; d < l; d++)
              c[d] = arguments[d];
            var m = Object.assign({}, ...c.map((e) => e.styles)),
              g = Object.keys(m),
              y = g.filter((e) => "mappings" in m[e]);
            return Object.assign(
              (l) => {
                var c = [],
                  d = {},
                  g = _objectSpread2({}, l),
                  b = !1;
                for (var C of y) {
                  var P = l[C];
                  if (null != P)
                    for (var I of ((b = !0), m[C].mappings))
                      (d[I] = P), null == g[I] && delete g[I];
                }
                var B = b ? _objectSpread2(_objectSpread2({}, d), g) : l;
                for (var N in B)
                  if (
                    (function () {
                      var e = B[N],
                        l = m[N];
                      try {
                        if (l.mappings) return 1;
                        if ("string" == typeof e || "number" == typeof e)
                          c.push(l.values[e].defaultClass);
                        else if (Array.isArray(e))
                          for (var d = 0; d < e.length; d++) {
                            var g = e[d];
                            if (null != g) {
                              var y = l.responsiveArray[d];
                              c.push(l.values[g].conditions[y]);
                            }
                          }
                        else
                          for (var b in e) {
                            var C = e[b];
                            null != C && c.push(l.values[C].conditions[b]);
                          }
                      } catch (e) {
                        throw e;
                      }
                    })()
                  )
                    continue;
                return e(c.join(" "));
              },
              { properties: new Set(g) }
            );
          },
        composeStyles = (e) => e,
        ep = c(42561),
        eh = c(4814),
        ef = c(16396),
        em = c(3644),
        eg = c(83749),
        ey = c(51055),
        eb = c(99044),
        ev = c(32223),
        ew = c(43778);
      function getUnit(e) {
        return "number" == typeof e ? e : "wei" === e ? 0 : Math.abs(ew.Bd[e]);
      }
      var ex = c(40906);
      async function getBalance_getBalance(e, l) {
        let {
          address: c,
          blockNumber: d,
          blockTag: m,
          chainId: g,
          token: y,
          unit: b = "ether",
        } = l;
        if (y)
          try {
            return await getTokenBalance(e, {
              balanceAddress: c,
              chainId: g,
              symbolType: "string",
              tokenAddress: y,
            });
          } catch (l) {
            if ("ContractFunctionExecutionError" === l.name) {
              let l = await getTokenBalance(e, {
                  balanceAddress: c,
                  chainId: g,
                  symbolType: "bytes32",
                  tokenAddress: y,
                }),
                d = (0, em.rR)((0, eg.f)(l.symbol, { dir: "right" }));
              return { ...l, symbol: d };
            }
            throw l;
          }
        let C = e.getClient({ chainId: g }),
          P = (0, ev.s)(C, eb.s, "getBalance"),
          I = await P(
            d ? { address: c, blockNumber: d } : { address: c, blockTag: m }
          ),
          B = e.chains.find((e) => e.id === g) ?? C.chain;
        return {
          decimals: B.nativeCurrency.decimals,
          formatted: (0, ey.b)(I, getUnit(b)),
          symbol: B.nativeCurrency.symbol,
          value: I,
        };
      }
      async function getTokenBalance(e, l) {
        let {
            balanceAddress: c,
            chainId: d,
            symbolType: m,
            tokenAddress: g,
            unit: y,
          } = l,
          b = {
            abi: [
              {
                type: "function",
                name: "balanceOf",
                stateMutability: "view",
                inputs: [{ type: "address" }],
                outputs: [{ type: "uint256" }],
              },
              {
                type: "function",
                name: "decimals",
                stateMutability: "view",
                inputs: [],
                outputs: [{ type: "uint8" }],
              },
              {
                type: "function",
                name: "symbol",
                stateMutability: "view",
                inputs: [],
                outputs: [{ type: m }],
              },
            ],
            address: g,
          },
          [C, P, I] = await (0, ex.J)(e, {
            allowFailure: !1,
            contracts: [
              { ...b, functionName: "balanceOf", args: [c], chainId: d },
              { ...b, functionName: "decimals", chainId: d },
              { ...b, functionName: "symbol", chainId: d },
            ],
          }),
          B = (0, ey.b)(C ?? "0", getUnit(y ?? P));
        return { decimals: P, formatted: B, symbol: I, value: C };
      }
      var e_ = c(35116),
        eC = c(39460),
        eE = c(87360);
      function useBalance(e = {}) {
        let { address: l, query: c = {} } = e,
          d = (0, ef.Z)(e),
          m = (0, eE.x)({ config: d }),
          g = (function (e, l = {}) {
            return {
              async queryFn({ queryKey: l }) {
                let { address: c, scopeKey: d, ...m } = l[1];
                if (!c) throw Error("address is required");
                let g = await getBalance_getBalance(e, { ...m, address: c });
                return g ?? null;
              },
              queryKey: (function (e = {}) {
                return ["balance", (0, e_.OP)(e)];
              })(l),
            };
          })(d, { ...e, chainId: e.chainId ?? m }),
          y = !!(l && (c.enabled ?? !0));
        return (0, eC.aM)({ ...c, ...g, enabled: y });
      }
      let eA = new Map([
        [8217, "apostrophe"],
        [8260, "fraction slash"],
        [12539, "middle dot"],
      ]);
      function read_compressed_payload(e) {
        var l;
        let c;
        return (
          (l = (function (e) {
            let l = 0;
            function u16() {
              return (e[l++] << 8) | e[l++];
            }
            let c = u16(),
              d = 1,
              m = [0, 1];
            for (let e = 1; e < c; e++) m.push((d += u16()));
            let g = u16(),
              y = l;
            l += g;
            let b = 0,
              C = 0;
            function read_bit() {
              return (
                0 == b && ((C = (C << 8) | e[l++]), (b = 8)), (C >> --b) & 1
              );
            }
            let P = 2147483648 - 1,
              I = 0;
            for (let e = 0; e < 31; e++) I = (I << 1) | read_bit();
            let B = [],
              N = 0,
              F = 2147483648;
            for (;;) {
              let e = Math.floor(((I - N + 1) * d - 1) / F),
                l = 0,
                g = c;
              for (; g - l > 1; ) {
                let c = (l + g) >>> 1;
                e < m[c] ? (g = c) : (l = c);
              }
              if (0 == l) break;
              B.push(l);
              let y = N + Math.floor((F * m[l]) / d),
                b = N + Math.floor((F * m[l + 1]) / d) - 1;
              for (; ((y ^ b) & 1073741824) == 0; )
                (I = ((I << 1) & P) | read_bit()),
                  (y = (y << 1) & P),
                  (b = ((b << 1) & P) | 1);
              for (; y & ~b & 536870912; )
                (I = (1073741824 & I) | ((I << 1) & (P >>> 1)) | read_bit()),
                  (y = (y << 1) ^ 1073741824),
                  (b = ((1073741824 ^ b) << 1) | 1073741825);
              (N = y), (F = 1 + b - y);
            }
            let V = c - 4;
            return B.map((l) => {
              switch (l - V) {
                case 3:
                  return V + 65792 + ((e[y++] << 16) | (e[y++] << 8) | e[y++]);
                case 2:
                  return V + 256 + ((e[y++] << 8) | e[y++]);
                case 1:
                  return V + e[y++];
                default:
                  return l - 1;
              }
            });
          })(
            (function (e) {
              let l = [];
              [
                ..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
              ].forEach((e, c) => (l[e.charCodeAt(0)] = c));
              let c = e.length,
                d = new Uint8Array((6 * c) >> 3);
              for (let m = 0, g = 0, y = 0, b = 0; m < c; m++)
                (b = (b << 6) | l[e.charCodeAt(m)]),
                  (y += 6) >= 8 && (d[g++] = b >> (y -= 8));
              return d;
            })(e)
          )),
          (c = 0),
          () => l[c++]
        );
      }
      function read_sorted(e, l = 0) {
        let c = [];
        for (;;) {
          let d = e(),
            m = e();
          if (!m) break;
          l += d;
          for (let e = 0; e < m; e++) c.push(l + e);
          l += m + 1;
        }
        return c;
      }
      function read_sorted_arrays(e) {
        return read_array_while(() => {
          let l = read_sorted(e);
          if (l.length) return l;
        });
      }
      function read_mapped(e) {
        let l = [];
        for (;;) {
          let c = e();
          if (0 == c) break;
          l.push(
            (function (e, l) {
              let c = 1 + l(),
                d = l(),
                m = read_array_while(l);
              return read_transposed(m.length, 1 + e, l).flatMap((e, l) => {
                let [g, ...y] = e;
                return Array(m[l])
                  .fill()
                  .map((e, l) => {
                    let m = l * d;
                    return [g + l * c, y.map((e) => e + m)];
                  });
              });
            })(c, e)
          );
        }
        for (;;) {
          let c = e() - 1;
          if (c < 0) break;
          l.push(
            read_transposed(1 + e(), 1 + c, e).map((e) => [e[0], e.slice(1)])
          );
        }
        return l.flat();
      }
      function read_array_while(e) {
        let l = [];
        for (;;) {
          let c = e(l.length);
          if (!c) break;
          l.push(c);
        }
        return l;
      }
      function read_transposed(e, l, c) {
        let d = Array(e)
          .fill()
          .map(() => []);
        for (let m = 0; m < l; m++)
          (function (e, l) {
            let c = Array(e);
            for (let m = 0, g = 0; m < e; m++) {
              var d;
              c[m] = g += 1 & (d = l()) ? ~d >> 1 : d >> 1;
            }
            return c;
          })(e, c).forEach((e, l) => d[l].push(e));
        return d;
      }
      function quote_cp(e) {
        return `{${e.toString(16).toUpperCase().padStart(2, "0")}}`;
      }
      function str_from_cps(e) {
        let l = e.length;
        if (l < 4096) return String.fromCodePoint(...e);
        let c = [];
        for (let d = 0; d < l; )
          c.push(String.fromCodePoint(...e.slice(d, (d += 4096))));
        return c.join("");
      }
      function compare_arrays(e, l) {
        let c = e.length,
          d = c - l.length;
        for (let m = 0; 0 == d && m < c; m++) d = e[m] - l[m];
        return d;
      }
      function unpack_cc(e) {
        return (e >> 24) & 255;
      }
      function unpack_cp(e) {
        return 16777215 & e;
      }
      function is_hangul(e) {
        return e >= 44032 && e < 55204;
      }
      function decomposed(e) {
        d ||
          (function () {
            let e = read_compressed_payload(
              "AEUDVgHLCGMATwDUADIAdAAhADQAFAAtABQAIQAPACcADQASAAoAGAAJABIACQARAAUACwAFAAwABQAQAAMABwAEAAoABQAJAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACwANAA0AAwAKAAkABAAdAAYAZwDTAeYDMwCxCl8B8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgPi89uj00MsvBXxEPAGPCDwBnQKoEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiC+AZ4EWRJJFbEu7QDQLARtEbgECxDwAb/RyAk1AV4nD2cEQQKTAzsAGpobWgAahAGPCrysdy0OAKwAfFIcBAQFUmoA/PtZADkBIadVj2UMUgx5Il4ANQC9vAITAdQZWxDzALN9AhsZVwIcGSkCBAgXOhG7AqMZ4M7+1M0UAPDNAWsC+mcJDe8AAQA99zkEXLICyQozAo6lAobcP5JvjQLFzwKD9gU/OD8FEQCtEQL6bW+nAKUEvzjDHsuRyUvOFHcacUz5AqIFRSE2kzsBEQCuaQL5DQTlcgO6twSpTiUgCwIFCAUXBHQEqQV6swAVxUlmTmsCwjqsP/wKJQmXb793UgZBEBsnpRD3DDMBtQE7De1L2ATxBjsEyR99GRkPzZWcCKUt3QztJuMuoYBaI/UqgwXtS/Q83QtNUWgPWQtlCeM6Y4FOAyEBDSKLCt0NOQhtEPMKyWsN5RFFBzkD1UmaAKUHAQsRHTUVtSYQYqwLCTl3Bvsa9guPJq8TKXr8BdMaIQZNASka/wDPLueFsFoxXBxPXwYDCyUjxxSoUCANJUC3eEgaGwcVJakCkUNwSodRNh6TIfY8PQ1mLhNRfAf1PAUZTwuBPJ5Gq0UOEdI+jT1IIklMLAQ1fywvJ4sJzw+FDLl8cgFZCSEJsQxxEzERFzfFCDkHGS2XJCcVCCFGlWCaBPefA/MT0QMLBT8JQQcTA7UcLRMuFSkFDYEk1wLzNtUuswKPVoABFwXLDyUf3xBQR+AO6QibAmUDgyXrAC0VIQAXIpsIQ2MAX4/YUwUuywjHamwjdANnFOdhEXMHkQ5XB6ccMxW/HOFwyF4Lhggoo68JWwF1CZkBXwTjCAk1W4ygIEFnU4tYGJsgYUE/XfwCMQxlFZ9EvYd4AosPaxIbATUBcwc5DQECdxHtEWsQlQjrhgQ1tTP4OiUETyGDIBEKJwNPbM4LJyb5DPhpAaMSYgMMND137merYLYkF/0HGTLFQWAh8QuST80MnBrBGEJULhnkB78D8xrzJ+pBVwX/A6MDEzpNM+4EvQtpCIsJPwBJDqMXB9cYagpxjNABMYsBt5kDV5GDAm+PBjcHCwBnC4cFeeUAHQKnCKMABQDPA1cAOQKtB50AGQCFQQE9AycvASHlAo8DkwgxywGVLwHzKQQbwwwVAPc3bkoCw7ECgGpmogXdWAKOAkk1AU0lBAVOR1EDr3HhANsASwYT30cBFatKyxrjQwHfbysAxwD7AAU1BwVBAc0B820AtwFfCzEJorO1AU3pKQCDABVrAdcCiQDdADUAf/EBUwBNBVn5BdMCT0kBETEYK1dhAbsDHwEzAQ0AeQbLjaXJBx8EbQfTAhAbFeEC7y4HtQEDIt8TzULFAr3eVaFgAmSBAmJCW02vWzcgAqH3AmiYAmYJAp+EOBsLAmY7AmYmBG4EfwN/EwN+kjkGOXcXOYI6IyMCbB0CMjY4CgJtxwJtru+KM2dFKwFnAN4A4QBKBQeYDI0A/gvCAA21AncvAnaiPwJ5S0MCeLodXNtFrkbXAnw/AnrIAn0JAnzwBVkFIEgASH1jJAKBbQKAAAKABQJ/rklYSlsVF0rMAtEBAtDMSycDiE8Dh+ZExZEyAvKhXQMDA65LzkwtJQPPTUxNrwKLPwKK2MEbBx1DZwW3Ao43Ao5cQJeBAo7ZAo5ceFG0UzUKUtRUhQKT+wKTDADpABxVHlWvVdAGLBsplYYy4XhmRTs5ApefAu+yWCGoAFklApaPApZ8nACpWaxaCYFNADsClrUClk5cRFzRApnLAplkXMpdBxkCnJs5wjqdApwWAp+bAp64igAdDzEqDwKd8QKekgC1PWE0Ye8CntMCoG4BqQKenx8Cnk6lY8hkJyUrAievAiZ+AqD7AqBMAqLdAqHEAqYvAqXOAqf/AH0Cp/JofGixAANJahxq0QKs4wKsrgKtZwKtAgJXHQJV3AKx4dcDH05slwKyvQ0CsugXbOBtY21IXwMlzQK2XDs/bpADKUUCuF4CuUcVArkqd3A2cOECvRkCu9pwlgMyEQK+iHICAzNxAr4acyJzTwLDywLDBHOCdEs1RXTgAzynAzyaAz2/AsV8AsZHAsYQiQLIaVECyEQCyU8CyS4CZJ0C3dJ4eWF4rnklS9ADGKNnAgJh9BnzlSR7C16SXrsRAs9rAs9sL0tT0vMTnwDGrQLPcwEp6gNOEn5LBQLcJwLbigLSTwNSXANTXwEBA1WMgIk/AMsW7WBFghyC04LOg40C2scC2d6EEIRJpzwDhqUALwNkDoZxWfkAVQLfZQLeuHN3AuIv7RQB8zAnAfSbAfLShwLr8wLpcHkC6vkC6uQA+UcBuQLuiQLrnJaqlwMC7j8DheCYeXDgcaEC8wMAaQOOFpmTAvcTA5FuA5KHAveYAvnZAvhmmhyaq7s3mx4DnYMC/voBGwA5nxyfswMFjQOmagOm2QDRxQMGaqGIogUJAwxJAtQAPwMA4UEXUwER8wNrB5dnBQCTLSu3r73bAYmZFH8RBDkB+ykFIQ6dCZ8Akv0TtRQrxQL3LScApQC3BbmOkRc/xqdtQS4UJo0uAUMBgPwBtSYAdQMOBG0ALAIWDKEAAAoCPQJqA90DfgSRASBFBSF8CgAFAEQAEwA2EgJ3AQAF1QNr7wrFAgD3Cp8nv7G35QGRIUFCAekUfxE0wIkABAAbAFoCRQKEiwAGOlM6lI1tALg6jzrQAI04wTrcAKUA6ADLATqBOjs5/Dn5O3aJOls7nok6bzkYAVYBMwFsBS81XTWeNa01ZjV1NbY1xTWCNZE10jXhNZ41rTXuNf01sjXBNgI2ETXGNdU2FjYnNd417TYuNj02LjUtITY6Nj02PDbJNwgEkDxXNjg23TcgNw82yiA3iTcwCgSwPGc2JDcZN2w6jTchQtRDB0LgQwscDw8JmyhtKFFVBgDpfwDpsAD+mxQ91wLpNSMArQC9BbeOkRdLxptzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgELgEaJZkC7aMAoQCjBcGOmxdNxrsBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUHqSvAj5Gqwr7YrMUACT9AN3rlr3JG9m8w9lIAXltp/v8kfWaIaaR9OwpAES/I3ZVamDXSgB/UsOgAG6D0tq+5CIqE15FiAhV3yA2VhCQ7tj+m6xXaF53FIfGi/IAZIskMGAi2MU7MDVJNCbMzERyHZi+osdPtnFVbvq653O8rwaCy4IAf9OOok65AqJUtUriUfYsGPPVbe6jm0s9lbKlPCUKjdkHsFsEhvX4kT39ZCtAAbwQdn/h4TpO5hTByWAmr5n+Wuwhdegv6bmvX4LyOes3z2+cuHv2JFYwVMNuq2gzn8YHTjlUQd39osyWei4NKl3LAdfxlO876hh5ENp/cOvpuI9bF55guEthLLPOXjD4dktTH04P5TvZrWTM0e4+BHJxj7MLApXIFOs0sWKhNkG8iwuM5wR83my6V3wW06abhDzTXYfOr/ZpFXgXzmv4d12FFyP00/dPGbIVGV5ao8UufGzUwp/IHx6v/wDWJr9iaoCulhWwlZ7A8q/NMoD12+mBdNRgJYnThRLtMx1Bgwttn8/4Qn2CDfOSup9GVXEvA21ILgp0owHYxNOkpwLWz0G7K+WREIDjIzUzSn8I99CuJSmSpPyH0Ke6/NERYiNx+3dncSebPnOUnnWD61AhJ1n/tSLZmU5wYO5GfgzyAYJm6VL91LxZ8hL1lfximQxIDMRhIecQZBmeE5R0XlrpvwplVrJwpa8BBCdp93GPP9lyBeZ2zkRr920CR3cYbKpKHfogvm0nV7XdDz6EbjzlxADCMjSLXuXpIpyuizy39yY+I+H9rmpoIF3YwEjlH9MgGgWcCNTjHEWMqAbprn2Ox7rOHupaVE3lNyg3nt5XaZID6Y+uml5Ja+aOPu+BI+DZbiJVfaspUadakWUX6TA4dETkIqdJJHYnU4Z4yKpt5y8rVIahoMUf8A8kWtAQNCTbjp71gx3/zVdqNz1Sutkw0gFIMVm2BF4Xdv/0olw+NaDIR9Bb3DPweZA2K/cw+/b+AwyWl9ZOP67A9nexmeTNjfdzPGf9J6E6BMPKa5lJh+qNsdUz3HBUevU71eQFCqOcxiIYhacAhh/8PX0J5DdSViZ6WazDDx7cukJNpMfEkYLJ5Ao4vLoVd3d25Pg4qaVa2p2D2L3WvYPJ5Yf/A/MSxptjlgXL/KJtP2U0cRv2I09ATAiWCJYuRwiapeKFsqmi18yMMulDp3HdcIldq+7jkwsJUOHLHCzzzBw5XFvL0CAmo1ub456z7zb7shk3KPGCLZzr47oT1k/j06XNnJvG3Udv6XrP+wsqTBlZ5MaNPt9FOs/4Bt/ja/vbVhTNpBFl9Gq7MqINvGlWKOAwQzwOZy+EzSdjAqKJVV2YcskTuM94aIK+kc/AZaXiZLPREUDpkXIV947IFfj+85TrqPqLfkGcxgboMQjosf+az+odLNXdyp1mDNGsqSdK/pJ2Ca04mt/4d6s1X+lncOEYaGBBeW4pApGcjf7/XJCFbj3N3mFb+BtlIcw8ZiDKoClFX9Rf0bxCqtLpicObKJzBVVHr/6u4siH2hK75RNv7w9GfTbhJOQBYiFUZAByY4rn37tZBHT//kqKsNi3ryL9AqXJRzqiMIJMhILjoi/i8LVEsbu+Ih9bsyW16sgQqjYLO0qda6KaCPKj3DQcu6CfV5lKtjS3ZCdqLAZkOey9MR+QutJBGiz/r15GVD6rCVwJR4UUKC4GNJkfDf00OMW8aQtLSAGLXV8MIi9mbbl/qQEpxCm2L5hutFX4ekeLH4QgBWUFKs/2VVMKy46WtFE6AbwgmYm/Z0yHk5veDIrcl2HpVqb/rSE0PC9EbDzJEWqeaPhh7vF369Umq2kSiB3s5rBI6c/7N9bkRu4h2n+/h5nSwy+7n+/I+6oXQVANo2Jb5zDwtiBPf1ySCzHdT6yJShMzqSRZfnykX49CaFaxhoVF4PBhEuECJ1PrFYSpmHuyYsl14DTAV9ZxRms1XiR/kBrjhZjidOt0UNe+GSml7XNgpVw8YsUTmZXLTK+6iYnyW/wYR1W4UXwOi14xpFROHb6HcZzksgF5DbL2AFXzKNwHU2adjdAY+KCyM/cwRTBkkq/a227NI0q6DR2MkMCRu620t79bGcYUmACtqN3mk/0uNwd3JSXHqE1kzf6Yyj0W2083JNDRnIXDlgBxJ6uf58NN1f6FQiRCWB4egF8QDx74AixV8oTyw7PluIjr3/rj/WzgwPSq4xPojaF7V0xqG2u5ti2L1h6yYHv73Isrukr0kURDIEjClBsBx7kdcXUxaYMS0syT3ymLzDzslNDWQOT1Tao1YNmJHARUenhCkmV9tqCPGI5GqZaRpkiPxyjoncWjyOHYGqvbvRX+Bn1pn7EhRNXa1lqJPmoeN5VqdqIDPhEVhFsyG0d4iQEIYX0wZUbY2XbZWYlpZ/l66IrDDY0q1C1YzBDpHC4h05YqHQLqS9anyl22JQ6lEvjvdBwMHfE7z0luCXD34/rFeDa2TmSeEAykSpYO5j1G/nsgpR3qn0qaQEmLjnnLfcz+veoYqPnRqmRGwCJ6FJ3Gm/Z1/aVX5PSb03MMnjAf41ww54sD5k8FrkfBP+K0b1MrYpapWjtpZfve2HVf4ickX3LKSOhu7qI1Vd4c1kNrn2ajy1t4y93JhV4fnWCKq7OmFpcr7FjdJCXPTql0Drr14Ho3Z87+GPQ4Z/DcTiGqtvZxlRYi8cNuhXABveZIwNl/BX1huhVLaFax5OqypUrQRyb9OE3SSkPlDdy5uo5XGg2EIGEjLY1MO5cr1ibfiFWV7zspcTgkBKkwo5jPyAin04LqizZXb2tDRgwKJjGx4cVk3ngAQixwcxjYAg2Q7vmUR/hpwInMdw7OhC2qyf41vTPkudQAORS0DdLtOGQxb4fH2VYGsvJCkeWPeUwtf1/tuIhzXEThoCZzzSJqqjUtbaPI3ntHm3T5uf849hGUA0zU8ni5W+EEn3/0Y6oUhQFw9z0aGjkljBbAlFXc0y82G2wkd7VdgWa5KTgJJNjNwZMfmdnUIUn1JU5LiWX5UZEZbVlKSN76mlmjUR2ku+fucTNlO4IAAahnLjBhlvQNR9pe9swGBgq0YR7P3VCyI/seYwQ4QBzy9X+HPePgoF8WfKaJ4MBOhLCGHae6Z8xkNXwni9QAKvTNtVA56x8YJflZ/VvONRSlsSLmiSyNMnTjTaE1ko81zkzGEnVwEhjCzlwIqpxmpDAqwsEmtpdr3xpc7i/ZX3f2TzT3M0FdxIEQvO1jgmmiN+D1YpMduAzEhBtj2OBkMN/rv6p7Th4pSH6f5aH3aTvwFTl7EOSgGASI7ttyMehzpm4AVyK+bFEaFg9gnZsSUPpsbAe/0RFhrH+EXZ12Z7thf4dzN1+Sn+G8QrDA1VKaN4IFxD1rQz9Xq9Coii9S9/hPbTGjyBwFH3H1UdQuz5KsgPDEHua4/kPg2Gp/IIItsaLWBqiT9XH45MiQxSosGJ56H/0F2cjcCFd72l1665RNHURdC3lspI77esfJsl+rXXabkAy7vxDXG/XGGcKpwiKDPFfvMEgjkAHil4Za1F36RnyxxvdIAzvgfH8knukYDck07tc++DP4TdWeI7HXuq5Yl6VVFrUQtf64/dkXewlKZSHQo6YvCSpREB0GDrz+Ys2GfO8nw2SwrYwaf88AifzlPvP17bf1mI3AuccJvAjZIpBmqvharKFAebEjVKfGAwpQjWoXlm9LROsq9bCk1UeQ3CJxJqprzssS/Q04JeS1ReCCubL3J7sx86spkP4eNpp95UF+8K748icIs8vdILFklk9skQqi1So6cx3X906pvy1vz+KipTJ8fiVJxsV5MmT0XwA"
            );
            for (let [l, c] of ((d = new Map(
              read_sorted_arrays(e).flatMap((e, l) =>
                e.map((e) => [e, (l + 1) << 24])
              )
            )),
            (m = new Set(read_sorted(e))),
            (g = new Map()),
            (y = new Map()),
            read_mapped(e))) {
              if (!m.has(l) && 2 == c.length) {
                let [e, d] = c,
                  m = y.get(e);
                m || ((m = new Map()), y.set(e, m)), m.set(d, l);
              }
              g.set(l, c.reverse());
            }
          })();
        let l = [],
          c = [],
          b = !1;
        function add(e) {
          let c = d.get(e);
          c && ((b = !0), (e |= c)), l.push(e);
        }
        for (let d of e)
          for (;;) {
            if (d < 128) l.push(d);
            else if (is_hangul(d)) {
              let e = d - 44032,
                l = (e / 588) | 0,
                c = ((e % 588) / 28) | 0,
                m = e % 28;
              add(4352 + l), add(4449 + c), m > 0 && add(4519 + m);
            } else {
              let e = g.get(d);
              e ? c.push(...e) : add(d);
            }
            if (!c.length) break;
            d = c.pop();
          }
        if (b && l.length > 1) {
          let e = unpack_cc(l[0]);
          for (let c = 1; c < l.length; c++) {
            let d = unpack_cc(l[c]);
            if (0 == d || e <= d) {
              e = d;
              continue;
            }
            let m = c - 1;
            for (;;) {
              let c = l[m + 1];
              if (
                ((l[m + 1] = l[m]),
                (l[m] = c),
                !m || (e = unpack_cc(l[--m])) <= d)
              )
                break;
            }
            e = unpack_cc(l[c]);
          }
        }
        return l;
      }
      function nfc(e) {
        return (function (e) {
          let l = [],
            c = [],
            d = -1,
            m = 0;
          for (let g of e) {
            let e = unpack_cc(g),
              b = unpack_cp(g);
            if (-1 == d) 0 == e ? (d = b) : l.push(b);
            else if (m > 0 && m >= e)
              0 == e ? (l.push(d, ...c), (c.length = 0), (d = b)) : c.push(b),
                (m = e);
            else {
              let g = (function (e, l) {
                if (e >= 4352 && e < 4371 && l >= 4449 && l < 4470)
                  return 44032 + (e - 4352) * 588 + (l - 4449) * 28;
                if (
                  is_hangul(e) &&
                  l > 4519 &&
                  l < 4547 &&
                  (e - 44032) % 28 == 0
                )
                  return e + (l - 4519);
                {
                  let c = y.get(e);
                  return c && (c = c.get(l)) ? c : -1;
                }
              })(d, b);
              g >= 0
                ? (d = g)
                : 0 == m && 0 == e
                ? (l.push(d), (d = b))
                : (c.push(b), (m = e));
            }
          }
          return d >= 0 && l.push(d, ...c), l;
        })(decomposed(e));
      }
      let Array_from = (e) => Array.from(e);
      function group_has_cp(e, l) {
        return e.P.has(l) || e.Q.has(l);
      }
      let Emoji = class Emoji extends Array {
        get is_emoji() {
          return !0;
        }
      };
      function init() {
        let e, l;
        if (b) return;
        let c = read_compressed_payload(
            ""
          ),
          read_sorted_array = () => read_sorted(c),
          read_sorted_set = () => new Set(read_sorted_array()),
          set_add_many = (e, l) => l.forEach((l) => e.add(l));
        (b = new Map(read_mapped(c))),
          (C = read_sorted_set()),
          (P = read_sorted_array()),
          (I = new Set(read_sorted_array().map((e) => P[e]))),
          (P = new Set(P)),
          (B = read_sorted_set()),
          read_sorted_set();
        let d = read_sorted_arrays(c),
          m = c(),
          read_chunked = () => {
            let e = new Set();
            return (
              read_sorted_array().forEach((l) => set_add_many(e, d[l])),
              set_add_many(e, read_sorted_array()),
              e
            );
          };
        (N = read_array_while((e) => {
          let l = read_array_while(c).map((e) => e + 96);
          if (l.length) {
            let d = e >= m;
            return (
              (l[0] -= 32),
              (l = str_from_cps(l)),
              d && (l = `Restricted[${l}]`),
              { N: l, P: read_chunked(), Q: read_chunked(), M: !c(), R: d }
            );
          }
        })),
          (F = read_sorted_set()),
          (V = new Map());
        let g = read_sorted_array()
          .concat(Array_from(F))
          .sort((e, l) => e - l);
        for (let { V: e, M: l } of (g.forEach((e, l) => {
          let d = c(),
            m = (g[l] = d ? g[l - d] : { V: [], M: new Map() });
          m.V.push(e), F.has(e) || V.set(e, m);
        }),
        new Set(V.values()))) {
          let c = [];
          for (let l of e) {
            let e = N.filter((e) => group_has_cp(e, l)),
              d = c.find(({ G: l }) => e.some((e) => l.has(e)));
            d || ((d = { G: new Set(), V: [] }), c.push(d)),
              d.V.push(l),
              set_add_many(d.G, e);
          }
          let d = c.flatMap((e) => Array_from(e.G));
          for (let { G: e, V: m } of c) {
            let c = new Set(d.filter((l) => !e.has(l)));
            for (let e of m) l.set(e, c);
          }
        }
        G = new Set();
        let y = new Set(),
          add_to_union = (e) => (G.has(e) ? y.add(e) : G.add(e));
        for (let e of N) {
          for (let l of e.P) add_to_union(l);
          for (let l of e.Q) add_to_union(l);
        }
        for (let e of G) V.has(e) || y.has(e) || V.set(e, 1);
        for (let d of (set_add_many(G, decomposed(G).map(unpack_cp)),
        (Q = ((e = []),
        (l = read_sorted(c)),
        (function expand({ S: l, B: c }, d, m) {
          if (!(4 & l) || m !== d[d.length - 1])
            for (let g of (2 & l && (m = d[d.length - 1]),
            1 & l && e.push(d),
            c))
              for (let e of g.Q) expand(g, [...d, e], m);
        })(
          (function decode(e) {
            return {
              S: c(),
              B: read_array_while(() => {
                let e = read_sorted(c).map((e) => l[e]);
                if (e.length) return decode(e);
              }),
              Q: e,
            };
          })([]),
          []
        ),
        e)
          .map((e) => Emoji.from(e))
          .sort(compare_arrays)),
        ($ = new Map()),
        Q)) {
          let e = [$];
          for (let l of d) {
            let c = e.map((e) => {
              let c = e.get(l);
              return c || ((c = new Map()), e.set(l, c)), c;
            });
            65039 === l ? e.push(...c) : (e = c);
          }
          for (let l of e) l.V = d;
        }
      }
      function quoted_cp(e) {
        return (
          (should_escape(e) ? "" : `${bidi_qq(safe_str_from_cps([e]))} `) +
          quote_cp(e)
        );
      }
      function bidi_qq(e) {
        return `"${e}"\u200E`;
      }
      function safe_str_from_cps(e, l = 1 / 0, c = quote_cp) {
        var d;
        let m = [];
        (d = e[0]),
          init(),
          P.has(d) && m.push("◌"),
          e.length > l &&
            ((l >>= 1), (e = [...e.slice(0, l), 8230, ...e.slice(-l)]));
        let g = 0,
          y = e.length;
        for (let l = 0; l < y; l++) {
          let d = e[l];
          should_escape(d) &&
            (m.push(str_from_cps(e.slice(g, l))), m.push(c(d)), (g = l + 1));
        }
        return m.push(str_from_cps(e.slice(g, y))), m.join("");
      }
      function should_escape(e) {
        return init(), B.has(e);
      }
      function error_disallowed(e) {
        return Error(`disallowed character: ${quoted_cp(e)}`);
      }
      function error_group_member(e, l) {
        let c = quoted_cp(l),
          d = N.find((e) => e.P.has(l));
        return (
          d && (c = `${d.N} ${c}`), Error(`illegal mixture: ${e.N} + ${c}`)
        );
      }
      function error_placement(e) {
        return Error(`illegal placement: ${e}`);
      }
      function filter_fe0f(e) {
        return e.filter((e) => 65039 != e);
      }
      var eS = c(66195),
        ek = c(26456);
      let EnsAvatarInvalidMetadataError = class EnsAvatarInvalidMetadataError extends ek.G {
        constructor({ data: e }) {
          super(
            "Unable to extract image from metadata. The metadata may be malformed or invalid.",
            {
              metaMessages: [
                "- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.",
                "",
                `Provided data: ${JSON.stringify(e)}`,
              ],
              name: "EnsAvatarInvalidMetadataError",
            }
          );
        }
      };
      let EnsAvatarInvalidNftUriError = class EnsAvatarInvalidNftUriError extends ek.G {
        constructor({ reason: e }) {
          super(`ENS NFT avatar URI is invalid. ${e}`, {
            name: "EnsAvatarInvalidNftUriError",
          });
        }
      };
      let EnsAvatarUriResolutionError = class EnsAvatarUriResolutionError extends ek.G {
        constructor({ uri: e }) {
          super(
            `Unable to resolve ENS avatar URI "${e}". The URI may be malformed, invalid, or does not respond with a valid image.`,
            { name: "EnsAvatarUriResolutionError" }
          );
        }
      };
      let EnsAvatarUnsupportedNamespaceError = class EnsAvatarUnsupportedNamespaceError extends ek.G {
        constructor({ namespace: e }) {
          super(
            `ENS NFT avatar namespace "${e}" is not supported. Must be "erc721" or "erc1155".`,
            { name: "EnsAvatarUnsupportedNamespaceError" }
          );
        }
      };
      let eP =
          /(?<protocol>https?:\/\/[^\/]*|ipfs:\/|ipns:\/|ar:\/)?(?<root>\/)?(?<subpath>ipfs\/|ipns\/)?(?<target>[\w\-.]+)(?<subtarget>\/.*)?/,
        eM =
          /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\/(?<target>[\w\-.]+))?(?<subtarget>\/.*)?$/,
        eT = /^data:([a-zA-Z\-/+]*);base64,([^"].*)/,
        eI = /^data:([a-zA-Z\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;
      async function isImageUri(e) {
        try {
          let l = await fetch(e, { method: "HEAD" });
          if (200 === l.status) {
            let e = l.headers.get("content-type");
            return e?.startsWith("image/");
          }
          return !1;
        } catch (l) {
          if (
            ("object" == typeof l && void 0 !== l.response) ||
            !globalThis.hasOwnProperty("Image")
          )
            return !1;
          return new Promise((l) => {
            let c = new Image();
            (c.onload = () => {
              l(!0);
            }),
              (c.onerror = () => {
                l(!1);
              }),
              (c.src = e);
          });
        }
      }
      function getGateway(e, l) {
        return e ? (e.endsWith("/") ? e.slice(0, -1) : e) : l;
      }
      function resolveAvatarUri({ uri: e, gatewayUrls: l }) {
        let c = eT.test(e);
        if (c) return { uri: e, isOnChain: !0, isEncoded: c };
        let d = getGateway(l?.ipfs, "https://ipfs.io"),
          m = getGateway(l?.arweave, "https://arweave.net"),
          g = e.match(eP),
          {
            protocol: y,
            subpath: b,
            target: C,
            subtarget: P = "",
          } = g?.groups || {},
          I = "ipns:/" === y || "ipns/" === b,
          B = "ipfs:/" === y || "ipfs/" === b || eM.test(e);
        if (e.startsWith("http") && !I && !B) {
          let c = e;
          return (
            l?.arweave && (c = e.replace(/https:\/\/arweave.net/g, l?.arweave)),
            { uri: c, isOnChain: !1, isEncoded: !1 }
          );
        }
        if ((I || B) && C)
          return {
            uri: `${d}/${I ? "ipns" : "ipfs"}/${C}${P}`,
            isOnChain: !1,
            isEncoded: !1,
          };
        if ("ar:/" === y && C)
          return { uri: `${m}/${C}${P || ""}`, isOnChain: !1, isEncoded: !1 };
        let N = e.replace(eI, "");
        if (
          (N.startsWith("<svg") && (N = `data:image/svg+xml;base64,${btoa(N)}`),
          N.startsWith("data:") || N.startsWith("{"))
        )
          return { uri: N, isOnChain: !0, isEncoded: !1 };
        throw new EnsAvatarUriResolutionError({ uri: e });
      }
      function getJsonImage(e) {
        if (
          "object" != typeof e ||
          (!("image" in e) && !("image_url" in e) && !("image_data" in e))
        )
          throw new EnsAvatarInvalidMetadataError({ data: e });
        return e.image || e.image_url || e.image_data;
      }
      async function getMetadataAvatarUri({ gatewayUrls: e, uri: l }) {
        try {
          let c = await fetch(l).then((e) => e.json()),
            d = await parseAvatarUri({ gatewayUrls: e, uri: getJsonImage(c) });
          return d;
        } catch {
          throw new EnsAvatarUriResolutionError({ uri: l });
        }
      }
      async function parseAvatarUri({ gatewayUrls: e, uri: l }) {
        let { uri: c, isOnChain: d } = resolveAvatarUri({
          uri: l,
          gatewayUrls: e,
        });
        if (d) return c;
        let m = await isImageUri(c);
        if (m) return c;
        throw new EnsAvatarUriResolutionError({ uri: l });
      }
      async function getNftTokenUri(e, { nft: l }) {
        if ("erc721" === l.namespace)
          return (0, eS.L)(e, {
            address: l.contractAddress,
            abi: [
              {
                name: "tokenURI",
                type: "function",
                stateMutability: "view",
                inputs: [{ name: "tokenId", type: "uint256" }],
                outputs: [{ name: "", type: "string" }],
              },
            ],
            functionName: "tokenURI",
            args: [BigInt(l.tokenID)],
          });
        if ("erc1155" === l.namespace)
          return (0, eS.L)(e, {
            address: l.contractAddress,
            abi: [
              {
                name: "uri",
                type: "function",
                stateMutability: "view",
                inputs: [{ name: "_id", type: "uint256" }],
                outputs: [{ name: "", type: "string" }],
              },
            ],
            functionName: "uri",
            args: [BigInt(l.tokenID)],
          });
        throw new EnsAvatarUnsupportedNamespaceError({
          namespace: l.namespace,
        });
      }
      async function parseAvatarRecord(e, { gatewayUrls: l, record: c }) {
        return /eip155:/i.test(c)
          ? parseNftAvatarUri(e, { gatewayUrls: l, record: c })
          : parseAvatarUri({ uri: c, gatewayUrls: l });
      }
      async function parseNftAvatarUri(e, { gatewayUrls: l, record: c }) {
        let d = (function (e) {
            let l = e;
            l.startsWith("did:nft:") &&
              (l = l.replace("did:nft:", "").replace(/_/g, "/"));
            let [c, d, m] = l.split("/"),
              [g, y] = c.split(":"),
              [b, C] = d.split(":");
            if (!g || "eip155" !== g.toLowerCase())
              throw new EnsAvatarInvalidNftUriError({
                reason: "Only EIP-155 supported",
              });
            if (!y)
              throw new EnsAvatarInvalidNftUriError({
                reason: "Chain ID not found",
              });
            if (!C)
              throw new EnsAvatarInvalidNftUriError({
                reason: "Contract address not found",
              });
            if (!m)
              throw new EnsAvatarInvalidNftUriError({
                reason: "Token ID not found",
              });
            if (!b)
              throw new EnsAvatarInvalidNftUriError({
                reason: "ERC namespace not found",
              });
            return {
              chainID: Number.parseInt(y),
              namespace: b.toLowerCase(),
              contractAddress: C,
              tokenID: m,
            };
          })(c),
          m = await getNftTokenUri(e, { nft: d }),
          {
            uri: g,
            isOnChain: y,
            isEncoded: b,
          } = resolveAvatarUri({ uri: m, gatewayUrls: l });
        if (
          y &&
          (g.includes("data:application/json;base64,") || g.startsWith("{"))
        ) {
          let e = b ? atob(g.replace("data:application/json;base64,", "")) : g,
            c = JSON.parse(e);
          return parseAvatarUri({ uri: getJsonImage(c), gatewayUrls: l });
        }
        let C = d.tokenID;
        return (
          "erc1155" === d.namespace &&
            (C = C.replace("0x", "").padStart(64, "0")),
          getMetadataAvatarUri({
            gatewayUrls: l,
            uri: g.replace(/(?:0x)?{id}/, C),
          })
        );
      }
      var ej = c(59351),
        eO = c(85188),
        eB = c(15873),
        eD = c(28065),
        eN = c(21376),
        eR = c(1701),
        eF = c(23183),
        eL = c(52288),
        eU = c(12265),
        ez = c(23279),
        eW = c(83223),
        eV = c(35508);
      function namehash_namehash(e) {
        let l = new Uint8Array(32).fill(0);
        if (!e) return (0, eR.ci)(l);
        let c = e.split(".");
        for (let e = c.length - 1; e >= 0; e -= 1) {
          let d = (0, eV.i)(c[e]),
            m = d ? (0, ez.O0)(d) : (0, eW.w)((0, ez.qX)(c[e]), "bytes");
          l = (0, eW.w)((0, eU.zo)([l, m]), "bytes");
        }
        return (0, eR.ci)(l);
      }
      var eH = c(61460);
      async function getEnsText(e, l) {
        let {
            blockNumber: c,
            blockTag: d,
            key: m,
            name: g,
            gatewayUrls: y,
            strict: b,
          } = l,
          { chain: C } = e,
          P = (() => {
            if (l.universalResolverAddress) return l.universalResolverAddress;
            if (!C)
              throw Error(
                "client chain not configured. universalResolverAddress is required."
              );
            return (0, eN.L)({
              blockNumber: c,
              chain: C,
              contract: "ensUniversalResolver",
            });
          })(),
          I = C?.ensTlds;
        if (I && !I.some((e) => g.endsWith(e))) return null;
        try {
          let l = {
              address: P,
              abi: eO.k3,
              functionName: "resolve",
              args: [
                (0, eR.NC)((0, eH.T)(g)),
                (0, eD.R)({
                  abi: eO.nZ,
                  functionName: "text",
                  args: [namehash_namehash(g), m],
                }),
                y ?? [eL.M],
              ],
              blockNumber: c,
              blockTag: d,
            },
            b = (0, ej.s)(e, eS.L, "readContract"),
            C = await b(l);
          if ("0x" === C[0]) return null;
          let I = (0, eB.k)({ abi: eO.nZ, functionName: "text", data: C[0] });
          return "" === I ? null : I;
        } catch (e) {
          if (b) throw e;
          if ((0, eF.c)(e, "resolve")) return null;
          throw e;
        }
      }
      async function getEnsAvatar(
        e,
        {
          blockNumber: l,
          blockTag: c,
          assetGatewayUrls: d,
          name: m,
          gatewayUrls: g,
          strict: y,
          universalResolverAddress: b,
        }
      ) {
        let C = await (0, ej.s)(
          e,
          getEnsText,
          "getEnsText"
        )({
          blockNumber: l,
          blockTag: c,
          key: "avatar",
          name: m,
          universalResolverAddress: b,
          gatewayUrls: g,
          strict: y,
        });
        if (!C) return null;
        try {
          return await parseAvatarRecord(e, { record: C, gatewayUrls: d });
        } catch {
          return null;
        }
      }
      var eG = c(47505),
        eQ = c(68823),
        e$ = c(28378),
        eK = c(87874);
      async function getEnsAddress(e, l) {
        let {
            blockNumber: c,
            blockTag: d,
            coinType: m,
            name: g,
            gatewayUrls: y,
            strict: b,
          } = l,
          { chain: C } = e,
          P = (() => {
            if (l.universalResolverAddress) return l.universalResolverAddress;
            if (!C)
              throw Error(
                "client chain not configured. universalResolverAddress is required."
              );
            return (0, eN.L)({
              blockNumber: c,
              chain: C,
              contract: "ensUniversalResolver",
            });
          })(),
          I = C?.ensTlds;
        if (I && !I.some((e) => g.endsWith(e))) return null;
        try {
          let l = (0, eD.R)({
              abi: eO.X$,
              functionName: "addr",
              ...(null != m
                ? { args: [namehash_namehash(g), BigInt(m)] }
                : { args: [namehash_namehash(g)] }),
            }),
            b = {
              address: P,
              abi: eO.k3,
              functionName: "resolve",
              args: [(0, eR.NC)((0, eH.T)(g)), l, y ?? [eL.M]],
              blockNumber: c,
              blockTag: d,
            },
            C = (0, ej.s)(e, eS.L, "readContract"),
            I = await C(b);
          if ("0x" === I[0]) return null;
          let B = (0, eB.k)({
            abi: eO.X$,
            args: null != m ? [namehash_namehash(g), BigInt(m)] : void 0,
            functionName: "addr",
            data: I[0],
          });
          if ("0x" === B || "0x00" === (0, eg.f)(B)) return null;
          return B;
        } catch (e) {
          if (b) throw e;
          if ((0, eF.c)(e, "resolve")) return null;
          throw e;
        }
      }
      var eZ = c(13227);
      async function getEnsResolver(e, l) {
        let { blockNumber: c, blockTag: d, name: m } = l,
          { chain: g } = e,
          y = (() => {
            if (l.universalResolverAddress) return l.universalResolverAddress;
            if (!g)
              throw Error(
                "client chain not configured. universalResolverAddress is required."
              );
            return (0, eN.L)({
              blockNumber: c,
              chain: g,
              contract: "ensUniversalResolver",
            });
          })(),
          b = g?.ensTlds;
        if (b && !b.some((e) => m.endsWith(e)))
          throw Error(
            `${m} is not a valid ENS TLD (${b?.join(", ")}) for chain "${
              g.name
            }" (id: ${g.id}).`
          );
        let [C] = await (0, ej.s)(
          e,
          eS.L,
          "readContract"
        )({
          address: y,
          abi: [
            {
              inputs: [{ type: "bytes" }],
              name: "findResolver",
              outputs: [{ type: "address" }, { type: "bytes32" }],
              stateMutability: "view",
              type: "function",
            },
          ],
          functionName: "findResolver",
          args: [(0, eR.NC)((0, eH.T)(m))],
          blockNumber: c,
          blockTag: d,
        });
        return C;
      }
      var eY = c(17675),
        eX = c(40362),
        eJ = c(23546),
        e0 = c(8383),
        e1 = c(36666),
        e2 = c(21233);
      async function createAccessList(e, l) {
        let {
            account: c = e.account,
            blockNumber: d,
            blockTag: m = "latest",
            blobs: g,
            data: y,
            gas: b,
            gasPrice: C,
            maxFeePerBlobGas: P,
            maxFeePerGas: I,
            maxPriorityFeePerGas: B,
            to: N,
            value: F,
            ...V
          } = l,
          G = c ? (0, eX.T)(c) : void 0;
        try {
          (0, e2.F)(l);
          let c = d ? (0, eR.eC)(d) : void 0,
            Q = e.chain?.formatters?.transactionRequest?.format,
            $ = Q || e1.tG,
            Z = $({
              ...(0, e0.K)(V, { format: Q }),
              from: G?.address,
              blobs: g,
              data: y,
              gas: b,
              gasPrice: C,
              maxFeePerBlobGas: P,
              maxFeePerGas: I,
              maxPriorityFeePerGas: B,
              to: N,
              value: F,
            }),
            Y = await e.request({
              method: "eth_createAccessList",
              params: [Z, c || m],
            });
          return { accessList: Y.accessList, gasUsed: BigInt(Y.gasUsed) };
        } catch (c) {
          throw (0, eJ.P)(c, { ...l, account: G, chain: e.chain });
        }
      }
      function createFilterRequestScope(e, { method: l }) {
        let c = {};
        return (
          "fallback" === e.transport.type &&
            e.transport.onResponse?.(
              ({ method: e, response: d, status: m, transport: g }) => {
                "success" === m && l === e && (c[d] = g.request);
              }
            ),
          (l) => c[l] || e.request
        );
      }
      async function createBlockFilter(e) {
        let l = createFilterRequestScope(e, { method: "eth_newBlockFilter" }),
          c = await e.request({ method: "eth_newBlockFilter" });
        return { id: c, request: l(c), type: "block" };
      }
      var e6 = c(771);
      let FilterTypeNotSupportedError = class FilterTypeNotSupportedError extends ek.G {
        constructor(e) {
          super(`Filter type "${e}" is not supported.`, {
            name: "FilterTypeNotSupportedError",
          });
        }
      };
      var e3 = c(90107),
        e5 = c(74600),
        e4 = c(21283),
        e7 = c(38652);
      let e8 = "/docs/contract/encodeEventTopics";
      function encodeEventTopics(e) {
        let { abi: l, eventName: c, args: d } = e,
          m = l[0];
        if (c) {
          let e = (0, e7.mE)({ abi: l, name: c });
          if (!e) throw new e6.mv(c, { docsPath: e8 });
          m = e;
        }
        if ("event" !== m.type) throw new e6.mv(void 0, { docsPath: e8 });
        let g = (0, e4.t)(m),
          y = (0, e3.n)(g),
          b = [];
        if (d && "inputs" in m) {
          let e = m.inputs?.filter((e) => "indexed" in e && e.indexed),
            l = Array.isArray(d)
              ? d
              : Object.values(d).length > 0
              ? e?.map((e) => d[e.name]) ?? []
              : [];
          l.length > 0 &&
            (b =
              e?.map((e, c) =>
                Array.isArray(l[c])
                  ? l[c].map((d, m) => encodeArg({ param: e, value: l[c][m] }))
                  : void 0 !== l[c] && null !== l[c]
                  ? encodeArg({ param: e, value: l[c] })
                  : null
              ) ?? []);
        }
        return [y, ...b];
      }
      function encodeArg({ param: e, value: l }) {
        if ("string" === e.type || "bytes" === e.type)
          return (0, eW.w)((0, ez.O0)(l));
        if ("tuple" === e.type || e.type.match(/^(.*)\[(\d+)?\]$/))
          throw new FilterTypeNotSupportedError(e.type);
        return (0, e5.E)([e], [l]);
      }
      async function createContractEventFilter(e, l) {
        let {
            address: c,
            abi: d,
            args: m,
            eventName: g,
            fromBlock: y,
            strict: b,
            toBlock: C,
          } = l,
          P = createFilterRequestScope(e, { method: "eth_newFilter" }),
          I = g ? encodeEventTopics({ abi: d, args: m, eventName: g }) : void 0,
          B = await e.request({
            method: "eth_newFilter",
            params: [
              {
                address: c,
                fromBlock: "bigint" == typeof y ? (0, eR.eC)(y) : y,
                toBlock: "bigint" == typeof C ? (0, eR.eC)(C) : C,
                topics: I,
              },
            ],
          });
        return {
          abi: d,
          args: m,
          eventName: g,
          id: B,
          request: P(B),
          strict: !!b,
          type: "event",
        };
      }
      async function createEventFilter(
        e,
        {
          address: l,
          args: c,
          event: d,
          events: m,
          fromBlock: g,
          strict: y,
          toBlock: b,
        } = {}
      ) {
        let C = m ?? (d ? [d] : void 0),
          P = createFilterRequestScope(e, { method: "eth_newFilter" }),
          I = [];
        if (C) {
          let e = C.flatMap((e) =>
            encodeEventTopics({ abi: [e], eventName: e.name, args: c })
          );
          (I = [e]), d && (I = I[0]);
        }
        let B = await e.request({
          method: "eth_newFilter",
          params: [
            {
              address: l,
              fromBlock: "bigint" == typeof g ? (0, eR.eC)(g) : g,
              toBlock: "bigint" == typeof b ? (0, eR.eC)(b) : b,
              ...(I.length ? { topics: I } : {}),
            },
          ],
        });
        return {
          abi: C,
          args: c,
          eventName: d ? d.name : void 0,
          fromBlock: g,
          id: B,
          request: P(B),
          strict: !!y,
          toBlock: b,
          type: "event",
        };
      }
      async function createPendingTransactionFilter(e) {
        let l = createFilterRequestScope(e, {
            method: "eth_newPendingTransactionFilter",
          }),
          c = await e.request({ method: "eth_newPendingTransactionFilter" });
        return { id: c, request: l(c), type: "transaction" };
      }
      var e9 = c(3086),
        te = c(88911);
      async function estimateContractGas(e, l) {
        let {
            abi: c,
            address: d,
            args: m,
            functionName: g,
            dataSuffix: y,
            ...b
          } = l,
          C = (0, eD.R)({ abi: c, args: m, functionName: g });
        try {
          let l = await (0, ej.s)(
            e,
            te.Q,
            "estimateGas"
          )({ data: `${C}${y ? y.replace("0x", "") : ""}`, to: d, ...b });
          return l;
        } catch (l) {
          let e = b.account ? (0, eX.T)(b.account) : void 0;
          throw (0, e9.S)(l, {
            abi: c,
            address: d,
            args: m,
            docsPath: "/docs/contract/estimateContractGas",
            functionName: g,
            sender: e?.address,
          });
        }
      }
      var tt = c(7723),
        tn = c(47938);
      async function getBlobBaseFee(e) {
        let l = await e.request({ method: "eth_blobBaseFee" });
        return BigInt(l);
      }
      var tr = c(17188),
        ti = c(99839);
      async function getBlockTransactionCount(
        e,
        { blockHash: l, blockNumber: c, blockTag: d = "latest" } = {}
      ) {
        let m;
        let g = void 0 !== c ? (0, eR.eC)(c) : void 0;
        return (
          (m = l
            ? await e.request(
                { method: "eth_getBlockTransactionCountByHash", params: [l] },
                { dedupe: !0 }
              )
            : await e.request(
                {
                  method: "eth_getBlockTransactionCountByNumber",
                  params: [g || d],
                },
                { dedupe: !!g }
              )),
          (0, em.ly)(m)
        );
      }
      var ta = c(61727);
      async function getCode(
        e,
        { address: l, blockNumber: c, blockTag: d = "latest" }
      ) {
        let m = void 0 !== c ? (0, eR.eC)(c) : void 0,
          g = await e.request(
            { method: "eth_getCode", params: [l, m || d] },
            { dedupe: !!m }
          );
        if ("0x" !== g) return g;
      }
      var ts = c(81119),
        tl = c(59679),
        tc = c(94041),
        tu = c(3680);
      let td = "/docs/contract/decodeEventLog";
      function decodeEventLog(e) {
        let { abi: l, data: c, strict: d, topics: m } = e,
          g = d ?? !0,
          [y, ...b] = m;
        if (!y) throw new e6.FM({ docsPath: td });
        let C =
          1 === l.length
            ? l[0]
            : l.find(
                (e) => "event" === e.type && y === (0, e3.n)((0, e4.t)(e))
              );
        if (!(C && "name" in C) || "event" !== C.type)
          throw new e6.lC(y, { docsPath: td });
        let { name: P, inputs: I } = C,
          B = I?.some((e) => !("name" in e && e.name)),
          N = B ? [] : {},
          F = I.filter((e) => "indexed" in e && e.indexed);
        for (let e = 0; e < F.length; e++) {
          let l = F[e],
            c = b[e];
          if (!c) throw new e6.Gy({ abiItem: C, param: l });
          N[B ? e : l.name || e] = (function ({ param: e, value: l }) {
            if (
              "string" === e.type ||
              "bytes" === e.type ||
              "tuple" === e.type ||
              e.type.match(/^(.*)\[(\d+)?\]$/)
            )
              return l;
            let c = (0, tu.r)([e], l) || [];
            return c[0];
          })({ param: l, value: c });
        }
        let V = I.filter((e) => !("indexed" in e && e.indexed));
        if (V.length > 0) {
          if (c && "0x" !== c)
            try {
              let e = (0, tu.r)(V, c);
              if (e) {
                if (B) N = [...N, ...e];
                else for (let l = 0; l < V.length; l++) N[V[l].name] = e[l];
              }
            } catch (e) {
              if (g) {
                if (e instanceof e6.xB || e instanceof tc.lQ)
                  throw new e6.SM({
                    abiItem: C,
                    data: c,
                    params: V,
                    size: (0, tl.d)(c),
                  });
                throw e;
              }
            }
          else if (g)
            throw new e6.SM({ abiItem: C, data: "0x", params: V, size: 0 });
        }
        return { eventName: P, args: Object.values(N).length > 0 ? N : void 0 };
      }
      function parseEventLogs(e) {
        let { abi: l, args: c, logs: d, strict: m = !0 } = e,
          g = (() => {
            if (e.eventName)
              return Array.isArray(e.eventName) ? e.eventName : [e.eventName];
          })();
        return d
          .map((e) => {
            try {
              let d = l.find(
                (l) => "event" === l.type && e.topics[0] === (0, e3.n)(l)
              );
              if (!d) return null;
              let y = decodeEventLog({ ...e, abi: [d], strict: m });
              if (
                (g && !g.includes(y.eventName)) ||
                !(function (e) {
                  let { args: l, inputs: c, matchArgs: d } = e;
                  if (!d) return !0;
                  if (!l) return !1;
                  function isEqual(e, l, c) {
                    try {
                      if ("address" === e.type) return (0, ts.E)(l, c);
                      if ("string" === e.type || "bytes" === e.type)
                        return (0, eW.w)((0, ez.O0)(l)) === c;
                      return l === c;
                    } catch {
                      return !1;
                    }
                  }
                  return Array.isArray(l) && Array.isArray(d)
                    ? d.every((e, d) => {
                        if (null == e) return !0;
                        let m = c[d];
                        if (!m) return !1;
                        let g = Array.isArray(e) ? e : [e];
                        return g.some((e) => isEqual(m, e, l[d]));
                      })
                    : !(
                        "object" != typeof l ||
                        Array.isArray(l) ||
                        "object" != typeof d ||
                        Array.isArray(d)
                      ) &&
                        Object.entries(d).every(([e, d]) => {
                          if (null == d) return !0;
                          let m = c.find((l) => l.name === e);
                          if (!m) return !1;
                          let g = Array.isArray(d) ? d : [d];
                          return g.some((c) => isEqual(m, c, l[e]));
                        });
                })({ args: y.args, inputs: d.inputs, matchArgs: c })
              )
                return null;
              return { ...y, ...e };
            } catch (d) {
              let l, c;
              if (d instanceof e6.lC) return null;
              if (d instanceof e6.SM || d instanceof e6.Gy) {
                if (m) return null;
                (l = d.abiItem.name),
                  (c = d.abiItem.inputs?.some((e) => !("name" in e && e.name)));
              }
              return { ...e, args: c ? [] : {}, eventName: l };
            }
          })
          .filter(Boolean);
      }
      var tp = c(51036);
      async function getLogs(
        e,
        {
          address: l,
          blockHash: c,
          fromBlock: d,
          toBlock: m,
          event: g,
          events: y,
          args: b,
          strict: C,
        } = {}
      ) {
        let P;
        let I = C ?? !1,
          B = y ?? (g ? [g] : void 0),
          N = [];
        if (B) {
          let e = B.flatMap((e) =>
            encodeEventTopics({
              abi: [e],
              eventName: e.name,
              args: y ? void 0 : b,
            })
          );
          (N = [e]), g && (N = N[0]);
        }
        P = c
          ? await e.request({
              method: "eth_getLogs",
              params: [{ address: l, topics: N, blockHash: c }],
            })
          : await e.request({
              method: "eth_getLogs",
              params: [
                {
                  address: l,
                  topics: N,
                  fromBlock: "bigint" == typeof d ? (0, eR.eC)(d) : d,
                  toBlock: "bigint" == typeof m ? (0, eR.eC)(m) : m,
                },
              ],
            });
        let F = P.map((e) => (0, tp.U)(e));
        return B ? parseEventLogs({ abi: B, args: b, logs: F, strict: I }) : F;
      }
      async function getContractEvents(e, l) {
        let {
            abi: c,
            address: d,
            args: m,
            blockHash: g,
            eventName: y,
            fromBlock: b,
            toBlock: C,
            strict: P,
          } = l,
          I = y ? (0, e7.mE)({ abi: c, name: y }) : void 0,
          B = I ? void 0 : c.filter((e) => "event" === e.type);
        return (0, ej.s)(
          e,
          getLogs,
          "getLogs"
        )({
          address: d,
          args: m,
          blockHash: g,
          event: I,
          events: B,
          fromBlock: b,
          toBlock: C,
          strict: P,
        });
      }
      let Eip712DomainNotFoundError = class Eip712DomainNotFoundError extends ek.G {
        constructor({ address: e }) {
          super(`No EIP-712 domain found on contract "${e}".`, {
            metaMessages: [
              "Ensure that:",
              `- The contract is deployed at the address "${e}".`,
              "- `eip712Domain()` function exists on the contract.",
              "- `eip712Domain()` function matches signature to ERC-5267 specification.",
            ],
            name: "Eip712DomainNotFoundError",
          });
        }
      };
      async function getEip712Domain(e, l) {
        let { address: c, factory: d, factoryData: m } = l;
        try {
          let [l, g, y, b, C, P, I] = await (0, ej.s)(
            e,
            eS.L,
            "readContract"
          )({
            abi: th,
            address: c,
            functionName: "eip712Domain",
            factory: d,
            factoryData: m,
          });
          return {
            domain: {
              name: g,
              version: y,
              chainId: Number(b),
              verifyingContract: C,
              salt: P,
            },
            extensions: I,
            fields: l,
          };
        } catch (e) {
          if (
            "ContractFunctionExecutionError" === e.name &&
            "ContractFunctionZeroDataError" === e.cause.name
          )
            throw new Eip712DomainNotFoundError({ address: c });
          throw e;
        }
      }
      let th = [
        {
          inputs: [],
          name: "eip712Domain",
          outputs: [
            { name: "fields", type: "bytes1" },
            { name: "name", type: "string" },
            { name: "version", type: "string" },
            { name: "chainId", type: "uint256" },
            { name: "verifyingContract", type: "address" },
            { name: "salt", type: "bytes32" },
            { name: "extensions", type: "uint256[]" },
          ],
          stateMutability: "view",
          type: "function",
        },
      ];
      async function getFeeHistory(
        e,
        {
          blockCount: l,
          blockNumber: c,
          blockTag: d = "latest",
          rewardPercentiles: m,
        }
      ) {
        let g = c ? (0, eR.eC)(c) : void 0,
          y = await e.request(
            { method: "eth_feeHistory", params: [(0, eR.eC)(l), g || d, m] },
            { dedupe: !!g }
          );
        return {
          baseFeePerGas: y.baseFeePerGas.map((e) => BigInt(e)),
          gasUsedRatio: y.gasUsedRatio,
          oldestBlock: BigInt(y.oldestBlock),
          reward: y.reward?.map((e) => e.map((e) => BigInt(e))),
        };
      }
      async function getFilterChanges(e, { filter: l }) {
        let c = "strict" in l && l.strict,
          d = await l.request({
            method: "eth_getFilterChanges",
            params: [l.id],
          });
        if ("string" == typeof d[0]) return d;
        let m = d.map((e) => (0, tp.U)(e));
        return "abi" in l && l.abi
          ? parseEventLogs({ abi: l.abi, logs: m, strict: c })
          : m;
      }
      async function getFilterLogs(e, { filter: l }) {
        let c = l.strict ?? !1,
          d = await l.request({ method: "eth_getFilterLogs", params: [l.id] }),
          m = d.map((e) => (0, tp.U)(e));
        return l.abi ? parseEventLogs({ abi: l.abi, logs: m, strict: c }) : m;
      }
      var tf = c(74161);
      async function getProof(
        e,
        { address: l, blockNumber: c, blockTag: d, storageKeys: m }
      ) {
        let g = void 0 !== c ? (0, eR.eC)(c) : void 0,
          y = await e.request({
            method: "eth_getProof",
            params: [l, m, g || (d ?? "latest")],
          });
        return {
          ...y,
          balance: y.balance ? BigInt(y.balance) : void 0,
          nonce: y.nonce ? (0, em.ly)(y.nonce) : void 0,
          storageProof: y.storageProof
            ? y.storageProof.map((e) => ({ ...e, value: BigInt(e.value) }))
            : void 0,
        };
      }
      async function getStorageAt(
        e,
        { address: l, blockNumber: c, blockTag: d = "latest", slot: m }
      ) {
        let g = void 0 !== c ? (0, eR.eC)(c) : void 0,
          y = await e.request({
            method: "eth_getStorageAt",
            params: [l, m, g || d],
          });
        return y;
      }
      var tm = c(97704);
      async function getTransactionConfirmations(
        e,
        { hash: l, transactionReceipt: c }
      ) {
        let [d, m] = await Promise.all([
            (0, ej.s)(e, ti.z, "getBlockNumber")({}),
            l ? (0, ej.s)(e, tm.f, "getTransaction")({ hash: l }) : void 0,
          ]),
          g = c?.blockNumber || m?.blockNumber;
        return g ? d - g + 1n : 0n;
      }
      var tg = c(66564),
        ty = c(59013),
        tb = c(78040);
      let BaseError = class BaseError extends Error {
        constructor(e, l = {}) {
          let c = (() => {
              if (l.cause instanceof BaseError) {
                if (l.cause.details) return l.cause.details;
                if (l.cause.shortMessage) return l.cause.shortMessage;
              }
              return l.cause?.message ? l.cause.message : l.details;
            })(),
            d =
              (l.cause instanceof BaseError && l.cause.docsPath) || l.docsPath,
            m = `https://oxlib.sh${d ?? ""}`,
            g = [
              e || "An error occurred.",
              ...(l.metaMessages ? ["", ...l.metaMessages] : []),
              ...(c || d
                ? ["", c ? `Details: ${c}` : void 0, d ? `See: ${m}` : void 0]
                : []),
            ]
              .filter((e) => "string" == typeof e)
              .join("\n");
          super(g, l.cause ? { cause: l.cause } : void 0),
            Object.defineProperty(this, "details", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "docs", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "docsPath", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "shortMessage", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "cause", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "BaseError",
            }),
            Object.defineProperty(this, "version", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ox@0.1.1",
            }),
            (this.cause = l.cause),
            (this.details = c),
            (this.docs = m),
            (this.docsPath = d),
            (this.shortMessage = e);
        }
        walk(e) {
          return (function walk(e, l) {
            return l?.(e)
              ? e
              : e && "object" == typeof e && "cause" in e && e.cause
              ? walk(e.cause, l)
              : l
              ? null
              : e;
          })(this, e);
        }
      };
      function assertSize(e, l) {
        if (Hex_size(e) > l)
          throw new SizeOverflowError({ givenSize: Hex_size(e), maxSize: l });
      }
      function pad(e, l = {}) {
        let { dir: c, size: d = 32 } = l;
        if (0 === d) return e;
        let m = e.replace("0x", "");
        if (m.length > 2 * d)
          throw new SizeExceedsPaddingSizeError({
            size: Math.ceil(m.length / 2),
            targetSize: d,
            type: "Hex",
          });
        return `0x${m["right" === c ? "padEnd" : "padStart"](2 * d, "0")}`;
      }
      let tv = new TextEncoder(),
        tw = Array.from({ length: 256 }, (e, l) =>
          l.toString(16).padStart(2, "0")
        );
      function Hex_concat(...e) {
        return `0x${e.reduce((e, l) => e + l.replace("0x", ""), "")}`;
      }
      function fromBoolean(e, l = {}) {
        let c = `0x${Number(e)}`;
        return "number" == typeof l.size
          ? (assertSize(c, l.size), padLeft(c, l.size))
          : c;
      }
      function fromBytes(e, l = {}) {
        let c = "";
        for (let l = 0; l < e.length; l++) c += tw[e[l]];
        let d = `0x${c}`;
        return "number" == typeof l.size
          ? (assertSize(d, l.size), padRight(d, l.size))
          : d;
      }
      function fromNumber(e, l = {}) {
        let c;
        let { signed: d, size: m } = l,
          g = BigInt(e);
        m
          ? (c = d
              ? (1n << (8n * BigInt(m) - 1n)) - 1n
              : 2n ** (8n * BigInt(m)) - 1n)
          : "number" == typeof e && (c = BigInt(Number.MAX_SAFE_INTEGER));
        let y = "bigint" == typeof c && d ? -c - 1n : 0;
        if ((c && g > c) || g < y) {
          let l = "bigint" == typeof e ? "n" : "";
          throw new IntegerOutOfRangeError({
            max: c ? `${c}${l}` : void 0,
            min: `${y}${l}`,
            signed: d,
            size: m,
            value: `${e}${l}`,
          });
        }
        let b = (d && g < 0 ? (1n << BigInt(8 * m)) + BigInt(g) : g).toString(
            16
          ),
          C = `0x${b}`;
        return m ? padLeft(C, m) : C;
      }
      function fromString(e, l = {}) {
        return fromBytes(tv.encode(e), l);
      }
      function padLeft(e, l) {
        return pad(e, { dir: "left", size: l });
      }
      function padRight(e, l) {
        return pad(e, { dir: "right", size: l });
      }
      function slice(e, l, c, d = {}) {
        let { strict: m } = d;
        !(function (e, l) {
          if ("number" == typeof l && l > 0 && l > Hex_size(e) - 1)
            throw new SliceOffsetOutOfBoundsError({
              offset: l,
              position: "start",
              size: Hex_size(e),
            });
        })(e, l);
        let g = `0x${e
          .replace("0x", "")
          .slice((l ?? 0) * 2, (c ?? e.length) * 2)}`;
        return (
          m &&
            (function (e, l, c) {
              if (
                "number" == typeof l &&
                "number" == typeof c &&
                Hex_size(e) !== c - l
              )
                throw new SliceOffsetOutOfBoundsError({
                  offset: c,
                  position: "end",
                  size: Hex_size(e),
                });
            })(g, l, c),
          g
        );
      }
      function Hex_size(e) {
        return Math.ceil((e.length - 2) / 2);
      }
      let IntegerOutOfRangeError = class IntegerOutOfRangeError extends BaseError {
        constructor({ max: e, min: l, signed: c, size: d, value: m }) {
          super(
            `Number \`${m}\` is not in safe${d ? ` ${8 * d}-bit` : ""}${
              c ? " signed" : " unsigned"
            } integer range ${
              e ? `(\`${l}\` to \`${e}\`)` : `(above \`${l}\`)`
            }`
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Hex.IntegerOutOfRangeError",
            });
        }
      };
      let InvalidHexTypeError = class InvalidHexTypeError extends BaseError {
        constructor(e) {
          var l;
          super(
            `Value \`${
              "object" == typeof e
                ? JSON.stringify(
                    e,
                    (e, c) =>
                      "function" == typeof l
                        ? l(e, c)
                        : "bigint" == typeof c
                        ? c.toString() + "#__bigint"
                        : c,
                    void 0
                  )
                : e
            }\` of type \`${typeof e}\` is an invalid hex type.`,
            {
              metaMessages: [
                'Hex types must be represented as `"0x${string}"`.',
              ],
            }
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Hex.InvalidHexTypeError",
            });
        }
      };
      let InvalidHexValueError = class InvalidHexValueError extends BaseError {
        constructor(e) {
          super(`Value \`${e}\` is an invalid hex value.`, {
            metaMessages: [
              'Hex values must start with `"0x"` and contain only hexadecimal characters (0-9, a-f, A-F).',
            ],
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Hex.InvalidHexValueError",
            });
        }
      };
      let SizeOverflowError = class SizeOverflowError extends BaseError {
        constructor({ givenSize: e, maxSize: l }) {
          super(
            `Size cannot exceed \`${l}\` bytes. Given size: \`${e}\` bytes.`
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Hex.SizeOverflowError",
            });
        }
      };
      let SliceOffsetOutOfBoundsError = class SliceOffsetOutOfBoundsError extends BaseError {
        constructor({ offset: e, position: l, size: c }) {
          super(
            `Slice ${
              "start" === l ? "starting" : "ending"
            } at offset \`${e}\` is out-of-bounds (size: \`${c}\`).`
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Hex.SliceOffsetOutOfBoundsError",
            });
        }
      };
      let SizeExceedsPaddingSizeError = class SizeExceedsPaddingSizeError extends BaseError {
        constructor({ size: e, targetSize: l, type: c }) {
          super(
            `${c.charAt(0).toUpperCase()}${c
              .slice(1)
              .toLowerCase()} size (\`${e}\`) exceeds padding size (\`${l}\`).`
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Hex.SizeExceedsPaddingSizeError",
            });
        }
      };
      function toRpc(e) {
        return {
          address: e.address,
          amount: fromNumber(e.amount),
          index: fromNumber(e.index),
          validatorIndex: fromNumber(e.validatorIndex),
        };
      }
      var tx = c(40955),
        t_ = c(78e3),
        tC = c(26852),
        tE = c(20503),
        tA = c(68916);
      async function simulateBlocks(e, l) {
        let {
          blockNumber: c,
          blockTag: d = "latest",
          blocks: m,
          returnFullTransactions: g,
          traceTransfers: y,
          validation: b,
        } = l;
        try {
          let l = [];
          for (let e of m) {
            var C;
            let c = e.blockOverrides
                ? ((C = e.blockOverrides),
                  {
                    ...("bigint" == typeof C.baseFeePerGas && {
                      baseFeePerGas: fromNumber(C.baseFeePerGas),
                    }),
                    ...("bigint" == typeof C.blobBaseFee && {
                      blobBaseFee: fromNumber(C.blobBaseFee),
                    }),
                    ...("string" == typeof C.feeRecipient && {
                      feeRecipient: C.feeRecipient,
                    }),
                    ...("bigint" == typeof C.gasLimit && {
                      gasLimit: fromNumber(C.gasLimit),
                    }),
                    ...("bigint" == typeof C.number && {
                      number: fromNumber(C.number),
                    }),
                    ...("bigint" == typeof C.prevRandao && {
                      prevRandao: fromNumber(C.prevRandao),
                    }),
                    ...("bigint" == typeof C.time && {
                      time: fromNumber(C.time),
                    }),
                    ...(C.withdrawals && {
                      withdrawals: C.withdrawals.map(toRpc),
                    }),
                  })
                : void 0,
              d = e.calls.map((e) => {
                let l = e.account ? (0, eX.T)(e.account) : void 0,
                  c = {
                    ...e,
                    data: e.abi ? (0, eD.R)(e) : e.data,
                    from: e.from ?? l?.address,
                  };
                return (0, e2.F)(c), (0, e1.tG)(c);
              }),
              m = e.stateOverrides ? (0, tA.mF)(e.stateOverrides) : void 0;
            l.push({ blockOverrides: c, calls: d, stateOverrides: m });
          }
          let P = c ? (0, eR.eC)(c) : void 0,
            I = await e.request({
              method: "eth_simulateV1",
              params: [
                {
                  blockStateCalls: l,
                  returnFullTransactions: g,
                  traceTransfers: y,
                  validation: b,
                },
                P || d,
              ],
            });
          return I.map((e, l) => ({
            ...(0, tE.Z)(e),
            calls: e.calls.map((e, c) => {
              let { abi: d, args: g, functionName: y, to: b } = m[l].calls[c],
                C = e.error?.data ?? e.returnData,
                P = BigInt(e.gasUsed),
                I = e.logs?.map((e) => tp.U(e)),
                B = "0x1" === e.status ? "success" : "failure",
                N =
                  d && "success" === B && "0x" !== C
                    ? (0, eB.k)({ abi: d, data: C, functionName: y })
                    : null,
                F = (() => {
                  let l;
                  if (
                    "success" !== B &&
                    (e.error?.data === "0x"
                      ? (l = new e6.wb())
                      : e.error && (l = new tx.VQ(e.error)),
                    l)
                  )
                    return (0, e9.S)(l, {
                      abi: d ?? [],
                      address: b,
                      args: g,
                      functionName: y ?? "<unknown>",
                    });
                })();
              return {
                data: C,
                gasUsed: P,
                logs: I,
                status: B,
                ...("success" === B ? { result: N } : { error: F }),
              };
            }),
          }));
        } catch (l) {
          let e = (0, tC.k)(l, {});
          if (e instanceof t_.cj) throw l;
          throw e;
        }
      }
      var tS = c(62543),
        tk = c(22709),
        tP = c(93413),
        tM = c(42005),
        tT = c(95253),
        tI = c(79439);
      let tj = { zero: 48, nine: 57, A: 65, F: 70, a: 97, f: 102 };
      function charCodeToBase16(e) {
        return e >= tj.zero && e <= tj.nine
          ? e - tj.zero
          : e >= tj.A && e <= tj.F
          ? e - (tj.A - 10)
          : e >= tj.a && e <= tj.f
          ? e - (tj.a - 10)
          : void 0;
      }
      let tO = new TextEncoder();
      let Bytes_SizeOverflowError = class Bytes_SizeOverflowError extends BaseError {
        constructor({ givenSize: e, maxSize: l }) {
          super(
            `Size cannot exceed \`${l}\` bytes. Given size: \`${e}\` bytes.`
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Bytes.SizeOverflowError",
            });
        }
      };
      let Bytes_SizeExceedsPaddingSizeError = class Bytes_SizeExceedsPaddingSizeError extends BaseError {
        constructor({ size: e, targetSize: l, type: c }) {
          super(
            `${c.charAt(0).toUpperCase()}${c
              .slice(1)
              .toLowerCase()} size (\`${e}\`) exceeds padding size (\`${l}\`).`
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Bytes.SizeExceedsPaddingSizeError",
            });
        }
      };
      function Hash_keccak256(e, l = {}) {
        let { as: c = "string" == typeof e ? "Hex" : "Bytes" } = l,
          d = (0, tI.fr)(
            e instanceof Uint8Array
              ? e
              : "string" == typeof e
              ? (function (e, l = {}) {
                  let { size: c } = l,
                    d = e;
                  c && (assertSize(e, c), (d = padRight(e, c)));
                  let m = d.slice(2);
                  m.length % 2 && (m = `0${m}`);
                  let g = m.length / 2,
                    y = new Uint8Array(g);
                  for (let e = 0, l = 0; e < g; e++) {
                    let c = charCodeToBase16(m.charCodeAt(l++)),
                      d = charCodeToBase16(m.charCodeAt(l++));
                    if (void 0 === c || void 0 === d)
                      throw new BaseError(
                        `Invalid byte sequence ("${m[l - 2]}${
                          m[l - 1]
                        }" in "${m}").`
                      );
                    y[e] = 16 * c + d;
                  }
                  return y;
                })(e)
              : e instanceof Uint8Array
              ? e
              : new Uint8Array(e)
          );
        return "Bytes" === c ? d : fromBytes(d);
      }
      let LruMap = class LruMap extends Map {
        constructor(e) {
          super(),
            Object.defineProperty(this, "maxSize", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.maxSize = e);
        }
        get(e) {
          let l = super.get(e);
          return (
            super.has(e) && void 0 !== l && (this.delete(e), super.set(e, l)), l
          );
        }
        set(e, l) {
          if ((super.set(e, l), this.maxSize && this.size > this.maxSize)) {
            let e = this.keys().next().value;
            e && this.delete(e);
          }
          return this;
        }
      };
      let tB = { checksum: new LruMap(8192) },
        tD = tB.checksum,
        tN = /^0x[a-fA-F0-9]{40}$/;
      function Address_assert(e, l = {}) {
        let { strict: c = !0 } = l;
        if (!tN.test(e))
          throw new InvalidAddressError({
            address: e,
            cause: new InvalidInputError(),
          });
        if (c) {
          if (e.toLowerCase() === e) return;
          if (
            (function (e) {
              if (tD.has(e)) return tD.get(e);
              Address_assert(e, { strict: !1 });
              let l = e.substring(2).toLowerCase(),
                c = Hash_keccak256(
                  (function (e, l = {}) {
                    let { size: c } = l,
                      d = tO.encode(e);
                    return "number" == typeof c
                      ? (!(function (e, l) {
                          if (e.length > l)
                            throw new Bytes_SizeOverflowError({
                              givenSize: e.length,
                              maxSize: l,
                            });
                        })(d, c),
                        (function (e, l = {}) {
                          let { dir: c, size: d = 32 } = l;
                          if (0 === d) return e;
                          if (e.length > d)
                            throw new Bytes_SizeExceedsPaddingSizeError({
                              size: e.length,
                              targetSize: d,
                              type: "Bytes",
                            });
                          let m = new Uint8Array(d);
                          for (let l = 0; l < d; l++) {
                            let g = "right" === c;
                            m[g ? l : d - l - 1] = e[g ? l : e.length - l - 1];
                          }
                          return m;
                        })(d, { dir: "right", size: c }))
                      : d;
                  })(l),
                  { as: "Bytes" }
                ),
                d = l.split("");
              for (let e = 0; e < 40; e += 2)
                c[e >> 1] >> 4 >= 8 && d[e] && (d[e] = d[e].toUpperCase()),
                  (15 & c[e >> 1]) >= 8 &&
                    d[e + 1] &&
                    (d[e + 1] = d[e + 1].toUpperCase());
              let m = `0x${d.join("")}`;
              return tD.set(e, m), m;
            })(e) !== e
          )
            throw new InvalidAddressError({
              address: e,
              cause: new InvalidChecksumError(),
            });
        }
      }
      function Address_validate(e, l = {}) {
        let { strict: c = !0 } = l ?? {};
        try {
          return Address_assert(e, { strict: c }), !0;
        } catch {
          return !1;
        }
      }
      let InvalidAddressError = class InvalidAddressError extends BaseError {
        constructor({ address: e, cause: l }) {
          super(`Address "${e}" is invalid.`, { cause: l }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Address.InvalidAddressError",
            });
        }
      };
      let InvalidInputError = class InvalidInputError extends BaseError {
        constructor() {
          super("Address is not a 20 byte (40 hexadecimal character) value."),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Address.InvalidInputError",
            });
        }
      };
      let InvalidChecksumError = class InvalidChecksumError extends BaseError {
        constructor() {
          super("Address does not match its checksum counterpart."),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "Address.InvalidChecksumError",
            });
        }
      };
      function normalizeSignature(e) {
        let l = !0,
          c = "",
          d = 0,
          m = "",
          g = !1;
        for (let y = 0; y < e.length; y++) {
          let b = e[y];
          if (
            (["(", ")", ","].includes(b) && (l = !0),
            "(" === b && d++,
            ")" === b && d--,
            l)
          ) {
            if (0 === d) {
              if (" " === b && ["event", "function", "error", ""].includes(m))
                m = "";
              else if (((m += b), ")" === b)) {
                g = !0;
                break;
              }
              continue;
            }
            if (" " === b) {
              "," !== e[y - 1] &&
                "," !== c &&
                ",(" !== c &&
                ((c = ""), (l = !1));
              continue;
            }
            (m += b), (c += b);
          }
        }
        if (!g) throw new BaseError("Unable to normalize signature.");
        return m;
      }
      function AbiItem_from(e, l = {}) {
        let { prepare: c = !0 } = l,
          d =
            Array.isArray(e) || "string" == typeof e
              ? (function (e) {
                  let l;
                  if ("string" == typeof e) l = (0, tM.cK)(e);
                  else {
                    let c = (0, tP.D)(e),
                      d = e.length;
                    for (let m = 0; m < d; m++) {
                      let d = e[m];
                      if (!(0, tk.N0)(d)) {
                        l = (0, tM.cK)(d, c);
                        break;
                      }
                    }
                  }
                  if (!l) throw new tS.a_({ signature: e });
                  return l;
                })(e)
              : e;
        return { ...d, ...(c ? { hash: getSignatureHash(d) } : {}) };
      }
      function getSelector(e) {
        return slice(getSignatureHash(e), 0, 4);
      }
      function getSignatureHash(e) {
        return "string" != typeof e && "hash" in e && e.hash
          ? e.hash
          : Hash_keccak256(
              fromString(
                (function (e) {
                  let l = "string" == typeof e ? e : tT.t(e);
                  return normalizeSignature(l);
                })(e)
              )
            );
      }
      let AmbiguityError = class AmbiguityError extends BaseError {
        constructor(e, l) {
          super("Found ambiguous types in overloaded ABI Items.", {
            metaMessages: [
              `\`${e.type}\` in \`${normalizeSignature(
                tT.t(e.abiItem)
              )}\`, and`,
              `\`${l.type}\` in \`${normalizeSignature(tT.t(l.abiItem))}\``,
              "",
              "These types encode differently and cannot be distinguished at runtime.",
              "Remove one of the ambiguous items in the ABI.",
            ],
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "AbiItem.AmbiguityError",
            });
        }
      };
      let NotFoundError = class NotFoundError extends BaseError {
        constructor({ name: e, data: l, type: c = "item" }) {
          let d = e ? ` with name "${e}"` : l ? ` with data "${l}"` : "";
          super(`ABI ${c}${d} not found.`),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "AbiItem.NotFoundError",
            });
        }
      };
      c(16987);
      let tR = /^(.*)\[([0-9]*)\]$/,
        tF = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/,
        tL =
          /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
      function encode(e) {
        let l = 0;
        for (let c = 0; c < e.length; c++) {
          let { dynamic: d, encoded: m } = e[c];
          d ? (l += 32) : (l += Hex_size(m));
        }
        let c = [],
          d = [],
          m = 0;
        for (let g = 0; g < e.length; g++) {
          let { dynamic: y, encoded: b } = e[g];
          y
            ? (c.push(fromNumber(l + m, { size: 32 })),
              d.push(b),
              (m += Hex_size(b)))
            : c.push(b);
        }
        return Hex_concat(...c, ...d);
      }
      function AbiParameters_encode(e, l, c) {
        let { checksumAddress: d = !1 } = c ?? {};
        if (e.length !== l.length)
          throw new LengthMismatchError({
            expectedLength: e.length,
            givenLength: l.length,
          });
        let m = (function ({ checksumAddress: e, parameters: l, values: c }) {
            let d = [];
            for (let m = 0; m < l.length; m++)
              d.push(
                (function prepareParameter({
                  checksumAddress: e = !1,
                  parameter: l,
                  value: c,
                }) {
                  let d = (function (e) {
                    let l = e.match(/^(.*)\[(\d+)?\]$/);
                    return l ? [l[2] ? Number(l[2]) : null, l[1]] : void 0;
                  })(l.type);
                  if (d) {
                    let [m, g] = d;
                    return (function (e, l) {
                      let { checksumAddress: c, length: d, parameter: m } = l,
                        g = null === d;
                      if (!Array.isArray(e)) throw new InvalidArrayError(e);
                      if (!g && e.length !== d)
                        throw new ArrayLengthMismatchError({
                          expectedLength: d,
                          givenLength: e.length,
                          type: `${m.type}[${d}]`,
                        });
                      let y = !1,
                        b = [];
                      for (let l = 0; l < e.length; l++) {
                        let d = prepareParameter({
                          checksumAddress: c,
                          parameter: m,
                          value: e[l],
                        });
                        d.dynamic && (y = !0), b.push(d);
                      }
                      if (g || y) {
                        let e = encode(b);
                        if (g) {
                          let l = fromNumber(b.length, { size: 32 });
                          return {
                            dynamic: !0,
                            encoded: b.length > 0 ? Hex_concat(l, e) : l,
                          };
                        }
                        if (y) return { dynamic: !0, encoded: e };
                      }
                      return {
                        dynamic: !1,
                        encoded: Hex_concat(...b.map(({ encoded: e }) => e)),
                      };
                    })(c, {
                      checksumAddress: e,
                      length: m,
                      parameter: { ...l, type: g },
                    });
                  }
                  if ("tuple" === l.type)
                    return (function (e, l) {
                      let { checksumAddress: c, parameter: d } = l,
                        m = !1,
                        g = [];
                      for (let l = 0; l < d.components.length; l++) {
                        let y = d.components[l],
                          b = Array.isArray(e) ? l : y.name,
                          C = prepareParameter({
                            checksumAddress: c,
                            parameter: y,
                            value: e[b],
                          });
                        g.push(C), C.dynamic && (m = !0);
                      }
                      return {
                        dynamic: m,
                        encoded: m
                          ? encode(g)
                          : Hex_concat(...g.map(({ encoded: e }) => e)),
                      };
                    })(c, { checksumAddress: e, parameter: l });
                  if ("address" === l.type)
                    return (function (e, l) {
                      let { checksum: c = !1 } = l;
                      return (
                        Address_assert(e, { strict: c }),
                        { dynamic: !1, encoded: padLeft(e.toLowerCase()) }
                      );
                    })(c, { checksum: e });
                  if ("bool" === l.type)
                    return (function (e) {
                      if ("boolean" != typeof e)
                        throw new BaseError(
                          `Invalid boolean value: "${e}" (type: ${typeof e}). Expected: \`true\` or \`false\`.`
                        );
                      return { dynamic: !1, encoded: padLeft(fromBoolean(e)) };
                    })(c);
                  if (l.type.startsWith("uint") || l.type.startsWith("int")) {
                    let e = l.type.startsWith("int"),
                      [, , d = "256"] = tL.exec(l.type) ?? [];
                    return (function (e, { signed: l, size: c }) {
                      if ("number" == typeof c) {
                        let d = 2n ** (BigInt(c) - (l ? 1n : 0n)) - 1n,
                          m = l ? -d - 1n : 0n;
                        if (e > d || e < m)
                          throw new IntegerOutOfRangeError({
                            max: d.toString(),
                            min: m.toString(),
                            signed: l,
                            size: c / 8,
                            value: e.toString(),
                          });
                      }
                      return {
                        dynamic: !1,
                        encoded: fromNumber(e, { size: 32, signed: l }),
                      };
                    })(c, { signed: e, size: Number(d) });
                  }
                  if (l.type.startsWith("bytes"))
                    return (function (e, { type: l }) {
                      let [, c] = l.split("bytes"),
                        d = Hex_size(e);
                      if (!c) {
                        let l = e;
                        return (
                          d % 32 != 0 &&
                            (l = padRight(
                              l,
                              32 * Math.ceil((e.length - 2) / 2 / 32)
                            )),
                          {
                            dynamic: !0,
                            encoded: Hex_concat(
                              padLeft(fromNumber(d, { size: 32 })),
                              l
                            ),
                          }
                        );
                      }
                      if (d !== Number.parseInt(c))
                        throw new BytesSizeMismatchError({
                          expectedSize: Number.parseInt(c),
                          value: e,
                        });
                      return { dynamic: !1, encoded: padRight(e) };
                    })(c, { type: l.type });
                  if ("string" === l.type)
                    return (function (e) {
                      let l = fromString(e),
                        c = Math.ceil(Hex_size(l) / 32),
                        d = [];
                      for (let e = 0; e < c; e++)
                        d.push(padRight(slice(l, 32 * e, (e + 1) * 32)));
                      return {
                        dynamic: !0,
                        encoded: Hex_concat(
                          padRight(fromNumber(Hex_size(l), { size: 32 })),
                          ...d
                        ),
                      };
                    })(c);
                  throw new InvalidTypeError(l.type);
                })({ checksumAddress: e, parameter: l[m], value: c[m] })
              );
            return d;
          })({ checksumAddress: d, parameters: e, values: l }),
          g = encode(m);
        return 0 === g.length ? "0x" : g;
      }
      function encodePacked(e, l) {
        if (e.length !== l.length)
          throw new LengthMismatchError({
            expectedLength: e.length,
            givenLength: l.length,
          });
        let c = [];
        for (let d = 0; d < e.length; d++) {
          let m = e[d],
            g = l[d];
          c.push(encodePacked.encode(m, g));
        }
        return Hex_concat(...c);
      }
      (encodePacked || (encodePacked = {})).encode = function encode(
        e,
        l,
        c = !1
      ) {
        if ("address" === e)
          return Address_assert(l), padLeft(l.toLowerCase(), c ? 32 : 0);
        if ("string" === e) return fromString(l);
        if ("bytes" === e) return l;
        if ("bool" === e) return padLeft(fromBoolean(l), c ? 32 : 1);
        let d = e.match(tL);
        if (d) {
          let [e, m, g = "256"] = d,
            y = Number.parseInt(g) / 8;
          return fromNumber(l, { size: c ? 32 : y, signed: "int" === m });
        }
        let m = e.match(tF);
        if (m) {
          let [e, d] = m;
          if (Number.parseInt(d) !== (l.length - 2) / 2)
            throw new BytesSizeMismatchError({
              expectedSize: Number.parseInt(d),
              value: l,
            });
          return padRight(l, c ? 32 : 0);
        }
        let g = e.match(tR);
        if (g && Array.isArray(l)) {
          let [e, c] = g,
            d = [];
          for (let e = 0; e < l.length; e++) d.push(encode(c, l[e], !0));
          return 0 === d.length ? "0x" : Hex_concat(...d);
        }
        throw new InvalidTypeError(e);
      };
      let ArrayLengthMismatchError = class ArrayLengthMismatchError extends BaseError {
        constructor({ expectedLength: e, givenLength: l, type: c }) {
          super(
            `Array length mismatch for type \`${c}\`. Expected: \`${e}\`. Given: \`${l}\`.`
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "AbiParameters.ArrayLengthMismatchError",
            });
        }
      };
      let BytesSizeMismatchError = class BytesSizeMismatchError extends BaseError {
        constructor({ expectedSize: e, value: l }) {
          super(
            `Size of bytes "${l}" (bytes${Hex_size(
              l
            )}) does not match expected size (bytes${e}).`
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "AbiParameters.BytesSizeMismatchError",
            });
        }
      };
      let LengthMismatchError = class LengthMismatchError extends BaseError {
        constructor({ expectedLength: e, givenLength: l }) {
          super(`ABI encoding parameters/values length mismatch.
Expected length (parameters): ${e}
Given length (values): ${l}`),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "AbiParameters.LengthMismatchError",
            });
        }
      };
      let InvalidArrayError = class InvalidArrayError extends BaseError {
        constructor(e) {
          super(`Value \`${e}\` is not a valid array.`),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "AbiParameters.InvalidArrayError",
            });
        }
      };
      let InvalidTypeError = class InvalidTypeError extends BaseError {
        constructor(e) {
          super(`Type \`${e}\` is not a valid ABI Type.`),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "AbiParameters.InvalidTypeError",
            });
        }
      };
      function AbiFunction_from(e, l = {}) {
        return AbiItem_from(e, l);
      }
      let tU = "0x0000000000000000000000000000000000000000";
      var tz = c(19739);
      async function simulateCalls(e, l) {
        let {
            blockNumber: c,
            blockTag: d,
            calls: m,
            stateOverrides: g,
            traceAssetChanges: y,
            traceTransfers: b,
            validation: C,
          } = l,
          P = l.account ? (0, eX.T)(l.account) : void 0;
        if (y && !P)
          throw new ek.G(
            "`account` is required when `traceAssetChanges` is true"
          );
        let I = P
            ? (function (e, l) {
                let { bytecode: c, args: d } = l;
                return Hex_concat(
                  c,
                  e.inputs?.length && d?.length
                    ? AbiParameters_encode(e.inputs, d)
                    : "0x"
                );
              })(AbiItem_from("constructor(bytes, bytes)"), {
                bytecode: tz.NO,
                args: [
                  "0x6080604052348015600e575f80fd5b5061016d8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063f8b2cb4f1461002d575b5f80fd5b610047600480360381019061004291906100db565b61005d565b604051610054919061011e565b60405180910390f35b5f8173ffffffffffffffffffffffffffffffffffffffff16319050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100aa82610081565b9050919050565b6100ba816100a0565b81146100c4575f80fd5b50565b5f813590506100d5816100b1565b92915050565b5f602082840312156100f0576100ef61007d565b5b5f6100fd848285016100c7565b91505092915050565b5f819050919050565b61011881610106565b82525050565b5f6020820190506101315f83018461010f565b9291505056fea26469706673582212203b9fe929fe995c7cf9887f0bdba8a36dd78e8b73f149b17d2d9ad7cd09d2dc6264736f6c634300081a0033",
                  (function (e, ...l) {
                    let { overloads: c } = e,
                      d = c
                        ? (function (e, l, c) {
                            let d = (function (e, l, c) {
                              let d;
                              let { args: m = [], prepare: g = !0 } = c ?? {},
                                y = (function (e, l = {}) {
                                  let { strict: c = !1 } = l;
                                  try {
                                    return (
                                      !(function (e, l = {}) {
                                        let { strict: c = !1 } = l;
                                        if (!e || "string" != typeof e)
                                          throw new InvalidHexTypeError(e);
                                        if (
                                          (c && !/^0x[0-9a-fA-F]*$/.test(e)) ||
                                          !e.startsWith("0x")
                                        )
                                          throw new InvalidHexValueError(e);
                                      })(e, { strict: c }),
                                      !0
                                    );
                                  } catch {
                                    return !1;
                                  }
                                })(l, { strict: !1 }),
                                b = e.filter((e) =>
                                  y
                                    ? "function" === e.type ||
                                      "error" === e.type
                                      ? getSelector(e) === slice(l, 0, 4)
                                      : "event" === e.type &&
                                        getSignatureHash(e) === l
                                    : "name" in e && e.name === l
                                );
                              if (0 === b.length)
                                throw new NotFoundError({ name: l });
                              if (1 === b.length)
                                return {
                                  ...b[0],
                                  ...(g
                                    ? { hash: getSignatureHash(b[0]) }
                                    : {}),
                                };
                              for (let e of b) {
                                if (!("inputs" in e)) continue;
                                if (!m || 0 === m.length) {
                                  if (!e.inputs || 0 === e.inputs.length)
                                    return {
                                      ...e,
                                      ...(g
                                        ? { hash: getSignatureHash(e) }
                                        : {}),
                                    };
                                  continue;
                                }
                                if (
                                  !e.inputs ||
                                  0 === e.inputs.length ||
                                  e.inputs.length !== m.length
                                )
                                  continue;
                                let l = m.every((l, c) => {
                                  let d = "inputs" in e && e.inputs[c];
                                  return (
                                    !!d &&
                                    (function isArgOfType(e, l) {
                                      let c = typeof e,
                                        d = l.type;
                                      switch (d) {
                                        case "address":
                                          return Address_validate(e, {
                                            strict: !1,
                                          });
                                        case "bool":
                                          return "boolean" === c;
                                        case "function":
                                        case "string":
                                          return "string" === c;
                                        default:
                                          if (
                                            "tuple" === d &&
                                            "components" in l
                                          )
                                            return Object.values(
                                              l.components
                                            ).every((l, c) =>
                                              isArgOfType(
                                                Object.values(e)[c],
                                                l
                                              )
                                            );
                                          if (
                                            /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(
                                              d
                                            )
                                          )
                                            return (
                                              "number" === c || "bigint" === c
                                            );
                                          if (
                                            /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(
                                              d
                                            )
                                          )
                                            return (
                                              "string" === c ||
                                              e instanceof Uint8Array
                                            );
                                          if (
                                            /[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(
                                              d
                                            )
                                          )
                                            return (
                                              Array.isArray(e) &&
                                              e.every((e) =>
                                                isArgOfType(e, {
                                                  ...l,
                                                  type: d.replace(
                                                    /(\[[0-9]{0,}\])$/,
                                                    ""
                                                  ),
                                                })
                                              )
                                            );
                                          return !1;
                                      }
                                    })(l, d)
                                  );
                                });
                                if (l) {
                                  if (d && "inputs" in d && d.inputs) {
                                    let l = (function getAmbiguousTypes(
                                      e,
                                      l,
                                      c
                                    ) {
                                      for (let d in e) {
                                        let m = e[d],
                                          g = l[d];
                                        if (
                                          "tuple" === m.type &&
                                          "tuple" === g.type &&
                                          "components" in m &&
                                          "components" in g
                                        )
                                          return getAmbiguousTypes(
                                            m.components,
                                            g.components,
                                            c[d]
                                          );
                                        let y = [m.type, g.type],
                                          b =
                                            !!(
                                              y.includes("address") &&
                                              y.includes("bytes20")
                                            ) ||
                                            (!!(
                                              (y.includes("address") &&
                                                y.includes("string")) ||
                                              (y.includes("address") &&
                                                y.includes("bytes"))
                                            ) &&
                                              Address_validate(c[d], {
                                                strict: !1,
                                              }));
                                        if (b) return y;
                                      }
                                    })(e.inputs, d.inputs, m);
                                    if (l)
                                      throw new AmbiguityError(
                                        { abiItem: e, type: l[0] },
                                        { abiItem: d, type: l[1] }
                                      );
                                  }
                                  d = e;
                                }
                              }
                              let C = (() => {
                                if (d) return d;
                                let [e, ...l] = b;
                                return { ...e, overloads: l };
                              })();
                              if (!C) throw new NotFoundError({ name: l });
                              return {
                                ...C,
                                ...(g ? { hash: getSignatureHash(C) } : {}),
                              };
                            })(e, l, c);
                            if ("function" !== d.type)
                              throw new NotFoundError({
                                name: l,
                                type: "function",
                              });
                            return d;
                          })([e, ...c], e.name, { args: l[0] })
                        : e,
                      m = getSelector(d),
                      g =
                        l.length > 0
                          ? AbiParameters_encode(d.inputs, l[0])
                          : void 0;
                    return g ? Hex_concat(m, g) : m;
                  })(AbiFunction_from("function getBalance(address)"), [
                    P.address,
                  ]),
                ],
              })
            : void 0,
          B = y
            ? await Promise.all(
                l.calls.map(async (l) => {
                  if (!l.data && !l.abi) return;
                  let { accessList: c } = await createAccessList(e, {
                    account: P.address,
                    ...l,
                    data: l.abi ? (0, eD.R)(l) : l.data,
                  });
                  return c.map(({ address: e, storageKeys: l }) =>
                    l.length > 0 ? e : null
                  );
                })
              ).then((e) => e.flat().filter(Boolean))
            : [],
          N = g?.map((e) =>
            e.address === P?.address ? { ...e, nonce: 0 } : e
          ),
          F = await simulateBlocks(e, {
            blockNumber: c,
            blockTag: d,
            blocks: [
              ...(y
                ? [
                    { calls: [{ data: I }], stateOverrides: g },
                    {
                      calls: B.map((e, l) => ({
                        abi: [
                          AbiFunction_from(
                            "function balanceOf(address) returns (uint256)"
                          ),
                        ],
                        functionName: "balanceOf",
                        args: [P.address],
                        to: e,
                        from: tU,
                        nonce: l,
                      })),
                      stateOverrides: [{ address: tU, nonce: 0 }],
                    },
                  ]
                : []),
              {
                calls: [...m, {}].map((e, l) => ({
                  ...e,
                  from: P?.address,
                  nonce: l,
                })),
                stateOverrides: N,
              },
              ...(y
                ? [
                    { calls: [{ data: I }] },
                    {
                      calls: B.map((e, l) => ({
                        abi: [
                          AbiFunction_from(
                            "function balanceOf(address) returns (uint256)"
                          ),
                        ],
                        functionName: "balanceOf",
                        args: [P.address],
                        to: e,
                        from: tU,
                        nonce: l,
                      })),
                      stateOverrides: [{ address: tU, nonce: 0 }],
                    },
                    {
                      calls: B.map((e, l) => ({
                        to: e,
                        abi: [
                          AbiFunction_from(
                            "function decimals() returns (uint256)"
                          ),
                        ],
                        functionName: "decimals",
                        from: tU,
                        nonce: l,
                      })),
                      stateOverrides: [{ address: tU, nonce: 0 }],
                    },
                    {
                      calls: B.map((e, l) => ({
                        to: e,
                        abi: [
                          AbiFunction_from(
                            "function tokenURI(uint256) returns (string)"
                          ),
                        ],
                        functionName: "tokenURI",
                        args: [0n],
                        from: tU,
                        nonce: l,
                      })),
                      stateOverrides: [{ address: tU, nonce: 0 }],
                    },
                    {
                      calls: B.map((e, l) => ({
                        to: e,
                        abi: [
                          AbiFunction_from(
                            "function symbol() returns (string)"
                          ),
                        ],
                        functionName: "symbol",
                        from: tU,
                        nonce: l,
                      })),
                      stateOverrides: [{ address: tU, nonce: 0 }],
                    },
                  ]
                : []),
            ],
            traceTransfers: b,
            validation: C,
          }),
          V = y ? F[2] : F[0],
          [G, Q, , $, Z, Y, et, en] = y ? F : [],
          { calls: er, ...ei } = V,
          eo = er.slice(0, -1) ?? [],
          ea = G?.calls ?? [],
          es = Q?.calls ?? [],
          el = [...ea, ...es].map((e) =>
            "success" === e.status ? (0, em.y_)(e.data) : null
          ),
          ec = $?.calls ?? [],
          eu = Z?.calls ?? [],
          ed = [...ec, ...eu].map((e) =>
            "success" === e.status ? (0, em.y_)(e.data) : null
          ),
          ep = (Y?.calls ?? []).map((e) =>
            "success" === e.status ? e.result : null
          ),
          eh = (en?.calls ?? []).map((e) =>
            "success" === e.status ? e.result : null
          ),
          ef = (et?.calls ?? []).map((e) =>
            "success" === e.status ? e.result : null
          ),
          eg = [];
        for (let [e, l] of ed.entries()) {
          let c = el[e];
          if ("bigint" != typeof l || "bigint" != typeof c) continue;
          let d = ep[e - 1],
            m = eh[e - 1],
            g = ef[e - 1],
            y =
              0 === e
                ? {
                    address: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
                    decimals: 18,
                    symbol: "ETH",
                  }
                : {
                    address: B[e - 1],
                    decimals: g || d ? Number(d ?? 1) : void 0,
                    symbol: m ?? void 0,
                  };
          eg.some((e) => e.token.address === y.address) ||
            eg.push({ token: y, value: { pre: c, post: l, diff: l - c } });
        }
        return { assetChanges: eg, block: ei, results: eo };
      }
      async function simulateContract(e, l) {
        let {
            abi: c,
            address: d,
            args: m,
            dataSuffix: g,
            functionName: y,
            ...b
          } = l,
          C = b.account ? (0, eX.T)(b.account) : e.account,
          P = (0, eD.R)({ abi: c, args: m, functionName: y });
        try {
          let { data: I } = await (0, ej.s)(
              e,
              eY.R,
              "call"
            )({
              batch: !1,
              data: `${P}${g ? g.replace("0x", "") : ""}`,
              to: d,
              ...b,
              account: C,
            }),
            B = (0, eB.k)({
              abi: c,
              args: m,
              functionName: y,
              data: I || "0x",
            }),
            N = c.filter((e) => "name" in e && e.name === l.functionName);
          return {
            result: B,
            request: {
              abi: N,
              address: d,
              args: m,
              dataSuffix: g,
              functionName: y,
              ...b,
              account: C,
            },
          };
        } catch (e) {
          throw (0, e9.S)(e, {
            abi: c,
            address: d,
            args: m,
            docsPath: "/docs/contract/simulateContract",
            functionName: y,
            sender: C?.address,
          });
        }
      }
      async function uninstallFilter(e, { filter: l }) {
        return l.request({ method: "eth_uninstallFilter", params: [l.id] });
      }
      var tW = c(420),
        tq = c(53991),
        tV = c(69301),
        tH = c(25622);
      let tG =
        "0x6492649264926492649264926492649264926492649264926492649264926492";
      var tQ = c(46548),
        t$ = c(7921),
        tK = c(83708);
      async function verifyHash(e, l) {
        let {
            address: c,
            factory: d,
            factoryData: m,
            hash: g,
            signature: y,
            universalSignatureVerifierAddress: b = e.chain?.contracts
              ?.universalSignatureVerifier?.address,
            ...C
          } = l,
          P = (0, tH.v)(y)
            ? y
            : "object" == typeof y && "r" in y && "s" in y
            ? (function ({ r: e, s: l, to: c = "hex", v: d, yParity: m }) {
                let g = (() => {
                    if (0 === m || 1 === m) return m;
                    if (d && (27n === d || 28n === d || d >= 35n))
                      return d % 2n === 0n ? 1 : 0;
                    throw Error("Invalid `v` or `yParity` value");
                  })(),
                  y = `0x${new tK.secp256k1.Signature(
                    (0, em.y_)(e),
                    (0, em.y_)(l)
                  ).toCompactHex()}${0 === g ? "1b" : "1c"}`;
                return "hex" === c ? y : (0, ez.nr)(y);
              })(y)
            : (0, eR.ci)(y),
          I = await (async () =>
            d || m
              ? (0, tQ.p5)(P, -32) === tG
                ? P
                : (function (e) {
                    let {
                        address: l,
                        data: c,
                        signature: d,
                        to: m = "hex",
                      } = e,
                      g = (0, eU.SM)([
                        (0, e5.E)(
                          [
                            { type: "address" },
                            { type: "bytes" },
                            { type: "bytes" },
                          ],
                          [l, c, d]
                        ),
                        tG,
                      ]);
                    return "hex" === m ? g : (0, ez.nr)(g);
                  })({ address: d, data: m, signature: P })
              : P)();
        try {
          let l = b
              ? {
                  to: b,
                  data: (0, eD.R)({
                    abi: eO.$o,
                    functionName: "isValidSig",
                    args: [c, g, I],
                  }),
                  ...C,
                }
              : {
                  data: (0, tq.w)({
                    abi: eO.$o,
                    args: [c, g, I],
                    bytecode: tz.ST,
                  }),
                  ...C,
                },
            { data: d } = await (0, ej.s)(e, eY.R, "call")(l);
          return (0, em.XA)(d ?? "0x0");
        } catch (e) {
          try {
            let e = (0, ts.E)(
              (0, tV.K)(c),
              await (0, t$.R)({ hash: g, signature: y })
            );
            if (e) return !0;
          } catch {}
          if (e instanceof tx.cg) return !1;
          throw e;
        }
      }
      async function verifyMessage(
        e,
        {
          address: l,
          message: c,
          factory: d,
          factoryData: m,
          signature: g,
          ...y
        }
      ) {
        let b = (0, tW.r)(c);
        return verifyHash(e, {
          address: l,
          factory: d,
          factoryData: m,
          hash: b,
          signature: g,
          ...y,
        });
      }
      var tZ = c(31668);
      async function verifyTypedData(e, l) {
        let {
            address: c,
            factory: d,
            factoryData: m,
            signature: g,
            message: y,
            primaryType: b,
            types: C,
            domain: P,
            ...I
          } = l,
          B = (0, tZ.Jv)({ message: y, primaryType: b, types: C, domain: P });
        return verifyHash(e, {
          address: c,
          factory: d,
          factoryData: m,
          hash: B,
          signature: g,
          ...I,
        });
      }
      var tY = c(4620),
        tX = c(27455),
        tJ = c(29951),
        t0 = c(9075),
        t1 = c(32836),
        t2 = c(42991);
      let t6 =
          /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\/\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\n)(?<address>0x[a-fA-F0-9]{40})\n\n(?:(?<statement>.*)\n\n)?/,
        t3 =
          /(?:URI: (?<uri>.+))\n(?:Version: (?<version>.+))\n(?:Chain ID: (?<chainId>\d+))\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\n(?:Issued At: (?<issuedAt>.+))(?:\nExpiration Time: (?<expirationTime>.+))?(?:\nNot Before: (?<notBefore>.+))?(?:\nRequest ID: (?<requestId>.+))?/;
      async function verifySiweMessage(e, l) {
        let {
            address: c,
            domain: d,
            message: m,
            nonce: g,
            scheme: y,
            signature: b,
            time: C = new Date(),
            ...P
          } = l,
          I = (function (e) {
            let { scheme: l, statement: c, ...d } = e.match(t6)?.groups ?? {},
              {
                chainId: m,
                expirationTime: g,
                issuedAt: y,
                notBefore: b,
                requestId: C,
                ...P
              } = e.match(t3)?.groups ?? {},
              I = e.split("Resources:")[1]?.split("\n- ").slice(1);
            return {
              ...d,
              ...P,
              ...(m ? { chainId: Number(m) } : {}),
              ...(g ? { expirationTime: new Date(g) } : {}),
              ...(y ? { issuedAt: new Date(y) } : {}),
              ...(b ? { notBefore: new Date(b) } : {}),
              ...(C ? { requestId: C } : {}),
              ...(I ? { resources: I } : {}),
              ...(l ? { scheme: l } : {}),
              ...(c ? { statement: c } : {}),
            };
          })(m);
        if (!I.address) return !1;
        let B = (function (e) {
          let {
            address: l,
            domain: c,
            message: d,
            nonce: m,
            scheme: g,
            time: y = new Date(),
          } = e;
          if (
            (c && d.domain !== c) ||
            (m && d.nonce !== m) ||
            (g && d.scheme !== g) ||
            (d.expirationTime && y >= d.expirationTime) ||
            (d.notBefore && y < d.notBefore)
          )
            return !1;
          try {
            if (!d.address || (l && !(0, ts.E)(d.address, l))) return !1;
          } catch {
            return !1;
          }
          return !0;
        })({ address: c, domain: d, message: I, nonce: g, scheme: y, time: C });
        if (!B) return !1;
        let N = (0, tW.r)(m);
        return verifyHash(e, {
          address: I.address,
          hash: N,
          signature: b,
          ...P,
        });
      }
      var t5 = c(16886),
        t4 = c(96279);
      function publicActions(e) {
        return {
          call: (l) => (0, eY.R)(e, l),
          createAccessList: (l) => createAccessList(e, l),
          createBlockFilter: () => createBlockFilter(e),
          createContractEventFilter: (l) => createContractEventFilter(e, l),
          createEventFilter: (l) => createEventFilter(e, l),
          createPendingTransactionFilter: () =>
            createPendingTransactionFilter(e),
          estimateContractGas: (l) => estimateContractGas(e, l),
          estimateGas: (l) => (0, te.Q)(e, l),
          getBalance: (l) => (0, eb.s)(e, l),
          getBlobBaseFee: () => getBlobBaseFee(e),
          getBlock: (l) => (0, tr.Q)(e, l),
          getBlockNumber: (l) => (0, ti.z)(e, l),
          getBlockTransactionCount: (l) => getBlockTransactionCount(e, l),
          getBytecode: (l) => getCode(e, l),
          getChainId: () => (0, ta.L)(e),
          getCode: (l) => getCode(e, l),
          getContractEvents: (l) => getContractEvents(e, l),
          getEip712Domain: (l) => getEip712Domain(e, l),
          getEnsAddress: (l) => getEnsAddress(e, l),
          getEnsAvatar: (l) => getEnsAvatar(e, l),
          getEnsName: (l) => (0, eZ.w)(e, l),
          getEnsResolver: (l) => getEnsResolver(e, l),
          getEnsText: (l) => getEnsText(e, l),
          getFeeHistory: (l) => getFeeHistory(e, l),
          estimateFeesPerGas: (l) => (0, tt.X)(e, l),
          getFilterChanges: (l) => getFilterChanges(e, l),
          getFilterLogs: (l) => getFilterLogs(e, l),
          getGasPrice: () => (0, tf.o)(e),
          getLogs: (l) => getLogs(e, l),
          getProof: (l) => getProof(e, l),
          estimateMaxPriorityFeePerGas: (l) => (0, tn._)(e, l),
          getStorageAt: (l) => getStorageAt(e, l),
          getTransaction: (l) => (0, tm.f)(e, l),
          getTransactionConfirmations: (l) => getTransactionConfirmations(e, l),
          getTransactionCount: (l) => (0, tg.K)(e, l),
          getTransactionReceipt: (l) => (0, ty.a)(e, l),
          multicall: (l) => (0, tb.A)(e, l),
          prepareTransactionRequest: (l) => (0, t5.ZE)(e, l),
          readContract: (l) => (0, eS.L)(e, l),
          sendRawTransaction: (l) => (0, t4.p)(e, l),
          simulate: (l) => simulateBlocks(e, l),
          simulateBlocks: (l) => simulateBlocks(e, l),
          simulateCalls: (l) => simulateCalls(e, l),
          simulateContract: (l) => simulateContract(e, l),
          verifyMessage: (l) => verifyMessage(e, l),
          verifySiweMessage: (l) => verifySiweMessage(e, l),
          verifyTypedData: (l) => verifyTypedData(e, l),
          uninstallFilter: (l) => uninstallFilter(e, l),
          waitForTransactionReceipt: (l) => (0, tY.e)(e, l),
          watchBlocks: (l) =>
            (function (
              e,
              {
                blockTag: l = "latest",
                emitMissed: c = !1,
                emitOnBegin: d = !1,
                onBlock: m,
                onError: g,
                includeTransactions: y,
                poll: b,
                pollingInterval: C = e.pollingInterval,
              }
            ) {
              let P, I, B, N;
              let F =
                  void 0 !== b
                    ? b
                    : "webSocket" !== e.transport.type &&
                      ("fallback" !== e.transport.type ||
                        "webSocket" !== e.transport.transports[0].config.type),
                V = y ?? !1;
              return F
                ? (() => {
                    let y = (0, t1.P)(["watchBlocks", e.uid, l, c, d, V, C]);
                    return (0, tJ.N7)(y, { onBlock: m, onError: g }, (m) =>
                      (0, t0.$)(
                        async () => {
                          try {
                            let d = await (0, ej.s)(
                              e,
                              tr.Q,
                              "getBlock"
                            )({ blockTag: l, includeTransactions: V });
                            if (d.number && P?.number) {
                              if (d.number === P.number) return;
                              if (d.number - P.number > 1 && c)
                                for (
                                  let l = P?.number + 1n;
                                  l < d.number;
                                  l++
                                ) {
                                  let c = await (0, ej.s)(
                                    e,
                                    tr.Q,
                                    "getBlock"
                                  )({ blockNumber: l, includeTransactions: V });
                                  m.onBlock(c, P), (P = c);
                                }
                            }
                            (!P?.number ||
                              ("pending" === l && !d?.number) ||
                              (d.number && d.number > P.number)) &&
                              (m.onBlock(d, P), (P = d));
                          } catch (e) {
                            m.onError?.(e);
                          }
                        },
                        { emitOnBegin: d, interval: C }
                      )
                    );
                  })()
                : ((I = !0),
                  (B = !0),
                  (N = () => (I = !1)),
                  (async () => {
                    try {
                      d &&
                        (0, ej.s)(
                          e,
                          tr.Q,
                          "getBlock"
                        )({ blockTag: l, includeTransactions: V }).then((e) => {
                          I && B && (m(e, void 0), (B = !1));
                        });
                      let c = (() => {
                          if ("fallback" === e.transport.type) {
                            let l = e.transport.transports.find(
                              (e) => "webSocket" === e.config.type
                            );
                            return l ? l.value : e.transport;
                          }
                          return e.transport;
                        })(),
                        { unsubscribe: y } = await c.subscribe({
                          params: ["newHeads"],
                          async onData(l) {
                            if (!I) return;
                            let c = await (0, ej.s)(
                              e,
                              tr.Q,
                              "getBlock"
                            )({
                              blockNumber: l.blockNumber,
                              includeTransactions: V,
                            }).catch(() => {});
                            I && (m(c, P), (B = !1), (P = c));
                          },
                          onError(e) {
                            g?.(e);
                          },
                        });
                      (N = y), I || N();
                    } catch (e) {
                      g?.(e);
                    }
                  })(),
                  () => N());
            })(e, l),
          watchBlockNumber: (l) => (0, tX.q)(e, l),
          watchContractEvent: (l) =>
            (function (e, l) {
              let {
                  abi: c,
                  address: d,
                  args: m,
                  batch: g = !0,
                  eventName: y,
                  fromBlock: b,
                  onError: C,
                  onLogs: P,
                  poll: I,
                  pollingInterval: B = e.pollingInterval,
                  strict: N,
                } = l,
                F =
                  void 0 !== I
                    ? I
                    : "bigint" == typeof b ||
                      ("webSocket" !== e.transport.type &&
                        ("fallback" !== e.transport.type ||
                          "webSocket" !==
                            e.transport.transports[0].config.type));
              return F
                ? (() => {
                    let l = N ?? !1,
                      I = (0, t1.P)([
                        "watchContractEvent",
                        d,
                        m,
                        g,
                        e.uid,
                        y,
                        B,
                        l,
                        b,
                      ]);
                    return (0, tJ.N7)(I, { onLogs: P, onError: C }, (C) => {
                      let P, I;
                      void 0 !== b && (P = b - 1n);
                      let N = !1,
                        F = (0, t0.$)(
                          async () => {
                            if (!N) {
                              try {
                                I = await (0, ej.s)(
                                  e,
                                  createContractEventFilter,
                                  "createContractEventFilter"
                                )({
                                  abi: c,
                                  address: d,
                                  args: m,
                                  eventName: y,
                                  strict: l,
                                  fromBlock: b,
                                });
                              } catch {}
                              N = !0;
                              return;
                            }
                            try {
                              let b;
                              if (I)
                                b = await (0, ej.s)(
                                  e,
                                  getFilterChanges,
                                  "getFilterChanges"
                                )({ filter: I });
                              else {
                                let g = await (0, ej.s)(
                                  e,
                                  ti.z,
                                  "getBlockNumber"
                                )({});
                                (b =
                                  P && P < g
                                    ? await (0, ej.s)(
                                        e,
                                        getContractEvents,
                                        "getContractEvents"
                                      )({
                                        abi: c,
                                        address: d,
                                        args: m,
                                        eventName: y,
                                        fromBlock: P + 1n,
                                        toBlock: g,
                                        strict: l,
                                      })
                                    : []),
                                  (P = g);
                              }
                              if (0 === b.length) return;
                              if (g) C.onLogs(b);
                              else for (let e of b) C.onLogs([e]);
                            } catch (e) {
                              I && e instanceof t2.yR && (N = !1),
                                C.onError?.(e);
                            }
                          },
                          { emitOnBegin: !0, interval: B }
                        );
                      return async () => {
                        I &&
                          (await (0, ej.s)(
                            e,
                            uninstallFilter,
                            "uninstallFilter"
                          )({ filter: I })),
                          F();
                      };
                    });
                  })()
                : (() => {
                    let l = (0, t1.P)([
                        "watchContractEvent",
                        d,
                        m,
                        g,
                        e.uid,
                        y,
                        B,
                        N ?? !1,
                      ]),
                      b = !0,
                      unsubscribe = () => (b = !1);
                    return (0, tJ.N7)(
                      l,
                      { onLogs: P, onError: C },
                      (l) => (
                        (async () => {
                          try {
                            let g = (() => {
                                if ("fallback" === e.transport.type) {
                                  let l = e.transport.transports.find(
                                    (e) => "webSocket" === e.config.type
                                  );
                                  return l ? l.value : e.transport;
                                }
                                return e.transport;
                              })(),
                              C = y
                                ? encodeEventTopics({
                                    abi: c,
                                    eventName: y,
                                    args: m,
                                  })
                                : [],
                              { unsubscribe: P } = await g.subscribe({
                                params: ["logs", { address: d, topics: C }],
                                onData(e) {
                                  if (!b) return;
                                  let d = e.result;
                                  try {
                                    let { eventName: e, args: m } =
                                        decodeEventLog({
                                          abi: c,
                                          data: d.data,
                                          topics: d.topics,
                                          strict: N,
                                        }),
                                      g = (0, tp.U)(d, {
                                        args: m,
                                        eventName: e,
                                      });
                                    l.onLogs([g]);
                                  } catch (g) {
                                    let e, c;
                                    if (
                                      g instanceof e6.SM ||
                                      g instanceof e6.Gy
                                    ) {
                                      if (N) return;
                                      (e = g.abiItem.name),
                                        (c = g.abiItem.inputs?.some(
                                          (e) => !("name" in e && e.name)
                                        ));
                                    }
                                    let m = (0, tp.U)(d, {
                                      args: c ? [] : {},
                                      eventName: e,
                                    });
                                    l.onLogs([m]);
                                  }
                                },
                                onError(e) {
                                  l.onError?.(e);
                                },
                              });
                            (unsubscribe = P), b || unsubscribe();
                          } catch (e) {
                            C?.(e);
                          }
                        })(),
                        () => unsubscribe()
                      )
                    );
                  })();
            })(e, l),
          watchEvent: (l) =>
            (function (
              e,
              {
                address: l,
                args: c,
                batch: d = !0,
                event: m,
                events: g,
                fromBlock: y,
                onError: b,
                onLogs: C,
                poll: P,
                pollingInterval: I = e.pollingInterval,
                strict: B,
              }
            ) {
              let N, F;
              let V =
                  void 0 !== P
                    ? P
                    : "bigint" == typeof y ||
                      ("webSocket" !== e.transport.type &&
                        ("fallback" !== e.transport.type ||
                          "webSocket" !==
                            e.transport.transports[0].config.type)),
                G = B ?? !1;
              return V
                ? (() => {
                    let P = (0, t1.P)(["watchEvent", l, c, d, e.uid, m, I, y]);
                    return (0, tJ.N7)(P, { onLogs: C, onError: b }, (b) => {
                      let C, P;
                      void 0 !== y && (C = y - 1n);
                      let B = !1,
                        N = (0, t0.$)(
                          async () => {
                            if (!B) {
                              try {
                                P = await (0, ej.s)(
                                  e,
                                  createEventFilter,
                                  "createEventFilter"
                                )({
                                  address: l,
                                  args: c,
                                  event: m,
                                  events: g,
                                  strict: G,
                                  fromBlock: y,
                                });
                              } catch {}
                              B = !0;
                              return;
                            }
                            try {
                              let y;
                              if (P)
                                y = await (0, ej.s)(
                                  e,
                                  getFilterChanges,
                                  "getFilterChanges"
                                )({ filter: P });
                              else {
                                let d = await (0, ej.s)(
                                  e,
                                  ti.z,
                                  "getBlockNumber"
                                )({});
                                (y =
                                  C && C !== d
                                    ? await (0, ej.s)(
                                        e,
                                        getLogs,
                                        "getLogs"
                                      )({
                                        address: l,
                                        args: c,
                                        event: m,
                                        events: g,
                                        fromBlock: C + 1n,
                                        toBlock: d,
                                      })
                                    : []),
                                  (C = d);
                              }
                              if (0 === y.length) return;
                              if (d) b.onLogs(y);
                              else for (let e of y) b.onLogs([e]);
                            } catch (e) {
                              P && e instanceof t2.yR && (B = !1),
                                b.onError?.(e);
                            }
                          },
                          { emitOnBegin: !0, interval: I }
                        );
                      return async () => {
                        P &&
                          (await (0, ej.s)(
                            e,
                            uninstallFilter,
                            "uninstallFilter"
                          )({ filter: P })),
                          N();
                      };
                    });
                  })()
                : ((N = !0),
                  (F = () => (N = !1)),
                  (async () => {
                    try {
                      let d = (() => {
                          if ("fallback" === e.transport.type) {
                            let l = e.transport.transports.find(
                              (e) => "webSocket" === e.config.type
                            );
                            return l ? l.value : e.transport;
                          }
                          return e.transport;
                        })(),
                        y = g ?? (m ? [m] : void 0),
                        P = [];
                      if (y) {
                        let e = y.flatMap((e) =>
                          encodeEventTopics({
                            abi: [e],
                            eventName: e.name,
                            args: c,
                          })
                        );
                        (P = [e]), m && (P = P[0]);
                      }
                      let { unsubscribe: I } = await d.subscribe({
                        params: ["logs", { address: l, topics: P }],
                        onData(e) {
                          if (!N) return;
                          let l = e.result;
                          try {
                            let { eventName: e, args: c } = decodeEventLog({
                                abi: y ?? [],
                                data: l.data,
                                topics: l.topics,
                                strict: G,
                              }),
                              d = (0, tp.U)(l, { args: c, eventName: e });
                            C([d]);
                          } catch (m) {
                            let e, c;
                            if (m instanceof e6.SM || m instanceof e6.Gy) {
                              if (B) return;
                              (e = m.abiItem.name),
                                (c = m.abiItem.inputs?.some(
                                  (e) => !("name" in e && e.name)
                                ));
                            }
                            let d = (0, tp.U)(l, {
                              args: c ? [] : {},
                              eventName: e,
                            });
                            C([d]);
                          }
                        },
                        onError(e) {
                          b?.(e);
                        },
                      });
                      (F = I), N || F();
                    } catch (e) {
                      b?.(e);
                    }
                  })(),
                  () => F());
            })(e, l),
          watchPendingTransactions: (l) =>
            (function (
              e,
              {
                batch: l = !0,
                onError: c,
                onTransactions: d,
                poll: m,
                pollingInterval: g = e.pollingInterval,
              }
            ) {
              let y, b;
              let C = void 0 !== m ? m : "webSocket" !== e.transport.type;
              return C
                ? (() => {
                    let m = (0, t1.P)([
                      "watchPendingTransactions",
                      e.uid,
                      l,
                      g,
                    ]);
                    return (0, tJ.N7)(
                      m,
                      { onTransactions: d, onError: c },
                      (c) => {
                        let d;
                        let m = (0, t0.$)(
                          async () => {
                            try {
                              if (!d)
                                try {
                                  d = await (0, ej.s)(
                                    e,
                                    createPendingTransactionFilter,
                                    "createPendingTransactionFilter"
                                  )({});
                                  return;
                                } catch (e) {
                                  throw (m(), e);
                                }
                              let g = await (0, ej.s)(
                                e,
                                getFilterChanges,
                                "getFilterChanges"
                              )({ filter: d });
                              if (0 === g.length) return;
                              if (l) c.onTransactions(g);
                              else for (let e of g) c.onTransactions([e]);
                            } catch (e) {
                              c.onError?.(e);
                            }
                          },
                          { emitOnBegin: !0, interval: g }
                        );
                        return async () => {
                          d &&
                            (await (0, ej.s)(
                              e,
                              uninstallFilter,
                              "uninstallFilter"
                            )({ filter: d })),
                            m();
                        };
                      }
                    );
                  })()
                : ((y = !0),
                  (b = () => (y = !1)),
                  (async () => {
                    try {
                      let { unsubscribe: l } = await e.transport.subscribe({
                        params: ["newPendingTransactions"],
                        onData(e) {
                          if (!y) return;
                          let l = e.result;
                          d([l]);
                        },
                        onError(e) {
                          c?.(e);
                        },
                      });
                      (b = l), y || b();
                    } catch (e) {
                      c?.(e);
                    }
                  })(),
                  () => b());
            })(e, l),
        };
      }
      function getPublicClient(e, l = {}) {
        let c = (function (e, l = {}) {
          let c;
          try {
            c = e.getClient(l);
          } catch {}
          return c;
        })(e, l);
        return c?.extend(publicActions);
      }
      var t7 = c(63236),
        t8 = c(53156);
      function useAccountEffect_useAccountEffect(e = {}) {
        let { onConnect: l, onDisconnect: c } = e,
          d = (0, ef.Z)(e);
        (0, ed.useEffect)(
          () =>
            (0, t8.u)(d, {
              onChange(e, d) {
                if (
                  ("reconnecting" === d.status ||
                    ("connecting" === d.status && void 0 === d.address)) &&
                  "connected" === e.status
                ) {
                  let {
                      address: c,
                      addresses: m,
                      chain: g,
                      chainId: y,
                      connector: b,
                    } = e,
                    C = "reconnecting" === d.status || void 0 === d.status;
                  l?.({
                    address: c,
                    addresses: m,
                    chain: g,
                    chainId: y,
                    connector: b,
                    isReconnected: C,
                  });
                } else
                  "connected" === d.status &&
                    "disconnected" === e.status &&
                    c?.();
              },
            }),
          [d, l, c]
        );
      }
      var t9 = c(88644),
        ne = c(10422),
        nt = c(15767),
        nn = "right-scroll-bar-position",
        nr = "width-before-scroll-bar";
      function assignRef(e, l) {
        return "function" == typeof e ? e(l) : e && (e.current = l), e;
      }
      var ni = "undefined" != typeof window ? ed.useLayoutEffect : ed.useEffect,
        no = new WeakMap(),
        na =
          (void 0 === Y && (Y = {}),
          ((void 0 === et &&
            (et = function (e) {
              return e;
            }),
          (en = []),
          (er = !1),
          (ei = {
            read: function () {
              if (er)
                throw Error(
                  "Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`."
                );
              return en.length ? en[en.length - 1] : null;
            },
            useMedium: function (e) {
              var l = et(e, er);
              return (
                en.push(l),
                function () {
                  en = en.filter(function (e) {
                    return e !== l;
                  });
                }
              );
            },
            assignSyncMedium: function (e) {
              for (er = !0; en.length; ) {
                var l = en;
                (en = []), l.forEach(e);
              }
              en = {
                push: function (l) {
                  return e(l);
                },
                filter: function () {
                  return en;
                },
              };
            },
            assignMedium: function (e) {
              er = !0;
              var l = [];
              if (en.length) {
                var c = en;
                (en = []), c.forEach(e), (l = en);
              }
              var executeQueue = function () {
                  var c = l;
                  (l = []), c.forEach(e);
                },
                cycle = function () {
                  return Promise.resolve().then(executeQueue);
                };
              cycle(),
                (en = {
                  push: function (e) {
                    l.push(e), cycle();
                  },
                  filter: function (e) {
                    return (l = l.filter(e)), en;
                  },
                });
            },
          })).options = (0, nt.__assign)({ async: !0, ssr: !1 }, Y)),
          ei),
        nothing = function () {},
        ns = ed.forwardRef(function (e, l) {
          var c,
            d,
            m,
            g,
            y = ed.useRef(null),
            b = ed.useState({
              onScrollCapture: nothing,
              onWheelCapture: nothing,
              onTouchMoveCapture: nothing,
            }),
            C = b[0],
            P = b[1],
            I = e.forwardProps,
            B = e.children,
            N = e.className,
            F = e.removeScrollBar,
            V = e.enabled,
            G = e.shards,
            Q = e.sideCar,
            $ = e.noIsolation,
            Z = e.inert,
            Y = e.allowPinchZoom,
            et = e.as,
            en = void 0 === et ? "div" : et,
            er = e.gapMode,
            ei = (0, nt.__rest)(e, [
              "forwardProps",
              "children",
              "className",
              "removeScrollBar",
              "enabled",
              "shards",
              "sideCar",
              "noIsolation",
              "inert",
              "allowPinchZoom",
              "as",
              "gapMode",
            ]),
            eo =
              ((c = [y, l]),
              (d = function (e) {
                return c.forEach(function (l) {
                  return assignRef(l, e);
                });
              }),
              ((m = (0, ed.useState)(function () {
                return {
                  value: null,
                  callback: d,
                  facade: {
                    get current() {
                      return m.value;
                    },
                    set current(value) {
                      var e = m.value;
                      e !== value && ((m.value = value), m.callback(value, e));
                    },
                  },
                };
              })[0]).callback = d),
              (g = m.facade),
              ni(
                function () {
                  var e = no.get(g);
                  if (e) {
                    var l = new Set(e),
                      d = new Set(c),
                      m = g.current;
                    l.forEach(function (e) {
                      d.has(e) || assignRef(e, null);
                    }),
                      d.forEach(function (e) {
                        l.has(e) || assignRef(e, m);
                      });
                  }
                  no.set(g, c);
                },
                [c]
              ),
              g),
            ea = (0, nt.__assign)((0, nt.__assign)({}, ei), C);
          return ed.createElement(
            ed.Fragment,
            null,
            V &&
              ed.createElement(Q, {
                sideCar: na,
                removeScrollBar: F,
                shards: G,
                noIsolation: $,
                inert: Z,
                setCallbacks: P,
                allowPinchZoom: !!Y,
                lockRef: y,
                gapMode: er,
              }),
            I
              ? ed.cloneElement(
                  ed.Children.only(B),
                  (0, nt.__assign)((0, nt.__assign)({}, ea), { ref: eo })
                )
              : ed.createElement(
                  en,
                  (0, nt.__assign)({}, ea, { className: N, ref: eo }),
                  B
                )
          );
        });
      (ns.defaultProps = { enabled: !0, removeScrollBar: !0, inert: !1 }),
        (ns.classNames = { fullWidth: nr, zeroRight: nn });
      var SideCar = function (e) {
        var l = e.sideCar,
          c = (0, nt.__rest)(e, ["sideCar"]);
        if (!l)
          throw Error(
            "Sidecar: please provide `sideCar` property to import the right car"
          );
        var d = l.read();
        if (!d) throw Error("Sidecar medium not found");
        return ed.createElement(d, (0, nt.__assign)({}, c));
      };
      SideCar.isSideCarExport = !0;
      var stylesheetSingleton = function () {
          var e = 0,
            l = null;
          return {
            add: function (d) {
              if (
                0 == e &&
                (l = (function () {
                  if (!document) return null;
                  var e = document.createElement("style");
                  e.type = "text/css";
                  var l = eo || c.nc;
                  return l && e.setAttribute("nonce", l), e;
                })())
              ) {
                var m, g;
                (m = l).styleSheet
                  ? (m.styleSheet.cssText = d)
                  : m.appendChild(document.createTextNode(d)),
                  (g = l),
                  (
                    document.head || document.getElementsByTagName("head")[0]
                  ).appendChild(g);
              }
              e++;
            },
            remove: function () {
              --e ||
                !l ||
                (l.parentNode && l.parentNode.removeChild(l), (l = null));
            },
          };
        },
        styleHookSingleton = function () {
          var e = stylesheetSingleton();
          return function (l, c) {
            ed.useEffect(
              function () {
                return (
                  e.add(l),
                  function () {
                    e.remove();
                  }
                );
              },
              [l && c]
            );
          };
        },
        styleSingleton = function () {
          var e = styleHookSingleton();
          return function (l) {
            return e(l.styles, l.dynamic), null;
          };
        },
        nl = { left: 0, top: 0, right: 0, gap: 0 },
        utils_parse = function (e) {
          return parseInt(e || "", 10) || 0;
        },
        getOffset = function (e) {
          var l = window.getComputedStyle(document.body),
            c = l["padding" === e ? "paddingLeft" : "marginLeft"],
            d = l["padding" === e ? "paddingTop" : "marginTop"],
            m = l["padding" === e ? "paddingRight" : "marginRight"];
          return [utils_parse(c), utils_parse(d), utils_parse(m)];
        },
        getGapWidth = function (e) {
          if ((void 0 === e && (e = "margin"), "undefined" == typeof window))
            return nl;
          var l = getOffset(e),
            c = document.documentElement.clientWidth,
            d = window.innerWidth;
          return {
            left: l[0],
            top: l[1],
            right: l[2],
            gap: Math.max(0, d - c + l[2] - l[0]),
          };
        },
        nc = styleSingleton(),
        nu = "data-scroll-locked",
        getStyles = function (e, l, c, d) {
          var m = e.left,
            g = e.top,
            y = e.right,
            b = e.gap;
          return (
            void 0 === c && (c = "margin"),
            "\n  ."
              .concat("with-scroll-bars-hidden", " {\n   overflow: hidden ")
              .concat(d, ";\n   padding-right: ")
              .concat(b, "px ")
              .concat(d, ";\n  }\n  body[")
              .concat(nu, "] {\n    overflow: hidden ")
              .concat(d, ";\n    overscroll-behavior: contain;\n    ")
              .concat(
                [
                  l && "position: relative ".concat(d, ";"),
                  "margin" === c &&
                    "\n    padding-left: "
                      .concat(m, "px;\n    padding-top: ")
                      .concat(g, "px;\n    padding-right: ")
                      .concat(
                        y,
                        "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: "
                      )
                      .concat(b, "px ")
                      .concat(d, ";\n    "),
                  "padding" === c &&
                    "padding-right: ".concat(b, "px ").concat(d, ";"),
                ]
                  .filter(Boolean)
                  .join(""),
                "\n  }\n  \n  ."
              )
              .concat(nn, " {\n    right: ")
              .concat(b, "px ")
              .concat(d, ";\n  }\n  \n  .")
              .concat(nr, " {\n    margin-right: ")
              .concat(b, "px ")
              .concat(d, ";\n  }\n  \n  .")
              .concat(nn, " .")
              .concat(nn, " {\n    right: 0 ")
              .concat(d, ";\n  }\n  \n  .")
              .concat(nr, " .")
              .concat(nr, " {\n    margin-right: 0 ")
              .concat(d, ";\n  }\n  \n  body[")
              .concat(nu, "] {\n    ")
              .concat("--removed-body-scroll-bar-size", ": ")
              .concat(b, "px;\n  }\n")
          );
        },
        getCurrentUseCounter = function () {
          var e = parseInt(document.body.getAttribute(nu) || "0", 10);
          return isFinite(e) ? e : 0;
        },
        useLockAttribute = function () {
          ed.useEffect(function () {
            return (
              document.body.setAttribute(
                nu,
                (getCurrentUseCounter() + 1).toString()
              ),
              function () {
                var e = getCurrentUseCounter() - 1;
                e <= 0
                  ? document.body.removeAttribute(nu)
                  : document.body.setAttribute(nu, e.toString());
              }
            );
          }, []);
        },
        RemoveScrollBar = function (e) {
          var l = e.noRelative,
            c = e.noImportant,
            d = e.gapMode,
            m = void 0 === d ? "margin" : d;
          useLockAttribute();
          var g = ed.useMemo(
            function () {
              return getGapWidth(m);
            },
            [m]
          );
          return ed.createElement(nc, {
            styles: getStyles(g, !l, m, c ? "" : "!important"),
          });
        },
        nd = !1;
      if ("undefined" != typeof window)
        try {
          var np = Object.defineProperty({}, "passive", {
            get: function () {
              return (nd = !0), !0;
            },
          });
          window.addEventListener("test", np, np),
            window.removeEventListener("test", np, np);
        } catch (e) {
          nd = !1;
        }
      var nh = !!nd && { passive: !1 },
        elementCanBeScrolled = function (e, l) {
          if (!(e instanceof Element)) return !1;
          var c = window.getComputedStyle(e);
          return (
            "hidden" !== c[l] &&
            !(
              c.overflowY === c.overflowX &&
              "TEXTAREA" !== e.tagName &&
              "visible" === c[l]
            )
          );
        },
        locationCouldBeScrolled = function (e, l) {
          var c = l.ownerDocument,
            d = l;
          do {
            if (
              ("undefined" != typeof ShadowRoot &&
                d instanceof ShadowRoot &&
                (d = d.host),
              elementCouldBeScrolled(e, d))
            ) {
              var m = getScrollVariables(e, d);
              if (m[1] > m[2]) return !0;
            }
            d = d.parentNode;
          } while (d && d !== c.body);
          return !1;
        },
        elementCouldBeScrolled = function (e, l) {
          return "v" === e
            ? elementCanBeScrolled(l, "overflowY")
            : elementCanBeScrolled(l, "overflowX");
        },
        getScrollVariables = function (e, l) {
          return "v" === e
            ? [l.scrollTop, l.scrollHeight, l.clientHeight]
            : [l.scrollLeft, l.scrollWidth, l.clientWidth];
        },
        handleScroll = function (e, l, c, d, m) {
          var g,
            y =
              ((g = window.getComputedStyle(l).direction),
              "h" === e && "rtl" === g ? -1 : 1),
            b = y * d,
            C = c.target,
            P = l.contains(C),
            I = !1,
            B = b > 0,
            N = 0,
            F = 0;
          do {
            var V = getScrollVariables(e, C),
              G = V[0],
              Q = V[1] - V[2] - y * G;
            (G || Q) && elementCouldBeScrolled(e, C) && ((N += Q), (F += G)),
              (C = C instanceof ShadowRoot ? C.host : C.parentNode);
          } while (
            (!P && C !== document.body) ||
            (P && (l.contains(C) || l === C))
          );
          return (
            B && ((m && 1 > Math.abs(N)) || (!m && b > N))
              ? (I = !0)
              : !B && ((m && 1 > Math.abs(F)) || (!m && -b > F)) && (I = !0),
            I
          );
        },
        getTouchXY = function (e) {
          return "changedTouches" in e
            ? [e.changedTouches[0].clientX, e.changedTouches[0].clientY]
            : [0, 0];
        },
        getDeltaXY = function (e) {
          return [e.deltaX, e.deltaY];
        },
        extractRef = function (e) {
          return e && "current" in e ? e.current : e;
        },
        nf = 0,
        nm = [],
        ng =
          (na.useMedium(function (e) {
            var l = ed.useRef([]),
              c = ed.useRef([0, 0]),
              d = ed.useRef(),
              m = ed.useState(nf++)[0],
              g = ed.useState(styleSingleton)[0],
              y = ed.useRef(e);
            ed.useEffect(
              function () {
                y.current = e;
              },
              [e]
            ),
              ed.useEffect(
                function () {
                  if (e.inert) {
                    document.body.classList.add(
                      "block-interactivity-".concat(m)
                    );
                    var l = (0, nt.__spreadArray)(
                      [e.lockRef.current],
                      (e.shards || []).map(extractRef),
                      !0
                    ).filter(Boolean);
                    return (
                      l.forEach(function (e) {
                        return e.classList.add(
                          "allow-interactivity-".concat(m)
                        );
                      }),
                      function () {
                        document.body.classList.remove(
                          "block-interactivity-".concat(m)
                        ),
                          l.forEach(function (e) {
                            return e.classList.remove(
                              "allow-interactivity-".concat(m)
                            );
                          });
                      }
                    );
                  }
                },
                [e.inert, e.lockRef.current, e.shards]
              );
            var b = ed.useCallback(function (e, l) {
                if (
                  ("touches" in e && 2 === e.touches.length) ||
                  ("wheel" === e.type && e.ctrlKey)
                )
                  return !y.current.allowPinchZoom;
                var m,
                  g = getTouchXY(e),
                  b = c.current,
                  C = "deltaX" in e ? e.deltaX : b[0] - g[0],
                  P = "deltaY" in e ? e.deltaY : b[1] - g[1],
                  I = e.target,
                  B = Math.abs(C) > Math.abs(P) ? "h" : "v";
                if ("touches" in e && "h" === B && "range" === I.type)
                  return !1;
                var N = locationCouldBeScrolled(B, I);
                if (!N) return !0;
                if (
                  (N
                    ? (m = B)
                    : ((m = "v" === B ? "h" : "v"),
                      (N = locationCouldBeScrolled(B, I))),
                  !N)
                )
                  return !1;
                if (
                  (!d.current &&
                    "changedTouches" in e &&
                    (C || P) &&
                    (d.current = m),
                  !m)
                )
                  return !0;
                var F = d.current || m;
                return handleScroll(F, l, e, "h" === F ? C : P, !0);
              }, []),
              C = ed.useCallback(function (e) {
                if (nm.length && nm[nm.length - 1] === g) {
                  var c = "deltaY" in e ? getDeltaXY(e) : getTouchXY(e),
                    d = l.current.filter(function (l) {
                      var d;
                      return (
                        l.name === e.type &&
                        (l.target === e.target ||
                          e.target === l.shadowParent) &&
                        (d = l.delta)[0] === c[0] &&
                        d[1] === c[1]
                      );
                    })[0];
                  if (d && d.should) {
                    e.cancelable && e.preventDefault();
                    return;
                  }
                  if (!d) {
                    var m = (y.current.shards || [])
                      .map(extractRef)
                      .filter(Boolean)
                      .filter(function (l) {
                        return l.contains(e.target);
                      });
                    (m.length > 0 ? b(e, m[0]) : !y.current.noIsolation) &&
                      e.cancelable &&
                      e.preventDefault();
                  }
                }
              }, []),
              P = ed.useCallback(function (e, c, d, m) {
                var g = {
                  name: e,
                  delta: c,
                  target: d,
                  should: m,
                  shadowParent: (function (e) {
                    for (var l = null; null !== e; )
                      e instanceof ShadowRoot && ((l = e.host), (e = e.host)),
                        (e = e.parentNode);
                    return l;
                  })(d),
                };
                l.current.push(g),
                  setTimeout(function () {
                    l.current = l.current.filter(function (e) {
                      return e !== g;
                    });
                  }, 1);
              }, []),
              I = ed.useCallback(function (e) {
                (c.current = getTouchXY(e)), (d.current = void 0);
              }, []),
              B = ed.useCallback(function (l) {
                P(l.type, getDeltaXY(l), l.target, b(l, e.lockRef.current));
              }, []),
              N = ed.useCallback(function (l) {
                P(l.type, getTouchXY(l), l.target, b(l, e.lockRef.current));
              }, []);
            ed.useEffect(function () {
              return (
                nm.push(g),
                e.setCallbacks({
                  onScrollCapture: B,
                  onWheelCapture: B,
                  onTouchMoveCapture: N,
                }),
                document.addEventListener("wheel", C, nh),
                document.addEventListener("touchmove", C, nh),
                document.addEventListener("touchstart", I, nh),
                function () {
                  (nm = nm.filter(function (e) {
                    return e !== g;
                  })),
                    document.removeEventListener("wheel", C, nh),
                    document.removeEventListener("touchmove", C, nh),
                    document.removeEventListener("touchstart", I, nh);
                }
              );
            }, []);
            var F = e.removeScrollBar,
              V = e.inert;
            return ed.createElement(
              ed.Fragment,
              null,
              V
                ? ed.createElement(g, {
                    styles: "\n  .block-interactivity-"
                      .concat(
                        m,
                        " {pointer-events: none;}\n  .allow-interactivity-"
                      )
                      .concat(m, " {pointer-events: all;}\n"),
                  })
                : null,
              F
                ? ed.createElement(RemoveScrollBar, { gapMode: e.gapMode })
                : null
            );
          }),
          SideCar),
        ny = ed.forwardRef(function (e, l) {
          return ed.createElement(
            ns,
            (0, nt.__assign)({}, e, { ref: l, sideCar: ng })
          );
        });
      function vanilla_extract_private_esm_getVarName(e) {
        var l = e.match(/^var\((.*)\)$/);
        return l ? l[1] : e;
      }
      function assignInlineVars(e, l) {
        var c = {};
        if ("object" == typeof l)
          !(function vanilla_extract_private_esm_walkObject(e, l) {
            var c =
                arguments.length > 2 && void 0 !== arguments[2]
                  ? arguments[2]
                  : [],
              d = {};
            for (var m in e) {
              var g = e[m],
                y = [...c, m];
              "string" == typeof g || "number" == typeof g || null == g
                ? (d[m] = l(g, y))
                : "object" != typeof g || Array.isArray(g)
                ? console.warn(
                    'Skipping invalid key "'
                      .concat(
                        y.join("."),
                        '". Should be a string, number, null or object. Received: "'
                      )
                      .concat(Array.isArray(g) ? "Array" : typeof g, '"')
                  )
                : (d[m] = vanilla_extract_private_esm_walkObject(g, l, y));
            }
            return d;
          })(l, (l, d) => {
            null != l &&
              (c[
                vanilla_extract_private_esm_getVarName(
                  (function (e, l) {
                    var c = e;
                    for (var d of l) {
                      if (!(d in c))
                        throw Error(
                          "Path ".concat(
                            l.join(" -> "),
                            " does not exist in object"
                          )
                        );
                      c = c[d];
                    }
                    return c;
                  })(e, d)
                )
              ] = String(l));
          });
        else
          for (var d in e) {
            var m = e[d];
            null != m && (c[vanilla_extract_private_esm_getVarName(d)] = m);
          }
        return (
          Object.defineProperty(c, "toString", {
            value: function () {
              return Object.keys(this)
                .map((e) => "".concat(e, ":").concat(this[e]))
                .join(";");
            },
            writable: !1,
          }),
          c
        );
      }
      ny.classNames = ns.classNames;
      var nb = c(19086),
        nv = c(99228);
      async function connect(e, l) {
        let c;
        if (
          (c =
            "function" == typeof l.connector
              ? e._internal.connectors.setup(l.connector)
              : l.connector).uid === e.state.current
        )
          throw new nv.wi();
        try {
          e.setState((e) => ({ ...e, status: "connecting" })),
            c.emitter.emit("message", { type: "connecting" });
          let { connector: d, ...m } = l,
            g = await c.connect(m),
            y = g.accounts;
          return (
            c.emitter.off("connect", e._internal.events.connect),
            c.emitter.on("change", e._internal.events.change),
            c.emitter.on("disconnect", e._internal.events.disconnect),
            await e.storage?.setItem("recentConnectorId", c.id),
            e.setState((e) => ({
              ...e,
              connections: new Map(e.connections).set(c.uid, {
                accounts: y,
                chainId: g.chainId,
                connector: c,
              }),
              current: c.uid,
              status: "connected",
            })),
            { accounts: y, chainId: g.chainId }
          );
        } catch (l) {
          throw (
            (e.setState((e) => ({
              ...e,
              status: e.current ? "connected" : "disconnected",
            })),
            l)
          );
        }
      }
      var nw = c(54692);
      let nx = [];
      function getConnectors(e) {
        let l = e.connectors;
        return (0, nw.v)(nx, l) ? nx : ((nx = l), l);
      }
      var n_ = c(79225),
        nC = c(41038),
        nE = c(29002),
        nA = c(20061),
        nS = c(11654),
        nk = c(78907);
      let subscribeWithSelector = (e) => (l, c, d) => {
          let m = d.subscribe;
          d.subscribe = (e, l, c) => {
            let g = e;
            if (l) {
              let m = (null == c ? void 0 : c.equalityFn) || Object.is,
                y = e(d.getState());
              (g = (c) => {
                let d = e(c);
                if (!m(y, d)) {
                  let e = y;
                  l((y = d), e);
                }
              }),
                (null == c ? void 0 : c.fireImmediately) && l(y, y);
            }
            return m(g);
          };
          let g = e(l, c, d);
          return g;
        },
        toThenable = (e) => (l) => {
          try {
            let c = e(l);
            if (c instanceof Promise) return c;
            return {
              then: (e) => toThenable(e)(c),
              catch(e) {
                return this;
              },
            };
          } catch (e) {
            return {
              then(e) {
                return this;
              },
              catch: (l) => toThenable(l)(e),
            };
          }
        },
        persist = (e, l) => (c, d, m) => {
          let g,
            y = {
              storage: (function (e, l) {
                let c;
                try {
                  c = e();
                } catch (e) {
                  return;
                }
                return {
                  getItem: (e) => {
                    var d;
                    let parse = (e) =>
                        null === e
                          ? null
                          : JSON.parse(e, null == l ? void 0 : l.reviver),
                      m = null != (d = c.getItem(e)) ? d : null;
                    return m instanceof Promise ? m.then(parse) : parse(m);
                  },
                  setItem: (e, d) =>
                    c.setItem(
                      e,
                      JSON.stringify(d, null == l ? void 0 : l.replacer)
                    ),
                  removeItem: (e) => c.removeItem(e),
                };
              })(() => localStorage),
              partialize: (e) => e,
              version: 0,
              merge: (e, l) => ({ ...l, ...e }),
              ...l,
            },
            b = !1,
            C = new Set(),
            P = new Set(),
            I = y.storage;
          if (!I)
            return e(
              (...e) => {
                console.warn(
                  `[zustand persist middleware] Unable to update item '${y.name}', the given storage is currently unavailable.`
                ),
                  c(...e);
              },
              d,
              m
            );
          let setItem = () => {
              let e = y.partialize({ ...d() });
              return I.setItem(y.name, { state: e, version: y.version });
            },
            B = m.setState;
          m.setState = (e, l) => {
            B(e, l), setItem();
          };
          let N = e(
            (...e) => {
              c(...e), setItem();
            },
            d,
            m
          );
          m.getInitialState = () => N;
          let hydrate = () => {
            var e, l;
            if (!I) return;
            (b = !1),
              C.forEach((e) => {
                var l;
                return e(null != (l = d()) ? l : N);
              });
            let m =
              (null == (l = y.onRehydrateStorage)
                ? void 0
                : l.call(y, null != (e = d()) ? e : N)) || void 0;
            return toThenable(I.getItem.bind(I))(y.name)
              .then((e) => {
                if (e) {
                  if ("number" != typeof e.version || e.version === y.version)
                    return [!1, e.state];
                  if (y.migrate) return [!0, y.migrate(e.state, e.version)];
                  console.error(
                    "State loaded from storage couldn't be migrated since no migrate function was provided"
                  );
                }
                return [!1, void 0];
              })
              .then((e) => {
                var l;
                let [m, b] = e;
                if ((c((g = y.merge(b, null != (l = d()) ? l : N)), !0), m))
                  return setItem();
              })
              .then(() => {
                null == m || m(g, void 0),
                  (g = d()),
                  (b = !0),
                  P.forEach((e) => e(g));
              })
              .catch((e) => {
                null == m || m(void 0, e);
              });
          };
          return (
            (m.persist = {
              setOptions: (e) => {
                (y = { ...y, ...e }), e.storage && (I = e.storage);
              },
              clearStorage: () => {
                null == I || I.removeItem(y.name);
              },
              getOptions: () => y,
              rehydrate: () => hydrate(),
              hasHydrated: () => b,
              onHydrate: (e) => (
                C.add(e),
                () => {
                  C.delete(e);
                }
              ),
              onFinishHydration: (e) => (
                P.add(e),
                () => {
                  P.delete(e);
                }
              ),
            }),
            y.skipHydration || hydrate(),
            g || N
          );
        },
        createStoreImpl = (e) => {
          let l;
          let c = new Set(),
            setState = (e, d) => {
              let m = "function" == typeof e ? e(l) : e;
              if (!Object.is(m, l)) {
                let e = l;
                (l = (null != d ? d : "object" != typeof m || null === m)
                  ? m
                  : Object.assign({}, l, m)),
                  c.forEach((c) => c(l, e));
              }
            },
            getState = () => l,
            d = {
              setState,
              getState,
              getInitialState: () => m,
              subscribe: (e) => (c.add(e), () => c.delete(e)),
            },
            m = (l = e(setState, getState, d));
          return d;
        },
        vanilla_createStore = (e) => (e ? createStoreImpl(e) : createStoreImpl);
      var nP = c(24770),
        nM = c(21339),
        nT = c(90687),
        nI = c(84335);
      function injected(e = {}) {
        let l, c, d, m;
        let { shimDisconnect: g = !0, unstable_shimAsyncInject: y } = e;
        function getTarget() {
          let l = e.target;
          if ("function" == typeof l) {
            let e = l();
            if (e) return e;
          }
          return "object" == typeof l
            ? l
            : "string" == typeof l
            ? {
                ...(nj[l] ?? {
                  id: l,
                  name: `${l[0].toUpperCase()}${l.slice(1)}`,
                  provider: `is${l[0].toUpperCase()}${l.slice(1)}`,
                }),
              }
            : {
                id: "injected",
                name: "Injected",
                provider: (e) => e?.ethereum,
              };
        }
        return (0, nI.K)((b) => ({
          get icon() {
            return getTarget().icon;
          },
          get id() {
            return getTarget().id;
          },
          get name() {
            return getTarget().name;
          },
          get supportsSimulation() {
            return !0;
          },
          type: injected.type,
          async setup() {
            let c = await this.getProvider();
            c?.on &&
              e.target &&
              (d || ((d = this.onConnect.bind(this)), c.on("connect", d)),
              l ||
                ((l = this.onAccountsChanged.bind(this)),
                c.on("accountsChanged", l)));
          },
          async connect({ chainId: y, isReconnecting: C } = {}) {
            let P = await this.getProvider();
            if (!P) throw new nT.M();
            let I = [];
            if (C) I = await this.getAccounts().catch(() => []);
            else if (g)
              try {
                let e = await P.request({
                  method: "wallet_requestPermissions",
                  params: [{ eth_accounts: {} }],
                });
                if (
                  (I = e[0]?.caveats?.[0]?.value?.map((e) => tV.K(e))).length >
                  0
                ) {
                  let e = await this.getAccounts();
                  I = e;
                }
              } catch (e) {
                if (e.code === t2.ab.code) throw new t2.ab(e);
                if (e.code === t2.pT.code) throw e;
              }
            try {
              if (!I?.length && !C) {
                let e = await P.request({ method: "eth_requestAccounts" });
                I = e.map((e) => (0, tV.K)(e));
              }
              d && (P.removeListener("connect", d), (d = void 0)),
                l ||
                  ((l = this.onAccountsChanged.bind(this)),
                  P.on("accountsChanged", l)),
                c ||
                  ((c = this.onChainChanged.bind(this)),
                  P.on("chainChanged", c)),
                m ||
                  ((m = this.onDisconnect.bind(this)), P.on("disconnect", m));
              let B = await this.getChainId();
              if (y && B !== y) {
                let e = await this.switchChain({ chainId: y }).catch((e) => {
                  if (e.code === t2.ab.code) throw e;
                  return { id: B };
                });
                B = e?.id ?? B;
              }
              return (
                g && (await b.storage?.removeItem(`${this.id}.disconnected`)),
                e.target ||
                  (await b.storage?.setItem("injected.connected", !0)),
                { accounts: I, chainId: B }
              );
            } catch (e) {
              if (e.code === t2.ab.code) throw new t2.ab(e);
              if (e.code === t2.pT.code) throw new t2.pT(e);
              throw e;
            }
          },
          async disconnect() {
            let l = await this.getProvider();
            if (!l) throw new nT.M();
            c && (l.removeListener("chainChanged", c), (c = void 0)),
              m && (l.removeListener("disconnect", m), (m = void 0)),
              d || ((d = this.onConnect.bind(this)), l.on("connect", d));
            try {
              await (0, nP.F)(
                () =>
                  l.request({
                    method: "wallet_revokePermissions",
                    params: [{ eth_accounts: {} }],
                  }),
                { timeout: 100 }
              );
            } catch {}
            g && (await b.storage?.setItem(`${this.id}.disconnected`, !0)),
              e.target || (await b.storage?.removeItem("injected.connected"));
          },
          async getAccounts() {
            let e = await this.getProvider();
            if (!e) throw new nT.M();
            let l = await e.request({ method: "eth_accounts" });
            return l.map((e) => (0, tV.K)(e));
          },
          async getChainId() {
            let e = await this.getProvider();
            if (!e) throw new nT.M();
            let l = await e.request({ method: "eth_chainId" });
            return Number(l);
          },
          async getProvider() {
            let e;
            if ("undefined" == typeof window) return;
            let l = getTarget();
            return (
              (e =
                "function" == typeof l.provider
                  ? l.provider(window)
                  : "string" == typeof l.provider
                  ? findProvider(window, l.provider)
                  : l.provider) &&
                !e.removeListener &&
                ("off" in e && "function" == typeof e.off
                  ? (e.removeListener = e.off)
                  : (e.removeListener = () => {})),
              e
            );
          },
          async isAuthorized() {
            try {
              let l =
                g && (await b.storage?.getItem(`${this.id}.disconnected`));
              if (l) return !1;
              if (!e.target) {
                let e = await b.storage?.getItem("injected.connected");
                if (!e) return !1;
              }
              let c = await this.getProvider();
              if (!c) {
                if (void 0 !== y && !1 !== y) {
                  let handleEthereum = async () => {
                      "undefined" != typeof window &&
                        window.removeEventListener(
                          "ethereum#initialized",
                          handleEthereum
                        );
                      let e = await this.getProvider();
                      return !!e;
                    },
                    e = "number" == typeof y ? y : 1e3,
                    l = await Promise.race([
                      ...("undefined" != typeof window
                        ? [
                            new Promise((e) =>
                              window.addEventListener(
                                "ethereum#initialized",
                                () => e(handleEthereum()),
                                { once: !0 }
                              )
                            ),
                          ]
                        : []),
                      new Promise((l) =>
                        setTimeout(() => l(handleEthereum()), e)
                      ),
                    ]);
                  if (l) return !0;
                }
                throw new nT.M();
              }
              let d = await (0, nM.J)(() => this.getAccounts());
              return !!d.length;
            } catch {
              return !1;
            }
          },
          async switchChain({ addEthereumChainParameter: e, chainId: l }) {
            let c = await this.getProvider();
            if (!c) throw new nT.M();
            let d = b.chains.find((e) => e.id === l);
            if (!d) throw new t2.x3(new nv.X4());
            let m = new Promise((e) => {
              let listener = (c) => {
                "chainId" in c &&
                  c.chainId === l &&
                  (b.emitter.off("change", listener), e());
              };
              b.emitter.on("change", listener);
            });
            try {
              return (
                await Promise.all([
                  c
                    .request({
                      method: "wallet_switchEthereumChain",
                      params: [{ chainId: (0, eR.eC)(l) }],
                    })
                    .then(async () => {
                      let e = await this.getChainId();
                      e === l && b.emitter.emit("change", { chainId: l });
                    }),
                  m,
                ]),
                d
              );
            } catch (g) {
              if (4902 === g.code || g?.data?.originalError?.code === 4902)
                try {
                  let g, y;
                  let { default: C, ...P } = d.blockExplorers ?? {};
                  e?.blockExplorerUrls
                    ? (g = e.blockExplorerUrls)
                    : C && (g = [C.url, ...Object.values(P).map((e) => e.url)]),
                    (y = e?.rpcUrls?.length
                      ? e.rpcUrls
                      : [d.rpcUrls.default?.http[0] ?? ""]);
                  let I = {
                    blockExplorerUrls: g,
                    chainId: (0, eR.eC)(l),
                    chainName: e?.chainName ?? d.name,
                    iconUrls: e?.iconUrls,
                    nativeCurrency: e?.nativeCurrency ?? d.nativeCurrency,
                    rpcUrls: y,
                  };
                  return (
                    await Promise.all([
                      c
                        .request({
                          method: "wallet_addEthereumChain",
                          params: [I],
                        })
                        .then(async () => {
                          let e = await this.getChainId();
                          if (e === l) b.emitter.emit("change", { chainId: l });
                          else
                            throw new t2.ab(
                              Error(
                                "User rejected switch after adding network."
                              )
                            );
                        }),
                      m,
                    ]),
                    d
                  );
                } catch (e) {
                  throw new t2.ab(e);
                }
              if (g.code === t2.ab.code) throw new t2.ab(g);
              throw new t2.x3(g);
            }
          },
          async onAccountsChanged(e) {
            if (0 === e.length) this.onDisconnect();
            else if (b.emitter.listenerCount("connect")) {
              let e = (await this.getChainId()).toString();
              this.onConnect({ chainId: e }),
                g && (await b.storage?.removeItem(`${this.id}.disconnected`));
            } else
              b.emitter.emit("change", {
                accounts: e.map((e) => (0, tV.K)(e)),
              });
          },
          onChainChanged(e) {
            let l = Number(e);
            b.emitter.emit("change", { chainId: l });
          },
          async onConnect(e) {
            let g = await this.getAccounts();
            if (0 === g.length) return;
            let y = Number(e.chainId);
            b.emitter.emit("connect", { accounts: g, chainId: y });
            let C = await this.getProvider();
            C &&
              (d && (C.removeListener("connect", d), (d = void 0)),
              l ||
                ((l = this.onAccountsChanged.bind(this)),
                C.on("accountsChanged", l)),
              c ||
                ((c = this.onChainChanged.bind(this)), C.on("chainChanged", c)),
              m || ((m = this.onDisconnect.bind(this)), C.on("disconnect", m)));
          },
          async onDisconnect(e) {
            let l = await this.getProvider();
            (e && 1013 === e.code && l && (await this.getAccounts()).length) ||
              (b.emitter.emit("disconnect"),
              l &&
                (c && (l.removeListener("chainChanged", c), (c = void 0)),
                m && (l.removeListener("disconnect", m), (m = void 0)),
                d || ((d = this.onConnect.bind(this)), l.on("connect", d))));
          },
        }));
      }
      injected.type = "injected";
      let nj = {
        coinbaseWallet: {
          id: "coinbaseWallet",
          name: "Coinbase Wallet",
          provider: (e) =>
            e?.coinbaseWalletExtension
              ? e.coinbaseWalletExtension
              : findProvider(e, "isCoinbaseWallet"),
        },
        metaMask: {
          id: "metaMask",
          name: "MetaMask",
          provider: (e) =>
            findProvider(e, (e) => {
              if (!e.isMetaMask || (e.isBraveWallet && !e._events && !e._state))
                return !1;
              for (let l of [
                "isApexWallet",
                "isAvalanche",
                "isBitKeep",
                "isBlockWallet",
                "isKuCoinWallet",
                "isMathWallet",
                "isOkxWallet",
                "isOKExWallet",
                "isOneInchIOSWallet",
                "isOneInchAndroidWallet",
                "isOpera",
                "isPhantom",
                "isPortal",
                "isRabby",
                "isTokenPocket",
                "isTokenary",
                "isUniswapWallet",
                "isZerion",
              ])
                if (e[l]) return !1;
              return !0;
            }),
        },
        phantom: {
          id: "phantom",
          name: "Phantom",
          provider: (e) =>
            e?.phantom?.ethereum
              ? e.phantom?.ethereum
              : findProvider(e, "isPhantom"),
        },
      };
      function findProvider(e, l) {
        function isProvider(e) {
          return "function" == typeof l ? l(e) : "string" != typeof l || e[l];
        }
        let c = e.ethereum;
        return c?.providers
          ? c.providers.find((e) => isProvider(e))
          : c && isProvider(c)
          ? c
          : void 0;
      }
      var nO = c(73983);
      let Emitter = class Emitter {
        constructor(e) {
          Object.defineProperty(this, "uid", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: e,
          }),
            Object.defineProperty(this, "_emitter", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: new nO.v(),
            });
        }
        on(e, l) {
          this._emitter.on(e, l);
        }
        once(e, l) {
          this._emitter.once(e, l);
        }
        off(e, l) {
          this._emitter.off(e, l);
        }
        emit(e, ...l) {
          let c = l[0];
          this._emitter.emit(e, { uid: this.uid, ...c });
        }
        listenerCount(e) {
          return this._emitter.listenerCount(e);
        }
      };
      function deserialize_deserialize(e, l) {
        return JSON.parse(e, (e, c) => {
          let d = c;
          return (
            d?.__type === "bigint" && (d = BigInt(d.value)),
            d?.__type === "Map" && (d = new Map(d.value)),
            l?.(e, d) ?? d
          );
        });
      }
      function getReferenceKey(e, l) {
        return e.slice(0, l).join(".") || ".";
      }
      function getCutoff(e, l) {
        let { length: c } = e;
        for (let d = 0; d < c; ++d) if (e[d] === l) return d + 1;
        return 0;
      }
      function serialize_serialize(e, l, c, d) {
        return JSON.stringify(
          e,
          (function (e, l) {
            let c = "function" == typeof e,
              d = "function" == typeof l,
              m = [],
              g = [];
            return function (y, b) {
              if ("object" == typeof b) {
                if (m.length) {
                  let e = getCutoff(m, this);
                  0 === e ? (m[m.length] = this) : (m.splice(e), g.splice(e)),
                    (g[g.length] = y);
                  let c = getCutoff(m, b);
                  if (0 !== c)
                    return d
                      ? l.call(this, y, b, getReferenceKey(g, c))
                      : `[ref=${getReferenceKey(g, c)}]`;
                } else (m[0] = b), (g[0] = y);
              }
              return c ? e.call(this, y, b) : b;
            };
          })((e, c) => {
            let d = c;
            return (
              "bigint" == typeof d &&
                (d = { __type: "bigint", value: c.toString() }),
              d instanceof Map &&
                (d = { __type: "Map", value: Array.from(c.entries()) }),
              l?.(e, d) ?? d
            );
          }, d),
          c ?? void 0
        );
      }
      let nB = { getItem: () => null, setItem: () => {}, removeItem: () => {} },
        nD = 256;
      var nN = c(26226),
        nR = c(11516),
        nF = c(41402),
        nL = c(17813),
        nU = c(6034),
        nz = c(21481),
        nW = (function (e) {
          var { conditions: l } = e;
          if (!l) throw Error("Styles have no conditions");
          var c = createNormalizeValueFn(e);
          return addRecipe(
            function (e, d) {
              if (
                "string" == typeof e ||
                "number" == typeof e ||
                "boolean" == typeof e
              ) {
                if (!l.defaultCondition) throw Error("No default condition");
                return d(e, l.defaultCondition);
              }
              var m = Array.isArray(e) ? c(e) : e,
                g = {};
              for (var y in m) null != m[y] && (g[y] = d(m[y], y));
              return g;
            },
            {
              importPath: "@vanilla-extract/sprinkles/createUtils",
              importName: "createMapValueFn",
              args: [{ conditions: e.conditions }],
            }
          );
        })({
          conditions: {
            defaultCondition: "smallScreen",
            conditionNames: ["smallScreen", "largeScreen"],
            responsiveArray: void 0,
          },
        }),
        nq = createNormalizeValueFn({
          conditions: {
            defaultCondition: "smallScreen",
            conditionNames: ["smallScreen", "largeScreen"],
            responsiveArray: void 0,
          },
        }),
        nV = (function () {
          return createSprinkles_74286718_esm_createSprinkles(composeStyles)(
            ...arguments
          );
        })(
          {
            conditions: {
              defaultCondition: "base",
              conditionNames: ["base", "hover", "active"],
              responsiveArray: void 0,
            },
            styles: {
              background: {
                values: {
                  accentColor: {
                    conditions: {
                      base: "ju367v9i",
                      hover: "ju367v9j",
                      active: "ju367v9k",
                    },
                    defaultClass: "ju367v9i",
                  },
                  accentColorForeground: {
                    conditions: {
                      base: "ju367v9l",
                      hover: "ju367v9m",
                      active: "ju367v9n",
                    },
                    defaultClass: "ju367v9l",
                  },
                  actionButtonBorder: {
                    conditions: {
                      base: "ju367v9o",
                      hover: "ju367v9p",
                      active: "ju367v9q",
                    },
                    defaultClass: "ju367v9o",
                  },
                  actionButtonBorderMobile: {
                    conditions: {
                      base: "ju367v9r",
                      hover: "ju367v9s",
                      active: "ju367v9t",
                    },
                    defaultClass: "ju367v9r",
                  },
                  actionButtonSecondaryBackground: {
                    conditions: {
                      base: "ju367v9u",
                      hover: "ju367v9v",
                      active: "ju367v9w",
                    },
                    defaultClass: "ju367v9u",
                  },
                  closeButton: {
                    conditions: {
                      base: "ju367v9x",
                      hover: "ju367v9y",
                      active: "ju367v9z",
                    },
                    defaultClass: "ju367v9x",
                  },
                  closeButtonBackground: {
                    conditions: {
                      base: "ju367va0",
                      hover: "ju367va1",
                      active: "ju367va2",
                    },
                    defaultClass: "ju367va0",
                  },
                  connectButtonBackground: {
                    conditions: {
                      base: "ju367va3",
                      hover: "ju367va4",
                      active: "ju367va5",
                    },
                    defaultClass: "ju367va3",
                  },
                  connectButtonBackgroundError: {
                    conditions: {
                      base: "ju367va6",
                      hover: "ju367va7",
                      active: "ju367va8",
                    },
                    defaultClass: "ju367va6",
                  },
                  connectButtonInnerBackground: {
                    conditions: {
                      base: "ju367va9",
                      hover: "ju367vaa",
                      active: "ju367vab",
                    },
                    defaultClass: "ju367va9",
                  },
                  connectButtonText: {
                    conditions: {
                      base: "ju367vac",
                      hover: "ju367vad",
                      active: "ju367vae",
                    },
                    defaultClass: "ju367vac",
                  },
                  connectButtonTextError: {
                    conditions: {
                      base: "ju367vaf",
                      hover: "ju367vag",
                      active: "ju367vah",
                    },
                    defaultClass: "ju367vaf",
                  },
                  connectionIndicator: {
                    conditions: {
                      base: "ju367vai",
                      hover: "ju367vaj",
                      active: "ju367vak",
                    },
                    defaultClass: "ju367vai",
                  },
                  downloadBottomCardBackground: {
                    conditions: {
                      base: "ju367val",
                      hover: "ju367vam",
                      active: "ju367van",
                    },
                    defaultClass: "ju367val",
                  },
                  downloadTopCardBackground: {
                    conditions: {
                      base: "ju367vao",
                      hover: "ju367vap",
                      active: "ju367vaq",
                    },
                    defaultClass: "ju367vao",
                  },
                  error: {
                    conditions: {
                      base: "ju367var",
                      hover: "ju367vas",
                      active: "ju367vat",
                    },
                    defaultClass: "ju367var",
                  },
                  generalBorder: {
                    conditions: {
                      base: "ju367vau",
                      hover: "ju367vav",
                      active: "ju367vaw",
                    },
                    defaultClass: "ju367vau",
                  },
                  generalBorderDim: {
                    conditions: {
                      base: "ju367vax",
                      hover: "ju367vay",
                      active: "ju367vaz",
                    },
                    defaultClass: "ju367vax",
                  },
                  menuItemBackground: {
                    conditions: {
                      base: "ju367vb0",
                      hover: "ju367vb1",
                      active: "ju367vb2",
                    },
                    defaultClass: "ju367vb0",
                  },
                  modalBackdrop: {
                    conditions: {
                      base: "ju367vb3",
                      hover: "ju367vb4",
                      active: "ju367vb5",
                    },
                    defaultClass: "ju367vb3",
                  },
                  modalBackground: {
                    conditions: {
                      base: "ju367vb6",
                      hover: "ju367vb7",
                      active: "ju367vb8",
                    },
                    defaultClass: "ju367vb6",
                  },
                  modalBorder: {
                    conditions: {
                      base: "ju367vb9",
                      hover: "ju367vba",
                      active: "ju367vbb",
                    },
                    defaultClass: "ju367vb9",
                  },
                  modalText: {
                    conditions: {
                      base: "ju367vbc",
                      hover: "ju367vbd",
                      active: "ju367vbe",
                    },
                    defaultClass: "ju367vbc",
                  },
                  modalTextDim: {
                    conditions: {
                      base: "ju367vbf",
                      hover: "ju367vbg",
                      active: "ju367vbh",
                    },
                    defaultClass: "ju367vbf",
                  },
                  modalTextSecondary: {
                    conditions: {
                      base: "ju367vbi",
                      hover: "ju367vbj",
                      active: "ju367vbk",
                    },
                    defaultClass: "ju367vbi",
                  },
                  profileAction: {
                    conditions: {
                      base: "ju367vbl",
                      hover: "ju367vbm",
                      active: "ju367vbn",
                    },
                    defaultClass: "ju367vbl",
                  },
                  profileActionHover: {
                    conditions: {
                      base: "ju367vbo",
                      hover: "ju367vbp",
                      active: "ju367vbq",
                    },
                    defaultClass: "ju367vbo",
                  },
                  profileForeground: {
                    conditions: {
                      base: "ju367vbr",
                      hover: "ju367vbs",
                      active: "ju367vbt",
                    },
                    defaultClass: "ju367vbr",
                  },
                  selectedOptionBorder: {
                    conditions: {
                      base: "ju367vbu",
                      hover: "ju367vbv",
                      active: "ju367vbw",
                    },
                    defaultClass: "ju367vbu",
                  },
                  standby: {
                    conditions: {
                      base: "ju367vbx",
                      hover: "ju367vby",
                      active: "ju367vbz",
                    },
                    defaultClass: "ju367vbx",
                  },
                },
              },
              borderColor: {
                values: {
                  accentColor: {
                    conditions: {
                      base: "ju367vc0",
                      hover: "ju367vc1",
                      active: "ju367vc2",
                    },
                    defaultClass: "ju367vc0",
                  },
                  accentColorForeground: {
                    conditions: {
                      base: "ju367vc3",
                      hover: "ju367vc4",
                      active: "ju367vc5",
                    },
                    defaultClass: "ju367vc3",
                  },
                  actionButtonBorder: {
                    conditions: {
                      base: "ju367vc6",
                      hover: "ju367vc7",
                      active: "ju367vc8",
                    },
                    defaultClass: "ju367vc6",
                  },
                  actionButtonBorderMobile: {
                    conditions: {
                      base: "ju367vc9",
                      hover: "ju367vca",
                      active: "ju367vcb",
                    },
                    defaultClass: "ju367vc9",
                  },
                  actionButtonSecondaryBackground: {
                    conditions: {
                      base: "ju367vcc",
                      hover: "ju367vcd",
                      active: "ju367vce",
                    },
                    defaultClass: "ju367vcc",
                  },
                  closeButton: {
                    conditions: {
                      base: "ju367vcf",
                      hover: "ju367vcg",
                      active: "ju367vch",
                    },
                    defaultClass: "ju367vcf",
                  },
                  closeButtonBackground: {
                    conditions: {
                      base: "ju367vci",
                      hover: "ju367vcj",
                      active: "ju367vck",
                    },
                    defaultClass: "ju367vci",
                  },
                  connectButtonBackground: {
                    conditions: {
                      base: "ju367vcl",
                      hover: "ju367vcm",
                      active: "ju367vcn",
                    },
                    defaultClass: "ju367vcl",
                  },
                  connectButtonBackgroundError: {
                    conditions: {
                      base: "ju367vco",
                      hover: "ju367vcp",
                      active: "ju367vcq",
                    },
                    defaultClass: "ju367vco",
                  },
                  connectButtonInnerBackground: {
                    conditions: {
                      base: "ju367vcr",
                      hover: "ju367vcs",
                      active: "ju367vct",
                    },
                    defaultClass: "ju367vcr",
                  },
                  connectButtonText: {
                    conditions: {
                      base: "ju367vcu",
                      hover: "ju367vcv",
                      active: "ju367vcw",
                    },
                    defaultClass: "ju367vcu",
                  },
                  connectButtonTextError: {
                    conditions: {
                      base: "ju367vcx",
                      hover: "ju367vcy",
                      active: "ju367vcz",
                    },
                    defaultClass: "ju367vcx",
                  },
                  connectionIndicator: {
                    conditions: {
                      base: "ju367vd0",
                      hover: "ju367vd1",
                      active: "ju367vd2",
                    },
                    defaultClass: "ju367vd0",
                  },
                  downloadBottomCardBackground: {
                    conditions: {
                      base: "ju367vd3",
                      hover: "ju367vd4",
                      active: "ju367vd5",
                    },
                    defaultClass: "ju367vd3",
                  },
                  downloadTopCardBackground: {
                    conditions: {
                      base: "ju367vd6",
                      hover: "ju367vd7",
                      active: "ju367vd8",
                    },
                    defaultClass: "ju367vd6",
                  },
                  error: {
                    conditions: {
                      base: "ju367vd9",
                      hover: "ju367vda",
                      active: "ju367vdb",
                    },
                    defaultClass: "ju367vd9",
                  },
                  generalBorder: {
                    conditions: {
                      base: "ju367vdc",
                      hover: "ju367vdd",
                      active: "ju367vde",
                    },
                    defaultClass: "ju367vdc",
                  },
                  generalBorderDim: {
                    conditions: {
                      base: "ju367vdf",
                      hover: "ju367vdg",
                      active: "ju367vdh",
                    },
                    defaultClass: "ju367vdf",
                  },
                  menuItemBackground: {
                    conditions: {
                      base: "ju367vdi",
                      hover: "ju367vdj",
                      active: "ju367vdk",
                    },
                    defaultClass: "ju367vdi",
                  },
                  modalBackdrop: {
                    conditions: {
                      base: "ju367vdl",
                      hover: "ju367vdm",
                      active: "ju367vdn",
                    },
                    defaultClass: "ju367vdl",
                  },
                  modalBackground: {
                    conditions: {
                      base: "ju367vdo",
                      hover: "ju367vdp",
                      active: "ju367vdq",
                    },
                    defaultClass: "ju367vdo",
                  },
                  modalBorder: {
                    conditions: {
                      base: "ju367vdr",
                      hover: "ju367vds",
                      active: "ju367vdt",
                    },
                    defaultClass: "ju367vdr",
                  },
                  modalText: {
                    conditions: {
                      base: "ju367vdu",
                      hover: "ju367vdv",
                      active: "ju367vdw",
                    },
                    defaultClass: "ju367vdu",
                  },
                  modalTextDim: {
                    conditions: {
                      base: "ju367vdx",
                      hover: "ju367vdy",
                      active: "ju367vdz",
                    },
                    defaultClass: "ju367vdx",
                  },
                  modalTextSecondary: {
                    conditions: {
                      base: "ju367ve0",
                      hover: "ju367ve1",
                      active: "ju367ve2",
                    },
                    defaultClass: "ju367ve0",
                  },
                  profileAction: {
                    conditions: {
                      base: "ju367ve3",
                      hover: "ju367ve4",
                      active: "ju367ve5",
                    },
                    defaultClass: "ju367ve3",
                  },
                  profileActionHover: {
                    conditions: {
                      base: "ju367ve6",
                      hover: "ju367ve7",
                      active: "ju367ve8",
                    },
                    defaultClass: "ju367ve6",
                  },
                  profileForeground: {
                    conditions: {
                      base: "ju367ve9",
                      hover: "ju367vea",
                      active: "ju367veb",
                    },
                    defaultClass: "ju367ve9",
                  },
                  selectedOptionBorder: {
                    conditions: {
                      base: "ju367vec",
                      hover: "ju367ved",
                      active: "ju367vee",
                    },
                    defaultClass: "ju367vec",
                  },
                  standby: {
                    conditions: {
                      base: "ju367vef",
                      hover: "ju367veg",
                      active: "ju367veh",
                    },
                    defaultClass: "ju367vef",
                  },
                },
              },
              boxShadow: {
                values: {
                  connectButton: {
                    conditions: {
                      base: "ju367vei",
                      hover: "ju367vej",
                      active: "ju367vek",
                    },
                    defaultClass: "ju367vei",
                  },
                  dialog: {
                    conditions: {
                      base: "ju367vel",
                      hover: "ju367vem",
                      active: "ju367ven",
                    },
                    defaultClass: "ju367vel",
                  },
                  profileDetailsAction: {
                    conditions: {
                      base: "ju367veo",
                      hover: "ju367vep",
                      active: "ju367veq",
                    },
                    defaultClass: "ju367veo",
                  },
                  selectedOption: {
                    conditions: {
                      base: "ju367ver",
                      hover: "ju367ves",
                      active: "ju367vet",
                    },
                    defaultClass: "ju367ver",
                  },
                  selectedWallet: {
                    conditions: {
                      base: "ju367veu",
                      hover: "ju367vev",
                      active: "ju367vew",
                    },
                    defaultClass: "ju367veu",
                  },
                  walletLogo: {
                    conditions: {
                      base: "ju367vex",
                      hover: "ju367vey",
                      active: "ju367vez",
                    },
                    defaultClass: "ju367vex",
                  },
                },
              },
              color: {
                values: {
                  accentColor: {
                    conditions: {
                      base: "ju367vf0",
                      hover: "ju367vf1",
                      active: "ju367vf2",
                    },
                    defaultClass: "ju367vf0",
                  },
                  accentColorForeground: {
                    conditions: {
                      base: "ju367vf3",
                      hover: "ju367vf4",
                      active: "ju367vf5",
                    },
                    defaultClass: "ju367vf3",
                  },
                  actionButtonBorder: {
                    conditions: {
                      base: "ju367vf6",
                      hover: "ju367vf7",
                      active: "ju367vf8",
                    },
                    defaultClass: "ju367vf6",
                  },
                  actionButtonBorderMobile: {
                    conditions: {
                      base: "ju367vf9",
                      hover: "ju367vfa",
                      active: "ju367vfb",
                    },
                    defaultClass: "ju367vf9",
                  },
                  actionButtonSecondaryBackground: {
                    conditions: {
                      base: "ju367vfc",
                      hover: "ju367vfd",
                      active: "ju367vfe",
                    },
                    defaultClass: "ju367vfc",
                  },
                  closeButton: {
                    conditions: {
                      base: "ju367vff",
                      hover: "ju367vfg",
                      active: "ju367vfh",
                    },
                    defaultClass: "ju367vff",
                  },
                  closeButtonBackground: {
                    conditions: {
                      base: "ju367vfi",
                      hover: "ju367vfj",
                      active: "ju367vfk",
                    },
                    defaultClass: "ju367vfi",
                  },
                  connectButtonBackground: {
                    conditions: {
                      base: "ju367vfl",
                      hover: "ju367vfm",
                      active: "ju367vfn",
                    },
                    defaultClass: "ju367vfl",
                  },
                  connectButtonBackgroundError: {
                    conditions: {
                      base: "ju367vfo",
                      hover: "ju367vfp",
                      active: "ju367vfq",
                    },
                    defaultClass: "ju367vfo",
                  },
                  connectButtonInnerBackground: {
                    conditions: {
                      base: "ju367vfr",
                      hover: "ju367vfs",
                      active: "ju367vft",
                    },
                    defaultClass: "ju367vfr",
                  },
                  connectButtonText: {
                    conditions: {
                      base: "ju367vfu",
                      hover: "ju367vfv",
                      active: "ju367vfw",
                    },
                    defaultClass: "ju367vfu",
                  },
                  connectButtonTextError: {
                    conditions: {
                      base: "ju367vfx",
                      hover: "ju367vfy",
                      active: "ju367vfz",
                    },
                    defaultClass: "ju367vfx",
                  },
                  connectionIndicator: {
                    conditions: {
                      base: "ju367vg0",
                      hover: "ju367vg1",
                      active: "ju367vg2",
                    },
                    defaultClass: "ju367vg0",
                  },
                  downloadBottomCardBackground: {
                    conditions: {
                      base: "ju367vg3",
                      hover: "ju367vg4",
                      active: "ju367vg5",
                    },
                    defaultClass: "ju367vg3",
                  },
                  downloadTopCardBackground: {
                    conditions: {
                      base: "ju367vg6",
                      hover: "ju367vg7",
                      active: "ju367vg8",
                    },
                    defaultClass: "ju367vg6",
                  },
                  error: {
                    conditions: {
                      base: "ju367vg9",
                      hover: "ju367vga",
                      active: "ju367vgb",
                    },
                    defaultClass: "ju367vg9",
                  },
                  generalBorder: {
                    conditions: {
                      base: "ju367vgc",
                      hover: "ju367vgd",
                      active: "ju367vge",
                    },
                    defaultClass: "ju367vgc",
                  },
                  generalBorderDim: {
                    conditions: {
                      base: "ju367vgf",
                      hover: "ju367vgg",
                      active: "ju367vgh",
                    },
                    defaultClass: "ju367vgf",
                  },
                  menuItemBackground: {
                    conditions: {
                      base: "ju367vgi",
                      hover: "ju367vgj",
                      active: "ju367vgk",
                    },
                    defaultClass: "ju367vgi",
                  },
                  modalBackdrop: {
                    conditions: {
                      base: "ju367vgl",
                      hover: "ju367vgm",
                      active: "ju367vgn",
                    },
                    defaultClass: "ju367vgl",
                  },
                  modalBackground: {
                    conditions: {
                      base: "ju367vgo",
                      hover: "ju367vgp",
                      active: "ju367vgq",
                    },
                    defaultClass: "ju367vgo",
                  },
                  modalBorder: {
                    conditions: {
                      base: "ju367vgr",
                      hover: "ju367vgs",
                      active: "ju367vgt",
                    },
                    defaultClass: "ju367vgr",
                  },
                  modalText: {
                    conditions: {
                      base: "ju367vgu",
                      hover: "ju367vgv",
                      active: "ju367vgw",
                    },
                    defaultClass: "ju367vgu",
                  },
                  modalTextDim: {
                    conditions: {
                      base: "ju367vgx",
                      hover: "ju367vgy",
                      active: "ju367vgz",
                    },
                    defaultClass: "ju367vgx",
                  },
                  modalTextSecondary: {
                    conditions: {
                      base: "ju367vh0",
                      hover: "ju367vh1",
                      active: "ju367vh2",
                    },
                    defaultClass: "ju367vh0",
                  },
                  profileAction: {
                    conditions: {
                      base: "ju367vh3",
                      hover: "ju367vh4",
                      active: "ju367vh5",
                    },
                    defaultClass: "ju367vh3",
                  },
                  profileActionHover: {
                    conditions: {
                      base: "ju367vh6",
                      hover: "ju367vh7",
                      active: "ju367vh8",
                    },
                    defaultClass: "ju367vh6",
                  },
                  profileForeground: {
                    conditions: {
                      base: "ju367vh9",
                      hover: "ju367vha",
                      active: "ju367vhb",
                    },
                    defaultClass: "ju367vh9",
                  },
                  selectedOptionBorder: {
                    conditions: {
                      base: "ju367vhc",
                      hover: "ju367vhd",
                      active: "ju367vhe",
                    },
                    defaultClass: "ju367vhc",
                  },
                  standby: {
                    conditions: {
                      base: "ju367vhf",
                      hover: "ju367vhg",
                      active: "ju367vhh",
                    },
                    defaultClass: "ju367vhf",
                  },
                },
              },
            },
          },
          {
            conditions: {
              defaultCondition: "smallScreen",
              conditionNames: ["smallScreen", "largeScreen"],
              responsiveArray: void 0,
            },
            styles: {
              alignItems: {
                values: {
                  "flex-start": {
                    conditions: {
                      smallScreen: "ju367v0",
                      largeScreen: "ju367v1",
                    },
                    defaultClass: "ju367v0",
                  },
                  "flex-end": {
                    conditions: {
                      smallScreen: "ju367v2",
                      largeScreen: "ju367v3",
                    },
                    defaultClass: "ju367v2",
                  },
                  center: {
                    conditions: {
                      smallScreen: "ju367v4",
                      largeScreen: "ju367v5",
                    },
                    defaultClass: "ju367v4",
                  },
                },
              },
              display: {
                values: {
                  none: {
                    conditions: {
                      smallScreen: "ju367v6",
                      largeScreen: "ju367v7",
                    },
                    defaultClass: "ju367v6",
                  },
                  block: {
                    conditions: {
                      smallScreen: "ju367v8",
                      largeScreen: "ju367v9",
                    },
                    defaultClass: "ju367v8",
                  },
                  flex: {
                    conditions: {
                      smallScreen: "ju367va",
                      largeScreen: "ju367vb",
                    },
                    defaultClass: "ju367va",
                  },
                  inline: {
                    conditions: {
                      smallScreen: "ju367vc",
                      largeScreen: "ju367vd",
                    },
                    defaultClass: "ju367vc",
                  },
                },
              },
            },
          },
          {
            conditions: void 0,
            styles: {
              margin: {
                mappings: [
                  "marginTop",
                  "marginBottom",
                  "marginLeft",
                  "marginRight",
                ],
              },
              marginX: { mappings: ["marginLeft", "marginRight"] },
              marginY: { mappings: ["marginTop", "marginBottom"] },
              padding: {
                mappings: [
                  "paddingTop",
                  "paddingBottom",
                  "paddingLeft",
                  "paddingRight",
                ],
              },
              paddingX: { mappings: ["paddingLeft", "paddingRight"] },
              paddingY: { mappings: ["paddingTop", "paddingBottom"] },
              alignSelf: {
                values: {
                  "flex-start": { defaultClass: "ju367ve" },
                  "flex-end": { defaultClass: "ju367vf" },
                  center: { defaultClass: "ju367vg" },
                },
              },
              backgroundSize: {
                values: { cover: { defaultClass: "ju367vh" } },
              },
              borderRadius: {
                values: {
                  1: { defaultClass: "ju367vi" },
                  6: { defaultClass: "ju367vj" },
                  10: { defaultClass: "ju367vk" },
                  13: { defaultClass: "ju367vl" },
                  actionButton: { defaultClass: "ju367vm" },
                  connectButton: { defaultClass: "ju367vn" },
                  menuButton: { defaultClass: "ju367vo" },
                  modal: { defaultClass: "ju367vp" },
                  modalMobile: { defaultClass: "ju367vq" },
                  "25%": { defaultClass: "ju367vr" },
                  full: { defaultClass: "ju367vs" },
                },
              },
              borderStyle: { values: { solid: { defaultClass: "ju367vt" } } },
              borderWidth: {
                values: {
                  0: { defaultClass: "ju367vu" },
                  1: { defaultClass: "ju367vv" },
                  2: { defaultClass: "ju367vw" },
                  4: { defaultClass: "ju367vx" },
                },
              },
              cursor: {
                values: {
                  pointer: { defaultClass: "ju367vy" },
                  none: { defaultClass: "ju367vz" },
                },
              },
              pointerEvents: {
                values: {
                  none: { defaultClass: "ju367v10" },
                  all: { defaultClass: "ju367v11" },
                },
              },
              minHeight: {
                values: {
                  8: { defaultClass: "ju367v12" },
                  44: { defaultClass: "ju367v13" },
                },
              },
              flexDirection: {
                values: {
                  row: { defaultClass: "ju367v14" },
                  column: { defaultClass: "ju367v15" },
                },
              },
              fontFamily: { values: { body: { defaultClass: "ju367v16" } } },
              fontSize: {
                values: {
                  12: { defaultClass: "ju367v17" },
                  13: { defaultClass: "ju367v18" },
                  14: { defaultClass: "ju367v19" },
                  16: { defaultClass: "ju367v1a" },
                  18: { defaultClass: "ju367v1b" },
                  20: { defaultClass: "ju367v1c" },
                  23: { defaultClass: "ju367v1d" },
                },
              },
              fontWeight: {
                values: {
                  regular: { defaultClass: "ju367v1e" },
                  medium: { defaultClass: "ju367v1f" },
                  semibold: { defaultClass: "ju367v1g" },
                  bold: { defaultClass: "ju367v1h" },
                  heavy: { defaultClass: "ju367v1i" },
                },
              },
              gap: {
                values: {
                  0: { defaultClass: "ju367v1j" },
                  1: { defaultClass: "ju367v1k" },
                  2: { defaultClass: "ju367v1l" },
                  3: { defaultClass: "ju367v1m" },
                  4: { defaultClass: "ju367v1n" },
                  5: { defaultClass: "ju367v1o" },
                  6: { defaultClass: "ju367v1p" },
                  8: { defaultClass: "ju367v1q" },
                  10: { defaultClass: "ju367v1r" },
                  12: { defaultClass: "ju367v1s" },
                  14: { defaultClass: "ju367v1t" },
                  16: { defaultClass: "ju367v1u" },
                  18: { defaultClass: "ju367v1v" },
                  20: { defaultClass: "ju367v1w" },
                  24: { defaultClass: "ju367v1x" },
                  28: { defaultClass: "ju367v1y" },
                  32: { defaultClass: "ju367v1z" },
                  36: { defaultClass: "ju367v20" },
                  44: { defaultClass: "ju367v21" },
                  64: { defaultClass: "ju367v22" },
                  "-1": { defaultClass: "ju367v23" },
                },
              },
              height: {
                values: {
                  1: { defaultClass: "ju367v24" },
                  2: { defaultClass: "ju367v25" },
                  4: { defaultClass: "ju367v26" },
                  8: { defaultClass: "ju367v27" },
                  12: { defaultClass: "ju367v28" },
                  20: { defaultClass: "ju367v29" },
                  24: { defaultClass: "ju367v2a" },
                  28: { defaultClass: "ju367v2b" },
                  30: { defaultClass: "ju367v2c" },
                  32: { defaultClass: "ju367v2d" },
                  34: { defaultClass: "ju367v2e" },
                  36: { defaultClass: "ju367v2f" },
                  40: { defaultClass: "ju367v2g" },
                  44: { defaultClass: "ju367v2h" },
                  48: { defaultClass: "ju367v2i" },
                  54: { defaultClass: "ju367v2j" },
                  60: { defaultClass: "ju367v2k" },
                  200: { defaultClass: "ju367v2l" },
                  full: { defaultClass: "ju367v2m" },
                  max: { defaultClass: "ju367v2n" },
                },
              },
              justifyContent: {
                values: {
                  "flex-start": { defaultClass: "ju367v2o" },
                  "flex-end": { defaultClass: "ju367v2p" },
                  center: { defaultClass: "ju367v2q" },
                  "space-between": { defaultClass: "ju367v2r" },
                  "space-around": { defaultClass: "ju367v2s" },
                },
              },
              textAlign: {
                values: {
                  left: { defaultClass: "ju367v2t" },
                  center: { defaultClass: "ju367v2u" },
                  inherit: { defaultClass: "ju367v2v" },
                },
              },
              marginBottom: {
                values: {
                  0: { defaultClass: "ju367v2w" },
                  1: { defaultClass: "ju367v2x" },
                  2: { defaultClass: "ju367v2y" },
                  3: { defaultClass: "ju367v2z" },
                  4: { defaultClass: "ju367v30" },
                  5: { defaultClass: "ju367v31" },
                  6: { defaultClass: "ju367v32" },
                  8: { defaultClass: "ju367v33" },
                  10: { defaultClass: "ju367v34" },
                  12: { defaultClass: "ju367v35" },
                  14: { defaultClass: "ju367v36" },
                  16: { defaultClass: "ju367v37" },
                  18: { defaultClass: "ju367v38" },
                  20: { defaultClass: "ju367v39" },
                  24: { defaultClass: "ju367v3a" },
                  28: { defaultClass: "ju367v3b" },
                  32: { defaultClass: "ju367v3c" },
                  36: { defaultClass: "ju367v3d" },
                  44: { defaultClass: "ju367v3e" },
                  64: { defaultClass: "ju367v3f" },
                  "-1": { defaultClass: "ju367v3g" },
                },
              },
              marginLeft: {
                values: {
                  0: { defaultClass: "ju367v3h" },
                  1: { defaultClass: "ju367v3i" },
                  2: { defaultClass: "ju367v3j" },
                  3: { defaultClass: "ju367v3k" },
                  4: { defaultClass: "ju367v3l" },
                  5: { defaultClass: "ju367v3m" },
                  6: { defaultClass: "ju367v3n" },
                  8: { defaultClass: "ju367v3o" },
                  10: { defaultClass: "ju367v3p" },
                  12: { defaultClass: "ju367v3q" },
                  14: { defaultClass: "ju367v3r" },
                  16: { defaultClass: "ju367v3s" },
                  18: { defaultClass: "ju367v3t" },
                  20: { defaultClass: "ju367v3u" },
                  24: { defaultClass: "ju367v3v" },
                  28: { defaultClass: "ju367v3w" },
                  32: { defaultClass: "ju367v3x" },
                  36: { defaultClass: "ju367v3y" },
                  44: { defaultClass: "ju367v3z" },
                  64: { defaultClass: "ju367v40" },
                  "-1": { defaultClass: "ju367v41" },
                },
              },
              marginRight: {
                values: {
                  0: { defaultClass: "ju367v42" },
                  1: { defaultClass: "ju367v43" },
                  2: { defaultClass: "ju367v44" },
                  3: { defaultClass: "ju367v45" },
                  4: { defaultClass: "ju367v46" },
                  5: { defaultClass: "ju367v47" },
                  6: { defaultClass: "ju367v48" },
                  8: { defaultClass: "ju367v49" },
                  10: { defaultClass: "ju367v4a" },
                  12: { defaultClass: "ju367v4b" },
                  14: { defaultClass: "ju367v4c" },
                  16: { defaultClass: "ju367v4d" },
                  18: { defaultClass: "ju367v4e" },
                  20: { defaultClass: "ju367v4f" },
                  24: { defaultClass: "ju367v4g" },
                  28: { defaultClass: "ju367v4h" },
                  32: { defaultClass: "ju367v4i" },
                  36: { defaultClass: "ju367v4j" },
                  44: { defaultClass: "ju367v4k" },
                  64: { defaultClass: "ju367v4l" },
                  "-1": { defaultClass: "ju367v4m" },
                },
              },
              marginTop: {
                values: {
                  0: { defaultClass: "ju367v4n" },
                  1: { defaultClass: "ju367v4o" },
                  2: { defaultClass: "ju367v4p" },
                  3: { defaultClass: "ju367v4q" },
                  4: { defaultClass: "ju367v4r" },
                  5: { defaultClass: "ju367v4s" },
                  6: { defaultClass: "ju367v4t" },
                  8: { defaultClass: "ju367v4u" },
                  10: { defaultClass: "ju367v4v" },
                  12: { defaultClass: "ju367v4w" },
                  14: { defaultClass: "ju367v4x" },
                  16: { defaultClass: "ju367v4y" },
                  18: { defaultClass: "ju367v4z" },
                  20: { defaultClass: "ju367v50" },
                  24: { defaultClass: "ju367v51" },
                  28: { defaultClass: "ju367v52" },
                  32: { defaultClass: "ju367v53" },
                  36: { defaultClass: "ju367v54" },
                  44: { defaultClass: "ju367v55" },
                  64: { defaultClass: "ju367v56" },
                  "-1": { defaultClass: "ju367v57" },
                },
              },
              maxWidth: {
                values: {
                  1: { defaultClass: "ju367v58" },
                  2: { defaultClass: "ju367v59" },
                  4: { defaultClass: "ju367v5a" },
                  8: { defaultClass: "ju367v5b" },
                  12: { defaultClass: "ju367v5c" },
                  20: { defaultClass: "ju367v5d" },
                  24: { defaultClass: "ju367v5e" },
                  28: { defaultClass: "ju367v5f" },
                  30: { defaultClass: "ju367v5g" },
                  32: { defaultClass: "ju367v5h" },
                  34: { defaultClass: "ju367v5i" },
                  36: { defaultClass: "ju367v5j" },
                  40: { defaultClass: "ju367v5k" },
                  44: { defaultClass: "ju367v5l" },
                  48: { defaultClass: "ju367v5m" },
                  54: { defaultClass: "ju367v5n" },
                  60: { defaultClass: "ju367v5o" },
                  200: { defaultClass: "ju367v5p" },
                  full: { defaultClass: "ju367v5q" },
                  max: { defaultClass: "ju367v5r" },
                },
              },
              minWidth: {
                values: {
                  1: { defaultClass: "ju367v5s" },
                  2: { defaultClass: "ju367v5t" },
                  4: { defaultClass: "ju367v5u" },
                  8: { defaultClass: "ju367v5v" },
                  12: { defaultClass: "ju367v5w" },
                  20: { defaultClass: "ju367v5x" },
                  24: { defaultClass: "ju367v5y" },
                  28: { defaultClass: "ju367v5z" },
                  30: { defaultClass: "ju367v60" },
                  32: { defaultClass: "ju367v61" },
                  34: { defaultClass: "ju367v62" },
                  36: { defaultClass: "ju367v63" },
                  40: { defaultClass: "ju367v64" },
                  44: { defaultClass: "ju367v65" },
                  48: { defaultClass: "ju367v66" },
                  54: { defaultClass: "ju367v67" },
                  60: { defaultClass: "ju367v68" },
                  200: { defaultClass: "ju367v69" },
                  full: { defaultClass: "ju367v6a" },
                  max: { defaultClass: "ju367v6b" },
                },
              },
              overflow: { values: { hidden: { defaultClass: "ju367v6c" } } },
              paddingBottom: {
                values: {
                  0: { defaultClass: "ju367v6d" },
                  1: { defaultClass: "ju367v6e" },
                  2: { defaultClass: "ju367v6f" },
                  3: { defaultClass: "ju367v6g" },
                  4: { defaultClass: "ju367v6h" },
                  5: { defaultClass: "ju367v6i" },
                  6: { defaultClass: "ju367v6j" },
                  8: { defaultClass: "ju367v6k" },
                  10: { defaultClass: "ju367v6l" },
                  12: { defaultClass: "ju367v6m" },
                  14: { defaultClass: "ju367v6n" },
                  16: { defaultClass: "ju367v6o" },
                  18: { defaultClass: "ju367v6p" },
                  20: { defaultClass: "ju367v6q" },
                  24: { defaultClass: "ju367v6r" },
                  28: { defaultClass: "ju367v6s" },
                  32: { defaultClass: "ju367v6t" },
                  36: { defaultClass: "ju367v6u" },
                  44: { defaultClass: "ju367v6v" },
                  64: { defaultClass: "ju367v6w" },
                  "-1": { defaultClass: "ju367v6x" },
                },
              },
              paddingLeft: {
                values: {
                  0: { defaultClass: "ju367v6y" },
                  1: { defaultClass: "ju367v6z" },
                  2: { defaultClass: "ju367v70" },
                  3: { defaultClass: "ju367v71" },
                  4: { defaultClass: "ju367v72" },
                  5: { defaultClass: "ju367v73" },
                  6: { defaultClass: "ju367v74" },
                  8: { defaultClass: "ju367v75" },
                  10: { defaultClass: "ju367v76" },
                  12: { defaultClass: "ju367v77" },
                  14: { defaultClass: "ju367v78" },
                  16: { defaultClass: "ju367v79" },
                  18: { defaultClass: "ju367v7a" },
                  20: { defaultClass: "ju367v7b" },
                  24: { defaultClass: "ju367v7c" },
                  28: { defaultClass: "ju367v7d" },
                  32: { defaultClass: "ju367v7e" },
                  36: { defaultClass: "ju367v7f" },
                  44: { defaultClass: "ju367v7g" },
                  64: { defaultClass: "ju367v7h" },
                  "-1": { defaultClass: "ju367v7i" },
                },
              },
              paddingRight: {
                values: {
                  0: { defaultClass: "ju367v7j" },
                  1: { defaultClass: "ju367v7k" },
                  2: { defaultClass: "ju367v7l" },
                  3: { defaultClass: "ju367v7m" },
                  4: { defaultClass: "ju367v7n" },
                  5: { defaultClass: "ju367v7o" },
                  6: { defaultClass: "ju367v7p" },
                  8: { defaultClass: "ju367v7q" },
                  10: { defaultClass: "ju367v7r" },
                  12: { defaultClass: "ju367v7s" },
                  14: { defaultClass: "ju367v7t" },
                  16: { defaultClass: "ju367v7u" },
                  18: { defaultClass: "ju367v7v" },
                  20: { defaultClass: "ju367v7w" },
                  24: { defaultClass: "ju367v7x" },
                  28: { defaultClass: "ju367v7y" },
                  32: { defaultClass: "ju367v7z" },
                  36: { defaultClass: "ju367v80" },
                  44: { defaultClass: "ju367v81" },
                  64: { defaultClass: "ju367v82" },
                  "-1": { defaultClass: "ju367v83" },
                },
              },
              paddingTop: {
                values: {
                  0: { defaultClass: "ju367v84" },
                  1: { defaultClass: "ju367v85" },
                  2: { defaultClass: "ju367v86" },
                  3: { defaultClass: "ju367v87" },
                  4: { defaultClass: "ju367v88" },
                  5: { defaultClass: "ju367v89" },
                  6: { defaultClass: "ju367v8a" },
                  8: { defaultClass: "ju367v8b" },
                  10: { defaultClass: "ju367v8c" },
                  12: { defaultClass: "ju367v8d" },
                  14: { defaultClass: "ju367v8e" },
                  16: { defaultClass: "ju367v8f" },
                  18: { defaultClass: "ju367v8g" },
                  20: { defaultClass: "ju367v8h" },
                  24: { defaultClass: "ju367v8i" },
                  28: { defaultClass: "ju367v8j" },
                  32: { defaultClass: "ju367v8k" },
                  36: { defaultClass: "ju367v8l" },
                  44: { defaultClass: "ju367v8m" },
                  64: { defaultClass: "ju367v8n" },
                  "-1": { defaultClass: "ju367v8o" },
                },
              },
              position: {
                values: {
                  absolute: { defaultClass: "ju367v8p" },
                  fixed: { defaultClass: "ju367v8q" },
                  relative: { defaultClass: "ju367v8r" },
                },
              },
              WebkitUserSelect: {
                values: { none: { defaultClass: "ju367v8s" } },
              },
              right: { values: { 0: { defaultClass: "ju367v8t" } } },
              transition: {
                values: {
                  default: { defaultClass: "ju367v8u" },
                  transform: { defaultClass: "ju367v8v" },
                },
              },
              userSelect: { values: { none: { defaultClass: "ju367v8w" } } },
              width: {
                values: {
                  1: { defaultClass: "ju367v8x" },
                  2: { defaultClass: "ju367v8y" },
                  4: { defaultClass: "ju367v8z" },
                  8: { defaultClass: "ju367v90" },
                  12: { defaultClass: "ju367v91" },
                  20: { defaultClass: "ju367v92" },
                  24: { defaultClass: "ju367v93" },
                  28: { defaultClass: "ju367v94" },
                  30: { defaultClass: "ju367v95" },
                  32: { defaultClass: "ju367v96" },
                  34: { defaultClass: "ju367v97" },
                  36: { defaultClass: "ju367v98" },
                  40: { defaultClass: "ju367v99" },
                  44: { defaultClass: "ju367v9a" },
                  48: { defaultClass: "ju367v9b" },
                  54: { defaultClass: "ju367v9c" },
                  60: { defaultClass: "ju367v9d" },
                  200: { defaultClass: "ju367v9e" },
                  full: { defaultClass: "ju367v9f" },
                  max: { defaultClass: "ju367v9g" },
                },
              },
              backdropFilter: {
                values: { modalOverlay: { defaultClass: "ju367v9h" } },
              },
            },
          }
        ),
        nH = {
          colors: {
            accentColor: "var(--rk-colors-accentColor)",
            accentColorForeground: "var(--rk-colors-accentColorForeground)",
            actionButtonBorder: "var(--rk-colors-actionButtonBorder)",
            actionButtonBorderMobile:
              "var(--rk-colors-actionButtonBorderMobile)",
            actionButtonSecondaryBackground:
              "var(--rk-colors-actionButtonSecondaryBackground)",
            closeButton: "var(--rk-colors-closeButton)",
            closeButtonBackground: "var(--rk-colors-closeButtonBackground)",
            connectButtonBackground: "var(--rk-colors-connectButtonBackground)",
            connectButtonBackgroundError:
              "var(--rk-colors-connectButtonBackgroundError)",
            connectButtonInnerBackground:
              "var(--rk-colors-connectButtonInnerBackground)",
            connectButtonText: "var(--rk-colors-connectButtonText)",
            connectButtonTextError: "var(--rk-colors-connectButtonTextError)",
            connectionIndicator: "var(--rk-colors-connectionIndicator)",
            downloadBottomCardBackground:
              "var(--rk-colors-downloadBottomCardBackground)",
            downloadTopCardBackground:
              "var(--rk-colors-downloadTopCardBackground)",
            error: "var(--rk-colors-error)",
            generalBorder: "var(--rk-colors-generalBorder)",
            generalBorderDim: "var(--rk-colors-generalBorderDim)",
            menuItemBackground: "var(--rk-colors-menuItemBackground)",
            modalBackdrop: "var(--rk-colors-modalBackdrop)",
            modalBackground: "var(--rk-colors-modalBackground)",
            modalBorder: "var(--rk-colors-modalBorder)",
            modalText: "var(--rk-colors-modalText)",
            modalTextDim: "var(--rk-colors-modalTextDim)",
            modalTextSecondary: "var(--rk-colors-modalTextSecondary)",
            profileAction: "var(--rk-colors-profileAction)",
            profileActionHover: "var(--rk-colors-profileActionHover)",
            profileForeground: "var(--rk-colors-profileForeground)",
            selectedOptionBorder: "var(--rk-colors-selectedOptionBorder)",
            standby: "var(--rk-colors-standby)",
          },
          fonts: { body: "var(--rk-fonts-body)" },
          radii: {
            actionButton: "var(--rk-radii-actionButton)",
            connectButton: "var(--rk-radii-connectButton)",
            menuButton: "var(--rk-radii-menuButton)",
            modal: "var(--rk-radii-modal)",
            modalMobile: "var(--rk-radii-modalMobile)",
          },
          shadows: {
            connectButton: "var(--rk-shadows-connectButton)",
            dialog: "var(--rk-shadows-dialog)",
            profileDetailsAction: "var(--rk-shadows-profileDetailsAction)",
            selectedOption: "var(--rk-shadows-selectedOption)",
            selectedWallet: "var(--rk-shadows-selectedWallet)",
            walletLogo: "var(--rk-shadows-walletLogo)",
          },
          blurs: { modalOverlay: "var(--rk-blurs-modalOverlay)" },
        },
        nG = { shrink: "_12cbo8i6", shrinkSm: "_12cbo8i7" },
        nQ = { grow: "_12cbo8i4", growLg: "_12cbo8i5" };
      function touchableStyles({ active: e, hover: l }) {
        return ["_12cbo8i3 ju367v8r", l && nQ[l], nG[e]];
      }
      var n$ = (0, ed.createContext)(null);
      function useAuthenticationStatus() {
        let e = (0, ed.useContext)(n$);
        return e?.status ?? null;
      }
      function useConnectionStatus() {
        let e = useAuthenticationStatus(),
          { isConnected: l } = (0, ep.m)();
        return l
          ? e && ("loading" === e || "unauthenticated" === e)
            ? e
            : "connected"
          : "disconnected";
      }
      function isAndroid() {
        return (
          "undefined" != typeof navigator &&
          /android/i.test(navigator.userAgent)
        );
      }
      function isIOS() {
        return (
          ("undefined" != typeof navigator &&
            /iPhone|iPod/.test(navigator.userAgent)) ||
          ("undefined" != typeof navigator &&
            (/iPad/.test(navigator.userAgent) ||
              ("MacIntel" === navigator.platform &&
                navigator.maxTouchPoints > 1)))
        );
      }
      function isMobile() {
        return isAndroid() || isIOS();
      }
      var nK = {
          a: "iekbcca",
          blockquote: "iekbcc2",
          button: "iekbcc9",
          input: "iekbcc8 iekbcc5 iekbcc4",
          mark: "iekbcc6",
          ol: "iekbcc1",
          q: "iekbcc2",
          select: "iekbcc7 iekbcc5 iekbcc4",
          table: "iekbcc3",
          textarea: "iekbcc5 iekbcc4",
          ul: "iekbcc1",
        },
        atoms = ({ reset: e, ...l }) => {
          if (!e) return nV(l);
          let c = nK[e],
            d = nV(l);
          return (0, eh.Z)("iekbcc0", c, d);
        },
        nZ = ed.forwardRef(
          ({ as: e = "div", className: l, testId: c, ...d }, m) => {
            let g = {},
              y = {};
            for (let e in d)
              nV.properties.has(e) ? (g[e] = d[e]) : (y[e] = d[e]);
            let b = atoms({ reset: "string" == typeof e ? e : "div", ...g });
            return ed.createElement(e, {
              className: (0, eh.Z)(b, l),
              ...y,
              "data-testid": c ? `rk-${c.replace(/^rk-/, "")}` : void 0,
              ref: m,
            });
          }
        );
      nZ.displayName = "Box";
      var nY = new Map(),
        nX = new Map();
      async function loadAsyncImage(e) {
        let l = nX.get(e);
        if (l) return l;
        let load = async () => e().then(async (l) => (nY.set(e, l), l)),
          c = load().catch((l) =>
            load().catch((l) => {
              nX.delete(e);
            })
          );
        return nX.set(e, c), c;
      }
      async function loadImages(...e) {
        return await Promise.all(
          e.map((e) => ("function" == typeof e ? loadAsyncImage(e) : e))
        );
      }
      function useAsyncImage(e) {
        let l = "function" == typeof e ? nY.get(e) : void 0,
          c = (function () {
            let [, e] = (0, ed.useReducer)((e) => e + 1, 0);
            return e;
          })();
        return (
          (0, ed.useEffect)(() => {
            "function" != typeof e || l || loadAsyncImage(e).then(c);
          }, [e, l, c]),
          "function" == typeof e ? l : e
        );
      }
      function AsyncImage({
        alt: e,
        background: l,
        borderColor: c,
        borderRadius: d,
        useAsImage: m,
        boxShadow: g,
        height: y,
        src: b,
        width: C,
        testId: P,
      }) {
        let I = isIOS(),
          B = useAsyncImage(b),
          N = B && /^http/.test(B),
          [F, V] = (0, ed.useReducer)(() => !0, !1);
        return ed.createElement(
          nZ,
          {
            "aria-label": e,
            borderRadius: d,
            boxShadow: g,
            height: "string" == typeof y ? y : void 0,
            overflow: "hidden",
            position: "relative",
            role: "img",
            style: {
              background: l,
              height: "number" == typeof y ? y : void 0,
              width: "number" == typeof C ? C : void 0,
            },
            width: "string" == typeof C ? C : void 0,
            testId: P,
          },
          ed.createElement(nZ, {
            ...(N
              ? { "aria-hidden": !0, as: "img", onLoad: V, src: B }
              : { "aria-hidden": !0, as: "img", src: B }),
            height: "full",
            position: "absolute",
            ...(I ? { WebkitUserSelect: "none" } : {}),
            style: {
              WebkitTouchCallout: "none",
              transition: "opacity .15s linear",
              userSelect: "none",
              ...(!m && N ? { opacity: F ? 1 : 0 } : {}),
            },
            width: "full",
          }),
          c
            ? ed.createElement(nZ, {
                ...("object" == typeof c && "custom" in c
                  ? { style: { borderColor: c.custom } }
                  : { borderColor: c }),
                borderRadius: d,
                borderStyle: "solid",
                borderWidth: "1",
                height: "full",
                position: "relative",
                width: "full",
              })
            : null
        );
      }
      var useRandomId = (e) =>
          (0, ed.useMemo)(() => `${e}_${Math.round(1e9 * Math.random())}`, [e]),
        SpinnerIcon = ({ height: e = 21, width: l = 21 }) => {
          let c = useRandomId("spinner");
          return ed.createElement(
            "svg",
            {
              className: "_1luule42",
              fill: "none",
              height: e,
              viewBox: "0 0 21 21",
              width: l,
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Loading"),
            ed.createElement(
              "clipPath",
              { id: c },
              ed.createElement("path", {
                d: "M10.5 3C6.35786 3 3 6.35786 3 10.5C3 14.6421 6.35786 18 10.5 18C11.3284 18 12 18.6716 12 19.5C12 20.3284 11.3284 21 10.5 21C4.70101 21 0 16.299 0 10.5C0 4.70101 4.70101 0 10.5 0C16.299 0 21 4.70101 21 10.5C21 11.3284 20.3284 12 19.5 12C18.6716 12 18 11.3284 18 10.5C18 6.35786 14.6421 3 10.5 3Z",
              })
            ),
            ed.createElement(
              "foreignObject",
              {
                clipPath: `url(#${c})`,
                height: "21",
                width: "21",
                x: "0",
                y: "0",
              },
              ed.createElement("div", { className: "_1luule43" })
            )
          );
        },
        nJ = [
          { color: "#FC5C54", emoji: "\uD83C\uDF36" },
          { color: "#FFD95A", emoji: "\uD83E\uDD11" },
          { color: "#E95D72", emoji: "\uD83D\uDC19" },
          { color: "#6A87C8", emoji: "\uD83E\uDED0" },
          { color: "#5FD0F3", emoji: "\uD83D\uDC33" },
          { color: "#FC5C54", emoji: "\uD83E\uDD36" },
          { color: "#75C06B", emoji: "\uD83C\uDF32" },
          { color: "#FFDD86", emoji: "\uD83C\uDF1E" },
          { color: "#5FC6D4", emoji: "\uD83D\uDC12" },
          { color: "#FF949A", emoji: "\uD83D\uDC35" },
          { color: "#FF8024", emoji: "\uD83E\uDD8A" },
          { color: "#9BA1A4", emoji: "\uD83D\uDC3C" },
          { color: "#EC66FF", emoji: "\uD83E\uDD84" },
          { color: "#FF8CBC", emoji: "\uD83D\uDC37" },
          { color: "#FF9A23", emoji: "\uD83D\uDC27" },
          { color: "#FF949A", emoji: "\uD83E\uDDA9" },
          { color: "#C5DADB", emoji: "\uD83D\uDC7D" },
          { color: "#FC5C54", emoji: "\uD83C\uDF88" },
          { color: "#FF949A", emoji: "\uD83C\uDF49" },
          { color: "#FFD95A", emoji: "\uD83C\uDF89" },
          { color: "#A8CE63", emoji: "\uD83D\uDC32" },
          { color: "#71ABFF", emoji: "\uD83C\uDF0E" },
          { color: "#FFE279", emoji: "\uD83C\uDF4A" },
          { color: "#B6B1B6", emoji: "\uD83D\uDC2D" },
          { color: "#FF6780", emoji: "\uD83C\uDF63" },
          { color: "#FFD95A", emoji: "\uD83D\uDC25" },
          { color: "#A575FF", emoji: "\uD83D\uDC7E" },
          { color: "#A8CE63", emoji: "\uD83E\uDD66" },
          { color: "#FC5C54", emoji: "\uD83D\uDC79" },
          { color: "#FFE279", emoji: "\uD83D\uDE40" },
          { color: "#5FD0F3", emoji: "⛱" },
          { color: "#4D82FF", emoji: "⛵️" },
          { color: "#FFE279", emoji: "\uD83E\uDD73" },
          { color: "#FF949A", emoji: "\uD83E\uDD2F" },
          { color: "#FFB35A", emoji: "\uD83E\uDD20" },
        ],
        defaultAvatar = ({ address: e, ensImage: l, size: c }) => {
          let [d, m] = (0, ed.useState)(!1);
          (0, ed.useEffect)(() => {
            if (l) {
              let e = new Image();
              (e.src = l), (e.onload = () => m(!0));
            }
          }, [l]);
          let { color: g, emoji: y } = (0, ed.useMemo)(
            () =>
              (function (e) {
                let l = Math.abs(
                  (function (e) {
                    let l = 0;
                    if (0 === e.length) return l;
                    for (let c = 0; c < e.length; c++) {
                      let d = e.charCodeAt(c);
                      l = ((l << 5) - l + d) | 0;
                    }
                    return l;
                  })(("string" == typeof e ? e : "").toLowerCase()) % nJ.length
                );
                return nJ[l ?? 0];
              })(e),
            [e]
          );
          return l
            ? d
              ? ed.createElement(nZ, {
                  backgroundSize: "cover",
                  borderRadius: "full",
                  position: "absolute",
                  style: {
                    backgroundImage: `url(${l})`,
                    backgroundPosition: "center",
                    height: c,
                    width: c,
                  },
                })
              : ed.createElement(
                  nZ,
                  {
                    alignItems: "center",
                    backgroundSize: "cover",
                    borderRadius: "full",
                    color: "modalText",
                    display: "flex",
                    justifyContent: "center",
                    position: "absolute",
                    style: { height: c, width: c },
                  },
                  ed.createElement(SpinnerIcon, null)
                )
            : ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  justifyContent: "center",
                  overflow: "hidden",
                  style: {
                    ...(!l && { backgroundColor: g }),
                    height: c,
                    width: c,
                  },
                },
                y
              );
        },
        n0 = (0, ed.createContext)(defaultAvatar);
      function Avatar({ address: e, imageUrl: l, loading: c, size: d }) {
        let m = (0, ed.useContext)(n0);
        return ed.createElement(
          nZ,
          {
            "aria-hidden": !0,
            borderRadius: "full",
            overflow: "hidden",
            position: "relative",
            style: { height: `${d}px`, width: `${d}px` },
            userSelect: "none",
          },
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              borderRadius: "full",
              display: "flex",
              justifyContent: "center",
              overflow: "hidden",
              position: "absolute",
              style: {
                fontSize: `${Math.round(0.55 * d)}px`,
                height: `${d}px`,
                transform: c ? "scale(0.72)" : void 0,
                transition: ".25s ease",
                transitionDelay: c ? void 0 : ".1s",
                width: `${d}px`,
                willChange: "transform",
              },
              userSelect: "none",
            },
            ed.createElement(m, { address: e, ensImage: l, size: d })
          ),
          c &&
            ed.createElement(
              nZ,
              {
                color: "accentColor",
                display: "flex",
                height: "full",
                position: "absolute",
                width: "full",
              },
              ed.createElement(SpinnerIcon, { height: "100%", width: "100%" })
            )
        );
      }
      var DropdownIcon = () =>
          ed.createElement(
            "svg",
            {
              fill: "none",
              height: "7",
              width: "14",
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Dropdown"),
            ed.createElement("path", {
              d: "M12.75 1.54001L8.51647 5.0038C7.77974 5.60658 6.72026 5.60658 5.98352 5.0038L1.75 1.54001",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: "2.5",
              xmlns: "http://www.w3.org/2000/svg",
            })
          ),
        n1 = new (class {
          constructor(e) {
            for (let [l, c] of ((this.listeners = new Set()),
            (this.defaultLocale = "en"),
            (this.enableFallback = !1),
            (this.locale = "en"),
            (this.cachedLocales = []),
            (this.translations = {}),
            Object.entries(e)))
              (this.cachedLocales = [...this.cachedLocales, l]),
                (this.translations = {
                  ...this.translations,
                  ...this.flattenTranslation(c, l),
                });
          }
          missingMessage(e) {
            return `[missing: "${this.locale}.${e}" translation]`;
          }
          flattenTranslation(e, l) {
            let c = {},
              flatten = (e, l) => {
                for (let d of Object.keys(e)) {
                  let m = `${l}.${d}`,
                    g = e[d];
                  "object" == typeof g && null !== g
                    ? flatten(g, m)
                    : (c[m] = g);
                }
              };
            return flatten(e, l), c;
          }
          translateWithReplacements(e, l = {}) {
            let c = e;
            for (let e in l) {
              let d = l[e];
              c = c.replace(`%{${e}}`, d);
            }
            return c;
          }
          t(e, l, c) {
            let d = `${this.locale}.${e}`,
              m = this.translations[d];
            if (!m) {
              if (this.enableFallback) {
                let c = `${this.defaultLocale}.${e}`,
                  d = this.translations[c];
                if (d) return this.translateWithReplacements(d, l);
              }
              return c?.rawKeyIfTranslationMissing ? e : this.missingMessage(e);
            }
            return this.translateWithReplacements(m, l);
          }
          isLocaleCached(e) {
            return this.cachedLocales.includes(e);
          }
          updateLocale(e) {
            (this.locale = e), this.notifyListeners();
          }
          setTranslations(e, l) {
            let c = this.isLocaleCached(e);
            c ||
              ((this.cachedLocales = [...this.cachedLocales, e]),
              (this.translations = {
                ...this.translations,
                ...this.flattenTranslation(l, e),
              })),
              (this.locale = e),
              this.notifyListeners();
          }
          notifyListeners() {
            for (let e of this.listeners) e();
          }
          onChange(e) {
            return (
              this.listeners.add(e),
              () => {
                this.listeners.delete(e);
              }
            );
          }
        })({ en: JSON.parse(eu.I), "en-US": JSON.parse(eu.I) });
      (n1.defaultLocale = "en-US"),
        (n1.locale = "en-US"),
        (n1.enableFallback = !0);
      var fetchTranslations = async (e) => {
        switch (e) {
          case "ar":
          case "ar-AR":
            return (await c.e(9147).then(c.bind(c, 89147))).default;
          case "de":
          case "de-DE":
            return (await c.e(2410).then(c.bind(c, 32410))).default;
          case "en":
          case "en-US":
          default:
            return (await c.e(8935).then(c.bind(c, 98935))).default;
          case "es":
          case "es-419":
            return (await c.e(7017).then(c.bind(c, 37017))).default;
          case "fr":
          case "fr-FR":
            return (await c.e(7018).then(c.bind(c, 17018))).default;
          case "hi":
          case "hi-IN":
            return (await c.e(3325).then(c.bind(c, 44054))).default;
          case "id":
          case "id-ID":
            return (await c.e(6932).then(c.bind(c, 16932))).default;
          case "ja":
          case "ja-JP":
            return (await c.e(3608).then(c.bind(c, 73608))).default;
          case "ko":
          case "ko-KR":
            return (await c.e(3274).then(c.bind(c, 73274))).default;
          case "ms":
          case "ms-MY":
            return (await c.e(989).then(c.bind(c, 20989))).default;
          case "pt":
          case "pt-BR":
            return (await c.e(9561).then(c.bind(c, 49561))).default;
          case "ru":
          case "ru-RU":
            return (await c.e(7093).then(c.bind(c, 72655))).default;
          case "th":
          case "th-TH":
            return (await c.e(8315).then(c.bind(c, 14378))).default;
          case "tr":
          case "tr-TR":
            return (await c.e(6089).then(c.bind(c, 46089))).default;
          case "ua":
          case "uk-UA":
            return (await c.e(1240).then(c.bind(c, 87982))).default;
          case "vi":
          case "vi-VN":
            return (await c.e(2554).then(c.bind(c, 42554))).default;
          case "zh":
          case "zh-CN":
          case "zh-Hans":
            return (await c.e(9714).then(c.bind(c, 79714))).default;
          case "zh-HK":
            return (await c.e(6819).then(c.bind(c, 76819))).default;
          case "zh-Hant":
          case "zh-TW":
            return (await c.e(9028).then(c.bind(c, 29028))).default;
        }
      };
      async function setLocale(e) {
        let l = n1.isLocaleCached(e);
        if (l) {
          n1.updateLocale(e);
          return;
        }
        let c = await fetchTranslations(e);
        n1.setTranslations(e, JSON.parse(c));
      }
      var detectedBrowserLocale = () => {
          if ("undefined" != typeof window && "undefined" != typeof navigator) {
            if (navigator.languages?.length) return navigator.languages[0];
            if (navigator.language) return navigator.language;
          }
        },
        n2 = (0, ed.createContext)({ i18n: n1 }),
        I18nProvider = ({ children: e, locale: l }) => {
          let [c, d] = (0, ed.useState)(0),
            m = (0, ed.useMemo)(() => detectedBrowserLocale(), []);
          (0, ed.useEffect)(() => {
            let e = n1.onChange(() => {
              d((e) => e + 1);
            });
            return e;
          }, []),
            (0, ed.useEffect)(() => {
              l && l !== n1.locale
                ? setLocale(l)
                : !l && m && m !== n1.locale && setLocale(m);
            }, [l, m]);
          let g = (0, ed.useMemo)(
            () => ({ t: (e, l) => n1.t(e, l), i18n: n1 }),
            [c]
          );
          return ed.createElement(n2.Provider, { value: g }, e);
        };
      function isNotNullish(e) {
        return null != e;
      }
      var n6 = {
          iconBackground: "#7290CC",
          iconUrl: async () => (await c.e(7578).then(c.bind(c, 97578))).default,
        },
        n3 = {
          iconBackground: "#96bedc",
          iconUrl: async () => (await c.e(2064).then(c.bind(c, 82064))).default,
        },
        n5 = {
          iconBackground: "#e84141",
          iconUrl: async () => (await c.e(5381).then(c.bind(c, 35381))).default,
        },
        n4 = {
          iconBackground: "#0052ff",
          iconUrl: async () => (await c.e(8436).then(c.bind(c, 98436))).default,
        },
        n7 = {
          iconBackground: "#814625",
          iconUrl: async () => (await c.e(1545).then(c.bind(c, 21545))).default,
        },
        n8 = {
          iconBackground: "#000000",
          iconUrl: async () => (await c.e(2339).then(c.bind(c, 12339))).default,
        },
        n9 = {
          iconBackground: "#ebac0e",
          iconUrl: async () => (await c.e(4179).then(c.bind(c, 44179))).default,
        },
        re = {
          iconBackground: "#FCFF52",
          iconUrl: async () => (await c.e(4159).then(c.bind(c, 34159))).default,
        },
        rt = {
          iconBackground: "#002D74",
          iconUrl: async () => (await c.e(1056).then(c.bind(c, 1056))).default,
        },
        rn = {
          iconBackground: "#484c50",
          iconUrl: async () => (await c.e(6706).then(c.bind(c, 46706))).default,
        },
        rr = {
          iconBackground: "transparent",
          iconUrl: async () => (await c.e(6313).then(c.bind(c, 76313))).default,
        },
        ri = {
          iconBackground: "#000000",
          iconUrl: async () => (await c.e(6985).then(c.bind(c, 26985))).default,
        },
        ro = {
          iconBackground: "#7132F5",
          iconUrl: async () => (await c.e(3245).then(c.bind(c, 73245))).default,
        },
        ra = {
          iconBackground: "transparent",
          iconUrl: async () => (await c.e(1492).then(c.bind(c, 91492))).default,
        },
        rs = {
          iconBackground: "#ffffff",
          iconUrl: async () => (await c.e(5982).then(c.bind(c, 35982))).default,
        },
        rl = {
          iconBackground: "#ffffff",
          iconUrl: async () => (await c.e(9211).then(c.bind(c, 59211))).default,
        },
        rc = {
          iconBackground: "#000000",
          iconUrl: async () => (await c.e(4356).then(c.bind(c, 60382))).default,
        },
        ru = {
          iconBackground: "#ff5a57",
          iconUrl: async () => (await c.e(3938).then(c.bind(c, 63938))).default,
        },
        rd = {
          iconBackground: "#9f71ec",
          iconUrl: async () => (await c.e(5157).then(c.bind(c, 75157))).default,
        },
        rp = {
          iconBackground: "#FFEEDA",
          iconUrl: async () => (await c.e(8069).then(c.bind(c, 8069))).default,
        },
        rh = {
          iconBackground: "#F50DB4",
          iconUrl: async () => (await c.e(1083).then(c.bind(c, 51083))).default,
        },
        rf = {
          iconBackground: "#f9f7ec",
          iconUrl: async () => (await c.e(4377).then(c.bind(c, 44377))).default,
        },
        rm = {
          iconBackground: "#000000",
          iconUrl: async () => (await c.e(5812).then(c.bind(c, 75812))).default,
        },
        rg = {
          iconBackground: "#f9f7ec",
          iconUrl: async () => (await c.e(5814).then(c.bind(c, 65814))).default,
        },
        ry = {
          iconBackground: "#000000",
          iconUrl: async () => (await c.e(494).then(c.bind(c, 70494))).default,
        },
        rb = Object.fromEntries(
          Object.values({
            apechain: { chainId: 33139, name: "ApeChain", ...n6 },
            apechainCurtis: { chainId: 33111, name: "ApeChain Curtis", ...n6 },
            arbitrum: { chainId: 42161, name: "Arbitrum", ...n3 },
            arbitrumGoerli: { chainId: 421613, ...n3 },
            arbitrumSepolia: { chainId: 421614, ...n3 },
            avalanche: { chainId: 43114, ...n5 },
            avalancheFuji: { chainId: 43113, ...n5 },
            base: { chainId: 8453, name: "Base", ...n4 },
            baseGoerli: { chainId: 84531, ...n4 },
            baseSepolia: { chainId: 84532, ...n4 },
            berachain: { chainId: 80094, name: "Berachain", ...n7 },
            berachainArtio: { chainId: 80085, name: "Berachain Artio", ...n7 },
            berachainBArtio: {
              chainId: 80084,
              name: "Berachain bArtio",
              ...n7,
            },
            blast: { chainId: 81457, name: "Blast", ...n8 },
            blastSepolia: { chainId: 168587773, ...n8 },
            bsc: { chainId: 56, name: "BSC", ...n9 },
            bscTestnet: { chainId: 97, ...n9 },
            celo: { chainId: 42220, name: "Celo", ...re },
            celoAlfajores: { chainId: 44787, name: "Celo Alfajores", ...re },
            cronos: { chainId: 25, ...rt },
            cronosTestnet: { chainId: 338, ...rt },
            degen: {
              chainId: 666666666,
              name: "Degen",
              iconBackground: "#A36EFD",
              iconUrl: async () =>
                (await c.e(5633).then(c.bind(c, 25633))).default,
            },
            flow: { chainId: 747, ...rr },
            flowTestnet: { chainId: 545, ...rr },
            gnosis: {
              chainId: 100,
              name: "Gnosis",
              iconBackground: "#04795c",
              iconUrl: async () =>
                (await c.e(6134).then(c.bind(c, 16134))).default,
            },
            goerli: { chainId: 5, ...rn },
            gravity: { chainId: 1625, name: "Gravity", ...ri },
            gravitySepolia: { chainId: 13505, name: "Gravity Sepolia", ...ri },
            hardhat: {
              chainId: 31337,
              iconBackground: "#f9f7ec",
              iconUrl: async () =>
                (await c.e(2273).then(c.bind(c, 42273))).default,
            },
            holesky: { chainId: 17e3, ...rn },
            hyperevm: {
              chainId: 999,
              iconBackground: "#000000",
              iconUrl: async () =>
                (await c.e(7090).then(c.bind(c, 47090))).default,
            },
            ink: { chainId: 57073, ...ro },
            inkSepolia: { chainId: 763373, ...ro },
            kaia: { chainId: 8217, name: "Kaia", ...ra },
            kairos: { chainId: 1001, name: "Kairos", ...ra },
            kovan: { chainId: 42, ...rn },
            linea: { chainId: 59144, name: "Linea", ...rs },
            lineaGoerli: { chainId: 59140, name: "Linea Goerli", ...rs },
            lineaSepolia: { chainId: 59141, name: "Linea Sepolia", ...rs },
            localhost: { chainId: 1337, ...rn },
            mainnet: { chainId: 1, name: "Ethereum", ...rn },
            manta: { chainId: 169, name: "Manta", ...rl },
            mantaSepolia: { chainId: 3441006, ...rl },
            mantaTestnet: { chainId: 3441005, ...rl },
            mantle: { chainId: 5e3, ...rc },
            mantleTestnet: { chainId: 5001, ...rc },
            optimism: { chainId: 10, name: "Optimism", ...ru },
            optimismGoerli: { chainId: 420, ...ru },
            optimismKovan: { chainId: 69, ...ru },
            optimismSepolia: { chainId: 11155420, ...ru },
            polygon: { chainId: 137, name: "Polygon", ...rd },
            polygonAmoy: { chainId: 80002, ...rd },
            polygonMumbai: { chainId: 80001, ...rd },
            rinkeby: { chainId: 4, ...rn },
            ronin: {
              chainId: 2020,
              iconBackground: "#1273EA",
              iconUrl: async () =>
                (await c.e(7309).then(c.bind(c, 7309))).default,
            },
            ropsten: { chainId: 3, ...rn },
            sanko: {
              chainId: 1996,
              name: "Sanko",
              iconBackground: "#000000",
              iconUrl: async () =>
                (await c.e(382).then(c.bind(c, 20382))).default,
            },
            scroll: { chainId: 534352, ...rp },
            scrollSepolia: { chainId: 534351, ...rp },
            sepolia: { chainId: 11155111, ...rn },
            unichain: { chainId: 130, ...rh },
            unichainSepolia: { chainId: 1301, ...rh },
            xdc: { chainId: 50, name: "XinFin", ...rf },
            xdcTestnet: { chainId: 51, ...rf },
            zetachain: { chainId: 7e3, name: "ZetaChain", ...rm },
            zetachainAthensTestnet: {
              chainId: 7001,
              name: "Zeta Athens",
              ...rm,
            },
            zkSync: { chainId: 324, name: "zkSync", ...rg },
            zkSyncTestnet: { chainId: 280, ...rg },
            zora: { chainId: 7777777, name: "Zora", ...ry },
            zoraSepolia: { chainId: 999999999, ...ry },
            zoraTestnet: { chainId: 999, ...ry },
          })
            .filter(isNotNullish)
            .map(({ chainId: e, ...l }) => [e, l])
        ),
        provideRainbowKitChains = (e) =>
          e.map((e) => {
            let l = rb[e.id] ?? {};
            return {
              ...e,
              name: l.name ?? e.name,
              iconUrl: e.iconUrl ?? l.iconUrl,
              iconBackground: e.iconBackground ?? l.iconBackground,
            };
          }),
        rv = (0, ed.createContext)({ chains: [] });
      function RainbowKitChainProvider({ children: e, initialChain: l }) {
        let { chains: c } = (0, ef.Z)();
        return ed.createElement(
          rv.Provider,
          {
            value: (0, ed.useMemo)(
              () => ({
                chains: provideRainbowKitChains(c),
                initialChainId: "number" == typeof l ? l : l?.id,
              }),
              [c, l]
            ),
          },
          e
        );
      }
      var useRainbowKitChains = () => (0, ed.useContext)(rv).chains,
        useInitialChainId = () => (0, ed.useContext)(rv).initialChainId,
        useRainbowKitChainsById = () => {
          let e = useRainbowKitChains();
          return (0, ed.useMemo)(() => {
            let l = {};
            for (let c of e) l[c.id] = c;
            return l;
          }, [e]);
        },
        rw = (0, ed.createContext)({
          showBalance: void 0,
          setShowBalance: () => {},
        });
      function ShowBalanceProvider({ children: e }) {
        let [l, c] = (0, ed.useState)();
        return ed.createElement(
          rw.Provider,
          { value: { showBalance: l, setShowBalance: c } },
          e
        );
      }
      var useShowBalance = () => (0, ed.useContext)(rw);
      function useIsMainnetConfigured() {
        let e = useRainbowKitChains(),
          l = eG.R.id,
          c = e.some((e) => e.id === l);
        return c;
      }
      async function rainbowFetch(e, l) {
        if (
          ((l = {
            headers: {},
            method: "get",
            ...l,
            timeout: l.timeout ?? 1e4,
          }),
          !e)
        )
          throw Error("rainbowFetch: Missing url argument");
        let c = new AbortController(),
          d = setTimeout(() => c.abort(), l.timeout),
          { body: m, params: g, headers: y, ...b } = l,
          C = m && "object" == typeof m ? JSON.stringify(l.body) : l.body,
          P = await fetch(
            `${e}${
              g && Object.keys(g).length ? `?${new URLSearchParams(g)}` : ""
            }`,
            {
              ...b,
              body: C,
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                ...y,
              },
              signal: c.signal,
            }
          );
        clearTimeout(d);
        let I = await (function (e) {
          let l = e.headers.get("Content-Type");
          return l?.startsWith("application/json") ? e.json() : e.text();
        })(P);
        if (P.ok) {
          let { headers: e, status: l } = P;
          return { data: I, headers: e, status: l };
        }
        let B = (function ({ requestBody: e, response: l, responseBody: c }) {
          let d =
              c?.error ||
              l?.statusText ||
              "There was an error with the request.",
            m = Error(d);
          return (m.response = l), (m.responseBody = c), (m.requestBody = e), m;
        })({
          requestBody: m,
          response: P,
          responseBody: "string" == typeof I ? { error: I } : I,
        });
        throw B;
      }
      var rx = class {
          constructor(e = {}) {
            let { baseUrl: l = "", ...c } = e;
            (this.baseUrl = l), (this.opts = c);
          }
          get(e, l) {
            return rainbowFetch(`${this.baseUrl}${e}`, {
              ...this.opts,
              ...(l || {}),
              method: "get",
            });
          }
          delete(e, l) {
            return rainbowFetch(`${this.baseUrl}${e}`, {
              ...this.opts,
              ...(l || {}),
              method: "delete",
            });
          }
          head(e, l) {
            return rainbowFetch(`${this.baseUrl}${e}`, {
              ...this.opts,
              ...(l || {}),
              method: "head",
            });
          }
          options(e, l) {
            return rainbowFetch(`${this.baseUrl}${e}`, {
              ...this.opts,
              ...(l || {}),
              method: "options",
            });
          }
          post(e, l, c) {
            return rainbowFetch(`${this.baseUrl}${e}`, {
              ...this.opts,
              ...(c || {}),
              body: l,
              method: "post",
            });
          }
          put(e, l, c) {
            return rainbowFetch(`${this.baseUrl}${e}`, {
              ...this.opts,
              ...(c || {}),
              body: l,
              method: "put",
            });
          }
          patch(e, l, c) {
            return rainbowFetch(`${this.baseUrl}${e}`, {
              ...this.opts,
              ...(c || {}),
              body: l,
              method: "patch",
            });
          }
        },
        r_ = !!(
          void 0 !== nz &&
          void 0 !== nz.env &&
          nz.env.RAINBOW_PROVIDER_API_KEY
        ),
        rC = (function ({ baseUrl: e, headers: l, params: c, timeout: d }) {
          return new rx({ baseUrl: e, headers: l, params: c, timeout: d });
        })({
          baseUrl: "https://enhanced-provider.rainbow.me",
          headers: {
            "x-api-key":
              (void 0 !== nz &&
                void 0 !== nz.env &&
                nz.env.RAINBOW_PROVIDER_API_KEY) ||
              "LzbasoBiLqltex3VkcQ7LRmL4PtfiiZ1EMJrizrgfonWN6byJReu/l6yrUoo3zLW",
          },
        });
      function getStorageEnsNameKey(e) {
        return `rk-ens-name-${e}`;
      }
      async function getEnhancedProviderEnsName({ address: e }) {
        let l = (function (e) {
          let l = (function (e) {
            try {
              let l = e ? JSON.parse(e) : null;
              return "object" == typeof l ? l : null;
            } catch {
              return null;
            }
          })(localStorage.getItem(getStorageEnsNameKey(e)));
          if (!l) return null;
          let { ensName: c, expires: d } = l;
          if ("string" != typeof c || Number.isNaN(Number(d)))
            return localStorage.removeItem(getStorageEnsNameKey(e)), null;
          let m = new Date();
          return m.getTime() > Number(d)
            ? (localStorage.removeItem(getStorageEnsNameKey(e)), null)
            : c;
        })(e);
        if (l) return l;
        let c = await rC.get("/v1/resolve-ens", { params: { address: e } }),
          d = c.data.data;
        return (
          d &&
            (function (e, l) {
              if (!(0, eK.U)(e)) return;
              let c = new Date(),
                d = new Date(c.getTime() + 180 * 6e4);
              localStorage.setItem(
                getStorageEnsNameKey(e),
                JSON.stringify({ ensName: l, expires: d.getTime() })
              );
            })(e, d),
          d
        );
      }
      function useProfile({ address: e, includeBalance: l }) {
        let c = (function (e) {
            let l = useIsMainnetConfigured(),
              { data: c } = (0, e$.F)({
                chainId: eG.R.id,
                address: e,
                query: { enabled: l },
              }),
              { data: d } = (0, eQ.a)({
                queryKey: (function (e, l, c = {}) {
                  return [e, l, c];
                })("address", e),
                queryFn: () => getEnhancedProviderEnsName({ address: e }),
                enabled: !l && !!e && r_,
                staleTime: 6e5,
                retry: 1,
              });
            return c || d;
          })(e),
          d = (function (e) {
            let l = useIsMainnetConfigured(),
              { data: c } = (function (e = {}) {
                let { name: l, query: c = {} } = e,
                  d = (0, ef.Z)(e),
                  m = (0, eE.x)({ config: d }),
                  g = (function (e, l = {}) {
                    return {
                      async queryFn({ queryKey: l }) {
                        let { name: c, scopeKey: d, ...m } = l[1];
                        if (!c) throw Error("name is required");
                        return (function (e, l) {
                          let { chainId: c, ...d } = l,
                            m = e.getClient({ chainId: c }),
                            g = (0, ev.s)(m, getEnsAvatar, "getEnsAvatar");
                          return g(d);
                        })(e, { ...m, name: c });
                      },
                      queryKey: (function (e = {}) {
                        return ["ensAvatar", (0, e_.OP)(e)];
                      })(l),
                    };
                  })(d, { ...e, chainId: e.chainId ?? m }),
                  y = !!(l && (c.enabled ?? !0));
                return (0, eC.aM)({ ...c, ...g, enabled: y });
              })({
                chainId: eG.R.id,
                name: e
                  ? ((e) => {
                      try {
                        var l;
                        return (l = (function (e, l, c) {
                          if (!e) return [];
                          init();
                          let d = 0;
                          return e.split(".").map((e) => {
                            let m = (function (e) {
                                let l = [];
                                for (let c = 0, d = e.length; c < d; ) {
                                  let d = e.codePointAt(c);
                                  (c += d < 65536 ? 1 : 2), l.push(d);
                                }
                                return l;
                              })(e),
                              g = { input: m, offset: d };
                            d += m.length + 1;
                            try {
                              let e,
                                d = (g.tokens = (function (e, l, c) {
                                  let d = [],
                                    m = [];
                                  for (e = e.slice().reverse(); e.length; ) {
                                    let g = (function (e, l) {
                                      let c,
                                        d = $,
                                        m = e.length;
                                      for (; m && (d = d.get(e[--m])); ) {
                                        let { V: g } = d;
                                        g &&
                                          ((c = g),
                                          l && l.push(...e.slice(m).reverse()),
                                          (e.length = m));
                                      }
                                      return c;
                                    })(e);
                                    if (g)
                                      m.length && (d.push(l(m)), (m = [])),
                                        d.push(c(g));
                                    else {
                                      let l = e.pop();
                                      if (G.has(l)) m.push(l);
                                      else {
                                        let e = b.get(l);
                                        if (e) m.push(...e);
                                        else if (!C.has(l))
                                          throw error_disallowed(l);
                                      }
                                    }
                                  }
                                  return m.length && d.push(l(m)), d;
                                })(m, l, c)),
                                y = d.length;
                              if (!y) throw Error("empty label");
                              let B = (g.output = d.flat());
                              if (
                                ((function (e) {
                                  for (let l = e.lastIndexOf(95); l > 0; )
                                    if (95 !== e[--l])
                                      throw Error(
                                        "underscore allowed only at start"
                                      );
                                })(B),
                                !(g.emoji = y > 1 || d[0].is_emoji) &&
                                  B.every((e) => e < 128))
                              )
                                (function (e) {
                                  if (e.length >= 4 && 45 == e[2] && 45 == e[3])
                                    throw Error(
                                      `invalid label extension: "${str_from_cps(
                                        e.slice(0, 4)
                                      )}"`
                                    );
                                })(B),
                                  (e = "ASCII");
                              else {
                                let l = d.flatMap((e) => (e.is_emoji ? [] : e));
                                if (l.length) {
                                  if (P.has(B[0]))
                                    throw error_placement(
                                      "leading combining mark"
                                    );
                                  for (let e = 1; e < y; e++) {
                                    let l = d[e];
                                    if (!l.is_emoji && P.has(l[0]))
                                      throw error_placement(
                                        `emoji + combining mark: "${str_from_cps(
                                          d[e - 1]
                                        )} + ${safe_str_from_cps([l[0]])}"`
                                      );
                                  }
                                  !(function (e) {
                                    let l = e[0],
                                      c = eA.get(l);
                                    if (c)
                                      throw error_placement(`leading ${c}`);
                                    let d = e.length,
                                      m = -1;
                                    for (let g = 1; g < d; g++) {
                                      l = e[g];
                                      let d = eA.get(l);
                                      if (d) {
                                        if (m == g)
                                          throw error_placement(`${c} + ${d}`);
                                        (m = g + 1), (c = d);
                                      }
                                    }
                                    if (m == d)
                                      throw error_placement(`trailing ${c}`);
                                  })(B);
                                  let c = Array_from(new Set(l)),
                                    [m] = (function (e) {
                                      let l = N;
                                      for (let c of e) {
                                        let e = l.filter((e) =>
                                          group_has_cp(e, c)
                                        );
                                        if (!e.length) {
                                          if (N.some((e) => group_has_cp(e, c)))
                                            throw error_group_member(l[0], c);
                                          throw error_disallowed(c);
                                        }
                                        if (((l = e), 1 == e.length)) break;
                                      }
                                      return l;
                                    })(c);
                                  (function (e, l) {
                                    for (let c of l)
                                      if (!group_has_cp(e, c))
                                        throw error_group_member(e, c);
                                    if (e.M) {
                                      let e = decomposed(l).map(unpack_cp);
                                      for (let l = 1, c = e.length; l < c; l++)
                                        if (I.has(e[l])) {
                                          let d = l + 1;
                                          for (
                                            let m;
                                            d < c && I.has((m = e[d]));
                                            d++
                                          )
                                            for (let c = l; c < d; c++)
                                              if (e[c] == m)
                                                throw Error(
                                                  `duplicate non-spacing marks: ${quoted_cp(
                                                    m
                                                  )}`
                                                );
                                          if (d - l > 4)
                                            throw Error(
                                              `excessive non-spacing marks: ${bidi_qq(
                                                safe_str_from_cps(
                                                  e.slice(l - 1, d)
                                                )
                                              )} (${d - l}/4)`
                                            );
                                          l = d;
                                        }
                                    }
                                  })(m, l),
                                    (function (e, l) {
                                      let c;
                                      let d = [];
                                      for (let e of l) {
                                        let l = V.get(e);
                                        if (1 === l) return;
                                        if (l) {
                                          let d = l.M.get(e);
                                          if (
                                            !(c = c
                                              ? c.filter((e) => d.has(e))
                                              : Array_from(d)).length
                                          )
                                            return;
                                        } else d.push(e);
                                      }
                                      if (c) {
                                        for (let l of c)
                                          if (
                                            d.every((e) => group_has_cp(l, e))
                                          )
                                            throw Error(
                                              `whole-script confusable: ${e.N}/${l.N}`
                                            );
                                      }
                                    })(m, c),
                                    (e = m.N);
                                } else e = "Emoji";
                              }
                              g.type = e;
                            } catch (e) {
                              g.error = e;
                            }
                            return g;
                          });
                        })(e, nfc, filter_fe0f))
                          .map(({ input: e, error: c, output: d }) => {
                            if (c) {
                              let d = c.message;
                              throw Error(
                                1 == l.length
                                  ? d
                                  : `Invalid label ${bidi_qq(
                                      safe_str_from_cps(e, 63)
                                    )}: ${d}`
                              );
                            }
                            return str_from_cps(d);
                          })
                          .join(".");
                      } catch {}
                    })(e)
                  : void 0,
                query: { enabled: l },
              });
            return c;
          })(c),
          { data: m } = useBalance({ address: l ? e : void 0 });
        return { ensName: c, ensAvatar: d, balance: m };
      }
      function dist_useChainId() {
        let { chain: e } = (0, ep.m)();
        return e?.id ?? null;
      }
      var rE = "rk-transactions";
      function loadData() {
        return (function (e) {
          try {
            let l = e ? JSON.parse(e) : {};
            return "object" == typeof l ? l : {};
          } catch {
            return {};
          }
        })(
          "undefined" != typeof localStorage ? localStorage.getItem(rE) : null
        );
      }
      var rA = /^0x([A-Fa-f0-9]{64})$/,
        rS = ed.createContext(null);
      function TransactionStoreProvider({ children: e }) {
        let l = (function (e = {}) {
            let l = (0, ef.Z)(e);
            return (0, t7.useSyncExternalStoreWithSelector)(
              (e) =>
                (function (e, l) {
                  let { onChange: c } = l;
                  return e.subscribe(() => getPublicClient(e), c, {
                    equalityFn: (e, l) => e?.uid === l?.uid,
                  });
                })(l, { onChange: e }),
              () => getPublicClient(l, e),
              () => getPublicClient(l, e),
              (e) => e,
              (e, l) => e?.uid === l?.uid
            );
          })(),
          { address: c } = (0, ep.m)(),
          d = dist_useChainId(),
          { refetch: m } = useBalance({ address: c, query: { enabled: !1 } }),
          [g] = ed.useState(
            () =>
              ea ??
              (ea = (function ({ provider: e }) {
                let l = loadData(),
                  c = e,
                  d = new Set(),
                  m = new Set(),
                  g = new Map();
                function getTransactions(e, c) {
                  return l[e]?.[c] ?? [];
                }
                function setTransactionStatus(e, l, c, d) {
                  updateTransactions(e, l, (e) =>
                    e.map((e) => (e.hash === c ? { ...e, status: d } : e))
                  );
                }
                async function waitForPendingTransactions(e, l) {
                  await Promise.all(
                    getTransactions(e, l)
                      .filter((e) => "pending" === e.status)
                      .map(async (d) => {
                        let { confirmations: y, hash: b } = d,
                          C = g.get(b);
                        if (C) return await C;
                        let P = c
                          .waitForTransactionReceipt({
                            confirmations: y,
                            hash: b,
                            timeout: 3e5,
                          })
                          .then(({ status: c }) => {
                            g.delete(b),
                              void 0 !== c &&
                                (setTransactionStatus(
                                  e,
                                  l,
                                  b,
                                  0 === c || "reverted" === c
                                    ? "failed"
                                    : "confirmed"
                                ),
                                (function (e) {
                                  for (let l of m) l(e);
                                })(c));
                          })
                          .catch(() => {
                            setTransactionStatus(e, l, b, "failed");
                          });
                        return g.set(b, P), await P;
                      })
                  );
                }
                function updateTransactions(e, c, m) {
                  (l = loadData())[e] = l[e] ?? {};
                  let g = 0,
                    y = m(l[e][c] ?? []).filter(
                      ({ status: e }) => "pending" === e || g++ <= 10
                    );
                  (l[e][c] = y.length > 0 ? y : void 0),
                    localStorage.setItem(rE, JSON.stringify(l)),
                    (function () {
                      for (let e of d) e();
                    })(),
                    waitForPendingTransactions(e, c);
                }
                return {
                  addTransaction: function (e, l, c) {
                    let d = (function (e) {
                      let l = [];
                      return (
                        rA.test(e.hash) || l.push("Invalid transaction hash"),
                        "string" != typeof e.description &&
                          l.push("Transaction must have a description"),
                        void 0 !== e.confirmations &&
                          (!Number.isInteger(e.confirmations) ||
                            e.confirmations < 1) &&
                          l.push(
                            "Transaction confirmations must be a positiver integer"
                          ),
                        l
                      );
                    })(c);
                    if (d.length > 0)
                      throw Error(
                        ["Unable to add transaction", ...d].join("\n")
                      );
                    updateTransactions(e, l, (e) => [
                      { ...c, status: "pending" },
                      ...e.filter(({ hash: e }) => e !== c.hash),
                    ]);
                  },
                  clearTransactions: function (e, l) {
                    updateTransactions(e, l, () => []);
                  },
                  getTransactions,
                  onTransactionStatus: function (e) {
                    return (
                      m.add(e),
                      () => {
                        m.delete(e);
                      }
                    );
                  },
                  onChange: function (e) {
                    return (
                      d.add(e),
                      () => {
                        d.delete(e);
                      }
                    );
                  },
                  setProvider: function (e) {
                    c = e;
                  },
                  waitForPendingTransactions,
                };
              })({ provider: l }))
          ),
          y = ed.useCallback(
            (e) => {
              "success" === e && m();
            },
            [m]
          );
        return (
          ed.useEffect(() => {
            g.setProvider(l);
          }, [g, l]),
          ed.useEffect(() => {
            c && d && g.waitForPendingTransactions(c, d);
          }, [g, c, d]),
          ed.useEffect(() => {
            if (g && c && d) return g.onTransactionStatus(y);
          }, [g, c, d, y]),
          ed.createElement(rS.Provider, { value: g }, e)
        );
      }
      function useTransactionStore() {
        let e = ed.useContext(rS);
        if (!e)
          throw Error(
            "Transaction hooks must be used within RainbowKitProvider"
          );
        return e;
      }
      function useRecentTransactions() {
        let e = useTransactionStore(),
          { address: l } = (0, ep.m)(),
          c = dist_useChainId(),
          [d, m] = (0, ed.useState)(() =>
            e && l && c ? e.getTransactions(l, c) : []
          );
        return (
          (0, ed.useEffect)(() => {
            if (e && l && c)
              return (
                m(e.getTransactions(l, c)),
                e.onChange(() => {
                  m(e.getTransactions(l, c));
                })
              );
          }, [e, l, c]),
          d
        );
      }
      var resolveThemeVars = (e) => ("function" == typeof e ? e() : e);
      function cssStringFromTheme(e, l = {}) {
        return Object.entries(
          (function (e, { extends: l } = {}) {
            let c = { ...assignInlineVars(nH, resolveThemeVars(e)) };
            if (!l) return c;
            let d = assignInlineVars(nH, resolveThemeVars(l)),
              m = Object.fromEntries(
                Object.entries(c).filter(([e, l]) => l !== d[e])
              );
            return m;
          })(e, l)
        )
          .map(([e, l]) => `${e}:${l.replace(/[:;{}</>]/g, "")};`)
          .join("");
      }
      var rk = {
          appName: void 0,
          disclaimer: void 0,
          learnMoreUrl:
            "https://learn.rainbow.me/understanding-web3?utm_source=rainbowkit&utm_campaign=learnmore",
        },
        rP = (0, ed.createContext)(rk),
        rM = (0, ed.createContext)(!1),
        useWindowSize = () => {
          let [e, l] = (0, ed.useState)({ height: void 0, width: void 0 });
          return (
            (0, ed.useEffect)(() => {
              var e;
              let c;
              let d =
                ((e = () => {
                  l({ height: window.innerHeight, width: window.innerWidth });
                }),
                () => {
                  c && clearTimeout(c),
                    (c = setTimeout(() => {
                      (c = null), e();
                    }, 500));
                });
              return (
                window.addEventListener("resize", d),
                d(),
                () => window.removeEventListener("resize", d)
              );
            }, []),
            e
          );
        },
        rT = (0, ed.createContext)({ connector: null, setConnector: () => {} });
      function WalletButtonProvider({ children: e }) {
        let [l, c] = (0, ed.useState)(null);
        return ed.createElement(
          rT.Provider,
          {
            value: (0, ed.useMemo)(
              () => ({ connector: l, setConnector: c }),
              [l]
            ),
          },
          e
        );
      }
      var rI = { COMPACT: "compact", WIDE: "wide" },
        rj = (0, ed.createContext)(rI.WIDE);
      function ModalSizeProvider({ children: e, modalSize: l }) {
        let { width: c } = useWindowSize(),
          { connector: d } = (0, ed.useContext)(rT);
        return ed.createElement(
          rj.Provider,
          { value: (c && c < 768) || d ? rI.COMPACT : l },
          e
        );
      }
      var rO = (0, ed.createContext)(!1);
      function isSafari() {
        return (
          "undefined" != typeof navigator &&
          void 0 !== navigator.userAgent &&
          /Version\/([0-9._]+).*Safari/.test(navigator.userAgent)
        );
      }
      function getBrowser() {
        if ("undefined" == typeof navigator) return "Browser";
        let e = navigator.userAgent?.toLowerCase();
        return navigator.brave?.isBrave
          ? "Brave"
          : e?.indexOf("edg/") > -1
          ? "Edge"
          : e?.indexOf("op") > -1
          ? "Opera"
          : "undefined" != typeof document &&
            "" !==
              getComputedStyle(document.body).getPropertyValue(
                "--arc-palette-focus"
              )
          ? "Arc"
          : e?.indexOf("chrome") > -1
          ? "Chrome"
          : e?.indexOf("firefox") > -1
          ? "Firefox"
          : isSafari()
          ? "Safari"
          : "Browser";
      }
      var { os: rB } = (0, n_.UAParser)();
      function getPlatform() {
        return "Windows" === rB.name
          ? "Windows"
          : "Mac OS" === rB.name
          ? "macOS"
          : ["Ubuntu", "Mint", "Fedora", "Debian", "Arch", "Linux"].includes(
              rB.name
            )
          ? "Linux"
          : "Desktop";
      }
      var getExtensionDownloadUrl = (e) => {
          let l = getBrowser();
          return (
            {
              Arc: e?.downloadUrls?.chrome,
              Brave: e?.downloadUrls?.chrome,
              Chrome: e?.downloadUrls?.chrome,
              Edge: e?.downloadUrls?.edge || e?.downloadUrls?.chrome,
              Firefox: e?.downloadUrls?.firefox,
              Opera: e?.downloadUrls?.opera || e?.downloadUrls?.chrome,
              Safari: e?.downloadUrls?.safari,
              Browser: e?.downloadUrls?.browserExtension,
            }[l] ?? e?.downloadUrls?.browserExtension
          );
        },
        getMobileDownloadUrl = (e) => {
          let l = isIOS();
          return (
            (l ? e?.downloadUrls?.ios : e?.downloadUrls?.android) ??
            e?.downloadUrls?.mobile
          );
        },
        getDesktopDownloadUrl = (e) => {
          let l = getPlatform();
          return (
            {
              Windows: e?.downloadUrls?.windows,
              macOS: e?.downloadUrls?.macos,
              Linux: e?.downloadUrls?.linux,
              Desktop: e?.downloadUrls?.desktop,
            }[l] ?? e?.downloadUrls?.desktop
          );
        },
        isRecentWallet = (e, l) => e.some((e) => e.id === l),
        isRainbowKitConnector = (e) => !!e.isRainbowKitConnector,
        isEIP6963Connector = (e) =>
          !!(
            !e.isRainbowKitConnector &&
            e.icon?.replace(/\n/g, "").startsWith("data:image") &&
            e.uid &&
            e.name
          ),
        rainbowKitConnectorWithWalletConnect = (e, l) => {
          let c = "walletConnect" === e.id && l;
          return c ? { ...e, walletConnectModalConnector: l } : e;
        },
        connectorsWithRecentWallets = ({ wallets: e, recentWallets: l }) => [
          ...l,
          ...e.filter((e) => !isRecentWallet(l, e.id)),
        ],
        rD = "rk-recent";
      function getRecentWalletIds() {
        return "undefined" != typeof localStorage
          ? (function (e) {
              try {
                let l = e ? JSON.parse(e) : [];
                return Array.isArray(l) ? l : [];
              } catch {
                return [];
              }
            })(localStorage.getItem(rD))
          : [];
      }
      function useWalletConnectors(e = !1) {
        let l = useRainbowKitChains(),
          c = useInitialChainId(),
          { connectAsync: d, connectors: m } = (function (e = {}) {
            let { mutation: l } = e,
              c = (0, ef.Z)(e),
              {
                mutate: d,
                mutateAsync: m,
                ...g
              } = (0, nb.D)({
                ...l,
                mutationFn: (e) => connect(c, e),
                mutationKey: ["connect"],
              });
            return (
              (0, ed.useEffect)(
                () =>
                  c.subscribe(
                    ({ status: e }) => e,
                    (e, l) => {
                      "connected" === l && "disconnected" === e && g.reset();
                    }
                  ),
                [c, g.reset]
              ),
              {
                ...g,
                connect: d,
                connectAsync: m,
                connectors: (function (e = {}) {
                  let l = (0, ef.Z)(e);
                  return (0, ed.useSyncExternalStore)(
                    (e) =>
                      (function (e, l) {
                        let { onChange: c } = l;
                        return e._internal.connectors.subscribe((e, l) => {
                          c(Object.values(e), l);
                        });
                      })(l, { onChange: e }),
                    () => getConnectors(l),
                    () => getConnectors(l)
                  );
                })({ config: c }),
              }
            );
          })(),
          { setIsWalletConnectModalOpen: g } = useWalletConnectOpenState(),
          y = m.map((e) => ({ ...e, ...(e.rkDetails || {}) }));
        async function connectWallet(e) {
          let m = await e.getChainId(),
            g = await d({
              chainId: c ?? l.find(({ id: e }) => e === m)?.id ?? l[0]?.id,
              connector: e,
            });
          return (
            g &&
              (function (e) {
                var l;
                let c = ((l = [e, ...getRecentWalletIds()]), [...new Set(l)]);
                localStorage.setItem(rD, JSON.stringify(c));
              })(e.id),
            g
          );
        }
        async function connectToWalletConnectModal(e) {
          try {
            g(!0), await connectWallet(e), g(!1);
          } catch (l) {
            let e =
              "UserRejectedRequestError" === l.name ||
              "Connection request reset. Please try again." === l.message;
            if ((g(!1), !e)) throw l;
          }
        }
        let getWalletConnectUri = async (e, l) => {
            let c = await e.getProvider();
            return "coinbase" === e.id
              ? c.qrUrl
              : new Promise((e) =>
                  c.once("display_uri", (c) => {
                    e(l(c));
                  })
                );
          },
          b = y.find(
            (e) => "walletConnect" === e.id && e.isWalletConnectModalConnector
          ),
          C = y
            .filter(isEIP6963Connector)
            .map((e) => ({ ...e, groupIndex: 0 })),
          P = y
            .filter(isRainbowKitConnector)
            .filter((e) => !e.isWalletConnectModalConnector)
            .filter((l) => {
              if (!e) return !0;
              let c = C.some((e) => e.id === l.rdns);
              return !c;
            })
            .map((e) => rainbowKitConnectorWithWalletConnect(e, b)),
          I = [...C, ...P],
          B = (function (e, l) {
            let c = {};
            for (let d of e) {
              let e = l(d);
              e && (c[e] = d);
            }
            return c;
          })(I, (e) => e.id),
          N = getRecentWalletIds()
            .map((e) => B[e])
            .filter(Boolean)
            .slice(0, 3),
          F = [],
          V = connectorsWithRecentWallets({ wallets: I, recentWallets: N });
        for (let e of V) {
          if (!e) continue;
          let l = isEIP6963Connector(e),
            c = isRecentWallet(N, e.id);
          if (l) {
            F.push({
              ...e,
              iconUrl: e.icon,
              ready: !0,
              connect: () => connectWallet(e),
              groupName: "Installed",
              recent: c,
            });
            continue;
          }
          F.push({
            ...e,
            ready: e.installed ?? !0,
            connect: () => connectWallet(e),
            desktopDownloadUrl: getDesktopDownloadUrl(e),
            extensionDownloadUrl: getExtensionDownloadUrl(e),
            groupName: e.groupName,
            mobileDownloadUrl: getMobileDownloadUrl(e),
            getQrCodeUri: e.qrCode?.getUri
              ? () => getWalletConnectUri(e, e.qrCode.getUri)
              : void 0,
            getDesktopUri: e.desktop?.getUri
              ? () => getWalletConnectUri(e, e.desktop.getUri)
              : void 0,
            getMobileUri: e.mobile?.getUri
              ? () => getWalletConnectUri(e, e.mobile?.getUri)
              : void 0,
            recent: c,
            showWalletConnectModal: e.walletConnectModalConnector
              ? () => connectToWalletConnectModal(e.walletConnectModalConnector)
              : void 0,
          });
        }
        return F;
      }
      var src = async () => (await c.e(9695).then(c.bind(c, 69695))).default,
        preloadAssetsIcon = () => loadImages(src),
        AssetsIcon = () =>
          ed.createElement(AsyncImage, {
            background: "#d0d5de",
            borderRadius: "10",
            height: "48",
            src,
            width: "48",
          }),
        src2 = async () => (await c.e(767).then(c.bind(c, 50767))).default,
        preloadLoginIcon = () => loadImages(src2),
        LoginIcon = () =>
          ed.createElement(AsyncImage, {
            background: "#d0d5de",
            borderRadius: "10",
            height: "48",
            src: src2,
            width: "48",
          }),
        rN = ed.forwardRef(
          (
            {
              as: e = "div",
              children: l,
              className: c,
              color: d,
              display: m,
              font: g = "body",
              id: y,
              size: b = "16",
              style: C,
              tabIndex: P,
              textAlign: I = "inherit",
              weight: B = "regular",
              testId: N,
            },
            F
          ) =>
            ed.createElement(
              nZ,
              {
                as: e,
                className: c,
                color: d,
                display: m,
                fontFamily: g,
                fontSize: b,
                fontWeight: B,
                id: y,
                ref: F,
                style: C,
                tabIndex: P,
                textAlign: I,
                testId: N,
              },
              l
            )
        );
      rN.displayName = "Text";
      var rR = {
        large: { fontSize: "16", paddingX: "24", paddingY: "10" },
        medium: { fontSize: "14", height: "28", paddingX: "12", paddingY: "4" },
        small: { fontSize: "14", paddingX: "10", paddingY: "5" },
      };
      function ActionButton({
        disabled: e = !1,
        href: l,
        label: c,
        onClick: d,
        rel: m = "noreferrer noopener",
        size: g = "medium",
        target: y = "_blank",
        testId: b,
        type: C = "primary",
      }) {
        let P = "primary" === C,
          I = "large" !== g,
          B = isMobile(),
          N = e
            ? "actionButtonSecondaryBackground"
            : P
            ? "accentColor"
            : I
            ? "actionButtonSecondaryBackground"
            : null,
          { fontSize: F, height: V, paddingX: G, paddingY: Q } = rR[g];
        return ed.createElement(
          nZ,
          {
            ...(l
              ? e
                ? {}
                : { as: "a", href: l, rel: m, target: y }
              : { as: "button", type: "button" }),
            onClick: e ? void 0 : d,
            ...(B && I
              ? {}
              : {
                  borderColor:
                    !B || I || P
                      ? "actionButtonBorder"
                      : "actionButtonBorderMobile",
                  borderStyle: "solid",
                  borderWidth: "1",
                }),
            borderRadius: "actionButton",
            className:
              !e && touchableStyles({ active: "shrinkSm", hover: "grow" }),
            display: "block",
            paddingX: G,
            paddingY: Q,
            style: { willChange: "transform" },
            testId: b,
            textAlign: "center",
            transition: "transform",
            ...(N ? { background: N } : {}),
            ...(V ? { height: V } : {}),
          },
          ed.createElement(
            rN,
            {
              color: e
                ? "modalTextSecondary"
                : P
                ? "accentColorForeground"
                : "accentColor",
              size: F,
              weight: "bold",
            },
            c
          )
        );
      }
      var CloseIcon = () =>
          isMobile()
            ? ed.createElement(
                "svg",
                {
                  "aria-hidden": !0,
                  fill: "none",
                  height: "11.5",
                  viewBox: "0 0 11.5 11.5",
                  width: "11.5",
                  xmlns: "http://www.w3.org/2000/svg",
                },
                ed.createElement("title", null, "Close"),
                ed.createElement("path", {
                  d: "M2.13388 0.366117C1.64573 -0.122039 0.854272 -0.122039 0.366117 0.366117C-0.122039 0.854272 -0.122039 1.64573 0.366117 2.13388L3.98223 5.75L0.366117 9.36612C-0.122039 9.85427 -0.122039 10.6457 0.366117 11.1339C0.854272 11.622 1.64573 11.622 2.13388 11.1339L5.75 7.51777L9.36612 11.1339C9.85427 11.622 10.6457 11.622 11.1339 11.1339C11.622 10.6457 11.622 9.85427 11.1339 9.36612L7.51777 5.75L11.1339 2.13388C11.622 1.64573 11.622 0.854272 11.1339 0.366117C10.6457 -0.122039 9.85427 -0.122039 9.36612 0.366117L5.75 3.98223L2.13388 0.366117Z",
                  fill: "currentColor",
                })
              )
            : ed.createElement(
                "svg",
                {
                  "aria-hidden": !0,
                  fill: "none",
                  height: "10",
                  viewBox: "0 0 10 10",
                  width: "10",
                  xmlns: "http://www.w3.org/2000/svg",
                },
                ed.createElement("title", null, "Close"),
                ed.createElement("path", {
                  d: "M1.70711 0.292893C1.31658 -0.0976311 0.683417 -0.0976311 0.292893 0.292893C-0.0976311 0.683417 -0.0976311 1.31658 0.292893 1.70711L3.58579 5L0.292893 8.29289C-0.0976311 8.68342 -0.0976311 9.31658 0.292893 9.70711C0.683417 10.0976 1.31658 10.0976 1.70711 9.70711L5 6.41421L8.29289 9.70711C8.68342 10.0976 9.31658 10.0976 9.70711 9.70711C10.0976 9.31658 10.0976 8.68342 9.70711 8.29289L6.41421 5L9.70711 1.70711C10.0976 1.31658 10.0976 0.683417 9.70711 0.292893C9.31658 -0.0976311 8.68342 -0.0976311 8.29289 0.292893L5 3.58579L1.70711 0.292893Z",
                  fill: "currentColor",
                })
              ),
        CloseButton = ({ "aria-label": e = "Close", onClose: l }) => {
          let c = isMobile();
          return ed.createElement(
            nZ,
            {
              alignItems: "center",
              "aria-label": e,
              as: "button",
              background: "closeButtonBackground",
              borderColor: "actionButtonBorder",
              borderRadius: "full",
              borderStyle: "solid",
              borderWidth: c ? "0" : "1",
              className: touchableStyles({
                active: "shrinkSm",
                hover: "growLg",
              }),
              color: "closeButton",
              display: "flex",
              height: c ? "30" : "28",
              justifyContent: "center",
              onClick: l,
              style: { willChange: "transform" },
              transition: "default",
              type: "button",
              width: c ? "30" : "28",
            },
            ed.createElement(CloseIcon, null)
          );
        },
        signInIcon = async () =>
          (await c.e(5716).then(c.bind(c, 95716))).default;
      function SignIn({ onClose: e, onCloseModal: l }) {
        let { i18n: c } = (0, ed.useContext)(n2),
          [{ status: d, ...m }, g] = ed.useState({ status: "idle" }),
          y = (function () {
            let { adapter: e } = (0, ed.useContext)(n$) ?? {};
            if (!e) throw Error("No authentication adapter found");
            return e;
          })(),
          b = (0, ed.useCallback)(async () => {
            try {
              let e = await y.getNonce();
              g((l) => ({ ...l, nonce: e }));
            } catch {
              g((e) => ({
                ...e,
                errorMessage: c.t("sign_in.message.preparing_error"),
                status: "idle",
              }));
            }
          }, [y, c.t]),
          C = (0, ed.useRef)(!1);
        ed.useEffect(() => {
          C.current || ((C.current = !0), b());
        }, [b]);
        let P = isMobile(),
          { address: I, chain: B } = (0, ep.m)(),
          { signMessageAsync: N } = (0, nC.Q)(),
          signIn = async () => {
            try {
              let e;
              let d = B?.id,
                { nonce: b } = m;
              if (!I || !d || !b) return;
              g((e) => ({ ...e, errorMessage: void 0, status: "signing" }));
              let C = y.createMessage({ address: I, chainId: d, nonce: b });
              try {
                e = await N({ message: C });
              } catch (e) {
                if (e instanceof t2.ab)
                  return g((e) => ({ ...e, status: "idle" }));
                return g((e) => ({
                  ...e,
                  errorMessage: c.t("sign_in.signature.signing_error"),
                  status: "idle",
                }));
              }
              g((e) => ({ ...e, status: "verifying" }));
              try {
                let c = await y.verify({ message: C, signature: e });
                if (c) {
                  l();
                  return;
                }
                throw Error();
              } catch {
                return g((e) => ({
                  ...e,
                  errorMessage: c.t("sign_in.signature.verifying_error"),
                  status: "idle",
                }));
              }
            } catch {
              g({
                errorMessage: c.t("sign_in.signature.oops_error"),
                status: "idle",
              });
            }
          };
        return ed.createElement(
          nZ,
          { position: "relative" },
          ed.createElement(
            nZ,
            {
              display: "flex",
              paddingRight: "16",
              paddingTop: "16",
              position: "absolute",
              right: "0",
            },
            ed.createElement(CloseButton, { onClose: e })
          ),
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              display: "flex",
              flexDirection: "column",
              gap: P ? "32" : "24",
              padding: "24",
              paddingX: "18",
              style: { paddingTop: P ? "60px" : "36px" },
            },
            ed.createElement(
              nZ,
              {
                alignItems: "center",
                display: "flex",
                flexDirection: "column",
                gap: P ? "6" : "4",
                style: { maxWidth: P ? 320 : 280 },
              },
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "column",
                  gap: P ? "32" : "16",
                },
                ed.createElement(AsyncImage, {
                  height: 40,
                  src: signInIcon,
                  width: 40,
                }),
                ed.createElement(
                  rN,
                  {
                    color: "modalText",
                    size: P ? "20" : "18",
                    textAlign: "center",
                    weight: "heavy",
                  },
                  c.t("sign_in.label")
                )
              ),
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "column",
                  gap: P ? "16" : "12",
                },
                ed.createElement(
                  rN,
                  {
                    color: "modalTextSecondary",
                    size: P ? "16" : "14",
                    textAlign: "center",
                  },
                  c.t("sign_in.description")
                ),
                "idle" === d && m.errorMessage
                  ? ed.createElement(
                      rN,
                      {
                        color: "error",
                        size: P ? "16" : "14",
                        textAlign: "center",
                        weight: "bold",
                      },
                      m.errorMessage
                    )
                  : null
              )
            ),
            ed.createElement(
              nZ,
              {
                alignItems: P ? void 0 : "center",
                display: "flex",
                flexDirection: "column",
                gap: "8",
                width: "full",
              },
              ed.createElement(ActionButton, {
                disabled: !m.nonce || "signing" === d || "verifying" === d,
                label: m.nonce
                  ? "signing" === d
                    ? c.t("sign_in.signature.waiting")
                    : "verifying" === d
                    ? c.t("sign_in.signature.verifying")
                    : c.t("sign_in.message.send")
                  : c.t("sign_in.message.preparing"),
                onClick: signIn,
                size: P ? "large" : "medium",
                testId: "auth-message-button",
              }),
              P
                ? ed.createElement(ActionButton, {
                    label: "Cancel",
                    onClick: e,
                    size: "large",
                    type: "secondary",
                  })
                : ed.createElement(
                    nZ,
                    {
                      as: "button",
                      borderRadius: "full",
                      className: touchableStyles({
                        active: "shrink",
                        hover: "grow",
                      }),
                      display: "block",
                      onClick: e,
                      paddingX: "10",
                      paddingY: "5",
                      rel: "noreferrer",
                      style: { willChange: "transform" },
                      target: "_blank",
                      transition: "default",
                    },
                    ed.createElement(
                      rN,
                      {
                        color: "closeButton",
                        size: P ? "16" : "14",
                        weight: "bold",
                      },
                      c.t("sign_in.message.cancel")
                    )
                  )
            )
          )
        );
      }
      var rF = "WALLETCONNECT_DEEPLINK_CHOICE";
      function clearWalletConnectDeepLink() {
        localStorage.removeItem(rF);
      }
      var rL = (0, ed.createContext)(void 0),
        rU = "data-rk",
        createThemeRootProps = (e) => ({ [rU]: e || "" }),
        createThemeRootSelector = (e) => {
          if (e && !/^[a-zA-Z0-9_]+$/.test(e)) throw Error(`Invalid ID: ${e}`);
          return e ? `[${rU}="${e}"]` : `[${rU}]`;
        },
        useThemeRootProps = () => {
          let e = (0, ed.useContext)(rL);
          return createThemeRootProps(e);
        },
        rz = lightTheme();
      function RainbowKitProvider({
        appInfo: e,
        avatar: l,
        children: c,
        coolMode: d = !1,
        id: m,
        initialChain: g,
        locale: y,
        modalSize: b = rI.WIDE,
        showRecentTransactions: C = !1,
        theme: P = rz,
      }) {
        if (
          (!(function () {
            let e = useRainbowKitChains(),
              l = useWalletConnectors(),
              c = "unauthenticated" === useAuthenticationStatus(),
              d = (0, ed.useCallback)(() => {
                loadImages(
                  ...l.map((e) => e.iconUrl),
                  ...e.map((e) => e.iconUrl).filter(isNotNullish)
                ),
                  isMobile() || (preloadAssetsIcon(), preloadLoginIcon()),
                  c && loadImages(signInIcon);
              }, [l, e, c]);
            (0, ed.useEffect)(() => {
              d();
            }, [d]);
          })(),
          !(function () {
            let e = (0, ed.useCallback)(() => {
              !(function ({ version: e }) {
                localStorage.setItem("rk-version", e);
              })({ version: "2.2.4" });
            }, []);
            (0, ed.useEffect)(() => {
              e();
            }, [e]);
          })(),
          useAccountEffect_useAccountEffect({
            onDisconnect: clearWalletConnectDeepLink,
          }),
          "function" == typeof P)
        )
          throw Error(
            'A theme function was provided to the "theme" prop instead of a theme object. You must execute this function to get the resulting theme object.'
          );
        let I = createThemeRootSelector(m),
          B = { ...rk, ...e },
          N = l ?? defaultAvatar;
        return ed.createElement(
          RainbowKitChainProvider,
          { initialChain: g },
          ed.createElement(
            WalletButtonProvider,
            null,
            ed.createElement(
              I18nProvider,
              { locale: y },
              ed.createElement(
                rM.Provider,
                { value: d },
                ed.createElement(
                  ModalSizeProvider,
                  { modalSize: b },
                  ed.createElement(
                    rO.Provider,
                    { value: C },
                    ed.createElement(
                      TransactionStoreProvider,
                      null,
                      ed.createElement(
                        n0.Provider,
                        { value: N },
                        ed.createElement(
                          rP.Provider,
                          { value: B },
                          ed.createElement(
                            rL.Provider,
                            { value: m },
                            ed.createElement(
                              ShowBalanceProvider,
                              null,
                              ed.createElement(
                                ModalProvider,
                                null,
                                P
                                  ? ed.createElement(
                                      "div",
                                      { ...createThemeRootProps(m) },
                                      ed.createElement("style", {
                                        dangerouslySetInnerHTML: {
                                          __html: [
                                            `${I}{${cssStringFromTheme(
                                              "lightMode" in P ? P.lightMode : P
                                            )}}`,
                                            "darkMode" in P
                                              ? `@media(prefers-color-scheme:dark){${I}{${cssStringFromTheme(
                                                  P.darkMode,
                                                  { extends: P.lightMode }
                                                )}}}`
                                              : null,
                                          ].join(""),
                                        },
                                      }),
                                      c
                                    )
                                  : c
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        );
      }
      var moveFocusWithin = (e, l) => {
        let c = e.querySelectorAll("button:not(:disabled), a[href]");
        0 !== c.length && c["end" === l ? c.length - 1 : 0].focus();
      };
      function FocusTrap(e) {
        let l = (0, ed.useRef)(null);
        return (
          (0, ed.useEffect)(() => {
            let e = document.activeElement;
            return () => {
              e.focus?.();
            };
          }, []),
          (0, ed.useEffect)(() => {
            if (l.current) {
              let e = l.current.querySelector("[data-auto-focus]");
              e ? e.focus() : l.current.focus();
            }
          }, []),
          ed.createElement(
            ed.Fragment,
            null,
            ed.createElement("div", {
              onFocus: (0, ed.useCallback)(
                () => l.current && moveFocusWithin(l.current, "end"),
                []
              ),
              tabIndex: 0,
            }),
            ed.createElement("div", {
              ref: l,
              style: { outline: "none" },
              tabIndex: -1,
              ...e,
            }),
            ed.createElement("div", {
              onFocus: (0, ed.useCallback)(
                () => l.current && moveFocusWithin(l.current, "start"),
                []
              ),
              tabIndex: 0,
            })
          )
        );
      }
      var stopPropagation = (e) => e.stopPropagation();
      function Dialog({ children: e, onClose: l, open: c, titleId: d }) {
        (0, ed.useEffect)(() => {
          let handleEscape = (e) => c && "Escape" === e.key && l();
          return (
            document.addEventListener("keydown", handleEscape),
            () => document.removeEventListener("keydown", handleEscape)
          );
        }, [c, l]);
        let [m, g] = (0, ed.useState)(!0);
        (0, ed.useEffect)(() => {
          g("hidden" !== getComputedStyle(window.document.body).overflow);
        }, []);
        let y = (0, ed.useCallback)(() => l(), [l]),
          b = useThemeRootProps(),
          C = isMobile();
        return ed.createElement(
          ed.Fragment,
          null,
          c
            ? (0, ne.createPortal)(
                ed.createElement(
                  ny,
                  { enabled: m },
                  ed.createElement(
                    nZ,
                    { ...b },
                    ed.createElement(
                      nZ,
                      {
                        ...b,
                        alignItems: C ? "flex-end" : "center",
                        "aria-labelledby": d,
                        "aria-modal": !0,
                        className:
                          "_9pm4ki3 ju367v9h ju367vb3 ju367va ju367v2q ju367v8q",
                        onClick: y,
                        position: "fixed",
                        role: "dialog",
                      },
                      ed.createElement(
                        FocusTrap,
                        {
                          className: "_9pm4ki5 ju367va ju367v15 ju367v8r",
                          onClick: stopPropagation,
                          role: "document",
                        },
                        e
                      )
                    )
                  )
                ),
                document.body
              )
            : null
        );
      }
      function DialogContent({
        bottomSheetOnMobile: e = !1,
        children: l,
        marginTop: c,
        padding: d = "16",
        paddingBottom: m,
        wide: g = !1,
      }) {
        let y = isMobile(),
          b = (0, ed.useContext)(rj),
          C = b === rI.COMPACT;
        return ed.createElement(
          nZ,
          { marginTop: c },
          ed.createElement(
            nZ,
            {
              className: [
                g
                  ? y
                    ? "_1ckjpok2 _1ckjpok1 ju367vb6 ju367vdr ju367vp ju367vt ju367vv ju367vel ju367va ju367v15 ju367v6c ju367v8r"
                    : C
                    ? "_1ckjpok4 _1ckjpok1 ju367vb6 ju367vdr ju367vp ju367vt ju367vv ju367vel ju367va ju367v15 ju367v6c ju367v8r"
                    : "_1ckjpok3 _1ckjpok1 ju367vb6 ju367vdr ju367vp ju367vt ju367vv ju367vel ju367va ju367v15 ju367v6c ju367v8r"
                  : "_1ckjpok1 ju367vb6 ju367vdr ju367vp ju367vt ju367vv ju367vel ju367va ju367v15 ju367v6c ju367v8r",
                y ? "_1ckjpok6 ju367vq" : null,
                y && e ? "_1ckjpok7" : null,
              ].join(" "),
            },
            ed.createElement(nZ, { padding: d, paddingBottom: m ?? d }, l)
          )
        );
      }
      var rW = ["k", "m", "b", "t"];
      function toPrecision(e, l = 1) {
        return e
          .toString()
          .replace(RegExp(`(.+\\.\\d{${l}})\\d+`), "$1")
          .replace(/(\.[1-9]*)0+$/, "$1")
          .replace(/\.$/, "");
      }
      function abbreviateETHBalance(e) {
        if (e < 1) return toPrecision(e, 3);
        if (e < 100) return toPrecision(e, 2);
        if (e < 1e4)
          return new Intl.NumberFormat().format(
            Number.parseFloat(toPrecision(e, 1))
          );
        let l = String(e);
        for (let c = rW.length - 1; c >= 0; c--) {
          let d = 10 ** ((c + 1) * 3);
          if (d <= e) {
            l = toPrecision((e = (10 * e) / d / 10), 1) + rW[c];
            break;
          }
        }
        return l;
      }
      function formatAddress(e) {
        return e.length < 8
          ? e
          : `${e.substring(0, 4)}\u2026${e.substring(e.length - 4)}`;
      }
      function formatENS(e) {
        if (!e) return "";
        let l = e.split("."),
          c = l.pop();
        return l.join(".").length > 24
          ? `${l.join(".").substring(0, 24)}...`
          : `${l.join(".")}.${c}`;
      }
      var CopiedIcon = () =>
          ed.createElement(
            "svg",
            {
              fill: "none",
              height: "13",
              viewBox: "0 0 13 13",
              width: "13",
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Copied"),
            ed.createElement("path", {
              d: "M4.94568 12.2646C5.41052 12.2646 5.77283 12.0869 6.01892 11.7109L12.39 1.96973C12.5677 1.69629 12.6429 1.44336 12.6429 1.2041C12.6429 0.561523 12.1644 0.0966797 11.5082 0.0966797C11.057 0.0966797 10.7767 0.260742 10.5033 0.691406L4.9115 9.50977L2.07458 5.98926C1.82166 5.68848 1.54822 5.55176 1.16541 5.55176C0.502319 5.55176 0.0238037 6.02344 0.0238037 6.66602C0.0238037 6.95312 0.112671 7.20605 0.358765 7.48633L3.88611 11.7588C4.18005 12.1074 4.50818 12.2646 4.94568 12.2646Z",
              fill: "currentColor",
            })
          ),
        CopyIcon = () =>
          ed.createElement(
            "svg",
            {
              fill: "none",
              height: "16",
              viewBox: "0 0 17 16",
              width: "17",
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Copy"),
            ed.createElement("path", {
              d: "M3.04236 12.3027H4.18396V13.3008C4.18396 14.8525 5.03845 15.7002 6.59705 15.7002H13.6244C15.183 15.7002 16.0375 14.8525 16.0375 13.3008V6.24609C16.0375 4.69434 15.183 3.84668 13.6244 3.84668H12.4828V2.8418C12.4828 1.29688 11.6283 0.442383 10.0697 0.442383H3.04236C1.48376 0.442383 0.629272 1.29004 0.629272 2.8418V9.90332C0.629272 11.4551 1.48376 12.3027 3.04236 12.3027ZM3.23376 10.5391C2.68689 10.5391 2.39294 10.2656 2.39294 9.68457V3.06055C2.39294 2.47949 2.68689 2.21289 3.23376 2.21289H9.8783C10.4252 2.21289 10.7191 2.47949 10.7191 3.06055V3.84668H6.59705C5.03845 3.84668 4.18396 4.69434 4.18396 6.24609V10.5391H3.23376ZM6.78845 13.9365C6.24158 13.9365 5.94763 13.6699 5.94763 13.0889V6.45801C5.94763 5.87695 6.24158 5.61035 6.78845 5.61035H13.433C13.9799 5.61035 14.2738 5.87695 14.2738 6.45801V13.0889C14.2738 13.6699 13.9799 13.9365 13.433 13.9365H6.78845Z",
              fill: "currentColor",
            })
          ),
        DisconnectIcon = () =>
          ed.createElement(
            "svg",
            {
              fill: "none",
              height: "16",
              viewBox: "0 0 18 16",
              width: "18",
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Disconnect"),
            ed.createElement("path", {
              d: "M2.67834 15.5908H9.99963C11.5514 15.5908 12.399 14.7432 12.399 13.1777V10.2656H10.6354V12.9863C10.6354 13.5332 10.3688 13.8271 9.78772 13.8271H2.89026C2.3092 13.8271 2.0426 13.5332 2.0426 12.9863V3.15625C2.0426 2.60254 2.3092 2.30859 2.89026 2.30859H9.78772C10.3688 2.30859 10.6354 2.60254 10.6354 3.15625V5.89746H12.399V2.95801C12.399 1.39941 11.5514 0.544922 9.99963 0.544922H2.67834C1.12659 0.544922 0.278931 1.39941 0.278931 2.95801V13.1777C0.278931 14.7432 1.12659 15.5908 2.67834 15.5908ZM7.43616 8.85059H14.0875L15.0924 8.78906L14.566 9.14453L13.6842 9.96484C13.5406 10.1016 13.4586 10.2861 13.4586 10.4844C13.4586 10.8398 13.7321 11.168 14.1217 11.168C14.3199 11.168 14.4635 11.0928 14.6002 10.9561L16.7809 8.68652C16.986 8.48145 17.0543 8.27637 17.0543 8.06445C17.0543 7.85254 16.986 7.64746 16.7809 7.43555L14.6002 5.17285C14.4635 5.03613 14.3199 4.9541 14.1217 4.9541C13.7321 4.9541 13.4586 5.27539 13.4586 5.6377C13.4586 5.83594 13.5406 6.02734 13.6842 6.15723L14.566 6.98438L15.0924 7.33984L14.0875 7.27148H7.43616C7.01917 7.27148 6.65686 7.62012 6.65686 8.06445C6.65686 8.50195 7.01917 8.85059 7.43616 8.85059Z",
              fill: "currentColor",
            })
          ),
        chainToExplorerUrl = (e) => e?.blockExplorers?.default?.url,
        ExternalLinkIcon = () =>
          ed.createElement(
            "svg",
            {
              fill: "none",
              height: "19",
              viewBox: "0 0 20 19",
              width: "20",
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Link"),
            ed.createElement("path", {
              d: "M10 18.9443C15.0977 18.9443 19.2812 14.752 19.2812 9.6543C19.2812 4.56543 15.0889 0.373047 10 0.373047C4.90234 0.373047 0.71875 4.56543 0.71875 9.6543C0.71875 14.752 4.91113 18.9443 10 18.9443ZM10 16.6328C6.1416 16.6328 3.03906 13.5215 3.03906 9.6543C3.03906 5.7959 6.13281 2.68457 10 2.68457C13.8584 2.68457 16.9697 5.7959 16.9697 9.6543C16.9785 13.5215 13.8672 16.6328 10 16.6328ZM12.7158 12.1416C13.2432 12.1416 13.5684 11.7549 13.5684 11.1836V7.19336C13.5684 6.44629 13.1377 6.05957 12.417 6.05957H8.40918C7.8291 6.05957 7.45117 6.38477 7.45117 6.91211C7.45117 7.43945 7.8291 7.77344 8.40918 7.77344H9.69238L10.7207 7.63281L9.53418 8.67871L6.73047 11.4912C6.53711 11.6758 6.41406 11.9395 6.41406 12.2031C6.41406 12.7832 6.85352 13.1699 7.39844 13.1699C7.68848 13.1699 7.92578 13.0732 8.1543 12.8623L10.9316 10.0762L11.9775 8.89844L11.8545 9.98828V11.1836C11.8545 11.7725 12.1885 12.1416 12.7158 12.1416Z",
              fill: "currentColor",
            })
          ),
        CancelIcon = () =>
          ed.createElement(
            "svg",
            {
              fill: "none",
              height: "19",
              viewBox: "0 0 20 19",
              width: "20",
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Cancel"),
            ed.createElement("path", {
              d: "M10 18.9443C15.0977 18.9443 19.2812 14.752 19.2812 9.6543C19.2812 4.56543 15.0889 0.373047 10 0.373047C4.90234 0.373047 0.71875 4.56543 0.71875 9.6543C0.71875 14.752 4.91113 18.9443 10 18.9443ZM10 16.6328C6.1416 16.6328 3.03906 13.5215 3.03906 9.6543C3.03906 5.7959 6.13281 2.68457 10 2.68457C13.8584 2.68457 16.9697 5.7959 16.9697 9.6543C16.9785 13.5215 13.8672 16.6328 10 16.6328ZM7.29297 13.3018C7.58301 13.3018 7.81152 13.2139 7.99609 13.0205L10 11.0166L12.0127 13.0205C12.1973 13.2051 12.4258 13.3018 12.707 13.3018C13.2432 13.3018 13.6562 12.8887 13.6562 12.3525C13.6562 12.0977 13.5508 11.8691 13.3662 11.6934L11.3535 9.67188L13.375 7.6416C13.5596 7.44824 13.6562 7.22852 13.6562 6.98242C13.6562 6.44629 13.2432 6.0332 12.7158 6.0332C12.4346 6.0332 12.2148 6.12109 12.0215 6.31445L10 8.32715L7.9873 6.32324C7.80273 6.12988 7.58301 6.04199 7.29297 6.04199C6.76562 6.04199 6.35254 6.45508 6.35254 6.99121C6.35254 7.2373 6.44922 7.46582 6.63379 7.6416L8.65527 9.67188L6.63379 11.6934C6.44922 11.8691 6.35254 12.1064 6.35254 12.3525C6.35254 12.8887 6.76562 13.3018 7.29297 13.3018Z",
              fill: "currentColor",
            })
          ),
        SuccessIcon = () =>
          ed.createElement(
            "svg",
            {
              fill: "none",
              height: "20",
              viewBox: "0 0 20 20",
              width: "20",
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Success"),
            ed.createElement("path", {
              d: "M10 19.4443C15.0977 19.4443 19.2812 15.252 19.2812 10.1543C19.2812 5.06543 15.0889 0.873047 10 0.873047C4.90234 0.873047 0.71875 5.06543 0.71875 10.1543C0.71875 15.252 4.91113 19.4443 10 19.4443ZM10 17.1328C6.1416 17.1328 3.03906 14.0215 3.03906 10.1543C3.03906 6.2959 6.13281 3.18457 10 3.18457C13.8584 3.18457 16.9697 6.2959 16.9697 10.1543C16.9785 14.0215 13.8672 17.1328 10 17.1328ZM9.07715 14.3379C9.4375 14.3379 9.7627 14.1533 9.97363 13.8369L13.7441 8.00977C13.8848 7.79883 13.9814 7.5791 13.9814 7.36816C13.9814 6.84961 13.5244 6.48926 13.0322 6.48926C12.707 6.48926 12.4258 6.66504 12.2148 7.0166L9.05957 12.0967L7.5918 10.2949C7.37207 10.0225 7.13477 9.9082 6.84473 9.9082C6.33496 9.9082 5.92188 10.3125 5.92188 10.8223C5.92188 11.0684 6.00098 11.2793 6.18555 11.5078L8.1543 13.8545C8.40918 14.1709 8.70801 14.3379 9.07715 14.3379Z",
              fill: "currentColor",
            })
          ),
        getTxStatusIcon = (e) => {
          switch (e) {
            case "pending":
            default:
              return SpinnerIcon;
            case "confirmed":
              return SuccessIcon;
            case "failed":
              return CancelIcon;
          }
        };
      function TxItem({ tx: e }) {
        let l = isMobile(),
          c = getTxStatusIcon(e.status),
          d = "failed" === e.status ? "error" : "accentColor",
          { chain: m } = (0, ep.m)(),
          g =
            "confirmed" === e.status
              ? "Confirmed"
              : "failed" === e.status
              ? "Failed"
              : "Pending",
          y = chainToExplorerUrl(m);
        return ed.createElement(
          ed.Fragment,
          null,
          ed.createElement(
            nZ,
            {
              ...(y
                ? {
                    as: "a",
                    background: { hover: "profileForeground" },
                    borderRadius: "menuButton",
                    className: touchableStyles({ active: "shrink" }),
                    href: `${y}/tx/${e.hash}`,
                    rel: "noreferrer noopener",
                    target: "_blank",
                    transition: "default",
                  }
                : {}),
              color: "modalText",
              display: "flex",
              flexDirection: "row",
              justifyContent: "space-between",
              padding: "8",
              width: "full",
            },
            ed.createElement(
              nZ,
              {
                alignItems: "center",
                display: "flex",
                flexDirection: "row",
                gap: l ? "16" : "14",
              },
              ed.createElement(nZ, { color: d }, ed.createElement(c, null)),
              ed.createElement(
                nZ,
                {
                  display: "flex",
                  flexDirection: "column",
                  gap: l ? "3" : "1",
                },
                ed.createElement(
                  nZ,
                  null,
                  ed.createElement(
                    rN,
                    {
                      color: "modalText",
                      font: "body",
                      size: l ? "16" : "14",
                      weight: "bold",
                    },
                    e?.description
                  )
                ),
                ed.createElement(
                  nZ,
                  null,
                  ed.createElement(
                    rN,
                    {
                      color: "pending" === e.status ? "modalTextSecondary" : d,
                      font: "body",
                      size: "14",
                      weight: l ? "medium" : "regular",
                    },
                    g
                  )
                )
              )
            ),
            y &&
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  color: "modalTextDim",
                  display: "flex",
                },
                ed.createElement(ExternalLinkIcon, null)
              )
          )
        );
      }
      function TxList({ address: e }) {
        let l = useRecentTransactions(),
          c = (function () {
            let e = useTransactionStore(),
              { address: l } = (0, ep.m)(),
              c = dist_useChainId();
            return (0, ed.useCallback)(() => {
              if (!l || !c) throw Error("No address or chain ID found");
              e.clearTransactions(l, c);
            }, [e, l, c]);
          })(),
          { chain: d } = (0, ep.m)(),
          m = chainToExplorerUrl(d),
          g = l.slice(0, 3),
          y = g.length > 0,
          b = isMobile(),
          { appName: C } = (0, ed.useContext)(rP),
          { i18n: P } = (0, ed.useContext)(n2);
        return ed.createElement(
          ed.Fragment,
          null,
          ed.createElement(
            nZ,
            {
              display: "flex",
              flexDirection: "column",
              gap: "10",
              paddingBottom: "2",
              paddingTop: "16",
              paddingX: b ? "8" : "18",
            },
            y &&
              ed.createElement(
                nZ,
                {
                  paddingBottom: b ? "4" : "0",
                  paddingTop: "8",
                  paddingX: b ? "12" : "6",
                },
                ed.createElement(
                  nZ,
                  { display: "flex", justifyContent: "space-between" },
                  ed.createElement(
                    rN,
                    {
                      color: "modalTextSecondary",
                      size: b ? "16" : "14",
                      weight: "semibold",
                    },
                    P.t("profile.transactions.recent.title")
                  ),
                  ed.createElement(
                    nZ,
                    {
                      style: {
                        marginBottom: -6,
                        marginLeft: -10,
                        marginRight: -10,
                        marginTop: -6,
                      },
                    },
                    ed.createElement(
                      nZ,
                      {
                        as: "button",
                        background: { hover: "profileForeground" },
                        borderRadius: "actionButton",
                        className: touchableStyles({ active: "shrink" }),
                        onClick: c,
                        paddingX: b ? "8" : "12",
                        paddingY: b ? "4" : "5",
                        transition: "default",
                        type: "button",
                      },
                      ed.createElement(
                        rN,
                        {
                          color: "modalTextSecondary",
                          size: b ? "16" : "14",
                          weight: "semibold",
                        },
                        P.t("profile.transactions.clear.label")
                      )
                    )
                  )
                )
              ),
            ed.createElement(
              nZ,
              { display: "flex", flexDirection: "column", gap: "4" },
              y
                ? g.map((e) => ed.createElement(TxItem, { key: e.hash, tx: e }))
                : ed.createElement(
                    ed.Fragment,
                    null,
                    ed.createElement(
                      nZ,
                      { padding: b ? "12" : "8" },
                      ed.createElement(
                        rN,
                        {
                          color: "modalTextDim",
                          size: b ? "16" : "14",
                          weight: b ? "medium" : "bold",
                        },
                        C
                          ? P.t("profile.transactions.description", {
                              appName: C,
                            })
                          : P.t("profile.transactions.description_fallback")
                      )
                    ),
                    b &&
                      ed.createElement(nZ, {
                        background: "generalBorderDim",
                        height: "1",
                        marginX: "12",
                        marginY: "8",
                      })
                  )
            )
          ),
          m &&
            ed.createElement(
              nZ,
              { paddingBottom: "18", paddingX: b ? "8" : "18" },
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  as: "a",
                  background: { hover: "profileForeground" },
                  borderRadius: "menuButton",
                  className: touchableStyles({ active: "shrink" }),
                  color: "modalTextDim",
                  display: "flex",
                  flexDirection: "row",
                  href: `${m}/address/${e}`,
                  justifyContent: "space-between",
                  paddingX: "8",
                  paddingY: "12",
                  rel: "noreferrer noopener",
                  style: { willChange: "transform" },
                  target: "_blank",
                  transition: "default",
                  width: "full",
                  ...(b ? { paddingLeft: "12" } : {}),
                },
                ed.createElement(
                  rN,
                  {
                    color: "modalText",
                    font: "body",
                    size: b ? "16" : "14",
                    weight: b ? "semibold" : "bold",
                  },
                  P.t("profile.explorer.label")
                ),
                ed.createElement(ExternalLinkIcon, null)
              )
            )
        );
      }
      function ProfileDetailsAction({
        action: e,
        icon: l,
        label: c,
        testId: d,
        url: m,
      }) {
        let g = isMobile();
        return ed.createElement(
          nZ,
          {
            ...(m
              ? {
                  as: "a",
                  href: m,
                  rel: "noreferrer noopener",
                  target: "_blank",
                }
              : { as: "button", type: "button" }),
            background: {
              base: "profileAction",
              ...(g ? {} : { hover: "profileActionHover" }),
            },
            borderRadius: "menuButton",
            boxShadow: "profileDetailsAction",
            className: touchableStyles({
              active: "shrinkSm",
              hover: g ? void 0 : "grow",
            }),
            display: "flex",
            onClick: e,
            padding: g ? "6" : "8",
            style: { willChange: "transform" },
            testId: d,
            transition: "default",
            width: "full",
          },
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              display: "flex",
              flexDirection: "column",
              gap: "1",
              justifyContent: "center",
              paddingTop: "2",
              width: "full",
            },
            ed.createElement(nZ, { color: "modalText", height: "max" }, l),
            ed.createElement(
              nZ,
              null,
              ed.createElement(
                rN,
                {
                  color: "modalText",
                  size: g ? "12" : "13",
                  weight: "semibold",
                },
                c
              )
            )
          )
        );
      }
      function ProfileDetails({
        address: e,
        ensAvatar: l,
        ensName: c,
        balance: d,
        onClose: m,
        onDisconnect: g,
      }) {
        let y = (0, ed.useContext)(rO),
          [b, C] = (0, ed.useState)(!1),
          P = (0, ed.useCallback)(() => {
            e && (navigator.clipboard.writeText(e), C(!0));
          }, [e]);
        if (
          ((0, ed.useEffect)(() => {
            if (b) {
              let e = setTimeout(() => {
                C(!1);
              }, 1500);
              return () => clearTimeout(e);
            }
          }, [b]),
          !e)
        )
          return null;
        let I = c ? formatENS(c) : formatAddress(e),
          B = d?.formatted,
          N = B ? abbreviateETHBalance(Number.parseFloat(B)) : void 0,
          F = "rk_profile_title",
          V = isMobile(),
          { i18n: G } = (0, ed.useContext)(n2);
        return ed.createElement(
          ed.Fragment,
          null,
          ed.createElement(
            nZ,
            { display: "flex", flexDirection: "column" },
            ed.createElement(
              nZ,
              { background: "profileForeground", padding: "16" },
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "column",
                  gap: V ? "16" : "12",
                  justifyContent: "center",
                  margin: "8",
                  style: { textAlign: "center" },
                },
                ed.createElement(
                  nZ,
                  {
                    style: {
                      position: "absolute",
                      right: 16,
                      top: 16,
                      willChange: "transform",
                    },
                  },
                  ed.createElement(CloseButton, { onClose: m })
                ),
                " ",
                ed.createElement(
                  nZ,
                  { marginTop: V ? "24" : "0" },
                  ed.createElement(Avatar, {
                    address: e,
                    imageUrl: l,
                    size: V ? 82 : 74,
                  })
                ),
                ed.createElement(
                  nZ,
                  {
                    display: "flex",
                    flexDirection: "column",
                    gap: V ? "4" : "0",
                    textAlign: "center",
                  },
                  ed.createElement(
                    nZ,
                    { textAlign: "center" },
                    ed.createElement(
                      rN,
                      {
                        as: "h1",
                        color: "modalText",
                        id: F,
                        size: V ? "20" : "18",
                        weight: "heavy",
                      },
                      I
                    )
                  ),
                  !!d &&
                    ed.createElement(
                      nZ,
                      { textAlign: "center" },
                      ed.createElement(
                        rN,
                        {
                          as: "h1",
                          color: "modalTextSecondary",
                          id: F,
                          size: V ? "16" : "14",
                          weight: "semibold",
                        },
                        N,
                        " ",
                        d.symbol
                      )
                    )
                )
              ),
              ed.createElement(
                nZ,
                {
                  display: "flex",
                  flexDirection: "row",
                  gap: "8",
                  margin: "2",
                  marginTop: "16",
                },
                ed.createElement(ProfileDetailsAction, {
                  action: P,
                  icon: b
                    ? ed.createElement(CopiedIcon, null)
                    : ed.createElement(CopyIcon, null),
                  label: b
                    ? G.t("profile.copy_address.copied")
                    : G.t("profile.copy_address.label"),
                }),
                ed.createElement(ProfileDetailsAction, {
                  action: g,
                  icon: ed.createElement(DisconnectIcon, null),
                  label: G.t("profile.disconnect.label"),
                  testId: "disconnect-button",
                })
              )
            ),
            y &&
              ed.createElement(
                ed.Fragment,
                null,
                ed.createElement(nZ, {
                  background: "generalBorder",
                  height: "1",
                  marginTop: "-1",
                }),
                ed.createElement(
                  nZ,
                  null,
                  ed.createElement(TxList, { address: e })
                )
              )
          )
        );
      }
      function AccountModal({ onClose: e, open: l }) {
        let { address: c } = (0, ep.m)(),
          {
            balance: d,
            ensAvatar: m,
            ensName: g,
          } = useProfile({ address: c, includeBalance: l }),
          { disconnect: y } = (0, t9.q)();
        return c
          ? ed.createElement(
              ed.Fragment,
              null,
              c &&
                ed.createElement(
                  Dialog,
                  { onClose: e, open: l, titleId: "rk_account_modal_title" },
                  ed.createElement(
                    DialogContent,
                    { bottomSheetOnMobile: !0, padding: "0" },
                    ed.createElement(ProfileDetails, {
                      address: c,
                      ensAvatar: m,
                      ensName: g,
                      balance: d,
                      onClose: e,
                      onDisconnect: y,
                    })
                  )
                )
            )
          : null;
      }
      var DisconnectSqIcon = ({ size: e }) =>
          ed.createElement(
            "svg",
            {
              fill: "none",
              height: e,
              viewBox: "0 0 28 28",
              width: e,
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Disconnect"),
            ed.createElement("path", {
              d: "M6.742 22.195h8.367c1.774 0 2.743-.968 2.743-2.758V16.11h-2.016v3.11c0 .625-.305.96-.969.96H6.984c-.664 0-.968-.335-.968-.96V7.984c0-.632.304-.968.968-.968h7.883c.664 0 .969.336.969.968v3.133h2.016v-3.36c0-1.78-.97-2.757-2.743-2.757H6.742C4.97 5 4 5.977 4 7.758v11.68c0 1.789.969 2.757 2.742 2.757Zm5.438-7.703h7.601l1.149-.07-.602.406-1.008.938a.816.816 0 0 0-.258.593c0 .407.313.782.758.782.227 0 .39-.086.547-.243l2.492-2.593c.235-.235.313-.47.313-.711 0-.242-.078-.477-.313-.719l-2.492-2.586c-.156-.156-.32-.25-.547-.25-.445 0-.758.367-.758.781 0 .227.094.446.258.594l1.008.945.602.407-1.149-.079H12.18a.904.904 0 0 0 0 1.805Z",
              fill: "currentColor",
            })
          ),
        rq = ed.forwardRef(
          (
            {
              children: e,
              currentlySelected: l = !1,
              onClick: c,
              testId: d,
              ...m
            },
            g
          ) => {
            let y = isMobile();
            return ed.createElement(
              nZ,
              {
                as: "button",
                borderRadius: "menuButton",
                disabled: l,
                display: "flex",
                onClick: c,
                ref: g,
                testId: d,
                type: "button",
              },
              ed.createElement(
                nZ,
                {
                  borderRadius: "menuButton",
                  className: [
                    y ? "v9horb0" : void 0,
                    !l && touchableStyles({ active: "shrink" }),
                  ],
                  padding: y ? "8" : "6",
                  transition: "default",
                  width: "full",
                  ...(l
                    ? {
                        background: "accentColor",
                        borderColor: "selectedOptionBorder",
                        borderStyle: "solid",
                        borderWidth: "1",
                        boxShadow: "selectedOption",
                        color: "accentColorForeground",
                      }
                    : {
                        background: { hover: "menuItemBackground" },
                        color: "modalText",
                        transition: "default",
                      }),
                  ...m,
                },
                e
              )
            );
          }
        );
      rq.displayName = "MenuButton";
      var Chain_default = ({
        chainId: e,
        currentChainId: l,
        switchChain: c,
        chainIconSize: d,
        isLoading: m,
        src: g,
        name: y,
        iconBackground: b,
        idx: C,
      }) => {
        let P = isMobile(),
          { i18n: I } = (0, ed.useContext)(n2),
          B = useRainbowKitChains(),
          N = l === e;
        return ed.createElement(
          ed.Fragment,
          null,
          ed.createElement(
            rq,
            {
              currentlySelected: N,
              onClick: N ? void 0 : () => c({ chainId: e }),
              testId: `chain-option-${e}`,
            },
            ed.createElement(
              nZ,
              { fontFamily: "body", fontSize: "16", fontWeight: "bold" },
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "row",
                  justifyContent: "space-between",
                },
                ed.createElement(
                  nZ,
                  {
                    alignItems: "center",
                    display: "flex",
                    flexDirection: "row",
                    gap: "4",
                    height: d,
                  },
                  g &&
                    ed.createElement(
                      nZ,
                      { height: "full", marginRight: "8" },
                      ed.createElement(AsyncImage, {
                        alt: y,
                        background: b,
                        borderRadius: "full",
                        height: d,
                        src: g,
                        width: d,
                        testId: `chain-option-${e}-icon`,
                      })
                    ),
                  ed.createElement("div", null, y ?? y)
                ),
                N &&
                  ed.createElement(
                    nZ,
                    {
                      alignItems: "center",
                      display: "flex",
                      flexDirection: "row",
                      marginRight: "6",
                    },
                    ed.createElement(
                      rN,
                      {
                        color: "accentColorForeground",
                        size: "14",
                        weight: "medium",
                      },
                      I.t("chains.connected")
                    ),
                    ed.createElement(nZ, {
                      background: "connectionIndicator",
                      borderColor: "selectedOptionBorder",
                      borderRadius: "full",
                      borderStyle: "solid",
                      borderWidth: "1",
                      height: "8",
                      marginLeft: "8",
                      width: "8",
                    })
                  ),
                m &&
                  ed.createElement(
                    nZ,
                    {
                      alignItems: "center",
                      display: "flex",
                      flexDirection: "row",
                      marginRight: "6",
                    },
                    ed.createElement(
                      rN,
                      { color: "modalText", size: "14", weight: "medium" },
                      I.t("chains.confirm")
                    ),
                    ed.createElement(nZ, {
                      background: "standby",
                      borderRadius: "full",
                      height: "8",
                      marginLeft: "8",
                      width: "8",
                    })
                  )
              )
            )
          ),
          P &&
            C < B.length - 1 &&
            ed.createElement(nZ, {
              background: "generalBorderDim",
              height: "1",
              marginX: "8",
            })
        );
      };
      function ChainModal({ onClose: e, open: l }) {
        let { chainId: c } = (0, ep.m)(),
          { chains: d } = (0, ef.Z)(),
          [m, g] = (0, ed.useState)(null),
          { switchChain: y } = (0, nE.o)({
            mutation: {
              onMutate: ({ chainId: e }) => {
                g(e);
              },
              onSuccess: () => {
                m && g(null);
              },
              onError: () => {
                m && g(null);
              },
              onSettled: () => {
                e();
              },
            },
          }),
          { i18n: b } = (0, ed.useContext)(n2),
          { disconnect: C } = (0, t9.q)(),
          P = "rk_chain_modal_title",
          I = isMobile(),
          B = d.some((e) => e.id === c),
          N = I ? "36" : "28",
          F = useRainbowKitChains();
        return c
          ? ed.createElement(
              Dialog,
              { onClose: e, open: l, titleId: P },
              ed.createElement(
                DialogContent,
                { bottomSheetOnMobile: !0, paddingBottom: "0" },
                ed.createElement(
                  nZ,
                  { display: "flex", flexDirection: "column", gap: "14" },
                  ed.createElement(
                    nZ,
                    {
                      display: "flex",
                      flexDirection: "row",
                      justifyContent: "space-between",
                    },
                    I && ed.createElement(nZ, { width: "30" }),
                    ed.createElement(
                      nZ,
                      { paddingBottom: "0", paddingLeft: "8", paddingTop: "4" },
                      ed.createElement(
                        rN,
                        {
                          as: "h1",
                          color: "modalText",
                          id: P,
                          size: I ? "20" : "18",
                          weight: "heavy",
                        },
                        b.t("chains.title")
                      )
                    ),
                    ed.createElement(CloseButton, { onClose: e })
                  ),
                  !B &&
                    ed.createElement(
                      nZ,
                      { marginX: "8", textAlign: I ? "center" : "left" },
                      ed.createElement(
                        rN,
                        {
                          color: "modalTextSecondary",
                          size: "14",
                          weight: "medium",
                        },
                        b.t("chains.wrong_network")
                      )
                    ),
                  ed.createElement(
                    nZ,
                    {
                      className: I ? "_18dqw9x1" : "_18dqw9x0",
                      display: "flex",
                      flexDirection: "column",
                      gap: "4",
                      padding: "2",
                      paddingBottom: "16",
                    },
                    F.map(
                      ({ iconBackground: e, iconUrl: l, id: d, name: g }, b) =>
                        ed.createElement(Chain_default, {
                          key: d,
                          chainId: d,
                          currentChainId: c,
                          switchChain: y,
                          chainIconSize: N,
                          isLoading: m === d,
                          src: l,
                          name: g,
                          iconBackground: e,
                          idx: b,
                        })
                    ),
                    !B &&
                      ed.createElement(
                        ed.Fragment,
                        null,
                        ed.createElement(nZ, {
                          background: "generalBorderDim",
                          height: "1",
                          marginX: "8",
                        }),
                        ed.createElement(
                          rq,
                          {
                            onClick: () => C(),
                            testId: "chain-option-disconnect",
                          },
                          ed.createElement(
                            nZ,
                            {
                              color: "error",
                              fontFamily: "body",
                              fontSize: "16",
                              fontWeight: "bold",
                            },
                            ed.createElement(
                              nZ,
                              {
                                alignItems: "center",
                                display: "flex",
                                flexDirection: "row",
                                justifyContent: "space-between",
                              },
                              ed.createElement(
                                nZ,
                                {
                                  alignItems: "center",
                                  display: "flex",
                                  flexDirection: "row",
                                  gap: "4",
                                  height: N,
                                },
                                ed.createElement(
                                  nZ,
                                  {
                                    alignItems: "center",
                                    color: "error",
                                    height: N,
                                    justifyContent: "center",
                                    marginRight: "8",
                                  },
                                  ed.createElement(DisconnectSqIcon, {
                                    size: Number(N),
                                  })
                                ),
                                ed.createElement(
                                  "div",
                                  null,
                                  b.t("chains.disconnect")
                                )
                              )
                            )
                          )
                        )
                      )
                  )
                )
              )
            )
          : null;
      }
      var DisclaimerLink = ({ children: e, href: l }) =>
          ed.createElement(
            nZ,
            {
              as: "a",
              color: "accentColor",
              href: l,
              rel: "noreferrer",
              target: "_blank",
            },
            e
          ),
        DisclaimerText = ({ children: e }) =>
          ed.createElement(
            rN,
            { color: "modalTextSecondary", size: "12", weight: "medium" },
            e
          );
      function ConnectModalIntro({ compactModeEnabled: e = !1, getWallet: l }) {
        let { disclaimer: c, learnMoreUrl: d } = (0, ed.useContext)(rP),
          { i18n: m } = (0, ed.useContext)(n2);
        return ed.createElement(
          ed.Fragment,
          null,
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              color: "accentColor",
              display: "flex",
              flexDirection: "column",
              height: "full",
              justifyContent: "space-around",
            },
            ed.createElement(
              nZ,
              { marginBottom: "10" },
              !e &&
                ed.createElement(
                  rN,
                  { color: "modalText", size: "18", weight: "heavy" },
                  m.t("intro.title")
                )
            ),
            ed.createElement(
              nZ,
              {
                display: "flex",
                flexDirection: "column",
                gap: "32",
                justifyContent: "center",
                marginY: "20",
                style: { maxWidth: 312 },
              },
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "row",
                  gap: "16",
                },
                ed.createElement(
                  nZ,
                  {
                    borderRadius: "6",
                    height: "48",
                    minWidth: "48",
                    width: "48",
                  },
                  ed.createElement(AssetsIcon, null)
                ),
                ed.createElement(
                  nZ,
                  { display: "flex", flexDirection: "column", gap: "4" },
                  ed.createElement(
                    rN,
                    { color: "modalText", size: "14", weight: "bold" },
                    m.t("intro.digital_asset.title")
                  ),
                  ed.createElement(
                    rN,
                    {
                      color: "modalTextSecondary",
                      size: "14",
                      weight: "medium",
                    },
                    m.t("intro.digital_asset.description")
                  )
                )
              ),
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "row",
                  gap: "16",
                },
                ed.createElement(
                  nZ,
                  {
                    borderRadius: "6",
                    height: "48",
                    minWidth: "48",
                    width: "48",
                  },
                  ed.createElement(LoginIcon, null)
                ),
                ed.createElement(
                  nZ,
                  { display: "flex", flexDirection: "column", gap: "4" },
                  ed.createElement(
                    rN,
                    { color: "modalText", size: "14", weight: "bold" },
                    m.t("intro.login.title")
                  ),
                  ed.createElement(
                    rN,
                    {
                      color: "modalTextSecondary",
                      size: "14",
                      weight: "medium",
                    },
                    m.t("intro.login.description")
                  )
                )
              )
            ),
            ed.createElement(
              nZ,
              {
                alignItems: "center",
                display: "flex",
                flexDirection: "column",
                gap: "12",
                justifyContent: "center",
                margin: "10",
              },
              ed.createElement(ActionButton, {
                label: m.t("intro.get.label"),
                onClick: l,
              }),
              ed.createElement(
                nZ,
                {
                  as: "a",
                  className: touchableStyles({
                    active: "shrink",
                    hover: "grow",
                  }),
                  display: "block",
                  href: d,
                  paddingX: "12",
                  paddingY: "4",
                  rel: "noreferrer",
                  style: { willChange: "transform" },
                  target: "_blank",
                  transition: "default",
                },
                ed.createElement(
                  rN,
                  { color: "accentColor", size: "14", weight: "bold" },
                  m.t("intro.learn_more.label")
                )
              )
            ),
            c &&
              !e &&
              ed.createElement(
                nZ,
                { marginBottom: "8", marginTop: "12", textAlign: "center" },
                ed.createElement(c, {
                  Link: DisclaimerLink,
                  Text: DisclaimerText,
                })
              )
          )
        );
      }
      var BackIcon = () =>
          ed.createElement(
            "svg",
            {
              fill: "none",
              height: "17",
              viewBox: "0 0 11 17",
              width: "11",
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Back"),
            ed.createElement("path", {
              d: "M0.99707 8.6543C0.99707 9.08496 1.15527 9.44531 1.51562 9.79688L8.16016 16.3096C8.43262 16.5732 8.74902 16.7051 9.13574 16.7051C9.90918 16.7051 10.5508 16.0811 10.5508 15.3076C10.5508 14.9121 10.3838 14.5605 10.0938 14.2705L4.30176 8.64551L10.0938 3.0293C10.3838 2.74805 10.5508 2.3877 10.5508 2.00098C10.5508 1.23633 9.90918 0.603516 9.13574 0.603516C8.74902 0.603516 8.43262 0.735352 8.16016 0.999023L1.51562 7.51172C1.15527 7.85449 1.00586 8.21484 0.99707 8.6543Z",
              fill: "currentColor",
            })
          ),
        InfoIcon = () =>
          ed.createElement(
            "svg",
            {
              fill: "none",
              height: "12",
              viewBox: "0 0 8 12",
              width: "8",
              xmlns: "http://www.w3.org/2000/svg",
            },
            ed.createElement("title", null, "Info"),
            ed.createElement("path", {
              d: "M3.64258 7.99609C4.19336 7.99609 4.5625 7.73828 4.68555 7.24609C4.69141 7.21094 4.70312 7.16406 4.70898 7.13477C4.80859 6.60742 5.05469 6.35547 6.04492 5.76367C7.14648 5.10156 7.67969 4.3457 7.67969 3.24414C7.67969 1.39844 6.17383 0.255859 3.95898 0.255859C2.32422 0.255859 1.05859 0.894531 0.548828 1.86719C0.396484 2.14844 0.320312 2.44727 0.320312 2.74023C0.314453 3.37305 0.742188 3.79492 1.42188 3.79492C1.91406 3.79492 2.33594 3.54883 2.53516 3.11523C2.78711 2.47656 3.23242 2.21289 3.83594 2.21289C4.55664 2.21289 5.10742 2.65234 5.10742 3.29102C5.10742 3.9707 4.7793 4.29883 3.81836 4.87891C3.02148 5.36523 2.50586 5.92773 2.50586 6.76562V6.90039C2.50586 7.55664 2.96289 7.99609 3.64258 7.99609ZM3.67188 11.4473C4.42773 11.4473 5.04297 10.8672 5.04297 10.1406C5.04297 9.41406 4.42773 8.83984 3.67188 8.83984C2.91602 8.83984 2.30664 9.41406 2.30664 10.1406C2.30664 10.8672 2.91602 11.4473 3.67188 11.4473Z",
              fill: "currentColor",
            })
          ),
        InfoButton = ({ "aria-label": e = "Info", onClick: l }) => {
          let c = isMobile();
          return ed.createElement(
            nZ,
            {
              alignItems: "center",
              "aria-label": e,
              as: "button",
              background: "closeButtonBackground",
              borderColor: "actionButtonBorder",
              borderRadius: "full",
              borderStyle: "solid",
              borderWidth: c ? "0" : "1",
              className: touchableStyles({
                active: "shrinkSm",
                hover: "growLg",
              }),
              color: "closeButton",
              display: "flex",
              height: c ? "30" : "28",
              justifyContent: "center",
              onClick: l,
              style: { willChange: "transform" },
              transition: "default",
              type: "button",
              width: c ? "30" : "28",
            },
            ed.createElement(InfoIcon, null)
          );
        },
        useCoolMode = (e) => {
          let l = (0, ed.useRef)(null),
            c = (0, ed.useContext)(rM),
            d = useAsyncImage(e);
          return (
            (0, ed.useEffect)(() => {
              if (c && l.current && d)
                return (function (e, l) {
                  let c;
                  rV++;
                  let d = [15, 20, 25, 35, 45],
                    m = [],
                    g = !1,
                    y = 0,
                    b = 0,
                    C = getContainer();
                  !(function loop() {
                    g &&
                      m.length < 35 &&
                      (function () {
                        let e = d[Math.floor(Math.random() * d.length)],
                          c = 360 * Math.random(),
                          g = b - e / 2,
                          P = y - e / 2,
                          I = document.createElement("div");
                        (I.innerHTML = `<img src="${l}" width="${e}" height="${e}" style="border-radius: 25%">`),
                          I.setAttribute(
                            "style",
                            `position:absolute;will-change:transform;top:${g}px;left:${P}px;transform:rotate(${c}deg)`
                          ),
                          C.appendChild(I),
                          m.push({
                            direction: 0.5 >= Math.random() ? -1 : 1,
                            element: I,
                            left: P,
                            size: e,
                            speedHorz: 10 * Math.random(),
                            speedUp: 25 * Math.random(),
                            spinSpeed:
                              35 *
                              Math.random() *
                              (0.5 >= Math.random() ? -1 : 1),
                            spinVal: c,
                            top: g,
                          });
                      })(),
                      (function () {
                        for (let e of m)
                          (e.left = e.left - e.speedHorz * e.direction),
                            (e.top = e.top - e.speedUp),
                            (e.speedUp = Math.min(e.size, e.speedUp - 1)),
                            (e.spinVal = e.spinVal + e.spinSpeed),
                            e.top >=
                              Math.max(
                                window.innerHeight,
                                document.body.clientHeight
                              ) +
                                e.size &&
                              ((m = m.filter((l) => l !== e)),
                              e.element.remove()),
                            e.element.setAttribute(
                              "style",
                              `position:absolute;will-change:transform;top:${e.top}px;left:${e.left}px;transform:rotate(${e.spinVal}deg)`
                            );
                      })(),
                      (c = requestAnimationFrame(loop));
                  })();
                  let P =
                      "ontouchstart" in window || navigator.msMaxTouchPoints,
                    I = P ? "touchstart" : "mousedown",
                    B = P ? "touchend" : "mouseup",
                    N = P ? "touchmove" : "mousemove",
                    updateMousePosition = (e) => {
                      "touches" in e
                        ? ((y = e.touches?.[0].clientX),
                          (b = e.touches?.[0].clientY))
                        : ((y = e.clientX), (b = e.clientY));
                    },
                    tapHandler = (e) => {
                      updateMousePosition(e), (g = !0);
                    },
                    disableAutoAddParticle = () => {
                      g = !1;
                    };
                  return (
                    e.addEventListener(N, updateMousePosition, { passive: !1 }),
                    e.addEventListener(I, tapHandler),
                    e.addEventListener(B, disableAutoAddParticle),
                    e.addEventListener("mouseleave", disableAutoAddParticle),
                    () => {
                      e.removeEventListener(N, updateMousePosition),
                        e.removeEventListener(I, tapHandler),
                        e.removeEventListener(B, disableAutoAddParticle),
                        e.removeEventListener(
                          "mouseleave",
                          disableAutoAddParticle
                        );
                      let l = setInterval(() => {
                        c &&
                          0 === m.length &&
                          (cancelAnimationFrame(c),
                          clearInterval(l),
                          0 == --rV && C.remove());
                      }, 500);
                    }
                  );
                })(l.current, d);
            }, [c, d]),
            l
          );
        },
        getContainer = () => {
          let e = "_rk_coolMode",
            l = document.getElementById(e);
          if (l) return l;
          let c = document.createElement("div");
          return (
            c.setAttribute("id", e),
            c.setAttribute(
              "style",
              "overflow:hidden;position:fixed;height:100%;top:0;left:0;right:0;bottom:0;pointer-events:none;z-index:2147483647"
            ),
            document.body.appendChild(c),
            c
          );
        },
        rV = 0,
        ModalSelection = ({
          as: e = "button",
          currentlySelected: l = !1,
          iconBackground: c,
          iconUrl: d,
          name: m,
          onClick: g,
          ready: y,
          recent: b,
          testId: C,
          isRainbowKitConnector: P,
          ...I
        }) => {
          let B = useCoolMode(d),
            [N, F] = ed.useState(!1),
            { i18n: V } = ed.useContext(n2);
          return ed.createElement(
            nZ,
            {
              display: "flex",
              flexDirection: "column",
              onMouseEnter: () => F(!0),
              onMouseLeave: () => F(!1),
              ref: B,
            },
            ed.createElement(
              nZ,
              {
                as: e,
                borderRadius: "menuButton",
                borderStyle: "solid",
                borderWidth: "1",
                className: l
                  ? void 0
                  : ["g5kl0l0", touchableStyles({ active: "shrink" })],
                disabled: l,
                onClick: g,
                padding: "5",
                style: { willChange: "transform" },
                testId: C,
                transition: "default",
                width: "full",
                ...(l
                  ? {
                      background: "accentColor",
                      borderColor: "selectedOptionBorder",
                      boxShadow: "selectedWallet",
                    }
                  : { background: { hover: "menuItemBackground" } }),
                ...I,
              },
              ed.createElement(
                nZ,
                {
                  color: l ? "accentColorForeground" : "modalText",
                  disabled: !y,
                  fontFamily: "body",
                  fontSize: "16",
                  fontWeight: "bold",
                  transition: "default",
                },
                ed.createElement(
                  nZ,
                  {
                    alignItems: "center",
                    display: "flex",
                    flexDirection: "row",
                    gap: "12",
                  },
                  ed.createElement(AsyncImage, {
                    background: c,
                    ...(!N && P ? { borderColor: "actionButtonBorder" } : {}),
                    useAsImage: !P,
                    borderRadius: "6",
                    height: "28",
                    src: d,
                    width: "28",
                  }),
                  ed.createElement(
                    nZ,
                    null,
                    ed.createElement(
                      nZ,
                      {
                        style: { marginTop: b ? -2 : void 0 },
                        maxWidth: "200",
                      },
                      m
                    ),
                    b &&
                      ed.createElement(
                        rN,
                        {
                          color: l ? "accentColorForeground" : "accentColor",
                          size: "12",
                          style: { lineHeight: 1, marginTop: -1 },
                          weight: "medium",
                        },
                        V.t("connect.recent")
                      )
                  )
                )
              )
            )
          );
        };
      ModalSelection.displayName = "ModalSelection";
      var rH = "rk-latest-id",
        convertHexToRGBA = (e, l = 1) => {
          let c = e.replace("#", "");
          3 === c.length && (c = `${c[0]}${c[0]}${c[1]}${c[1]}${c[2]}${c[2]}`);
          let d = Number.parseInt(c.substring(0, 2), 16),
            m = Number.parseInt(c.substring(2, 4), 16),
            g = Number.parseInt(c.substring(4, 6), 16);
          return l > 1 && l <= 100 && (l /= 100), `rgba(${d},${m},${g},${l})`;
        },
        getGradientRGBAs = (e) =>
          e
            ? [
                convertHexToRGBA(e, 0.2),
                convertHexToRGBA(e, 0.14),
                convertHexToRGBA(e, 0.1),
              ]
            : null,
        isHexString = (e) => /^#([0-9a-f]{3}){1,2}$/i.test(e),
        src3 = async () => (await c.e(313).then(c.bind(c, 10313))).default,
        preloadConnectIcon = () => loadImages(src3),
        ConnectIcon = () =>
          ed.createElement(AsyncImage, {
            background: "#515a70",
            borderColor: "generalBorder",
            borderRadius: "10",
            height: "48",
            src: src3,
            width: "48",
          }),
        src4 = async () => (await c.e(7381).then(c.bind(c, 67381))).default,
        preloadCreateIcon = () => loadImages(src4),
        CreateIcon = () =>
          ed.createElement(AsyncImage, {
            background: "#e3a5e8",
            borderColor: "generalBorder",
            borderRadius: "10",
            height: "48",
            src: src4,
            width: "48",
          }),
        src5 = async () => (await c.e(7057).then(c.bind(c, 47057))).default,
        preloadRefreshIcon = () => loadImages(src5),
        RefreshIcon = () =>
          ed.createElement(AsyncImage, {
            background: "#515a70",
            borderColor: "generalBorder",
            borderRadius: "10",
            height: "48",
            src: src5,
            width: "48",
          }),
        src6 = async () => (await c.e(9481).then(c.bind(c, 29481))).default,
        preloadScanIcon = () => loadImages(src6),
        ScanIcon = () =>
          ed.createElement(AsyncImage, {
            background: "#515a70",
            borderColor: "generalBorder",
            borderRadius: "10",
            height: "48",
            src: src6,
            width: "48",
          }),
        generateMatrix = (e, l) => {
          let c = Array.prototype.slice.call(
              nA.create(e, { errorCorrectionLevel: l }).modules.data,
              0
            ),
            d = Math.sqrt(c.length);
          return c.reduce(
            (e, l, c) =>
              (c % d == 0 ? e.push([l]) : e[e.length - 1].push(l)) && e,
            []
          );
        };
      function QRCode({
        ecl: e = "M",
        logoBackground: l,
        logoMargin: c = 10,
        logoSize: d = 50,
        logoUrl: m,
        size: g = 200,
        uri: y,
      }) {
        let b = g - 2 * Number.parseInt("20", 10),
          C = (0, ed.useMemo)(() => {
            let l = [],
              c = generateMatrix(y, e),
              m = b / c.length;
            [
              { x: 0, y: 0 },
              { x: 1, y: 0 },
              { x: 0, y: 1 },
            ].forEach(({ x: e, y: d }) => {
              let g = (c.length - 7) * m * e,
                y = (c.length - 7) * m * d;
              for (let c = 0; c < 3; c++)
                l.push(
                  ed.createElement("rect", {
                    fill: c % 2 != 0 ? "white" : "black",
                    height: m * (7 - 2 * c),
                    key: `${c}-${e}-${d}`,
                    rx: -((c - 2) * 5) + (0 === c ? 2 : 0),
                    ry: -((c - 2) * 5) + (0 === c ? 2 : 0),
                    width: m * (7 - 2 * c),
                    x: g + m * c,
                    y: y + m * c,
                  })
                );
            });
            let g = Math.floor((d + 25) / m),
              C = c.length / 2 - g / 2,
              P = c.length / 2 + g / 2 - 1;
            return (
              c.forEach((e, d) => {
                e.forEach((e, g) => {
                  !c[d][g] ||
                    (d < 7 && g < 7) ||
                    (d > c.length - 8 && g < 7) ||
                    (d < 7 && g > c.length - 8) ||
                    (d > C && d < P && g > C && g < P) ||
                    l.push(
                      ed.createElement("circle", {
                        cx: d * m + m / 2,
                        cy: g * m + m / 2,
                        fill: "black",
                        key: `circle-${d}-${g}`,
                        r: m / 3,
                      })
                    );
                });
              }),
              l
            );
          }, [e, d, b, y]),
          P = b / 2 - d / 2,
          I = d + 2 * c;
        return ed.createElement(
          nZ,
          {
            borderColor: "generalBorder",
            borderRadius: "menuButton",
            borderStyle: "solid",
            borderWidth: "1",
            className: "_1vwt0cg0",
            padding: "20",
            width: "max",
          },
          ed.createElement(
            nZ,
            {
              style: { height: b, userSelect: "none", width: b },
              userSelect: "none",
            },
            ed.createElement(
              nZ,
              {
                display: "flex",
                justifyContent: "center",
                position: "relative",
                style: { height: 0, top: P, width: b },
                width: "full",
              },
              ed.createElement(AsyncImage, {
                background: l,
                borderColor: { custom: "rgba(0, 0, 0, 0.06)" },
                borderRadius: "13",
                height: d,
                src: m,
                width: d,
              })
            ),
            ed.createElement(
              "svg",
              { height: b, style: { all: "revert" }, width: b },
              ed.createElement("title", null, "QR Code"),
              ed.createElement(
                "defs",
                null,
                ed.createElement(
                  "clipPath",
                  { id: "clip-wrapper" },
                  ed.createElement("rect", { height: I, width: I })
                ),
                ed.createElement(
                  "clipPath",
                  { id: "clip-logo" },
                  ed.createElement("rect", { height: d, width: d })
                )
              ),
              ed.createElement("rect", {
                fill: "transparent",
                height: b,
                width: b,
              }),
              C
            )
          )
        );
      }
      var getBrowserSrc = async () => {
          let e = getBrowser();
          switch (e) {
            case "Arc":
              return (await c.e(2724).then(c.bind(c, 22724))).default;
            case "Brave":
              return (await c.e(8176).then(c.bind(c, 98176))).default;
            case "Chrome":
              return (await c.e(3204).then(c.bind(c, 13204))).default;
            case "Edge":
              return (await c.e(9804).then(c.bind(c, 19804))).default;
            case "Firefox":
              return (await c.e(9751).then(c.bind(c, 39023))).default;
            case "Opera":
              return (await c.e(3561).then(c.bind(c, 53561))).default;
            case "Safari":
              return (await c.e(2548).then(c.bind(c, 92548))).default;
            default:
              return (await c.e(7605).then(c.bind(c, 37605))).default;
          }
        },
        preloadBrowserIcon = () => loadImages(getBrowserSrc),
        getPlatformSrc = async () => {
          let e = getPlatform();
          switch (e) {
            case "Windows":
              return (await c.e(1090).then(c.bind(c, 11090))).default;
            case "macOS":
              return (await c.e(8495).then(c.bind(c, 88495))).default;
            default:
              return (await c.e(8216).then(c.bind(c, 48216))).default;
          }
        },
        preloadPlatformIcon = () => loadImages(getPlatformSrc);
      function GetDetail({ getWalletDownload: e, compactModeEnabled: l }) {
        let c = useWalletConnectors().filter((e) => e.isRainbowKitConnector),
          d = c.splice(0, 5),
          { i18n: m } = (0, ed.useContext)(n2);
        return ed.createElement(
          nZ,
          {
            alignItems: "center",
            display: "flex",
            flexDirection: "column",
            height: "full",
            marginTop: "18",
            width: "full",
          },
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              display: "flex",
              flexDirection: "column",
              gap: "28",
              height: "full",
              width: "full",
            },
            d
              ?.filter(
                (e) =>
                  e.extensionDownloadUrl ||
                  e.desktopDownloadUrl ||
                  (e.qrCode && e.downloadUrls?.qrCode)
              )
              .map((l) => {
                let {
                    downloadUrls: c,
                    iconBackground: d,
                    iconUrl: g,
                    id: y,
                    name: b,
                    qrCode: C,
                  } = l,
                  P = c?.qrCode && C,
                  I = !!l.extensionDownloadUrl,
                  B = c?.qrCode && I,
                  N = c?.qrCode && !!l.desktopDownloadUrl;
                return ed.createElement(
                  nZ,
                  {
                    alignItems: "center",
                    display: "flex",
                    gap: "16",
                    justifyContent: "space-between",
                    key: l.id,
                    width: "full",
                  },
                  ed.createElement(
                    nZ,
                    {
                      alignItems: "center",
                      display: "flex",
                      flexDirection: "row",
                      gap: "16",
                    },
                    ed.createElement(AsyncImage, {
                      background: d,
                      borderColor: "actionButtonBorder",
                      borderRadius: "10",
                      height: "48",
                      src: g,
                      width: "48",
                    }),
                    ed.createElement(
                      nZ,
                      { display: "flex", flexDirection: "column", gap: "2" },
                      ed.createElement(
                        rN,
                        { color: "modalText", size: "14", weight: "bold" },
                        b
                      ),
                      ed.createElement(
                        rN,
                        {
                          color: "modalTextSecondary",
                          size: "14",
                          weight: "medium",
                        },
                        B
                          ? m.t("get.mobile_and_extension.description")
                          : N
                          ? m.t("get.mobile_and_desktop.description")
                          : P
                          ? m.t("get.mobile.description")
                          : I
                          ? m.t("get.extension.description")
                          : null
                      )
                    )
                  ),
                  ed.createElement(
                    nZ,
                    { display: "flex", flexDirection: "column", gap: "4" },
                    ed.createElement(ActionButton, {
                      label: m.t("get.action.label"),
                      onClick: () => e(y),
                      type: "secondary",
                    })
                  )
                );
              })
          ),
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              borderRadius: "10",
              display: "flex",
              flexDirection: "column",
              gap: "8",
              justifyContent: "space-between",
              marginBottom: "4",
              paddingY: "8",
              style: { maxWidth: 275, textAlign: "center" },
            },
            ed.createElement(
              rN,
              { color: "modalText", size: "14", weight: "bold" },
              m.t("get.looking_for.title")
            ),
            ed.createElement(
              rN,
              { color: "modalTextSecondary", size: "14", weight: "medium" },
              l
                ? m.t("get.looking_for.desktop.compact_description")
                : m.t("get.looking_for.desktop.wide_description")
            )
          )
        );
      }
      function ConnectDetail({
        changeWalletStep: e,
        compactModeEnabled: l,
        connectionError: c,
        onClose: d,
        qrCodeUri: m,
        reconnect: g,
        wallet: y,
      }) {
        let {
            downloadUrls: b,
            iconBackground: C,
            iconUrl: P,
            name: I,
            qrCode: B,
            ready: N,
            showWalletConnectModal: F,
            getDesktopUri: V,
          } = y,
          G = !!V,
          Q = isSafari(),
          { i18n: $ } = (0, ed.useContext)(n2),
          Z = !!y.extensionDownloadUrl,
          Y = b?.qrCode && Z,
          et = b?.qrCode && !!y.desktopDownloadUrl,
          en = B && m,
          onDesktopUri = async () => {
            let e = await V?.();
            window.open(e, Q ? "_blank" : "_self");
          },
          er = F
            ? {
                description: l
                  ? $.t("connect.walletconnect.description.compact")
                  : $.t("connect.walletconnect.description.full"),
                label: $.t("connect.walletconnect.open.label"),
                onClick: () => {
                  d(), F();
                },
              }
            : en
            ? {
                description: $.t("connect.secondary_action.get.description", {
                  wallet: I,
                }),
                label: $.t("connect.secondary_action.get.label"),
                onClick: () => e(Y || et ? "DOWNLOAD_OPTIONS" : "DOWNLOAD"),
              }
            : null,
          { width: ei } = useWindowSize();
        return (
          (0, ed.useEffect)(() => {
            preloadBrowserIcon(), preloadPlatformIcon();
          }, []),
          ed.createElement(
            nZ,
            {
              display: "flex",
              flexDirection: "column",
              height: "full",
              width: "full",
            },
            en
              ? ed.createElement(
                  nZ,
                  {
                    alignItems: "center",
                    display: "flex",
                    height: "full",
                    justifyContent: "center",
                  },
                  ed.createElement(QRCode, {
                    logoBackground: C,
                    logoSize: l ? 60 : 72,
                    logoUrl: P,
                    size: l
                      ? 318
                      : ei && ei < 768
                      ? Math.max(280, Math.min(ei - 308, 382))
                      : 382,
                    uri: m,
                  })
                )
              : ed.createElement(
                  nZ,
                  {
                    alignItems: "center",
                    display: "flex",
                    justifyContent: "center",
                    style: { flexGrow: 1 },
                  },
                  ed.createElement(
                    nZ,
                    {
                      alignItems: "center",
                      display: "flex",
                      flexDirection: "column",
                      gap: "8",
                    },
                    ed.createElement(
                      nZ,
                      { borderRadius: "10", height: "44", overflow: "hidden" },
                      ed.createElement(AsyncImage, {
                        useAsImage: !y.isRainbowKitConnector,
                        height: "44",
                        src: P,
                        width: "44",
                      })
                    ),
                    ed.createElement(
                      nZ,
                      {
                        alignItems: "center",
                        display: "flex",
                        flexDirection: "column",
                        gap: "4",
                        paddingX: "32",
                        style: { textAlign: "center" },
                      },
                      ed.createElement(
                        rN,
                        { color: "modalText", size: "18", weight: "bold" },
                        N
                          ? $.t("connect.status.opening", { wallet: I })
                          : Z
                          ? $.t("connect.status.not_installed", { wallet: I })
                          : $.t("connect.status.not_available", { wallet: I })
                      ),
                      !N && Z
                        ? ed.createElement(
                            nZ,
                            { paddingTop: "20" },
                            ed.createElement(ActionButton, {
                              href: y.extensionDownloadUrl,
                              label: $.t(
                                "connect.secondary_action.install.label"
                              ),
                              type: "secondary",
                            })
                          )
                        : null,
                      N &&
                        !en &&
                        ed.createElement(
                          ed.Fragment,
                          null,
                          ed.createElement(
                            nZ,
                            {
                              alignItems: "center",
                              display: "flex",
                              flexDirection: "column",
                              justifyContent: "center",
                            },
                            ed.createElement(
                              rN,
                              {
                                color: "modalTextSecondary",
                                size: "14",
                                textAlign: "center",
                                weight: "medium",
                              },
                              $.t("connect.status.confirm")
                            )
                          ),
                          ed.createElement(
                            nZ,
                            {
                              alignItems: "center",
                              color: "modalText",
                              display: "flex",
                              flexDirection: "row",
                              height: "32",
                              marginTop: "8",
                            },
                            c
                              ? ed.createElement(ActionButton, {
                                  label: $.t(
                                    "connect.secondary_action.retry.label"
                                  ),
                                  onClick: async () => {
                                    G && onDesktopUri(), g(y);
                                  },
                                })
                              : ed.createElement(
                                  nZ,
                                  { color: "modalTextSecondary" },
                                  ed.createElement(SpinnerIcon, null)
                                )
                          )
                        )
                    )
                  )
                ),
            ed.createElement(
              nZ,
              {
                alignItems: "center",
                borderRadius: "10",
                display: "flex",
                flexDirection: "row",
                gap: "8",
                height: "28",
                justifyContent: "space-between",
                marginTop: "12",
              },
              N &&
                er &&
                ed.createElement(
                  ed.Fragment,
                  null,
                  ed.createElement(
                    rN,
                    {
                      color: "modalTextSecondary",
                      size: "14",
                      weight: "medium",
                    },
                    er.description
                  ),
                  ed.createElement(ActionButton, {
                    label: er.label,
                    onClick: er.onClick,
                    type: "secondary",
                  })
                )
            )
          )
        );
      }
      var DownloadOptionsBox = ({
        actionLabel: e,
        description: l,
        iconAccent: c,
        iconBackground: d,
        iconUrl: m,
        isCompact: g,
        onAction: y,
        title: b,
        url: C,
        variant: P,
      }) => {
        let I = "browser" === P,
          B = !I && c && getGradientRGBAs(c);
        return ed.createElement(
          nZ,
          {
            alignItems: "center",
            borderRadius: "13",
            display: "flex",
            justifyContent: "center",
            overflow: "hidden",
            paddingX: g ? "18" : "44",
            position: "relative",
            style: { flex: 1, isolation: "isolate" },
            width: "full",
          },
          ed.createElement(nZ, {
            borderColor: "actionButtonBorder",
            borderRadius: "13",
            borderStyle: "solid",
            borderWidth: "1",
            style: {
              bottom: "0",
              left: "0",
              position: "absolute",
              right: "0",
              top: "0",
              zIndex: 1,
            },
          }),
          I &&
            ed.createElement(
              nZ,
              {
                background: "downloadTopCardBackground",
                height: "full",
                position: "absolute",
                style: { zIndex: 0 },
                width: "full",
              },
              ed.createElement(
                nZ,
                {
                  display: "flex",
                  flexDirection: "row",
                  justifyContent: "space-between",
                  style: {
                    bottom: "0",
                    filter: "blur(20px)",
                    left: "0",
                    position: "absolute",
                    right: "0",
                    top: "0",
                    transform: "translate3d(0, 0, 0)",
                  },
                },
                ed.createElement(
                  nZ,
                  {
                    style: {
                      filter: "blur(100px)",
                      marginLeft: -27,
                      marginTop: -20,
                      opacity: 0.6,
                      transform: "translate3d(0, 0, 0)",
                    },
                  },
                  ed.createElement(AsyncImage, {
                    borderRadius: "full",
                    height: "200",
                    src: m,
                    width: "200",
                  })
                ),
                ed.createElement(
                  nZ,
                  {
                    style: {
                      filter: "blur(100px)",
                      marginRight: 0,
                      marginTop: 105,
                      opacity: 0.6,
                      overflow: "auto",
                      transform: "translate3d(0, 0, 0)",
                    },
                  },
                  ed.createElement(AsyncImage, {
                    borderRadius: "full",
                    height: "200",
                    src: m,
                    width: "200",
                  })
                )
              )
            ),
          !I &&
            B &&
            ed.createElement(
              nZ,
              {
                background: "downloadBottomCardBackground",
                style: {
                  bottom: "0",
                  left: "0",
                  position: "absolute",
                  right: "0",
                  top: "0",
                },
              },
              ed.createElement(nZ, {
                position: "absolute",
                style: {
                  background: `radial-gradient(50% 50% at 50% 50%, ${B[0]} 0%, ${B[1]} 25%, rgba(0,0,0,0) 100%)`,
                  height: 564,
                  left: -215,
                  top: -197,
                  transform: "translate3d(0, 0, 0)",
                  width: 564,
                },
              }),
              ed.createElement(nZ, {
                position: "absolute",
                style: {
                  background: `radial-gradient(50% 50% at 50% 50%, ${B[2]} 0%, rgba(0, 0, 0, 0) 100%)`,
                  height: 564,
                  left: -1,
                  top: -76,
                  transform: "translate3d(0, 0, 0)",
                  width: 564,
                },
              })
            ),
          ed.createElement(
            nZ,
            {
              alignItems: "flex-start",
              display: "flex",
              flexDirection: "row",
              gap: "24",
              height: "max",
              justifyContent: "center",
              style: { zIndex: 1 },
            },
            ed.createElement(
              nZ,
              null,
              ed.createElement(AsyncImage, {
                height: "60",
                src: m,
                width: "60",
                ...(d
                  ? {
                      background: d,
                      borderColor: "generalBorder",
                      borderRadius: "10",
                    }
                  : null),
              })
            ),
            ed.createElement(
              nZ,
              {
                display: "flex",
                flexDirection: "column",
                gap: "4",
                style: { flex: 1 },
                width: "full",
              },
              ed.createElement(
                rN,
                { color: "modalText", size: "14", weight: "bold" },
                b
              ),
              ed.createElement(
                rN,
                { color: "modalTextSecondary", size: "14", weight: "medium" },
                l
              ),
              ed.createElement(
                nZ,
                { marginTop: "14", width: "max" },
                ed.createElement(ActionButton, {
                  href: C,
                  label: e,
                  onClick: y,
                  size: "medium",
                })
              )
            )
          )
        );
      };
      function DownloadOptionsDetail({ changeWalletStep: e, wallet: l }) {
        let c = getBrowser(),
          d = getPlatform(),
          m = (0, ed.useContext)(rj),
          g = "compact" === m,
          {
            desktop: y,
            desktopDownloadUrl: b,
            extension: C,
            extensionDownloadUrl: P,
            mobileDownloadUrl: I,
          } = l,
          { i18n: B } = (0, ed.useContext)(n2);
        return (
          (0, ed.useEffect)(() => {
            preloadCreateIcon(),
              preloadScanIcon(),
              preloadRefreshIcon(),
              preloadConnectIcon();
          }, []),
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              display: "flex",
              flexDirection: "column",
              gap: "24",
              height: "full",
              marginBottom: "8",
              marginTop: "4",
              width: "full",
            },
            ed.createElement(
              nZ,
              {
                alignItems: "center",
                display: "flex",
                flexDirection: "column",
                gap: "8",
                height: "full",
                justifyContent: "center",
                width: "full",
              },
              P &&
                ed.createElement(DownloadOptionsBox, {
                  actionLabel: B.t("get_options.extension.download.label", {
                    browser: c,
                  }),
                  description: B.t("get_options.extension.description"),
                  iconUrl: getBrowserSrc,
                  isCompact: g,
                  onAction: () =>
                    e(C?.instructions ? "INSTRUCTIONS_EXTENSION" : "CONNECT"),
                  title: B.t("get_options.extension.title", {
                    wallet: l.name,
                    browser: c,
                  }),
                  url: P,
                  variant: "browser",
                }),
              b &&
                ed.createElement(DownloadOptionsBox, {
                  actionLabel: B.t("get_options.desktop.download.label", {
                    platform: d,
                  }),
                  description: B.t("get_options.desktop.description"),
                  iconUrl: getPlatformSrc,
                  isCompact: g,
                  onAction: () =>
                    e(y?.instructions ? "INSTRUCTIONS_DESKTOP" : "CONNECT"),
                  title: B.t("get_options.desktop.title", {
                    wallet: l.name,
                    platform: d,
                  }),
                  url: b,
                  variant: "desktop",
                }),
              I &&
                ed.createElement(DownloadOptionsBox, {
                  actionLabel: B.t("get_options.mobile.download.label", {
                    wallet: l.name,
                  }),
                  description: B.t("get_options.mobile.description"),
                  iconAccent: l.iconAccent,
                  iconBackground: l.iconBackground,
                  iconUrl: l.iconUrl,
                  isCompact: g,
                  onAction: () => {
                    e("DOWNLOAD");
                  },
                  title: B.t("get_options.mobile.title", { wallet: l.name }),
                  variant: "app",
                })
            )
          )
        );
      }
      function DownloadDetail({ changeWalletStep: e, wallet: l }) {
        let { downloadUrls: c, qrCode: d } = l,
          { i18n: m } = (0, ed.useContext)(n2);
        return (
          (0, ed.useEffect)(() => {
            preloadCreateIcon(), preloadScanIcon();
          }, []),
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              display: "flex",
              flexDirection: "column",
              gap: "24",
              height: "full",
              width: "full",
            },
            ed.createElement(
              nZ,
              { style: { maxWidth: 220, textAlign: "center" } },
              ed.createElement(
                rN,
                { color: "modalTextSecondary", size: "14", weight: "semibold" },
                m.t("get_mobile.description")
              )
            ),
            ed.createElement(
              nZ,
              { height: "full" },
              c?.qrCode
                ? ed.createElement(QRCode, {
                    logoSize: 0,
                    size: 268,
                    uri: c.qrCode,
                  })
                : null
            ),
            ed.createElement(
              nZ,
              {
                alignItems: "center",
                borderRadius: "10",
                display: "flex",
                flexDirection: "row",
                gap: "8",
                height: "34",
                justifyContent: "space-between",
                marginBottom: "12",
                paddingY: "8",
              },
              ed.createElement(ActionButton, {
                label: m.t("get_mobile.continue.label"),
                onClick: () =>
                  e(d?.instructions ? "INSTRUCTIONS_MOBILE" : "CONNECT"),
              })
            )
          )
        );
      }
      var rG = {
        connect: () => ed.createElement(ConnectIcon, null),
        create: () => ed.createElement(CreateIcon, null),
        install: (e) =>
          ed.createElement(AsyncImage, {
            background: e.iconBackground,
            borderColor: "generalBorder",
            borderRadius: "10",
            height: "48",
            src: e.iconUrl,
            width: "48",
          }),
        refresh: () => ed.createElement(RefreshIcon, null),
        scan: () => ed.createElement(ScanIcon, null),
      };
      function InstructionMobileDetail({ connectWallet: e, wallet: l }) {
        let { i18n: c } = (0, ed.useContext)(n2);
        return ed.createElement(
          nZ,
          {
            alignItems: "center",
            display: "flex",
            flexDirection: "column",
            height: "full",
            width: "full",
          },
          ed.createElement(
            nZ,
            {
              display: "flex",
              flexDirection: "column",
              gap: "28",
              height: "full",
              justifyContent: "center",
              paddingY: "32",
              style: { maxWidth: 320 },
            },
            l?.qrCode?.instructions?.steps.map((e, d) =>
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "row",
                  gap: "16",
                  key: d,
                },
                ed.createElement(
                  nZ,
                  {
                    borderRadius: "10",
                    height: "48",
                    minWidth: "48",
                    overflow: "hidden",
                    position: "relative",
                    width: "48",
                  },
                  rG[e.step]?.(l)
                ),
                ed.createElement(
                  nZ,
                  { display: "flex", flexDirection: "column", gap: "4" },
                  ed.createElement(
                    rN,
                    { color: "modalText", size: "14", weight: "bold" },
                    c.t(e.title, void 0, { rawKeyIfTranslationMissing: !0 })
                  ),
                  ed.createElement(
                    rN,
                    {
                      color: "modalTextSecondary",
                      size: "14",
                      weight: "medium",
                    },
                    c.t(e.description, void 0, {
                      rawKeyIfTranslationMissing: !0,
                    })
                  )
                )
              )
            )
          ),
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              display: "flex",
              flexDirection: "column",
              gap: "12",
              justifyContent: "center",
              marginBottom: "16",
            },
            ed.createElement(ActionButton, {
              label: c.t("get_instructions.mobile.connect.label"),
              onClick: () => e(l),
            }),
            ed.createElement(
              nZ,
              {
                as: "a",
                className: touchableStyles({ active: "shrink", hover: "grow" }),
                display: "block",
                href: l?.qrCode?.instructions?.learnMoreUrl,
                paddingX: "12",
                paddingY: "4",
                rel: "noreferrer",
                style: { willChange: "transform" },
                target: "_blank",
                transition: "default",
              },
              ed.createElement(
                rN,
                { color: "accentColor", size: "14", weight: "bold" },
                c.t("get_instructions.mobile.learn_more.label")
              )
            )
          )
        );
      }
      function InstructionExtensionDetail({ wallet: e }) {
        let { i18n: l } = (0, ed.useContext)(n2);
        return ed.createElement(
          nZ,
          {
            alignItems: "center",
            display: "flex",
            flexDirection: "column",
            height: "full",
            width: "full",
          },
          ed.createElement(
            nZ,
            {
              display: "flex",
              flexDirection: "column",
              gap: "28",
              height: "full",
              justifyContent: "center",
              paddingY: "32",
              style: { maxWidth: 320 },
            },
            e?.extension?.instructions?.steps.map((c, d) =>
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "row",
                  gap: "16",
                  key: d,
                },
                ed.createElement(
                  nZ,
                  {
                    borderRadius: "10",
                    height: "48",
                    minWidth: "48",
                    overflow: "hidden",
                    position: "relative",
                    width: "48",
                  },
                  rG[c.step]?.(e)
                ),
                ed.createElement(
                  nZ,
                  { display: "flex", flexDirection: "column", gap: "4" },
                  ed.createElement(
                    rN,
                    { color: "modalText", size: "14", weight: "bold" },
                    l.t(c.title, void 0, { rawKeyIfTranslationMissing: !0 })
                  ),
                  ed.createElement(
                    rN,
                    {
                      color: "modalTextSecondary",
                      size: "14",
                      weight: "medium",
                    },
                    l.t(c.description, void 0, {
                      rawKeyIfTranslationMissing: !0,
                    })
                  )
                )
              )
            )
          ),
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              display: "flex",
              flexDirection: "column",
              gap: "12",
              justifyContent: "center",
              marginBottom: "16",
            },
            ed.createElement(ActionButton, {
              label: l.t("get_instructions.extension.refresh.label"),
              onClick: window.location.reload.bind(window.location),
            }),
            ed.createElement(
              nZ,
              {
                as: "a",
                className: touchableStyles({ active: "shrink", hover: "grow" }),
                display: "block",
                href: e?.extension?.instructions?.learnMoreUrl,
                paddingX: "12",
                paddingY: "4",
                rel: "noreferrer",
                style: { willChange: "transform" },
                target: "_blank",
                transition: "default",
              },
              ed.createElement(
                rN,
                { color: "accentColor", size: "14", weight: "bold" },
                l.t("get_instructions.extension.learn_more.label")
              )
            )
          )
        );
      }
      function InstructionDesktopDetail({ connectWallet: e, wallet: l }) {
        let { i18n: c } = (0, ed.useContext)(n2);
        return ed.createElement(
          nZ,
          {
            alignItems: "center",
            display: "flex",
            flexDirection: "column",
            height: "full",
            width: "full",
          },
          ed.createElement(
            nZ,
            {
              display: "flex",
              flexDirection: "column",
              gap: "28",
              height: "full",
              justifyContent: "center",
              paddingY: "32",
              style: { maxWidth: 320 },
            },
            l?.desktop?.instructions?.steps.map((e, d) =>
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "row",
                  gap: "16",
                  key: d,
                },
                ed.createElement(
                  nZ,
                  {
                    borderRadius: "10",
                    height: "48",
                    minWidth: "48",
                    overflow: "hidden",
                    position: "relative",
                    width: "48",
                  },
                  rG[e.step]?.(l)
                ),
                ed.createElement(
                  nZ,
                  { display: "flex", flexDirection: "column", gap: "4" },
                  ed.createElement(
                    rN,
                    { color: "modalText", size: "14", weight: "bold" },
                    c.t(e.title, void 0, { rawKeyIfTranslationMissing: !0 })
                  ),
                  ed.createElement(
                    rN,
                    {
                      color: "modalTextSecondary",
                      size: "14",
                      weight: "medium",
                    },
                    c.t(e.description, void 0, {
                      rawKeyIfTranslationMissing: !0,
                    })
                  )
                )
              )
            )
          ),
          ed.createElement(
            nZ,
            {
              alignItems: "center",
              display: "flex",
              flexDirection: "column",
              gap: "12",
              justifyContent: "center",
              marginBottom: "16",
            },
            ed.createElement(ActionButton, {
              label: c.t("get_instructions.desktop.connect.label"),
              onClick: () => e(l),
            }),
            ed.createElement(
              nZ,
              {
                as: "a",
                className: touchableStyles({ active: "shrink", hover: "grow" }),
                display: "block",
                href: l?.desktop?.instructions?.learnMoreUrl,
                paddingX: "12",
                paddingY: "4",
                rel: "noreferrer",
                style: { willChange: "transform" },
                target: "_blank",
                transition: "default",
              },
              ed.createElement(
                rN,
                { color: "accentColor", size: "14", weight: "bold" },
                c.t("get_instructions.desktop.learn_more.label")
              )
            )
          )
        );
      }
      function DesktopOptions({ onClose: e }) {
        let l;
        let [c, d] = (0, ed.useState)(),
          [m, g] = (0, ed.useState)(),
          [y, b] = (0, ed.useState)(),
          C = !!m?.qrCode && y,
          [P, I] = (0, ed.useState)(!1),
          B = (0, ed.useContext)(rj),
          N = B === rI.COMPACT,
          { disclaimer: F } = (0, ed.useContext)(rP),
          { i18n: V } = (0, ed.useContext)(n2),
          G = isSafari(),
          Q = (0, ed.useRef)(!1),
          { connector: $ } = (0, ed.useContext)(rT),
          Z = !$,
          Y = useWalletConnectors(Z)
            .filter((e) => e.ready || !!e.extensionDownloadUrl)
            .sort((e, l) => e.groupIndex - l.groupIndex),
          et = useWalletConnectors(),
          en = (function (e, l) {
            let c = {};
            for (let d of e) {
              let e = l(d);
              e && (c[e] || (c[e] = []), c[e].push(d));
            }
            return c;
          })(Y, (e) => e.groupName),
          er = [
            "Recommended",
            "Other",
            "Popular",
            "More",
            "Others",
            "Installed",
          ];
        (0, ed.useEffect)(() => {
          $ &&
            !Q.current &&
            (changeWalletStep("CONNECT"), selectWallet($), (Q.current = !0));
        }, [$]);
        let connectToWallet = (e) => {
            I(!1),
              e.ready &&
                e?.connect?.()?.catch(() => {
                  I(!0);
                });
          },
          onDesktopUri = async (e) => {
            let l = Y.find((l) => e.id === l.id);
            l?.getDesktopUri &&
              setTimeout(async () => {
                let e = await l?.getDesktopUri?.();
                e && window.open(e, G ? "_blank" : "_self");
              }, 0);
          },
          onQrCode = async (e) => {
            let l = Y.find((l) => e.id === l.id),
              c = await l?.getQrCodeUri?.();
            b(c),
              setTimeout(
                () => {
                  g(l), changeWalletStep("CONNECT");
                },
                c ? 0 : 50
              );
          },
          selectWallet = async (e) => {
            var l;
            (l = e.id),
              localStorage.setItem(rH, l),
              e.ready && (onQrCode(e), onDesktopUri(e)),
              connectToWallet(e),
              d(e.id),
              e.ready ||
                (g(e),
                changeWalletStep(
                  e?.extensionDownloadUrl ? "DOWNLOAD_OPTIONS" : "CONNECT"
                ));
          },
          clearSelectedWallet = () => {
            d(void 0), g(void 0), b(void 0);
          },
          changeWalletStep = (e, l = !1) => {
            l && "GET" === e && "GET" === ei
              ? clearSelectedWallet()
              : l || "GET" !== e
              ? l || "CONNECT" !== e || eo("CONNECT")
              : eo("GET"),
              es(e);
          },
          [ei, eo] = (0, ed.useState)("NONE"),
          [ea, es] = (0, ed.useState)("NONE"),
          el = null,
          ec = null,
          eu = null;
        (0, ed.useEffect)(() => {
          I(!1);
        }, [ea, m]);
        let ep = !!m?.extensionDownloadUrl,
          eh = !!(ep && m?.mobileDownloadUrl);
        switch (ea) {
          case "NONE":
            el = ed.createElement(ConnectModalIntro, {
              getWallet: () => changeWalletStep("GET"),
            });
            break;
          case "LEARN_COMPACT":
            (el = ed.createElement(ConnectModalIntro, {
              compactModeEnabled: N,
              getWallet: () => changeWalletStep("GET"),
            })),
              (ec = V.t("intro.title")),
              (eu = "NONE");
            break;
          case "GET":
            (el = ed.createElement(GetDetail, {
              getWalletDownload: (e) => {
                let l = et.find((l) => e === l.id),
                  c = l?.downloadUrls?.qrCode,
                  d = !!l?.desktopDownloadUrl,
                  m = !!l?.extensionDownloadUrl;
                g(l),
                  c && (m || d)
                    ? changeWalletStep("DOWNLOAD_OPTIONS")
                    : c
                    ? changeWalletStep("DOWNLOAD")
                    : d
                    ? changeWalletStep("INSTRUCTIONS_DESKTOP")
                    : changeWalletStep("INSTRUCTIONS_EXTENSION");
              },
              compactModeEnabled: N,
            })),
              (ec = V.t("get.title")),
              (eu = N ? "LEARN_COMPACT" : "NONE");
            break;
          case "CONNECT":
            (el =
              m &&
              ed.createElement(ConnectDetail, {
                changeWalletStep,
                compactModeEnabled: N,
                connectionError: P,
                onClose: e,
                qrCodeUri: y,
                reconnect: connectToWallet,
                wallet: m,
              })),
              (ec =
                C &&
                ("WalletConnect" === m.name
                  ? V.t("connect_scan.fallback_title")
                  : V.t("connect_scan.title", { wallet: m.name }))),
              (eu = N ? ($ ? null : "NONE") : null),
              (l = N ? ($ ? () => {} : clearSelectedWallet) : () => {});
            break;
          case "DOWNLOAD_OPTIONS":
            (el =
              m &&
              ed.createElement(DownloadOptionsDetail, {
                changeWalletStep,
                wallet: m,
              })),
              (ec = m && V.t("get_options.short_title", { wallet: m.name })),
              (eu = $ ? "CONNECT" : N ? "NONE" : ei);
            break;
          case "DOWNLOAD":
            (el =
              m &&
              ed.createElement(DownloadDetail, {
                changeWalletStep,
                wallet: m,
              })),
              (ec = m && V.t("get_mobile.title", { wallet: m.name })),
              (eu = eh ? "DOWNLOAD_OPTIONS" : ei);
            break;
          case "INSTRUCTIONS_MOBILE":
            (el =
              m &&
              ed.createElement(InstructionMobileDetail, {
                connectWallet: selectWallet,
                wallet: m,
              })),
              (ec =
                m &&
                V.t("get_options.title", {
                  wallet: (N && m.shortName) || m.name,
                })),
              (eu = "DOWNLOAD");
            break;
          case "INSTRUCTIONS_EXTENSION":
            (el =
              m && ed.createElement(InstructionExtensionDetail, { wallet: m })),
              (ec =
                m &&
                V.t("get_options.title", {
                  wallet: (N && m.shortName) || m.name,
                })),
              (eu = "DOWNLOAD_OPTIONS");
            break;
          case "INSTRUCTIONS_DESKTOP":
            (el =
              m &&
              ed.createElement(InstructionDesktopDetail, {
                connectWallet: selectWallet,
                wallet: m,
              })),
              (ec =
                m &&
                V.t("get_options.title", {
                  wallet: (N && m.shortName) || m.name,
                })),
              (eu = "DOWNLOAD_OPTIONS");
        }
        return ed.createElement(
          nZ,
          {
            display: "flex",
            flexDirection: "row",
            style: { maxHeight: N ? 468 : 504 },
          },
          (!N || "NONE" === ea) &&
            ed.createElement(
              nZ,
              {
                className: N ? "_1vwt0cg4" : "_1vwt0cg3",
                display: "flex",
                flexDirection: "column",
                marginTop: "16",
              },
              ed.createElement(
                nZ,
                { display: "flex", justifyContent: "space-between" },
                N &&
                  F &&
                  ed.createElement(
                    nZ,
                    { marginLeft: "16", width: "28" },
                    ed.createElement(InfoButton, {
                      onClick: () => changeWalletStep("LEARN_COMPACT"),
                    })
                  ),
                N &&
                  !F &&
                  ed.createElement(nZ, { marginLeft: "16", width: "28" }),
                ed.createElement(
                  nZ,
                  {
                    marginLeft: N ? "0" : "6",
                    paddingBottom: "8",
                    paddingTop: "2",
                    paddingX: "18",
                  },
                  ed.createElement(
                    rN,
                    {
                      as: "h1",
                      color: "modalText",
                      id: "rk_connect_title",
                      size: "18",
                      weight: "heavy",
                      testId: "connect-header-label",
                    },
                    V.t("connect.title")
                  )
                ),
                N &&
                  ed.createElement(
                    nZ,
                    { marginRight: "16" },
                    ed.createElement(CloseButton, { onClose: e })
                  )
              ),
              ed.createElement(
                nZ,
                {
                  className: "_1vwt0cg2 ju367v7a ju367v7v",
                  paddingBottom: "18",
                },
                Object.entries(en).map(
                  ([e, l], d) =>
                    l.length > 0 &&
                    ed.createElement(
                      ed.Fragment,
                      { key: d },
                      e
                        ? ed.createElement(
                            nZ,
                            {
                              marginBottom: "8",
                              marginTop: "16",
                              marginX: "6",
                            },
                            ed.createElement(
                              rN,
                              {
                                color:
                                  "Installed" === e
                                    ? "accentColor"
                                    : "modalTextSecondary",
                                size: "14",
                                weight: "bold",
                              },
                              er.includes(e)
                                ? V.t(`connector_group.${e.toLowerCase()}`)
                                : e
                            )
                          )
                        : null,
                      ed.createElement(
                        nZ,
                        { display: "flex", flexDirection: "column", gap: "4" },
                        l.map((e) =>
                          ed.createElement(ModalSelection, {
                            currentlySelected: e.id === c,
                            iconBackground: e.iconBackground,
                            iconUrl: e.iconUrl,
                            key: e.id,
                            name: e.name,
                            onClick: () => selectWallet(e),
                            ready: e.ready,
                            recent: e.recent,
                            testId: `wallet-option-${e.id}`,
                            isRainbowKitConnector: e.isRainbowKitConnector,
                          })
                        )
                      )
                    )
                )
              ),
              N &&
                ed.createElement(
                  ed.Fragment,
                  null,
                  ed.createElement(nZ, {
                    background: "generalBorder",
                    height: "1",
                    marginTop: "-1",
                  }),
                  F
                    ? ed.createElement(
                        nZ,
                        { paddingX: "24", paddingY: "16", textAlign: "center" },
                        ed.createElement(F, {
                          Link: DisclaimerLink,
                          Text: DisclaimerText,
                        })
                      )
                    : ed.createElement(
                        nZ,
                        {
                          alignItems: "center",
                          display: "flex",
                          justifyContent: "space-between",
                          paddingX: "24",
                          paddingY: "16",
                        },
                        ed.createElement(
                          nZ,
                          { paddingY: "4" },
                          ed.createElement(
                            rN,
                            {
                              color: "modalTextSecondary",
                              size: "14",
                              weight: "medium",
                            },
                            V.t("connect.new_to_ethereum.description")
                          )
                        ),
                        ed.createElement(
                          nZ,
                          {
                            alignItems: "center",
                            display: "flex",
                            flexDirection: "row",
                            gap: "4",
                            justifyContent: "center",
                          },
                          ed.createElement(
                            nZ,
                            {
                              className: touchableStyles({
                                active: "shrink",
                                hover: "grow",
                              }),
                              cursor: "pointer",
                              onClick: () => changeWalletStep("LEARN_COMPACT"),
                              paddingY: "4",
                              style: { willChange: "transform" },
                              transition: "default",
                            },
                            ed.createElement(
                              rN,
                              {
                                color: "accentColor",
                                size: "14",
                                weight: "bold",
                              },
                              V.t("connect.new_to_ethereum.learn_more.label")
                            )
                          )
                        )
                      )
                )
            ),
          (!N || "NONE" !== ea) &&
            ed.createElement(
              ed.Fragment,
              null,
              !N &&
                ed.createElement(nZ, {
                  background: "generalBorder",
                  minWidth: "1",
                  width: "1",
                }),
              ed.createElement(
                nZ,
                {
                  display: "flex",
                  flexDirection: "column",
                  margin: "16",
                  style: { flexGrow: 1 },
                },
                ed.createElement(
                  nZ,
                  {
                    alignItems: "center",
                    display: "flex",
                    justifyContent: "space-between",
                    marginBottom: "12",
                  },
                  ed.createElement(
                    nZ,
                    { width: "28" },
                    eu &&
                      ed.createElement(
                        nZ,
                        {
                          as: "button",
                          className: touchableStyles({
                            active: "shrinkSm",
                            hover: "growLg",
                          }),
                          color: "accentColor",
                          onClick: () => {
                            eu && changeWalletStep(eu, !0), l?.();
                          },
                          paddingX: "8",
                          paddingY: "4",
                          style: {
                            boxSizing: "content-box",
                            height: 17,
                            willChange: "transform",
                          },
                          transition: "default",
                          type: "button",
                        },
                        ed.createElement(BackIcon, null)
                      )
                  ),
                  ed.createElement(
                    nZ,
                    {
                      display: "flex",
                      justifyContent: "center",
                      style: { flexGrow: 1 },
                    },
                    ec &&
                      ed.createElement(
                        rN,
                        {
                          color: "modalText",
                          size: "18",
                          textAlign: "center",
                          weight: "heavy",
                        },
                        ec
                      )
                  ),
                  ed.createElement(CloseButton, { onClose: e })
                ),
                ed.createElement(
                  nZ,
                  {
                    display: "flex",
                    flexDirection: "column",
                    style: { minHeight: N ? 396 : 432 },
                  },
                  ed.createElement(
                    nZ,
                    {
                      alignItems: "center",
                      display: "flex",
                      flexDirection: "column",
                      gap: "6",
                      height: "full",
                      justifyContent: "center",
                      marginX: "8",
                    },
                    el
                  )
                )
              )
            )
        );
      }
      var LoadingSpinner = ({ wallet: e }) =>
        ed.createElement(
          "svg",
          {
            className: "_1am14413",
            viewBox: "0 0 86 86",
            width: "86",
            height: "86",
          },
          ed.createElement("title", null, "Loading"),
          ed.createElement("rect", {
            x: "3",
            y: "3",
            width: 80,
            height: 80,
            rx: 20,
            ry: 20,
            strokeDasharray: "53.333333333333336 " + 320 / 3,
            strokeDashoffset: 160,
            className: "_1am14412",
            style: { stroke: e?.iconAccent || "#0D3887" },
          })
        );
      function WalletButton({ onClose: e, wallet: l, connecting: c }) {
        let {
            connect: d,
            iconBackground: m,
            iconUrl: g,
            id: y,
            name: b,
            getMobileUri: C,
            ready: P,
            shortName: I,
            showWalletConnectModal: B,
          } = l,
          N = useCoolMode(g),
          F = (0, ed.useRef)(!1),
          { i18n: V } = (0, ed.useContext)(n2),
          G = (0, ed.useCallback)(async () => {
            let onMobileUri = async () => {
              let e = await C?.();
              if (e) {
                if (
                  (e &&
                    (function ({ mobileUri: e, name: l }) {
                      localStorage.setItem(
                        rF,
                        JSON.stringify({ href: e.split("?")[0], name: l })
                      );
                    })({ mobileUri: e, name: b }),
                  e.startsWith("http"))
                ) {
                  let l = document.createElement("a");
                  (l.href = e),
                    (l.target = "_blank"),
                    (l.rel = "noreferrer noopener"),
                    l.click();
                } else window.location.href = e;
              }
            };
            if (("walletConnect" !== y && onMobileUri(), B)) {
              B(), e?.();
              return;
            }
            d?.();
          }, [d, C, B, e, b, y]);
        return (
          (0, ed.useEffect)(() => {
            c && !F.current && (G(), (F.current = !0));
          }, [c, G]),
          ed.createElement(
            nZ,
            {
              as: "button",
              color: P ? "modalText" : "modalTextSecondary",
              disabled: !P,
              fontFamily: "body",
              key: y,
              onClick: G,
              ref: N,
              style: { overflow: "visible", textAlign: "center" },
              testId: `wallet-option-${y}`,
              type: "button",
              width: "full",
            },
            ed.createElement(
              nZ,
              {
                alignItems: "center",
                display: "flex",
                flexDirection: "column",
                justifyContent: "center",
              },
              ed.createElement(
                nZ,
                {
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  paddingBottom: "8",
                  paddingTop: "10",
                  position: "relative",
                },
                c ? ed.createElement(LoadingSpinner, { wallet: l }) : null,
                ed.createElement(AsyncImage, {
                  background: m,
                  borderRadius: "13",
                  boxShadow: "walletLogo",
                  height: "60",
                  src: g,
                  width: "60",
                })
              ),
              c
                ? null
                : ed.createElement(
                    nZ,
                    {
                      display: "flex",
                      flexDirection: "column",
                      textAlign: "center",
                    },
                    ed.createElement(
                      rN,
                      {
                        as: "h2",
                        color: l.ready ? "modalText" : "modalTextSecondary",
                        size: "13",
                        weight: "medium",
                      },
                      ed.createElement(
                        nZ,
                        { as: "span", position: "relative" },
                        I ?? b,
                        !l.ready && " (unsupported)"
                      )
                    ),
                    l.recent &&
                      ed.createElement(
                        rN,
                        { color: "accentColor", size: "12", weight: "medium" },
                        V.t("connect.recent")
                      )
                  )
            )
          )
        );
      }
      function MobileOptions({ onClose: e }) {
        let l = useWalletConnectors().filter((e) => e.isRainbowKitConnector),
          { disclaimer: c, learnMoreUrl: d } = (0, ed.useContext)(rP),
          m = null,
          g = null,
          y = !1,
          b = null,
          [C, P] = (0, ed.useState)("CONNECT"),
          { i18n: I } = (0, ed.useContext)(n2),
          B = isIOS();
        switch (C) {
          case "CONNECT":
            (m = I.t("connect.title")),
              (y = !0),
              (g = ed.createElement(
                nZ,
                null,
                ed.createElement(
                  nZ,
                  {
                    background: "profileForeground",
                    className: "_1am14410",
                    display: "flex",
                    paddingBottom: "20",
                    paddingTop: "6",
                  },
                  ed.createElement(
                    nZ,
                    { display: "flex", style: { margin: "0 auto" } },
                    l
                      .filter((e) => e.ready)
                      .map((l) =>
                        ed.createElement(
                          nZ,
                          { key: l.id, paddingX: "20" },
                          ed.createElement(
                            nZ,
                            { width: "60" },
                            ed.createElement(WalletButton, {
                              onClose: e,
                              wallet: l,
                            })
                          )
                        )
                      )
                  )
                ),
                ed.createElement(nZ, {
                  background: "generalBorder",
                  height: "1",
                  marginBottom: "32",
                  marginTop: "-1",
                }),
                ed.createElement(
                  nZ,
                  {
                    alignItems: "center",
                    display: "flex",
                    flexDirection: "column",
                    gap: "32",
                    paddingX: "32",
                    style: { textAlign: "center" },
                  },
                  ed.createElement(
                    nZ,
                    {
                      display: "flex",
                      flexDirection: "column",
                      gap: "8",
                      textAlign: "center",
                    },
                    ed.createElement(
                      rN,
                      { color: "modalText", size: "16", weight: "bold" },
                      I.t("intro.title")
                    ),
                    ed.createElement(
                      rN,
                      { color: "modalTextSecondary", size: "16" },
                      I.t("intro.description")
                    )
                  )
                ),
                ed.createElement(
                  nZ,
                  { paddingTop: "32", paddingX: "20" },
                  ed.createElement(
                    nZ,
                    { display: "flex", gap: "14", justifyContent: "center" },
                    ed.createElement(ActionButton, {
                      label: I.t("intro.get.label"),
                      onClick: () => P("GET"),
                      size: "large",
                      type: "secondary",
                    }),
                    ed.createElement(ActionButton, {
                      href: d,
                      label: I.t("intro.learn_more.label"),
                      size: "large",
                      type: "secondary",
                    })
                  )
                ),
                c &&
                  ed.createElement(
                    nZ,
                    { marginTop: "28", marginX: "32", textAlign: "center" },
                    ed.createElement(c, {
                      Link: DisclaimerLink,
                      Text: DisclaimerText,
                    })
                  )
              ));
            break;
          case "GET": {
            (m = I.t("get.title")), (b = "CONNECT");
            let e = l
              ?.filter(
                (e) =>
                  e.downloadUrls?.ios ||
                  e.downloadUrls?.android ||
                  e.downloadUrls?.mobile
              )
              ?.splice(0, 3);
            g = ed.createElement(
              nZ,
              null,
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "column",
                  height: "full",
                  marginBottom: "36",
                  marginTop: "5",
                  paddingTop: "12",
                  width: "full",
                },
                e.map((l, c) => {
                  let {
                    downloadUrls: d,
                    iconBackground: m,
                    iconUrl: g,
                    name: y,
                  } = l;
                  return d?.ios || d?.android || d?.mobile
                    ? ed.createElement(
                        nZ,
                        {
                          display: "flex",
                          gap: "16",
                          key: l.id,
                          paddingX: "20",
                          width: "full",
                        },
                        ed.createElement(
                          nZ,
                          { style: { minHeight: 48, minWidth: 48 } },
                          ed.createElement(AsyncImage, {
                            background: m,
                            borderColor: "generalBorder",
                            borderRadius: "10",
                            height: "48",
                            src: g,
                            width: "48",
                          })
                        ),
                        ed.createElement(
                          nZ,
                          {
                            display: "flex",
                            flexDirection: "column",
                            width: "full",
                          },
                          ed.createElement(
                            nZ,
                            {
                              alignItems: "center",
                              display: "flex",
                              height: "48",
                            },
                            ed.createElement(
                              nZ,
                              { width: "full" },
                              ed.createElement(
                                rN,
                                {
                                  color: "modalText",
                                  size: "18",
                                  weight: "bold",
                                },
                                y
                              )
                            ),
                            ed.createElement(ActionButton, {
                              href: (B ? d?.ios : d?.android) || d?.mobile,
                              label: I.t("get.action.label"),
                              size: "small",
                              type: "secondary",
                            })
                          ),
                          c < e.length - 1 &&
                            ed.createElement(nZ, {
                              background: "generalBorderDim",
                              height: "1",
                              marginY: "10",
                              width: "full",
                            })
                        )
                      )
                    : null;
                })
              ),
              ed.createElement(nZ, { style: { marginBottom: "42px" } }),
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  flexDirection: "column",
                  gap: "36",
                  paddingX: "36",
                  style: { textAlign: "center" },
                },
                ed.createElement(
                  nZ,
                  {
                    display: "flex",
                    flexDirection: "column",
                    gap: "12",
                    textAlign: "center",
                  },
                  ed.createElement(
                    rN,
                    { color: "modalText", size: "16", weight: "bold" },
                    I.t("get.looking_for.title")
                  ),
                  ed.createElement(
                    rN,
                    { color: "modalTextSecondary", size: "16" },
                    I.t("get.looking_for.mobile.description")
                  )
                )
              )
            );
          }
        }
        return ed.createElement(
          nZ,
          { display: "flex", flexDirection: "column", paddingBottom: "36" },
          ed.createElement(
            nZ,
            {
              background: y ? "profileForeground" : "modalBackground",
              display: "flex",
              flexDirection: "column",
              paddingBottom: "4",
              paddingTop: "14",
            },
            ed.createElement(
              nZ,
              {
                display: "flex",
                justifyContent: "center",
                paddingBottom: "6",
                paddingX: "20",
                position: "relative",
              },
              b &&
                ed.createElement(
                  nZ,
                  {
                    display: "flex",
                    position: "absolute",
                    style: { left: 0, marginBottom: -20, marginTop: -20 },
                  },
                  ed.createElement(
                    nZ,
                    {
                      alignItems: "center",
                      as: "button",
                      className: touchableStyles({
                        active: "shrinkSm",
                        hover: "growLg",
                      }),
                      color: "accentColor",
                      display: "flex",
                      marginLeft: "4",
                      marginTop: "20",
                      onClick: () => P(b),
                      padding: "16",
                      style: { height: 17, willChange: "transform" },
                      transition: "default",
                      type: "button",
                    },
                    ed.createElement(BackIcon, null)
                  )
                ),
              ed.createElement(
                nZ,
                { marginTop: "4", textAlign: "center", width: "full" },
                ed.createElement(
                  rN,
                  {
                    as: "h1",
                    color: "modalText",
                    id: "rk_connect_title",
                    size: "20",
                    weight: "bold",
                  },
                  m
                )
              ),
              ed.createElement(
                nZ,
                {
                  alignItems: "center",
                  display: "flex",
                  height: "32",
                  paddingRight: "14",
                  position: "absolute",
                  right: "0",
                },
                ed.createElement(
                  nZ,
                  { style: { marginBottom: -20, marginTop: -20 } },
                  ed.createElement(CloseButton, { onClose: e })
                )
              )
            )
          ),
          ed.createElement(nZ, { display: "flex", flexDirection: "column" }, g)
        );
      }
      var MobileStatus = ({ onClose: e }) => {
        let { connector: l } = (0, ed.useContext)(rT),
          { i18n: c } = (0, ed.useContext)(n2),
          d = l?.name || "";
        return ed.createElement(
          nZ,
          null,
          ed.createElement(
            nZ,
            {
              display: "flex",
              paddingBottom: "32",
              justifyContent: "center",
              alignItems: "center",
              background: "profileForeground",
              flexDirection: "column",
            },
            ed.createElement(
              nZ,
              {
                width: "full",
                display: "flex",
                justifyContent: "flex-end",
                marginTop: "18",
                marginRight: "24",
              },
              ed.createElement(CloseButton, { onClose: e })
            ),
            ed.createElement(
              nZ,
              { width: "60" },
              ed.createElement(WalletButton, {
                onClose: e,
                wallet: l,
                connecting: !0,
              })
            ),
            ed.createElement(
              nZ,
              { marginTop: "20" },
              ed.createElement(
                rN,
                {
                  textAlign: "center",
                  color: "modalText",
                  size: "18",
                  weight: "semibold",
                },
                c.t("connect.status.connect_mobile", { wallet: d })
              )
            ),
            ed.createElement(
              nZ,
              { maxWidth: "full", marginTop: "8" },
              ed.createElement(
                rN,
                {
                  textAlign: "center",
                  color: "modalText",
                  size: "16",
                  weight: "medium",
                },
                c.t("connect.status.confirm_mobile", { wallet: d })
              )
            )
          )
        );
      };
      function ConnectOptions({ onClose: e }) {
        let { connector: l } = (0, ed.useContext)(rT);
        return isMobile()
          ? l
            ? ed.createElement(MobileStatus, { onClose: e })
            : ed.createElement(MobileOptions, { onClose: e })
          : ed.createElement(DesktopOptions, { onClose: e });
      }
      function ConnectModal({ onClose: e, open: l }) {
        let c = "rk_connect_title",
          d = useConnectionStatus(),
          { disconnect: m } = (0, t9.q)(),
          { isConnecting: g } = (0, ep.m)(),
          y = ed.useCallback(() => {
            e(), m();
          }, [e, m]),
          b = ed.useCallback(() => {
            g && m(), e();
          }, [e, m, g]);
        return "disconnected" === d
          ? ed.createElement(
              Dialog,
              { onClose: b, open: l, titleId: c },
              ed.createElement(
                DialogContent,
                { bottomSheetOnMobile: !0, padding: "0", wide: !0 },
                ed.createElement(ConnectOptions, { onClose: b })
              )
            )
          : "unauthenticated" === d
          ? ed.createElement(
              Dialog,
              { onClose: y, open: l, titleId: c },
              ed.createElement(
                DialogContent,
                { bottomSheetOnMobile: !0, padding: "0" },
                ed.createElement(SignIn, { onClose: y, onCloseModal: e })
              )
            )
          : null;
      }
      function useModalStateValue() {
        let [e, l] = (0, ed.useState)(!1);
        return {
          closeModal: (0, ed.useCallback)(() => l(!1), []),
          isModalOpen: e,
          openModal: (0, ed.useCallback)(() => l(!0), []),
        };
      }
      var rQ = (0, ed.createContext)({
        accountModalOpen: !1,
        chainModalOpen: !1,
        connectModalOpen: !1,
        isWalletConnectModalOpen: !1,
        setIsWalletConnectModalOpen: () => {},
      });
      function ModalProvider({ children: e }) {
        let {
            closeModal: l,
            isModalOpen: c,
            openModal: d,
          } = useModalStateValue(),
          {
            closeModal: m,
            isModalOpen: g,
            openModal: y,
          } = useModalStateValue(),
          {
            closeModal: b,
            isModalOpen: C,
            openModal: P,
          } = useModalStateValue(),
          [I, B] = (0, ed.useState)(!1),
          N = useConnectionStatus(),
          { chainId: F } = (0, ep.m)(),
          { chains: V } = (0, ef.Z)(),
          G = V.some((e) => e.id === F),
          Q = (0, ed.useCallback)(
            ({ keepConnectModalOpen: e = !1 } = {}) => {
              e || l(), m(), b();
            },
            [l, m, b]
          ),
          $ = "unauthenticated" === useAuthenticationStatus();
        return (
          useAccountEffect_useAccountEffect({
            onConnect: () => Q({ keepConnectModalOpen: $ }),
            onDisconnect: () => Q(),
          }),
          (0, ed.useEffect)(() => {
            $ && Q();
          }, [$, Q]),
          ed.createElement(
            rQ.Provider,
            {
              value: (0, ed.useMemo)(
                () => ({
                  accountModalOpen: g,
                  chainModalOpen: C,
                  connectModalOpen: c,
                  isWalletConnectModalOpen: I,
                  openAccountModal: G && "connected" === N ? y : void 0,
                  openChainModal: "connected" === N ? P : void 0,
                  openConnectModal:
                    "disconnected" === N || "unauthenticated" === N
                      ? d
                      : void 0,
                  setIsWalletConnectModalOpen: B,
                }),
                [N, g, C, c, y, P, d, G, I]
              ),
            },
            e,
            ed.createElement(ConnectModal, { onClose: l, open: c }),
            ed.createElement(AccountModal, { onClose: m, open: g }),
            ed.createElement(ChainModal, { onClose: b, open: C })
          )
        );
      }
      function useWalletConnectOpenState() {
        let { isWalletConnectModalOpen: e, setIsWalletConnectModalOpen: l } =
          (0, ed.useContext)(rQ);
        return { isWalletConnectModalOpen: e, setIsWalletConnectModalOpen: l };
      }
      function useConnectModal() {
        let { connectModalOpen: e, openConnectModal: l } = (0, ed.useContext)(
            rQ
          ),
          { isWalletConnectModalOpen: c } = useWalletConnectOpenState();
        return { connectModalOpen: e || c, openConnectModal: l };
      }
      var noop = () => {};
      function ConnectButtonRenderer({ children: e }) {
        let l = (function () {
            let [e, l] = (0, ed.useState)(!1);
            return (
              (0, ed.useEffect)(
                () => (
                  l(!0),
                  () => {
                    l(!1);
                  }
                ),
                []
              ),
              (0, ed.useCallback)(() => e, [e])
            );
          })(),
          { address: c } = (0, ep.m)(),
          { chainId: d } = (0, ep.m)(),
          { chains: m } = (0, ef.Z)(),
          g = m.some((e) => e.id === d),
          y = useRainbowKitChainsById(),
          b = useAuthenticationStatus() ?? void 0,
          C = d ? y[d] : void 0,
          P = C?.name ?? void 0,
          I = C?.iconUrl ?? void 0,
          B = C?.iconBackground ?? void 0,
          N = useAsyncImage(I),
          F = (0, ed.useContext)(rO),
          V =
            useRecentTransactions().some(({ status: e }) => "pending" === e) &&
            F,
          { showBalance: G } = useShowBalance(),
          Q =
            "boolean" == typeof G
              ? G
              : !G || nq(G)[isMobile() ? "smallScreen" : "largeScreen"],
          {
            balance: $,
            ensAvatar: Z,
            ensName: Y,
          } = useProfile({ address: c, includeBalance: Q }),
          et = $
            ? `${abbreviateETHBalance(Number.parseFloat($.formatted))} ${
                $.symbol
              }`
            : void 0,
          { openConnectModal: en } = useConnectModal(),
          { openChainModal: er } = (function () {
            let { chainModalOpen: e, openChainModal: l } = (0, ed.useContext)(
              rQ
            );
            return { chainModalOpen: e, openChainModal: l };
          })(),
          { openAccountModal: ei } = (function () {
            let { accountModalOpen: e, openAccountModal: l } = (0,
            ed.useContext)(rQ);
            return { accountModalOpen: e, openAccountModal: l };
          })(),
          {
            accountModalOpen: eo,
            chainModalOpen: ea,
            connectModalOpen: es,
          } = (function () {
            let {
              accountModalOpen: e,
              chainModalOpen: l,
              connectModalOpen: c,
            } = (0, ed.useContext)(rQ);
            return {
              accountModalOpen: e,
              chainModalOpen: l,
              connectModalOpen: c,
            };
          })();
        return ed.createElement(
          ed.Fragment,
          null,
          e({
            account: c
              ? {
                  address: c,
                  balanceDecimals: $?.decimals,
                  balanceFormatted: $?.formatted,
                  balanceSymbol: $?.symbol,
                  displayBalance: et,
                  displayName: Y ? formatENS(Y) : formatAddress(c),
                  ensAvatar: Z ?? void 0,
                  ensName: Y ?? void 0,
                  hasPendingTransactions: V,
                }
              : void 0,
            accountModalOpen: eo,
            authenticationStatus: b,
            chain: d
              ? {
                  hasIcon: !!I,
                  iconBackground: B,
                  iconUrl: N,
                  id: d,
                  name: P,
                  unsupported: !g,
                }
              : void 0,
            chainModalOpen: ea,
            connectModalOpen: es,
            mounted: l(),
            openAccountModal: ei ?? noop,
            openChainModal: er ?? noop,
            openConnectModal: en ?? noop,
          })
        );
      }
      ConnectButtonRenderer.displayName = "ConnectButton.Custom";
      var r$ = {
        accountStatus: "full",
        chainStatus: { largeScreen: "full", smallScreen: "icon" },
        label: "Connect Wallet",
        showBalance: { largeScreen: !0, smallScreen: !1 },
      };
      function ConnectButton({
        accountStatus: e = r$.accountStatus,
        chainStatus: l = r$.chainStatus,
        label: c = r$.label,
        showBalance: d = r$.showBalance,
      }) {
        let m = useRainbowKitChains(),
          g = useConnectionStatus(),
          { setShowBalance: y } = useShowBalance(),
          [b, C] = (0, ed.useState)(!1),
          { i18n: P } = (0, ed.useContext)(n2);
        return (
          (0, ed.useEffect)(() => {
            y(d), b || C(!0);
          }, [d, y]),
          b
            ? ed.createElement(
                ConnectButtonRenderer,
                null,
                ({
                  account: y,
                  chain: b,
                  mounted: C,
                  openAccountModal: I,
                  openChainModal: B,
                  openConnectModal: N,
                }) => {
                  let F = C && "loading" !== g,
                    V = b?.unsupported ?? !1;
                  return ed.createElement(
                    nZ,
                    {
                      display: "flex",
                      gap: "12",
                      ...(!F && {
                        "aria-hidden": !0,
                        style: {
                          opacity: 0,
                          pointerEvents: "none",
                          userSelect: "none",
                        },
                      }),
                    },
                    F && y && "connected" === g
                      ? ed.createElement(
                          ed.Fragment,
                          null,
                          b &&
                            (m.length > 1 || V) &&
                            ed.createElement(
                              nZ,
                              {
                                alignItems: "center",
                                "aria-label": "Chain Selector",
                                as: "button",
                                background: V
                                  ? "connectButtonBackgroundError"
                                  : "connectButtonBackground",
                                borderRadius: "connectButton",
                                boxShadow: "connectButton",
                                className: touchableStyles({
                                  active: "shrink",
                                  hover: "grow",
                                }),
                                color: V
                                  ? "connectButtonTextError"
                                  : "connectButtonText",
                                display: nW(l, (e) =>
                                  "none" === e ? "none" : "flex"
                                ),
                                fontFamily: "body",
                                fontWeight: "bold",
                                gap: "6",
                                key: V ? "unsupported" : "supported",
                                onClick: B,
                                paddingX: "10",
                                paddingY: "8",
                                testId: V
                                  ? "wrong-network-button"
                                  : "chain-button",
                                transition: "default",
                                type: "button",
                              },
                              V
                                ? ed.createElement(
                                    nZ,
                                    {
                                      alignItems: "center",
                                      display: "flex",
                                      height: "24",
                                      paddingX: "4",
                                    },
                                    P.t("connect_wallet.wrong_network.label")
                                  )
                                : ed.createElement(
                                    nZ,
                                    {
                                      alignItems: "center",
                                      display: "flex",
                                      gap: "6",
                                    },
                                    b.hasIcon
                                      ? ed.createElement(
                                          nZ,
                                          {
                                            display: nW(l, (e) =>
                                              "full" === e || "icon" === e
                                                ? "block"
                                                : "none"
                                            ),
                                            height: "24",
                                            width: "24",
                                          },
                                          ed.createElement(AsyncImage, {
                                            alt: b.name ?? "Chain icon",
                                            background: b.iconBackground,
                                            borderRadius: "full",
                                            height: "24",
                                            src: b.iconUrl,
                                            width: "24",
                                          })
                                        )
                                      : null,
                                    ed.createElement(
                                      nZ,
                                      {
                                        display: nW(l, (e) =>
                                          "icon" !== e || b.iconUrl
                                            ? "full" === e || "name" === e
                                              ? "block"
                                              : "none"
                                            : "block"
                                        ),
                                      },
                                      b.name ?? b.id
                                    )
                                  ),
                              ed.createElement(DropdownIcon, null)
                            ),
                          !V &&
                            ed.createElement(
                              nZ,
                              {
                                alignItems: "center",
                                as: "button",
                                background: "connectButtonBackground",
                                borderRadius: "connectButton",
                                boxShadow: "connectButton",
                                className: touchableStyles({
                                  active: "shrink",
                                  hover: "grow",
                                }),
                                color: "connectButtonText",
                                display: "flex",
                                fontFamily: "body",
                                fontWeight: "bold",
                                onClick: I,
                                testId: "account-button",
                                transition: "default",
                                type: "button",
                              },
                              y.displayBalance &&
                                ed.createElement(
                                  nZ,
                                  {
                                    display: nW(d, (e) =>
                                      e ? "block" : "none"
                                    ),
                                    padding: "8",
                                    paddingLeft: "12",
                                  },
                                  y.displayBalance
                                ),
                              ed.createElement(
                                nZ,
                                {
                                  background: nq(d)[
                                    isMobile() ? "smallScreen" : "largeScreen"
                                  ]
                                    ? "connectButtonInnerBackground"
                                    : "connectButtonBackground",
                                  borderColor: "connectButtonBackground",
                                  borderRadius: "connectButton",
                                  borderStyle: "solid",
                                  borderWidth: "2",
                                  color: "connectButtonText",
                                  fontFamily: "body",
                                  fontWeight: "bold",
                                  paddingX: "8",
                                  paddingY: "6",
                                  transition: "default",
                                },
                                ed.createElement(
                                  nZ,
                                  {
                                    alignItems: "center",
                                    display: "flex",
                                    gap: "6",
                                    height: "24",
                                  },
                                  ed.createElement(
                                    nZ,
                                    {
                                      display: nW(e, (e) =>
                                        "full" === e || "avatar" === e
                                          ? "block"
                                          : "none"
                                      ),
                                    },
                                    ed.createElement(Avatar, {
                                      address: y.address,
                                      imageUrl: y.ensAvatar,
                                      loading: y.hasPendingTransactions,
                                      size: 24,
                                    })
                                  ),
                                  ed.createElement(
                                    nZ,
                                    {
                                      alignItems: "center",
                                      display: "flex",
                                      gap: "6",
                                    },
                                    ed.createElement(
                                      nZ,
                                      {
                                        display: nW(e, (e) =>
                                          "full" === e || "address" === e
                                            ? "block"
                                            : "none"
                                        ),
                                      },
                                      y.displayName
                                    ),
                                    ed.createElement(DropdownIcon, null)
                                  )
                                )
                              )
                            )
                        )
                      : ed.createElement(
                          nZ,
                          {
                            as: "button",
                            background: "accentColor",
                            borderRadius: "connectButton",
                            boxShadow: "connectButton",
                            className: touchableStyles({
                              active: "shrink",
                              hover: "grow",
                            }),
                            color: "accentColorForeground",
                            fontFamily: "body",
                            fontWeight: "bold",
                            height: "40",
                            key: "connect",
                            onClick: N,
                            paddingX: "14",
                            testId: "connect-button",
                            transition: "default",
                            type: "button",
                          },
                          C && "Connect Wallet" === c
                            ? P.t("connect_wallet.label")
                            : c
                        )
                  );
                }
              )
            : ed.createElement(ed.Fragment, null)
        );
      }
      (ConnectButton.__defaultProps = r$),
        (ConnectButton.Custom = ConnectButtonRenderer);
      var computeWalletConnectMetaData = ({
          appName: e,
          appDescription: l,
          appUrl: c,
          appIcon: d,
        }) => ({
          name: e,
          description: l ?? e,
          url: c ?? ("undefined" != typeof window ? window.location.href : ""),
          icons: [...(d ? [d] : [])],
        }),
        connectorsForWallets = (
          e,
          {
            projectId: l,
            walletConnectParameters: c,
            appName: d,
            appDescription: m,
            appUrl: g,
            appIcon: y,
          }
        ) => {
          if (!e.length) throw Error("No wallet list was provided");
          for (let { wallets: l, groupName: c } of e)
            if (!l.length) throw Error(`No wallets provided for group: ${c}`);
          let b = -1,
            C = [],
            P = [],
            I = [],
            B = computeWalletConnectMetaData({
              appName: d,
              appDescription: m,
              appUrl: g,
              appIcon: y,
            });
          for (let [m, { groupName: g, wallets: C }] of e.entries())
            for (let e of C) {
              b++;
              let C = e({
                projectId: l,
                appName: d,
                appIcon: y,
                options: { metadata: B, ...c },
                walletConnectParameters: { metadata: B, ...c },
              });
              if (C?.iconAccent && !isHexString(C?.iconAccent))
                throw Error(
                  `Property \`iconAccent\` is not a hex value for wallet: ${C.name}`
                );
              let N = { ...C, groupIndex: m + 1, groupName: g, index: b };
              "function" == typeof C.hidden ? I.push(N) : P.push(N);
            }
          let N = (function (e, l) {
            let c = [];
            for (let d of e) c.some((e) => e[l] === d[l]) || c.push(d);
            return c;
          })([...P, ...I], "id");
          for (let {
            createConnector: e,
            groupIndex: l,
            groupName: c,
            hidden: d,
            ...m
          } of N) {
            if ("function" == typeof d) {
              let e = d();
              if (e) continue;
            }
            let walletMetaData = (e) => ({
                rkDetails: Object.fromEntries(
                  Object.entries({
                    ...m,
                    groupIndex: l,
                    groupName: c,
                    isRainbowKitConnector: !0,
                    ...(e || {}),
                  }).filter(([e, l]) => void 0 !== l)
                ),
              }),
              g = "walletConnect" === m.id;
            g &&
              C.push(
                e(
                  walletMetaData({
                    isWalletConnectModalConnector: !0,
                    showQrModal: !0,
                  })
                )
              );
            let y = e(walletMetaData());
            C.push(y);
          }
          return C;
        },
        rK = new Map(),
        getOrCreateWalletConnectInstance = ({
          projectId: e,
          walletConnectParameters: l,
          rkDetailsShowQrModal: c,
        }) => {
          let d = { ...(l || {}), projectId: e, showQrModal: !1 };
          c && (d = { ...d, showQrModal: !0 });
          let m = JSON.stringify(d),
            g = rK.get(m);
          if (g) return g;
          let y = (0, nR.a)(d);
          return rK.set(m, y), y;
        };
      function getWalletConnectConnector({
        projectId: e,
        walletConnectParameters: l,
      }) {
        if (!e || "" === e)
          throw Error(
            "No projectId found. Every dApp must now provide a WalletConnect Cloud projectId to enable WalletConnect v2 https://www.rainbowkit.com/docs/installation#configure"
          );
        return (
          "YOUR_PROJECT_ID" === e && (e = "21fef48091f12692cad574a6f7753643"),
          (c) =>
            (function ({
              projectId: e,
              walletDetails: l,
              walletConnectParameters: c,
            }) {
              return (0, nI.K)((d) => ({
                ...getOrCreateWalletConnectInstance({
                  projectId: e,
                  walletConnectParameters: c,
                  rkDetailsShowQrModal: l.rkDetails.showQrModal,
                })(d),
                ...l,
              }));
            })({ projectId: e, walletDetails: c, walletConnectParameters: l })
        );
      }
      function getExplicitInjectedProvider(e) {
        let l = "undefined" != typeof window ? window : void 0;
        if (void 0 === l || void 0 === l.ethereum) return;
        let c = l.ethereum.providers;
        return c ? c.find((l) => l[e]) : l.ethereum[e] ? l.ethereum : void 0;
      }
      function getWindowProviderNamespace(e) {
        let providerSearch = (e, l) => {
          let [c, ...d] = l.split("."),
            m = e[c];
          if (m) return 0 === d.length ? m : providerSearch(m, d.join("."));
        };
        if ("undefined" != typeof window) return providerSearch(window, e);
      }
      function hasInjectedProvider({ flag: e, namespace: l }) {
        return (
          (!!l && void 0 !== getWindowProviderNamespace(l)) ||
          (!!e && void 0 !== getExplicitInjectedProvider(e))
        );
      }
      function getInjectedConnector({ flag: e, namespace: l, target: c }) {
        let d =
          c ||
          (function ({ flag: e, namespace: l }) {
            let c = "undefined" != typeof window ? window : void 0;
            if (void 0 === c) return;
            if (l) {
              let e = getWindowProviderNamespace(l);
              if (e) return e;
            }
            let d = c.ethereum?.providers;
            if (e) {
              let l = getExplicitInjectedProvider(e);
              if (l) return l;
            }
            return void 0 !== d && d.length > 0 ? d[0] : c.ethereum;
          })({ flag: e, namespace: l });
        return (e) => {
          let l = d
            ? {
                target: () => ({
                  id: e.rkDetails.id,
                  name: e.rkDetails.name,
                  provider: d,
                }),
              }
            : {};
          return (0, nI.K)((c) => ({ ...(0, nF.L)(l)(c), ...e }));
        };
      }
      var dist_coinbaseWallet = ({ appName: e, appIcon: l }) => {
        let d = isIOS();
        return {
          id: "coinbase",
          name: "Coinbase Wallet",
          shortName: "Coinbase",
          rdns: "com.coinbase.wallet",
          iconUrl: async () => (await c.e(3821).then(c.bind(c, 13821))).default,
          iconAccent: "#2c5ff6",
          iconBackground: "#2c5ff6",
          installed: !0,
          downloadUrls: {
            android: "https://play.google.com/store/apps/details?id=org.toshi",
            ios: "https://apps.apple.com/us/app/coinbase-wallet-store-crypto/id1278383455",
            mobile: "https://coinbase.com/wallet/downloads",
            qrCode: "https://coinbase-wallet.onelink.me/q5Sx/fdb9b250",
            chrome:
              "https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad",
            browserExtension: "https://coinbase.com/wallet",
          },
          ...(d
            ? {}
            : {
                qrCode: {
                  getUri: (e) => e,
                  instructions: {
                    learnMoreUrl:
                      "https://coinbase.com/wallet/articles/getting-started-mobile",
                    steps: [
                      {
                        description:
                          "wallet_connectors.coinbase.qr_code.step1.description",
                        step: "install",
                        title: "wallet_connectors.coinbase.qr_code.step1.title",
                      },
                      {
                        description:
                          "wallet_connectors.coinbase.qr_code.step2.description",
                        step: "create",
                        title: "wallet_connectors.coinbase.qr_code.step2.title",
                      },
                      {
                        description:
                          "wallet_connectors.coinbase.qr_code.step3.description",
                        step: "scan",
                        title: "wallet_connectors.coinbase.qr_code.step3.title",
                      },
                    ],
                  },
                },
                extension: {
                  instructions: {
                    learnMoreUrl:
                      "https://coinbase.com/wallet/articles/getting-started-extension",
                    steps: [
                      {
                        description:
                          "wallet_connectors.coinbase.extension.step1.description",
                        step: "install",
                        title:
                          "wallet_connectors.coinbase.extension.step1.title",
                      },
                      {
                        description:
                          "wallet_connectors.coinbase.extension.step2.description",
                        step: "create",
                        title:
                          "wallet_connectors.coinbase.extension.step2.title",
                      },
                      {
                        description:
                          "wallet_connectors.coinbase.extension.step3.description",
                        step: "refresh",
                        title:
                          "wallet_connectors.coinbase.extension.step3.title",
                      },
                    ],
                  },
                },
              }),
          createConnector: (c) => {
            let d = (0, nL.D)({
              appName: e,
              appLogoUrl: l,
              preference: dist_coinbaseWallet.preference,
            });
            return (0, nI.K)((e) => ({ ...d(e), ...c }));
          },
        };
      };
      function isMetaMask(e) {
        return (
          !!e?.isMetaMask &&
          (!e.isBraveWallet || !!e._events || !!e._state) &&
          !e.isApexWallet &&
          !e.isAvalanche &&
          !e.isBackpack &&
          !e.isBifrost &&
          !e.isBitKeep &&
          !e.isBitski &&
          !e.isBlockWallet &&
          !e.isCoinbaseWallet &&
          !e.isDawn &&
          !e.isEnkrypt &&
          !e.isExodus &&
          !e.isFrame &&
          !e.isFrontier &&
          !e.isGamestop &&
          !e.isHyperPay &&
          !e.isImToken &&
          !e.isKuCoinWallet &&
          !e.isMathWallet &&
          !e.isNestWallet &&
          !e.isOkxWallet &&
          !e.isOKExWallet &&
          !e.isOneInchIOSWallet &&
          !e.isOneInchAndroidWallet &&
          !e.isOpera &&
          !e.isPhantom &&
          !e.isPortal &&
          !e.isRabby &&
          !e.isRainbow &&
          !e.isStatus &&
          !e.isTalisman &&
          !e.isTally &&
          !e.isTokenPocket &&
          !e.isTokenary &&
          !e.isTrust &&
          !e.isTrustWallet &&
          !e.isXDEFI &&
          !e.isZeal &&
          !e.isZerion &&
          !e.__seif
        );
      }
      var metaMaskWallet = ({ projectId: e, walletConnectParameters: l }) => {
          let d = hasInjectedProvider({ flag: "isMetaMask" }),
            m = !d,
            getUri = (e) =>
              isAndroid()
                ? e
                : isIOS()
                ? `metamask://wc?uri=${encodeURIComponent(e)}`
                : `https://metamask.app.link/wc?uri=${encodeURIComponent(e)}`;
          return {
            id: "metaMask",
            name: "MetaMask",
            rdns: "io.metamask",
            iconUrl: async () =>
              (await c.e(9163).then(c.bind(c, 59163))).default,
            iconAccent: "#f6851a",
            iconBackground: "#fff",
            installed: m ? void 0 : d,
            downloadUrls: {
              android:
                "https://play.google.com/store/apps/details?id=io.metamask",
              ios: "https://apps.apple.com/us/app/metamask/id1438144202",
              mobile: "https://metamask.io/download",
              qrCode: "https://metamask.io/download",
              chrome:
                "https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn",
              edge: "https://microsoftedge.microsoft.com/addons/detail/metamask/ejbalbakoplchlghecdalmeeeajnimhm",
              firefox:
                "https://addons.mozilla.org/firefox/addon/ether-metamask",
              opera: "https://addons.opera.com/extensions/details/metamask-10",
              browserExtension: "https://metamask.io/download",
            },
            mobile: { getUri: m ? getUri : void 0 },
            qrCode: m
              ? {
                  getUri,
                  instructions: {
                    learnMoreUrl: "https://metamask.io/faqs/",
                    steps: [
                      {
                        description:
                          "wallet_connectors.metamask.qr_code.step1.description",
                        step: "install",
                        title: "wallet_connectors.metamask.qr_code.step1.title",
                      },
                      {
                        description:
                          "wallet_connectors.metamask.qr_code.step2.description",
                        step: "create",
                        title: "wallet_connectors.metamask.qr_code.step2.title",
                      },
                      {
                        description:
                          "wallet_connectors.metamask.qr_code.step3.description",
                        step: "refresh",
                        title: "wallet_connectors.metamask.qr_code.step3.title",
                      },
                    ],
                  },
                }
              : void 0,
            extension: {
              instructions: {
                learnMoreUrl: "https://metamask.io/faqs/",
                steps: [
                  {
                    description:
                      "wallet_connectors.metamask.extension.step1.description",
                    step: "install",
                    title: "wallet_connectors.metamask.extension.step1.title",
                  },
                  {
                    description:
                      "wallet_connectors.metamask.extension.step2.description",
                    step: "create",
                    title: "wallet_connectors.metamask.extension.step2.title",
                  },
                  {
                    description:
                      "wallet_connectors.metamask.extension.step3.description",
                    step: "refresh",
                    title: "wallet_connectors.metamask.extension.step3.title",
                  },
                ],
              },
            },
            createConnector: m
              ? getWalletConnectConnector({
                  projectId: e,
                  walletConnectParameters: l,
                })
              : getInjectedConnector({
                  target:
                    "undefined" != typeof window
                      ? window.ethereum?.providers?.find(isMetaMask) ??
                        window.ethereum
                      : void 0,
                }),
          };
        },
        rainbowWallet = ({ projectId: e, walletConnectParameters: l }) => {
          let d = hasInjectedProvider({ flag: "isRainbow" }),
            m = !d,
            getUri = (e) =>
              isAndroid()
                ? e
                : isIOS()
                ? `rainbow://wc?uri=${encodeURIComponent(
                    e
                  )}&connector=rainbowkit`
                : `https://rnbwapp.com/wc?uri=${encodeURIComponent(
                    e
                  )}&connector=rainbowkit`;
          return {
            id: "rainbow",
            name: "Rainbow",
            rdns: "me.rainbow",
            iconUrl: async () =>
              (await c.e(3643).then(c.bind(c, 63643))).default,
            iconBackground: "#0c2f78",
            installed: m ? void 0 : d,
            downloadUrls: {
              android:
                "https://play.google.com/store/apps/details?id=me.rainbow&referrer=utm_source%3Drainbowkit&utm_source=rainbowkit",
              ios: "https://apps.apple.com/app/apple-store/id1457119021?pt=119997837&ct=rainbowkit&mt=8",
              mobile: "https://rainbow.download?utm_source=rainbowkit",
              qrCode:
                "https://rainbow.download?utm_source=rainbowkit&utm_medium=qrcode",
              browserExtension:
                "https://rainbow.me/extension?utm_source=rainbowkit",
            },
            mobile: { getUri: m ? getUri : void 0 },
            qrCode: m
              ? {
                  getUri,
                  instructions: {
                    learnMoreUrl:
                      "https://learn.rainbow.me/connect-to-a-website-or-app?utm_source=rainbowkit&utm_medium=connector&utm_campaign=learnmore",
                    steps: [
                      {
                        description:
                          "wallet_connectors.rainbow.qr_code.step1.description",
                        step: "install",
                        title: "wallet_connectors.rainbow.qr_code.step1.title",
                      },
                      {
                        description:
                          "wallet_connectors.rainbow.qr_code.step2.description",
                        step: "create",
                        title: "wallet_connectors.rainbow.qr_code.step2.title",
                      },
                      {
                        description:
                          "wallet_connectors.rainbow.qr_code.step3.description",
                        step: "scan",
                        title: "wallet_connectors.rainbow.qr_code.step3.title",
                      },
                    ],
                  },
                }
              : void 0,
            createConnector: m
              ? getWalletConnectConnector({
                  projectId: e,
                  walletConnectParameters: l,
                })
              : getInjectedConnector({ flag: "isRainbow" }),
          };
        },
        safeWallet = () => ({
          id: "safe",
          name: "Safe",
          iconAccent: "#12ff80",
          iconBackground: "#fff",
          iconUrl: async () => (await c.e(5485).then(c.bind(c, 35485))).default,
          installed: "undefined" != typeof window && window?.parent !== window,
          downloadUrls: {},
          createConnector: (e) =>
            (0, nI.K)((l) => ({ ...(0, nU.T)()(l), ...e })),
        }),
        walletConnectWallet = ({ projectId: e, options: l }) => ({
          id: "walletConnect",
          name: "WalletConnect",
          installed: void 0,
          iconUrl: async () => (await c.e(3891).then(c.bind(c, 53891))).default,
          iconBackground: "#3b99fc",
          qrCode: { getUri: (e) => e },
          createConnector: getWalletConnectConnector({
            projectId: e,
            walletConnectParameters: l,
          }),
        }),
        createDefaultTransports = (e) => {
          let l = e.reduce((e, l) => {
            let c = l.id;
            return (e[c] = (0, nS.d)()), e;
          }, {});
          return l;
        },
        getDefaultConfig = ({
          appName: e,
          appDescription: l,
          appUrl: c,
          appIcon: d,
          wallets: m,
          projectId: g,
          ...y
        }) => {
          let { transports: b, chains: C, ...P } = y,
            I = computeWalletConnectMetaData({
              appName: e,
              appDescription: l,
              appUrl: c,
              appIcon: d,
            }),
            B = connectorsForWallets(
              m || [
                {
                  groupName: "Popular",
                  wallets: [
                    safeWallet,
                    rainbowWallet,
                    dist_coinbaseWallet,
                    metaMaskWallet,
                    walletConnectWallet,
                  ],
                },
              ],
              {
                projectId: g,
                appName: e,
                appDescription: l,
                appUrl: c,
                appIcon: d,
                walletConnectParameters: { metadata: I },
              }
            );
          return (function (e) {
            let l;
            let {
                multiInjectedProviderDiscovery: c = !0,
                storage: d = (function (e) {
                  let {
                    deserialize: l = deserialize_deserialize,
                    key: c = "wagmi",
                    serialize: d = serialize_serialize,
                    storage: m = nB,
                  } = e;
                  function unwrap(e) {
                    return e instanceof Promise
                      ? e.then((e) => e).catch(() => null)
                      : e;
                  }
                  return {
                    ...m,
                    key: c,
                    async getItem(e, d) {
                      let g = m.getItem(`${c}.${e}`),
                        y = await unwrap(g);
                      return y ? l(y) ?? null : d ?? null;
                    },
                    async setItem(e, l) {
                      let g = `${c}.${e}`;
                      null === l
                        ? await unwrap(m.removeItem(g))
                        : await unwrap(m.setItem(g, d(l)));
                    },
                    async removeItem(e) {
                      await unwrap(m.removeItem(`${c}.${e}`));
                    },
                  };
                })({
                  storage: (function () {
                    let e =
                      "undefined" != typeof window && window.localStorage
                        ? window.localStorage
                        : nB;
                    return {
                      getItem: (l) => e.getItem(l),
                      removeItem(l) {
                        e.removeItem(l);
                      },
                      setItem(l, c) {
                        try {
                          e.setItem(l, c);
                        } catch {}
                      },
                    };
                  })(),
                }),
                syncConnectedChain: m = !0,
                ssr: g = !1,
                ...y
              } = e,
              b =
                "undefined" != typeof window && c
                  ? (function () {
                      let e = new Set(),
                        l = [],
                        request = () =>
                          (function (e) {
                            if ("undefined" == typeof window) return;
                            let handler = (l) => e(l.detail);
                            return (
                              window.addEventListener(
                                "eip6963:announceProvider",
                                handler
                              ),
                              window.dispatchEvent(
                                new CustomEvent("eip6963:requestProvider")
                              ),
                              () =>
                                window.removeEventListener(
                                  "eip6963:announceProvider",
                                  handler
                                )
                            );
                          })((c) => {
                            l.some(({ info: e }) => e.uuid === c.info.uuid) ||
                              ((l = [...l, c]),
                              e.forEach((e) => e(l, { added: [c] })));
                          }),
                        c = request();
                      return {
                        _listeners: () => e,
                        clear() {
                          e.forEach((e) => e([], { removed: [...l] })),
                            (l = []);
                        },
                        destroy() {
                          this.clear(), e.clear(), c?.();
                        },
                        findProvider: ({ rdns: e }) =>
                          l.find((l) => l.info.rdns === e),
                        getProviders: () => l,
                        reset() {
                          this.clear(), c?.(), (c = request());
                        },
                        subscribe: (c, { emitImmediately: d } = {}) => (
                          e.add(c), d && c(l, { added: l }), () => e.delete(c)
                        ),
                      };
                    })()
                  : void 0,
              C = vanilla_createStore(() => y.chains),
              P = vanilla_createStore(() => {
                let e = [],
                  l = new Set();
                for (let c of y.connectors ?? []) {
                  let d = setup(c);
                  if ((e.push(d), !g && d.rdns)) {
                    let e = "string" == typeof d.rdns ? [d.rdns] : d.rdns;
                    for (let c of e) l.add(c);
                  }
                }
                if (!g && b) {
                  let c = b.getProviders();
                  for (let d of c)
                    l.has(d.info.rdns) ||
                      e.push(setup(providerDetailToConnector(d)));
                }
                return e;
              });
            function setup(e) {
              var l;
              let c =
                  ((l = (function (e = 11) {
                    if (!Z || nD + e > 512) {
                      (Z = ""), (nD = 0);
                      for (let e = 0; e < 256; e++)
                        Z += ((256 + 256 * Math.random()) | 0)
                          .toString(16)
                          .substring(1);
                    }
                    return Z.substring(nD, nD++ + e);
                  })()),
                  new Emitter(l)),
                m = {
                  ...e({
                    emitter: c,
                    chains: C.getState(),
                    storage: d,
                    transports: y.transports,
                  }),
                  emitter: c,
                  uid: c.uid,
                };
              return c.on("connect", connect), m.setup?.(), m;
            }
            function providerDetailToConnector(e) {
              let { info: l } = e,
                c = e.provider;
              return injected({ target: { ...l, id: l.rdns, provider: c } });
            }
            let I = new Map();
            function getInitialState() {
              return {
                chainId: C.getState()[0].id,
                connections: new Map(),
                current: null,
                status: "disconnected",
              };
            }
            let B = "0.0.0-canary-";
            l = nN.i.startsWith(B)
              ? Number.parseInt(nN.i.replace(B, ""))
              : Number.parseInt(nN.i.split(".")[0] ?? "0");
            let N = vanilla_createStore(
              subscribeWithSelector(
                d
                  ? persist(getInitialState, {
                      migrate(e, c) {
                        if (c === l) return e;
                        let d = getInitialState(),
                          m = validatePersistedChainId(e, d.chainId);
                        return { ...d, chainId: m };
                      },
                      name: "store",
                      partialize: (e) => ({
                        connections: {
                          __type: "Map",
                          value: Array.from(e.connections.entries()).map(
                            ([e, l]) => {
                              let {
                                id: c,
                                name: d,
                                type: m,
                                uid: g,
                              } = l.connector;
                              return [
                                e,
                                {
                                  ...l,
                                  connector: {
                                    id: c,
                                    name: d,
                                    type: m,
                                    uid: g,
                                  },
                                },
                              ];
                            }
                          ),
                        },
                        chainId: e.chainId,
                        current: e.current,
                      }),
                      merge(e, l) {
                        "object" == typeof e &&
                          e &&
                          "status" in e &&
                          delete e.status;
                        let c = validatePersistedChainId(e, l.chainId);
                        return { ...l, ...e, chainId: c };
                      },
                      skipHydration: g,
                      storage: d,
                      version: l,
                    })
                  : getInitialState
              )
            );
            function validatePersistedChainId(e, l) {
              return e &&
                "object" == typeof e &&
                "chainId" in e &&
                "number" == typeof e.chainId &&
                C.getState().some((l) => l.id === e.chainId)
                ? e.chainId
                : l;
            }
            function change(e) {
              N.setState((l) => {
                let c = l.connections.get(e.uid);
                return c
                  ? {
                      ...l,
                      connections: new Map(l.connections).set(e.uid, {
                        accounts: e.accounts ?? c.accounts,
                        chainId: e.chainId ?? c.chainId,
                        connector: c.connector,
                      }),
                    }
                  : l;
              });
            }
            function connect(e) {
              "connecting" !== N.getState().status &&
                "reconnecting" !== N.getState().status &&
                N.setState((l) => {
                  let c = P.getState().find((l) => l.uid === e.uid);
                  return c
                    ? (c.emitter.listenerCount("connect") &&
                        c.emitter.off("connect", change),
                      c.emitter.listenerCount("change") ||
                        c.emitter.on("change", change),
                      c.emitter.listenerCount("disconnect") ||
                        c.emitter.on("disconnect", disconnect),
                      {
                        ...l,
                        connections: new Map(l.connections).set(e.uid, {
                          accounts: e.accounts,
                          chainId: e.chainId,
                          connector: c,
                        }),
                        current: e.uid,
                        status: "connected",
                      })
                    : l;
                });
            }
            function disconnect(e) {
              N.setState((l) => {
                let c = l.connections.get(e.uid);
                if (c) {
                  let e = c.connector;
                  e.emitter.listenerCount("change") &&
                    c.connector.emitter.off("change", change),
                    e.emitter.listenerCount("disconnect") &&
                      c.connector.emitter.off("disconnect", disconnect),
                    e.emitter.listenerCount("connect") ||
                      c.connector.emitter.on("connect", connect);
                }
                if ((l.connections.delete(e.uid), 0 === l.connections.size))
                  return {
                    ...l,
                    connections: new Map(),
                    current: null,
                    status: "disconnected",
                  };
                let d = l.connections.values().next().value;
                return {
                  ...l,
                  connections: new Map(l.connections),
                  current: d.connector.uid,
                };
              });
            }
            return (
              N.setState(getInitialState()),
              m &&
                N.subscribe(
                  ({ connections: e, current: l }) =>
                    l ? e.get(l)?.chainId : void 0,
                  (e) => {
                    let l = C.getState().some((l) => l.id === e);
                    if (l)
                      return N.setState((l) => ({
                        ...l,
                        chainId: e ?? l.chainId,
                      }));
                  }
                ),
              b?.subscribe((e) => {
                let l = new Set(),
                  c = new Set();
                for (let e of P.getState())
                  if ((l.add(e.id), e.rdns)) {
                    let l = "string" == typeof e.rdns ? [e.rdns] : e.rdns;
                    for (let e of l) c.add(e);
                  }
                let m = [];
                for (let d of e) {
                  if (c.has(d.info.rdns)) continue;
                  let e = setup(providerDetailToConnector(d));
                  l.has(e.id) || m.push(e);
                }
                (!d || N.persist.hasHydrated()) &&
                  P.setState((e) => [...e, ...m], !0);
              }),
              {
                get chains() {
                  return C.getState();
                },
                get connectors() {
                  return P.getState();
                },
                storage: d,
                getClient: function (e = {}) {
                  let l;
                  let c = e.chainId ?? N.getState().chainId,
                    d = C.getState().find((e) => e.id === c);
                  if (e.chainId && !d) throw new nv.X4();
                  {
                    let e = I.get(N.getState().chainId);
                    if (e && !d) return e;
                    if (!d) throw new nv.X4();
                  }
                  {
                    let e = I.get(c);
                    if (e) return e;
                  }
                  if (y.client) l = y.client({ chain: d });
                  else {
                    let e = d.id,
                      c = C.getState().map((e) => e.id),
                      m = {},
                      g = Object.entries(y);
                    for (let [l, d] of g)
                      if (
                        "chains" !== l &&
                        "client" !== l &&
                        "connectors" !== l &&
                        "transports" !== l
                      ) {
                        if ("object" == typeof d) {
                          if (e in d) m[l] = d[e];
                          else {
                            let e = c.some((e) => e in d);
                            if (e) continue;
                            m[l] = d;
                          }
                        } else m[l] = d;
                      }
                    l = (0, nk.e)({
                      ...m,
                      chain: d,
                      batch: m.batch ?? { multicall: !0 },
                      transport: (l) =>
                        y.transports[e]({ ...l, connectors: P }),
                    });
                  }
                  return I.set(c, l), l;
                },
                get state() {
                  return N.getState();
                },
                setState(e) {
                  let l;
                  l = "function" == typeof e ? e(N.getState()) : e;
                  let c = getInitialState();
                  "object" != typeof l && (l = c);
                  let d = Object.keys(c).some((e) => !(e in l));
                  d && (l = c), N.setState(l, !0);
                },
                subscribe: (e, l, c) =>
                  N.subscribe(
                    e,
                    l,
                    c ? { ...c, fireImmediately: c.emitImmediately } : void 0
                  ),
                _internal: {
                  mipd: b,
                  store: N,
                  ssr: !!g,
                  syncConnectedChain: m,
                  transports: y.transports,
                  chains: {
                    setState(e) {
                      let l = "function" == typeof e ? e(C.getState()) : e;
                      if (0 !== l.length) return C.setState(l, !0);
                    },
                    subscribe: (e) => C.subscribe(e),
                  },
                  connectors: {
                    providerDetailToConnector,
                    setup: setup,
                    setState: (e) =>
                      P.setState(
                        "function" == typeof e ? e(P.getState()) : e,
                        !0
                      ),
                    subscribe: (e) => P.subscribe(e),
                  },
                  events: { change, connect, disconnect },
                },
              }
            );
          })({
            connectors: B,
            chains: C,
            transports: b || createDefaultTransports(C),
            ...P,
          });
        };
    },
    66034: function (e, l, c) {
      "use strict";
      c.d(l, {
        oZ: function () {
          return P;
        },
        Tk: function () {
          return buildCreateApi;
        },
        hF: function () {
          return coreModule;
        },
        OL: function () {
          return defaultSerializeQueryArgs;
        },
        ni: function () {
          return fetchBaseQuery;
        },
        sj: function () {
          return setupListeners;
        },
        CN: function () {
          return et;
        },
      });
      var d,
        m = c(91367),
        g = c(89239),
        y = c(53874),
        b = c(73649),
        C = class extends Error {
          issues;
          constructor(e) {
            super(e[0].message), (this.name = "SchemaError"), (this.issues = e);
          }
        };
      c(21481);
      var P =
        (((d = P || {}).uninitialized = "uninitialized"),
        (d.pending = "pending"),
        (d.fulfilled = "fulfilled"),
        (d.rejected = "rejected"),
        d);
      function getRequestStatusFlags(e) {
        return {
          status: e,
          isUninitialized: "uninitialized" === e,
          isLoading: "pending" === e,
          isSuccess: "fulfilled" === e,
          isError: "rejected" === e,
        };
      }
      var I = m.PO;
      function countObjectKeys(e) {
        let l = 0;
        for (let c in e) l++;
        return l;
      }
      var flatten = (e) => [].concat(...e);
      function isNotNullish(e) {
        return null != e;
      }
      var withoutTrailingSlash = (e) => e.replace(/\/$/, ""),
        withoutLeadingSlash = (e) => e.replace(/^\//, ""),
        defaultFetchFn = (...e) => fetch(...e),
        defaultValidateStatus = (e) => e.status >= 200 && e.status <= 299,
        defaultIsJsonContentType = (e) =>
          /ion\/(vnd\.api\+)?json/.test(e.get("content-type") || "");
      function stripUndefined(e) {
        if (!(0, m.PO)(e)) return e;
        let l = { ...e };
        for (let [e, c] of Object.entries(l)) void 0 === c && delete l[e];
        return l;
      }
      function fetchBaseQuery({
        baseUrl: e,
        prepareHeaders: l = (e) => e,
        fetchFn: c = defaultFetchFn,
        paramsSerializer: d,
        isJsonContentType: g = defaultIsJsonContentType,
        jsonContentType: y = "application/json",
        jsonReplacer: b,
        timeout: C,
        responseHandler: P,
        validateStatus: I,
        ...B
      } = {}) {
        return (
          "undefined" == typeof fetch &&
            c === defaultFetchFn &&
            console.warn(
              "Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments."
            ),
          async (N, F, V) => {
            let G, Q;
            let {
                getState: $,
                extra: Z,
                endpoint: Y,
                forced: et,
                type: en,
              } = F,
              {
                url: er,
                headers: ei = new Headers(B.headers),
                params: eo,
                responseHandler: ea = P ?? "json",
                validateStatus: es = I ?? defaultValidateStatus,
                timeout: el = C,
                ...ec
              } = "string" == typeof N ? { url: N } : N,
              eu,
              ed = F.signal;
            el &&
              ((eu = new AbortController()),
              F.signal.addEventListener("abort", eu.abort),
              (ed = eu.signal));
            let ep = { ...B, signal: ed, ...ec };
            (ei = new Headers(stripUndefined(ei))),
              (ep.headers =
                (await l(ei, {
                  getState: $,
                  arg: N,
                  extra: Z,
                  endpoint: Y,
                  forced: et,
                  type: en,
                  extraOptions: V,
                })) || ei);
            let isJsonifiable = (e) =>
              "object" == typeof e &&
              ((0, m.PO)(e) ||
                Array.isArray(e) ||
                "function" == typeof e.toJSON);
            if (
              (!ep.headers.has("content-type") &&
                isJsonifiable(ep.body) &&
                ep.headers.set("content-type", y),
              isJsonifiable(ep.body) &&
                g(ep.headers) &&
                (ep.body = JSON.stringify(ep.body, b)),
              eo)
            ) {
              let e = ~er.indexOf("?") ? "&" : "?",
                l = d ? d(eo) : new URLSearchParams(stripUndefined(eo));
              er += e + l;
            }
            er = (function (e, l) {
              var c;
              if (!e) return l;
              if (!l) return e;
              if (((c = l), RegExp("(^|:)//").test(c))) return l;
              let d = e.endsWith("/") || !l.startsWith("?") ? "/" : "";
              return (
                (e = withoutTrailingSlash(e)),
                (l = withoutLeadingSlash(l)),
                `${e}${d}${l}`
              );
            })(e, er);
            let eh = new Request(er, ep),
              ef = new Request(er, ep);
            G = { request: ef };
            let em,
              eg = !1,
              ey =
                eu &&
                setTimeout(() => {
                  (eg = !0), eu.abort();
                }, el);
            try {
              em = await c(eh);
            } catch (e) {
              return {
                error: {
                  status: eg ? "TIMEOUT_ERROR" : "FETCH_ERROR",
                  error: String(e),
                },
                meta: G,
              };
            } finally {
              ey && clearTimeout(ey),
                eu?.signal.removeEventListener("abort", eu.abort);
            }
            let eb = em.clone();
            G.response = eb;
            let ev = "";
            try {
              let e;
              if (
                (await Promise.all([
                  handleResponse(em, ea).then(
                    (e) => (Q = e),
                    (l) => (e = l)
                  ),
                  eb.text().then(
                    (e) => (ev = e),
                    () => {}
                  ),
                ]),
                e)
              )
                throw e;
            } catch (e) {
              return {
                error: {
                  status: "PARSING_ERROR",
                  originalStatus: em.status,
                  data: ev,
                  error: String(e),
                },
                meta: G,
              };
            }
            return es(em, Q)
              ? { data: Q, meta: G }
              : { error: { status: em.status, data: Q }, meta: G };
          }
        );
        async function handleResponse(e, l) {
          if ("function" == typeof l) return l(e);
          if (
            ("content-type" === l && (l = g(e.headers) ? "json" : "text"),
            "json" === l)
          ) {
            let l = await e.text();
            return l.length ? JSON.parse(l) : null;
          }
          return e.text();
        }
      }
      var B = class {
          constructor(e, l) {
            (this.value = e), (this.meta = l);
          }
        },
        N = (0, g.PH)("__rtkq/focused"),
        F = (0, g.PH)("__rtkq/unfocused"),
        V = (0, g.PH)("__rtkq/online"),
        G = (0, g.PH)("__rtkq/offline"),
        Q = !1;
      function setupListeners(e, l) {
        return l
          ? l(e, { onFocus: N, onFocusLost: F, onOffline: G, onOnline: V })
          : (function () {
              let handleFocus = () => e(N()),
                handleFocusLost = () => e(F()),
                handleOnline = () => e(V()),
                handleOffline = () => e(G()),
                handleVisibilityChange = () => {
                  "visible" === window.document.visibilityState
                    ? handleFocus()
                    : handleFocusLost();
                };
              return (
                !Q &&
                  "undefined" != typeof window &&
                  window.addEventListener &&
                  (window.addEventListener(
                    "visibilitychange",
                    handleVisibilityChange,
                    !1
                  ),
                  window.addEventListener("focus", handleFocus, !1),
                  window.addEventListener("online", handleOnline, !1),
                  window.addEventListener("offline", handleOffline, !1),
                  (Q = !0)),
                () => {
                  window.removeEventListener("focus", handleFocus),
                    window.removeEventListener(
                      "visibilitychange",
                      handleVisibilityChange
                    ),
                    window.removeEventListener("online", handleOnline),
                    window.removeEventListener("offline", handleOffline),
                    (Q = !1);
                }
              );
            })();
      }
      function isQueryDefinition(e) {
        return "query" === e.type;
      }
      function isInfiniteQueryDefinition(e) {
        return "infinitequery" === e.type;
      }
      function isAnyQueryDefinition(e) {
        return isQueryDefinition(e) || isInfiniteQueryDefinition(e);
      }
      function calculateProvidedBy(e, l, c, d, m, g) {
        return "function" == typeof e
          ? e(l, c, d, m).filter(isNotNullish).map(expandTagDescription).map(g)
          : Array.isArray(e)
          ? e.map(expandTagDescription).map(g)
          : [];
      }
      function expandTagDescription(e) {
        return "string" == typeof e ? { type: e } : e;
      }
      var $ = Symbol("forceQueryFn"),
        isUpsertQuery = (e) => "function" == typeof e[$],
        Z = class extends C {
          constructor(e, l, c, d) {
            super(e),
              (this.value = l),
              (this.schemaName = c),
              (this._bqMeta = d);
          }
        };
      async function parseWithSchema(e, l, c, d) {
        let m = await e["~standard"].validate(l);
        if (m.issues) throw new Z(m.issues, l, c, d);
        return m.value;
      }
      function defaultTransformResponse(e) {
        return e;
      }
      var addShouldAutoBatch = (e = {}) => ({ ...e, [g.s4]: !0 });
      function getNextPageParam(e, { pages: l, pageParams: c }) {
        let d = l.length - 1;
        return e.getNextPageParam(l[d], l, c[d], c);
      }
      function getPreviousPageParam(e, { pages: l, pageParams: c }) {
        return e.getPreviousPageParam?.(l[0], l, c[0], c);
      }
      function calculateProvidedByThunk(e, l, c, d) {
        return calculateProvidedBy(
          c[e.meta.arg.endpointName][l],
          (0, g.KD)(e) ? e.payload : void 0,
          (0, g.h_)(e) ? e.payload : void 0,
          e.meta.arg.originalArgs,
          "baseQueryMeta" in e.meta ? e.meta.baseQueryMeta : void 0,
          d
        );
      }
      function updateQuerySubstateIfExists(e, l, c) {
        let d = e[l];
        d && c(d);
      }
      function getMutationCacheKey(e) {
        return (
          ("arg" in e ? e.arg.fixedCacheKey : e.fixedCacheKey) ?? e.requestId
        );
      }
      function updateMutationSubstateIfExists(e, l, c) {
        let d = e[getMutationCacheKey(l)];
        d && c(d);
      }
      var Y = {},
        et = Symbol.for("RTKQ/skipToken"),
        en = { status: "uninitialized" },
        er = (0, y.Uy)(en, () => {}),
        ei = (0, y.Uy)(en, () => {}),
        eo = WeakMap ? new WeakMap() : void 0,
        defaultSerializeQueryArgs = ({ endpointName: e, queryArgs: l }) => {
          let c = "",
            d = eo?.get(l);
          if ("string" == typeof d) c = d;
          else {
            let e = JSON.stringify(
              l,
              (e, l) => (
                (l = "bigint" == typeof l ? { $bigint: l.toString() } : l),
                (l = (0, m.PO)(l)
                  ? Object.keys(l)
                      .sort()
                      .reduce((e, c) => ((e[c] = l[c]), e), {})
                  : l)
              )
            );
            (0, m.PO)(l) && eo?.set(l, e), (c = e);
          }
          return `${e}(${c})`;
        };
      function buildCreateApi(...e) {
        return function (l) {
          let c = (0, b.kO)((e) =>
              l.extractRehydrationInfo?.(e, {
                reducerPath: l.reducerPath ?? "api",
              })
            ),
            d = {
              reducerPath: "api",
              keepUnusedDataFor: 60,
              refetchOnMountOrArgChange: !1,
              refetchOnFocus: !1,
              refetchOnReconnect: !1,
              invalidationBehavior: "delayed",
              ...l,
              extractRehydrationInfo: c,
              serializeQueryArgs(e) {
                let c = defaultSerializeQueryArgs;
                if ("serializeQueryArgs" in e.endpointDefinition) {
                  let l = e.endpointDefinition.serializeQueryArgs;
                  c = (e) => {
                    let c = l(e);
                    return "string" == typeof c
                      ? c
                      : defaultSerializeQueryArgs({ ...e, queryArgs: c });
                  };
                } else l.serializeQueryArgs && (c = l.serializeQueryArgs);
                return c(e);
              },
              tagTypes: [...(l.tagTypes || [])],
            },
            m = {
              endpointDefinitions: {},
              batch(e) {
                e();
              },
              apiUid: (0, g.x0)(),
              extractRehydrationInfo: c,
              hasRehydrationInfo: (0, b.kO)((e) => null != c(e)),
            },
            y = {
              injectEndpoints: function (e) {
                let l = e.endpoints({
                  query: (e) => ({ ...e, type: "query" }),
                  mutation: (e) => ({ ...e, type: "mutation" }),
                  infiniteQuery: (e) => ({ ...e, type: "infinitequery" }),
                });
                for (let [c, d] of Object.entries(l)) {
                  if (!0 !== e.overrideExisting && c in m.endpointDefinitions) {
                    if ("throw" === e.overrideExisting)
                      throw Error((0, g.rJ)(39));
                    continue;
                  }
                  for (let e of ((m.endpointDefinitions[c] = d), C))
                    e.injectEndpoint(c, d);
                }
                return y;
              },
              enhanceEndpoints({ addTagTypes: e, endpoints: l }) {
                if (e)
                  for (let l of e) d.tagTypes.includes(l) || d.tagTypes.push(l);
                if (l)
                  for (let [e, c] of Object.entries(l))
                    "function" == typeof c
                      ? c(m.endpointDefinitions[e])
                      : Object.assign(m.endpointDefinitions[e] || {}, c);
                return y;
              },
            },
            C = e.map((e) => e.init(y, d, m));
          return y.injectEndpoints({ endpoints: l.endpoints });
        };
      }
      function safeAssign(e, ...l) {
        return Object.assign(e, ...l);
      }
      var buildBatchedActionsHandler = ({
          api: e,
          queryThunk: l,
          internalState: c,
        }) => {
          let d = `${e.reducerPath}/subscriptions`,
            m = null,
            g = null,
            { updateSubscriptionOptions: b, unsubscribeQueryResult: C } =
              e.internalActions,
            actuallyMutateSubscriptions = (c, d) => {
              if (b.match(d)) {
                let { queryCacheKey: e, requestId: l, options: m } = d.payload;
                return c?.[e]?.[l] && (c[e][l] = m), !0;
              }
              if (C.match(d)) {
                let { queryCacheKey: e, requestId: l } = d.payload;
                return c[e] && delete c[e][l], !0;
              }
              if (e.internalActions.removeQueryResult.match(d))
                return delete c[d.payload.queryCacheKey], !0;
              if (l.pending.match(d)) {
                let {
                    meta: { arg: e, requestId: l },
                  } = d,
                  m = (c[e.queryCacheKey] ??= {});
                return (
                  (m[`${l}_running`] = {}),
                  e.subscribe && (m[l] = e.subscriptionOptions ?? m[l] ?? {}),
                  !0
                );
              }
              let m = !1;
              if (l.fulfilled.match(d) || l.rejected.match(d)) {
                let e = c[d.meta.arg.queryCacheKey] || {},
                  l = `${d.meta.requestId}_running`;
                (m ||= !!e[l]), delete e[l];
              }
              if (l.rejected.match(d)) {
                let {
                  meta: { condition: e, arg: l, requestId: g },
                } = d;
                if (e && l.subscribe) {
                  let e = (c[l.queryCacheKey] ??= {});
                  (e[g] = l.subscriptionOptions ?? e[g] ?? {}), (m = !0);
                }
              }
              return m;
            },
            getSubscriptions = () => c.currentSubscriptions,
            P = {
              getSubscriptions,
              getSubscriptionCount: (e) => {
                let l = getSubscriptions(),
                  c = l[e] ?? {};
                return countObjectKeys(c);
              },
              isRequestSubscribed: (e, l) => {
                let c = getSubscriptions();
                return !!c?.[e]?.[l];
              },
            };
          return (b, C) => {
            if (
              (m || (m = JSON.parse(JSON.stringify(c.currentSubscriptions))),
              e.util.resetApiState.match(b))
            )
              return (m = c.currentSubscriptions = {}), (g = null), [!0, !1];
            if (e.internalActions.internal_getRTKQSubscriptions.match(b))
              return [!1, P];
            let I = actuallyMutateSubscriptions(c.currentSubscriptions, b),
              B = !0;
            if (I) {
              g ||
                (g = setTimeout(() => {
                  let l = JSON.parse(JSON.stringify(c.currentSubscriptions)),
                    [, d] = (0, y.aS)(m, () => l);
                  C.next(e.internalActions.subscriptionsUpdated(d)),
                    (m = l),
                    (g = null);
                }, 500));
              let P = "string" == typeof b.type && !!b.type.startsWith(d),
                I =
                  l.rejected.match(b) &&
                  b.meta.condition &&
                  !!b.meta.arg.subscribe;
              B = !P && !I;
            }
            return [B, !1];
          };
        },
        buildCacheCollectionHandler = ({
          reducerPath: e,
          api: l,
          queryThunk: c,
          context: d,
          internalState: m,
          selectors: { selectQueryEntry: y, selectConfig: b },
        }) => {
          let {
              removeQueryResult: C,
              unsubscribeQueryResult: P,
              cacheEntriesUpserted: I,
            } = l.internalActions,
            B = (0, g.Q)(P.match, c.fulfilled, c.rejected, I.match);
          function anySubscriptionsRemainingForKey(e) {
            let l = m.currentSubscriptions[e];
            return (
              !!l &&
              !(function (e) {
                for (let l in e) return !1;
                return !0;
              })(l)
            );
          }
          let N = {};
          function handleUnsubscribeMany(e, l, c) {
            let m = l.getState();
            for (let g of e) {
              let e = y(m, g);
              !(function (e, l, c, m) {
                let g = d.endpointDefinitions[l],
                  y = g?.keepUnusedDataFor ?? m.keepUnusedDataFor;
                if (y !== 1 / 0 && !anySubscriptionsRemainingForKey(e)) {
                  let l = N[e];
                  l && clearTimeout(l),
                    (N[e] = setTimeout(() => {
                      anySubscriptionsRemainingForKey(e) ||
                        c.dispatch(C({ queryCacheKey: e })),
                        delete N[e];
                    }, 1e3 * Math.max(0, Math.min(y, 2147482.647))));
                }
              })(g, e?.endpointName, l, c);
            }
          }
          return (e, c, m) => {
            let g = c.getState(),
              y = b(g);
            if (B(e)) {
              let l;
              if (I.match(e))
                l = e.payload.map((e) => e.queryDescription.queryCacheKey);
              else {
                let { queryCacheKey: c } = P.match(e) ? e.payload : e.meta.arg;
                l = [c];
              }
              handleUnsubscribeMany(l, c, y);
            }
            if (l.util.resetApiState.match(e))
              for (let [e, l] of Object.entries(N))
                l && clearTimeout(l), delete N[e];
            if (d.hasRehydrationInfo(e)) {
              let { queries: l } = d.extractRehydrationInfo(e);
              handleUnsubscribeMany(Object.keys(l), c, y);
            }
          };
        },
        ea = Error("Promise never resolved before cacheEntryRemoved."),
        buildCacheLifecycleHandler = ({
          api: e,
          reducerPath: l,
          context: c,
          queryThunk: d,
          mutationThunk: m,
          internalState: y,
          selectors: { selectQueryEntry: b, selectApiState: C },
        }) => {
          let P = (0, g.Gx)(d),
            I = (0, g.Gx)(m),
            B = (0, g.KD)(d, m),
            N = {};
          function resolveLifecycleEntry(e, l, c) {
            let d = N[e];
            d?.valueResolved &&
              (d.valueResolved({ data: l, meta: c }), delete d.valueResolved);
          }
          function removeLifecycleEntry(e) {
            let l = N[e];
            l && (delete N[e], l.cacheEntryRemoved());
          }
          function handleNewKey(l, d, m, g, y) {
            let b = c.endpointDefinitions[l],
              C = b?.onCacheEntryAdded;
            if (!C) return;
            let P = {},
              I = new Promise((e) => {
                P.cacheEntryRemoved = e;
              }),
              B = Promise.race([
                new Promise((e) => {
                  P.valueResolved = e;
                }),
                I.then(() => {
                  throw ea;
                }),
              ]);
            B.catch(() => {}), (N[m] = P);
            let F = e.endpoints[l].select(isAnyQueryDefinition(b) ? d : m),
              V = g.dispatch((e, l, c) => c),
              G = {
                ...g,
                getCacheEntry: () => F(g.getState()),
                requestId: y,
                extra: V,
                updateCachedData: isAnyQueryDefinition(b)
                  ? (c) => g.dispatch(e.util.updateQueryData(l, d, c))
                  : void 0,
                cacheDataLoaded: B,
                cacheEntryRemoved: I,
              },
              Q = C(d, G);
            Promise.resolve(Q).catch((e) => {
              if (e !== ea) throw e;
            });
          }
          return (c, g, y) => {
            let C = P(c)
              ? c.meta.arg.queryCacheKey
              : I(c)
              ? c.meta.arg.fixedCacheKey ?? c.meta.requestId
              : e.internalActions.removeQueryResult.match(c)
              ? c.payload.queryCacheKey
              : e.internalActions.removeMutationResult.match(c)
              ? getMutationCacheKey(c.payload)
              : "";
            function checkForNewCacheKey(e, l, c, d) {
              let m = b(y, l),
                C = b(g.getState(), l);
              !m && C && handleNewKey(e, d, l, g, c);
            }
            if (d.pending.match(c))
              checkForNewCacheKey(
                c.meta.arg.endpointName,
                C,
                c.meta.requestId,
                c.meta.arg.originalArgs
              );
            else if (e.internalActions.cacheEntriesUpserted.match(c))
              for (let { queryDescription: e, value: l } of c.payload) {
                let { endpointName: d, originalArgs: m, queryCacheKey: g } = e;
                checkForNewCacheKey(d, g, c.meta.requestId, m),
                  resolveLifecycleEntry(g, l, {});
              }
            else if (m.pending.match(c)) {
              let e = g.getState()[l].mutations[C];
              e &&
                handleNewKey(
                  c.meta.arg.endpointName,
                  c.meta.arg.originalArgs,
                  C,
                  g,
                  c.meta.requestId
                );
            } else if (B(c))
              resolveLifecycleEntry(C, c.payload, c.meta.baseQueryMeta);
            else if (
              e.internalActions.removeQueryResult.match(c) ||
              e.internalActions.removeMutationResult.match(c)
            )
              removeLifecycleEntry(C);
            else if (e.util.resetApiState.match(c))
              for (let e of Object.keys(N)) removeLifecycleEntry(e);
          };
        },
        buildDevCheckHandler =
          ({ api: e, context: { apiUid: l }, reducerPath: c }) =>
          (c, d) => {
            e.util.resetApiState.match(c) &&
              d.dispatch(e.internalActions.middlewareRegistered(l));
          },
        buildInvalidationByTagsHandler = ({
          reducerPath: e,
          context: l,
          context: { endpointDefinitions: c },
          mutationThunk: d,
          queryThunk: m,
          api: y,
          assertTagType: b,
          refetchQuery: C,
          internalState: P,
        }) => {
          let { removeQueryResult: I } = y.internalActions,
            B = (0, g.Q)((0, g.KD)(d), (0, g.h_)(d)),
            N = (0, g.Q)((0, g.KD)(d, m), (0, g.Iv)(d, m)),
            F = [];
          function invalidateTags(c, d) {
            let m = d.getState(),
              g = m[e];
            if (
              (F.push(...c),
              "delayed" === g.config.invalidationBehavior &&
                (function (e) {
                  let { queries: l, mutations: c } = e;
                  for (let e of [l, c])
                    for (let l in e) if (e[l]?.status === "pending") return !0;
                  return !1;
                })(g))
            )
              return;
            let b = F;
            if (((F = []), 0 === b.length)) return;
            let B = y.util.selectInvalidatedBy(m, b);
            l.batch(() => {
              let e = Array.from(B.values());
              for (let { queryCacheKey: l } of e) {
                let e = g.queries[l],
                  c = P.currentSubscriptions[l] ?? {};
                e &&
                  (0 === countObjectKeys(c)
                    ? d.dispatch(I({ queryCacheKey: l }))
                    : "uninitialized" !== e.status && d.dispatch(C(e)));
              }
            });
          }
          return (e, l) => {
            B(e)
              ? invalidateTags(
                  calculateProvidedByThunk(e, "invalidatesTags", c, b),
                  l
                )
              : N(e)
              ? invalidateTags([], l)
              : y.util.invalidateTags.match(e) &&
                invalidateTags(
                  calculateProvidedBy(
                    e.payload,
                    void 0,
                    void 0,
                    void 0,
                    void 0,
                    b
                  ),
                  l
                );
          };
        },
        buildPollingHandler = ({
          reducerPath: e,
          queryThunk: l,
          api: c,
          refetchQuery: d,
          internalState: m,
        }) => {
          let g = {};
          function startNextPoll({ queryCacheKey: l }, c) {
            let y = c.getState()[e],
              b = y.queries[l],
              C = m.currentSubscriptions[l];
            if (!b || "uninitialized" === b.status) return;
            let { lowestPollingInterval: P, skipPollingIfUnfocused: I } =
              findLowestPollingInterval(C);
            if (!Number.isFinite(P)) return;
            let B = g[l];
            B?.timeout && (clearTimeout(B.timeout), (B.timeout = void 0));
            let N = Date.now() + P;
            g[l] = {
              nextPollTimestamp: N,
              pollingInterval: P,
              timeout: setTimeout(() => {
                (y.config.focused || !I) && c.dispatch(d(b)),
                  startNextPoll({ queryCacheKey: l }, c);
              }, P),
            };
          }
          function updatePollingInterval({ queryCacheKey: l }, c) {
            let d = c.getState()[e],
              y = d.queries[l],
              b = m.currentSubscriptions[l];
            if (!y || "uninitialized" === y.status) return;
            let { lowestPollingInterval: C } = findLowestPollingInterval(b);
            if (!Number.isFinite(C)) {
              cleanupPollForKey(l);
              return;
            }
            let P = g[l],
              I = Date.now() + C;
            (!P || I < P.nextPollTimestamp) &&
              startNextPoll({ queryCacheKey: l }, c);
          }
          function cleanupPollForKey(e) {
            let l = g[e];
            l?.timeout && clearTimeout(l.timeout), delete g[e];
          }
          function findLowestPollingInterval(e = {}) {
            let l = !1,
              c = Number.POSITIVE_INFINITY;
            for (let d in e)
              e[d].pollingInterval &&
                ((c = Math.min(e[d].pollingInterval, c)),
                (l = e[d].skipPollingIfUnfocused || l));
            return { lowestPollingInterval: c, skipPollingIfUnfocused: l };
          }
          return (e, d) => {
            (c.internalActions.updateSubscriptionOptions.match(e) ||
              c.internalActions.unsubscribeQueryResult.match(e)) &&
              updatePollingInterval(e.payload, d),
              (l.pending.match(e) ||
                (l.rejected.match(e) && e.meta.condition)) &&
                updatePollingInterval(e.meta.arg, d),
              (l.fulfilled.match(e) ||
                (l.rejected.match(e) && !e.meta.condition)) &&
                startNextPoll(e.meta.arg, d),
              c.util.resetApiState.match(e) &&
                (function () {
                  for (let e of Object.keys(g)) cleanupPollForKey(e);
                })();
          };
        },
        buildQueryLifecycleHandler = ({
          api: e,
          context: l,
          queryThunk: c,
          mutationThunk: d,
        }) => {
          let m = (0, g.zR)(c, d),
            y = (0, g.Iv)(c, d),
            b = (0, g.KD)(c, d),
            C = {};
          return (c, d) => {
            if (m(c)) {
              let {
                  requestId: m,
                  arg: { endpointName: g, originalArgs: y },
                } = c.meta,
                b = l.endpointDefinitions[g],
                P = b?.onQueryStarted;
              if (P) {
                let l = {},
                  c = new Promise((e, c) => {
                    (l.resolve = e), (l.reject = c);
                  });
                c.catch(() => {}), (C[m] = l);
                let I = e.endpoints[g].select(isAnyQueryDefinition(b) ? y : m),
                  B = d.dispatch((e, l, c) => c),
                  N = {
                    ...d,
                    getCacheEntry: () => I(d.getState()),
                    requestId: m,
                    extra: B,
                    updateCachedData: isAnyQueryDefinition(b)
                      ? (l) => d.dispatch(e.util.updateQueryData(g, y, l))
                      : void 0,
                    queryFulfilled: c,
                  };
                P(y, N);
              }
            } else if (b(c)) {
              let { requestId: e, baseQueryMeta: l } = c.meta;
              C[e]?.resolve({ data: c.payload, meta: l }), delete C[e];
            } else if (y(c)) {
              let {
                requestId: e,
                rejectedWithValue: l,
                baseQueryMeta: d,
              } = c.meta;
              C[e]?.reject({
                error: c.payload ?? c.error,
                isUnhandledError: !l,
                meta: d,
              }),
                delete C[e];
            }
          };
        },
        buildWindowEventHandler = ({
          reducerPath: e,
          context: l,
          api: c,
          refetchQuery: d,
          internalState: m,
        }) => {
          let { removeQueryResult: g } = c.internalActions;
          function refetchValidQueries(c, y) {
            let b = c.getState()[e],
              C = b.queries,
              P = m.currentSubscriptions;
            l.batch(() => {
              for (let e of Object.keys(P)) {
                let l = C[e],
                  m = P[e];
                if (!m || !l) continue;
                let I =
                  Object.values(m).some((e) => !0 === e[y]) ||
                  (Object.values(m).every((e) => void 0 === e[y]) &&
                    b.config[y]);
                I &&
                  (0 === countObjectKeys(m)
                    ? c.dispatch(g({ queryCacheKey: e }))
                    : "uninitialized" !== l.status && c.dispatch(d(l)));
              }
            });
          }
          return (e, l) => {
            N.match(e) && refetchValidQueries(l, "refetchOnFocus"),
              V.match(e) && refetchValidQueries(l, "refetchOnReconnect");
          };
        },
        es = Symbol(),
        coreModule = ({ createSelector: e = b.P1 } = {}) => ({
          name: es,
          init(
            l,
            {
              baseQuery: c,
              tagTypes: d,
              reducerPath: b,
              serializeQueryArgs: C,
              keepUnusedDataFor: P,
              refetchOnMountOrArgChange: Q,
              refetchOnFocus: en,
              refetchOnReconnect: eo,
              invalidationBehavior: ea,
              onSchemaFailure: el,
              catchSchemaFailure: ec,
              skipSchemaValidation: eu,
            },
            ed
          ) {
            (0, y.vI)();
            let assertTagType = (e) => e;
            Object.assign(l, {
              reducerPath: b,
              endpoints: {},
              internalActions: {
                onOnline: V,
                onOffline: G,
                onFocus: N,
                onFocusLost: F,
              },
              util: {},
            });
            let ep = (function ({
                serializeQueryArgs: e,
                reducerPath: l,
                createSelector: c,
              }) {
                let selectSkippedQuery = (e) => er,
                  selectSkippedMutation = (e) => ei;
                return {
                  buildQuerySelector: function (e, l) {
                    return buildAnyQuerySelector(e, l, withRequestFlags);
                  },
                  buildInfiniteQuerySelector: function (e, l) {
                    let { infiniteQueryOptions: c } = l;
                    return buildAnyQuerySelector(e, l, function (e) {
                      var l, d;
                      let m = { ...e, ...getRequestStatusFlags(e.status) },
                        { isLoading: g, isError: y, direction: b } = m,
                        C = "forward" === b,
                        P = "backward" === b;
                      return {
                        ...m,
                        hasNextPage:
                          !!(l = m.data) && null != getNextPageParam(c, l),
                        hasPreviousPage:
                          !!(d = m.data) &&
                          !!c.getPreviousPageParam &&
                          null != getPreviousPageParam(c, d),
                        isFetchingNextPage: g && C,
                        isFetchingPreviousPage: g && P,
                        isFetchNextPageError: y && C,
                        isFetchPreviousPageError: y && P,
                      };
                    });
                  },
                  buildMutationSelector: function () {
                    return (e) => {
                      let l;
                      l =
                        "object" == typeof e ? getMutationCacheKey(e) ?? et : e;
                      let d =
                        l === et
                          ? selectSkippedMutation
                          : (e) => selectApiState(e)?.mutations?.[l] ?? ei;
                      return c(d, withRequestFlags);
                    };
                  },
                  selectInvalidatedBy: function (e, c) {
                    let d = e[l],
                      m = new Set();
                    for (let e of c
                      .filter(isNotNullish)
                      .map(expandTagDescription)) {
                      let l = d.provided.tags[e.type];
                      if (l)
                        for (let c of (void 0 !== e.id
                          ? l[e.id]
                          : flatten(Object.values(l))) ?? [])
                          m.add(c);
                    }
                    return flatten(
                      Array.from(m.values()).map((e) => {
                        let l = d.queries[e];
                        return l
                          ? [
                              {
                                queryCacheKey: e,
                                endpointName: l.endpointName,
                                originalArgs: l.originalArgs,
                              },
                            ]
                          : [];
                      })
                    );
                  },
                  selectCachedArgsForQuery: function (e, l) {
                    return Object.values(selectQueries(e))
                      .filter(
                        (e) =>
                          e?.endpointName === l && "uninitialized" !== e.status
                      )
                      .map((e) => e.originalArgs);
                  },
                  selectApiState,
                  selectQueries,
                  selectMutations: function (e) {
                    return selectApiState(e)?.mutations;
                  },
                  selectQueryEntry,
                  selectConfig: function (e) {
                    return selectApiState(e)?.config;
                  },
                };
                function withRequestFlags(e) {
                  return { ...e, ...getRequestStatusFlags(e.status) };
                }
                function selectApiState(e) {
                  let c = e[l];
                  return c;
                }
                function selectQueries(e) {
                  return selectApiState(e)?.queries;
                }
                function selectQueryEntry(e, l) {
                  return selectQueries(e)?.[l];
                }
                function buildAnyQuerySelector(l, d, m) {
                  return (g) => {
                    if (g === et) return c(selectSkippedQuery, m);
                    let y = e({
                      queryArgs: g,
                      endpointDefinition: d,
                      endpointName: l,
                    });
                    return c((e) => selectQueryEntry(e, y) ?? er, m);
                  };
                }
              })({ serializeQueryArgs: C, reducerPath: b, createSelector: e }),
              {
                selectInvalidatedBy: eh,
                selectCachedArgsForQuery: ef,
                buildQuerySelector: em,
                buildInfiniteQuerySelector: eg,
                buildMutationSelector: ey,
              } = ep;
            safeAssign(l.util, {
              selectInvalidatedBy: eh,
              selectCachedArgsForQuery: ef,
            });
            let {
                queryThunk: eb,
                infiniteQueryThunk: ev,
                mutationThunk: ew,
                patchQueryData: ex,
                updateQueryData: e_,
                upsertQueryData: eC,
                prefetch: eE,
                buildMatchThunkActions: eA,
              } = (function ({
                reducerPath: e,
                baseQuery: l,
                context: { endpointDefinitions: c },
                serializeQueryArgs: d,
                api: m,
                assertTagType: b,
                selectors: C,
                onSchemaFailure: P,
                catchSchemaFailure: I,
                skipSchemaValidation: N,
              }) {
                function addToStart(e, l, c = 0) {
                  let d = [l, ...e];
                  return c && d.length > c ? d.slice(0, -1) : d;
                }
                function addToEnd(e, l, c = 0) {
                  let d = [...e, l];
                  return c && d.length > c ? d.slice(1) : d;
                }
                let getTransformCallbackForEndpoint = (e, l) =>
                    e.query && e[l] ? e[l] : defaultTransformResponse,
                  executeEndpoint = async (
                    e,
                    {
                      signal: d,
                      abort: m,
                      rejectWithValue: g,
                      fulfillWithValue: y,
                      dispatch: b,
                      getState: F,
                      extra: V,
                    }
                  ) => {
                    let G = c[e.endpointName],
                      { metaSchema: Q, skipSchemaValidation: Y = N } = G;
                    try {
                      let c,
                        g = getTransformCallbackForEndpoint(
                          G,
                          "transformResponse"
                        ),
                        P = {
                          signal: d,
                          abort: m,
                          dispatch: b,
                          getState: F,
                          extra: V,
                          endpoint: e.endpointName,
                          type: e.type,
                          forced:
                            "query" === e.type ? isForcedQuery(e, F()) : void 0,
                          queryCacheKey:
                            "query" === e.type ? e.queryCacheKey : void 0,
                        },
                        I = "query" === e.type ? e[$] : void 0,
                        fetchPage = async (l, c, d, m) => {
                          if (null == c && l.pages.length)
                            return Promise.resolve({ data: l });
                          let g = { queryArg: e.originalArgs, pageParam: c },
                            y = await executeRequest(g),
                            b = m ? addToStart : addToEnd;
                          return {
                            data: {
                              pages: b(l.pages, y.data, d),
                              pageParams: b(l.pageParams, c, d),
                            },
                            meta: y.meta,
                          };
                        };
                      async function executeRequest(e) {
                        let c;
                        let {
                          extraOptions: d,
                          argSchema: m,
                          rawResponseSchema: y,
                          responseSchema: b,
                        } = G;
                        if (
                          (m &&
                            !Y &&
                            (e = await parseWithSchema(m, e, "argSchema", {})),
                          (c = I
                            ? I()
                            : G.query
                            ? await l(G.query(e), P, d)
                            : await G.queryFn(e, P, d, (e) => l(e, P, d)))
                            .error)
                        )
                          throw new B(c.error, c.meta);
                        let { data: C } = c;
                        y &&
                          !Y &&
                          (C = await parseWithSchema(
                            y,
                            c.data,
                            "rawResponseSchema",
                            c.meta
                          ));
                        let N = await g(C, c.meta, e);
                        return (
                          b &&
                            !Y &&
                            (N = await parseWithSchema(
                              b,
                              N,
                              "responseSchema",
                              c.meta
                            )),
                          { ...c, data: N }
                        );
                      }
                      if ("query" === e.type && "infiniteQueryOptions" in G) {
                        let l;
                        let { infiniteQueryOptions: d } = G,
                          { maxPages: m = 1 / 0 } = d,
                          g = C.selectQueryEntry(F(), e.queryCacheKey)?.data,
                          y = isForcedQuery(e, F()) && !e.direction,
                          b = y || !g ? { pages: [], pageParams: [] } : g;
                        if ("direction" in e && e.direction && b.pages.length) {
                          let c = "backward" === e.direction,
                            g = c ? getPreviousPageParam : getNextPageParam,
                            y = g(d, b);
                          l = await fetchPage(b, y, m, c);
                        } else {
                          let { initialPageParam: c = d.initialPageParam } = e,
                            y = g?.pageParams ?? [],
                            C = y[0] ?? c,
                            P = y.length;
                          (l = await fetchPage(b, C, m)),
                            I && (l = { data: l.data.pages[0] });
                          for (let e = 1; e < P; e++) {
                            let e = getNextPageParam(d, l.data);
                            l = await fetchPage(l.data, e, m);
                          }
                        }
                        c = l;
                      } else c = await executeRequest(e.originalArgs);
                      return (
                        Q &&
                          !Y &&
                          c.meta &&
                          (c.meta = await parseWithSchema(
                            Q,
                            c.meta,
                            "metaSchema",
                            c.meta
                          )),
                        y(
                          c.data,
                          addShouldAutoBatch({
                            fulfilledTimeStamp: Date.now(),
                            baseQueryMeta: c.meta,
                          })
                        )
                      );
                    } catch (c) {
                      let l = c;
                      if (l instanceof B) {
                        let c = getTransformCallbackForEndpoint(
                            G,
                            "transformErrorResponse"
                          ),
                          {
                            rawErrorResponseSchema: d,
                            errorResponseSchema: m,
                          } = G,
                          { value: y, meta: b } = l;
                        try {
                          d &&
                            !Y &&
                            (y = await parseWithSchema(
                              d,
                              y,
                              "rawErrorResponseSchema",
                              b
                            )),
                            Q &&
                              !Y &&
                              (b = await parseWithSchema(
                                Q,
                                b,
                                "metaSchema",
                                b
                              ));
                          let l = await c(y, b, e.originalArgs);
                          return (
                            m &&
                              !Y &&
                              (l = await parseWithSchema(
                                m,
                                l,
                                "errorResponseSchema",
                                b
                              )),
                            g(l, addShouldAutoBatch({ baseQueryMeta: b }))
                          );
                        } catch (e) {
                          l = e;
                        }
                      }
                      try {
                        if (l instanceof Z) {
                          let c = {
                            endpoint: e.endpointName,
                            arg: e.originalArgs,
                            type: e.type,
                            queryCacheKey:
                              "query" === e.type ? e.queryCacheKey : void 0,
                          };
                          G.onSchemaFailure?.(l, c), P?.(l, c);
                          let { catchSchemaFailure: d = I } = G;
                          if (d)
                            return g(
                              d(l, c),
                              addShouldAutoBatch({ baseQueryMeta: l._bqMeta })
                            );
                        }
                      } catch (e) {
                        l = e;
                      }
                      throw (console.error(l), l);
                    }
                  };
                function isForcedQuery(e, l) {
                  let c = C.selectQueryEntry(l, e.queryCacheKey),
                    d = C.selectConfig(l).refetchOnMountOrArgChange,
                    m = c?.fulfilledTimeStamp,
                    g = e.forceRefetch ?? (e.subscribe && d);
                  return (
                    !!g &&
                    (!0 === g || (Number(new Date()) - Number(m)) / 1e3 >= g)
                  );
                }
                let createQueryThunk = () => {
                    let l = (0, g.hg)(`${e}/executeQuery`, executeEndpoint, {
                      getPendingMeta({ arg: e }) {
                        let l = c[e.endpointName];
                        return addShouldAutoBatch({
                          startedTimeStamp: Date.now(),
                          ...(isInfiniteQueryDefinition(l)
                            ? { direction: e.direction }
                            : {}),
                        });
                      },
                      condition(e, { getState: l }) {
                        let d = l(),
                          m = C.selectQueryEntry(d, e.queryCacheKey),
                          g = m?.fulfilledTimeStamp,
                          y = e.originalArgs,
                          b = m?.originalArgs,
                          P = c[e.endpointName],
                          I = e.direction;
                        return (
                          !!isUpsertQuery(e) ||
                          (m?.status !== "pending" &&
                            (!!(
                              isForcedQuery(e, d) ||
                              (isQueryDefinition(P) &&
                                P?.forceRefetch?.({
                                  currentArg: y,
                                  previousArg: b,
                                  endpointState: m,
                                  state: d,
                                }))
                            ) ||
                              !g ||
                              !!I))
                        );
                      },
                      dispatchConditionRejection: !0,
                    });
                    return l;
                  },
                  F = createQueryThunk(),
                  V = createQueryThunk(),
                  G = (0, g.hg)(`${e}/executeMutation`, executeEndpoint, {
                    getPendingMeta: () =>
                      addShouldAutoBatch({ startedTimeStamp: Date.now() }),
                  }),
                  hasTheForce = (e) => "force" in e,
                  hasMaxAge = (e) => "ifOlderThan" in e;
                function matchesEndpoint(e) {
                  return (l) => l?.meta?.arg?.endpointName === e;
                }
                return {
                  queryThunk: F,
                  mutationThunk: G,
                  infiniteQueryThunk: V,
                  prefetch: (e, l, c) => (d, g) => {
                    let y = hasTheForce(c) && c.force,
                      b = hasMaxAge(c) && c.ifOlderThan,
                      queryAction = (c = !0) =>
                        m.endpoints[e].initiate(l, {
                          forceRefetch: c,
                          isPrefetch: !0,
                        }),
                      C = m.endpoints[e].select(l)(g());
                    if (y) d(queryAction());
                    else if (b) {
                      let e = C?.fulfilledTimeStamp;
                      if (!e) {
                        d(queryAction());
                        return;
                      }
                      let l =
                        (Number(new Date()) - Number(new Date(e))) / 1e3 >= b;
                      l && d(queryAction());
                    } else d(queryAction(!1));
                  },
                  updateQueryData:
                    (e, l, c, d = !0) =>
                    (g, b) => {
                      let C;
                      let P = m.endpoints[e],
                        I = P.select(l)(b()),
                        B = {
                          patches: [],
                          inversePatches: [],
                          undo: () =>
                            g(m.util.patchQueryData(e, l, B.inversePatches, d)),
                        };
                      if ("uninitialized" === I.status) return B;
                      if ("data" in I) {
                        if ((0, y.o$)(I.data)) {
                          let [e, l, d] = (0, y.aS)(I.data, c);
                          B.patches.push(...l),
                            B.inversePatches.push(...d),
                            (C = e);
                        } else
                          (C = c(I.data)),
                            B.patches.push({
                              op: "replace",
                              path: [],
                              value: C,
                            }),
                            B.inversePatches.push({
                              op: "replace",
                              path: [],
                              value: I.data,
                            });
                      }
                      return (
                        0 === B.patches.length ||
                          g(m.util.patchQueryData(e, l, B.patches, d)),
                        B
                      );
                    },
                  upsertQueryData: (e, l, c) => (d) => {
                    let g = d(
                      m.endpoints[e].initiate(l, {
                        subscribe: !1,
                        forceRefetch: !0,
                        [$]: () => ({ data: c }),
                      })
                    );
                    return g;
                  },
                  patchQueryData: (e, l, g, y) => (C, P) => {
                    let I = c[e],
                      B = d({
                        queryArgs: l,
                        endpointDefinition: I,
                        endpointName: e,
                      });
                    if (
                      (C(
                        m.internalActions.queryResultPatched({
                          queryCacheKey: B,
                          patches: g,
                        })
                      ),
                      !y)
                    )
                      return;
                    let N = m.endpoints[e].select(l)(P()),
                      F = calculateProvidedBy(
                        I.providesTags,
                        N.data,
                        void 0,
                        l,
                        {},
                        b
                      );
                    C(
                      m.internalActions.updateProvidedBy([
                        { queryCacheKey: B, providedTags: F },
                      ])
                    );
                  },
                  buildMatchThunkActions: function (e, l) {
                    return {
                      matchPending: (0, g.A6)((0, g.zR)(e), matchesEndpoint(l)),
                      matchFulfilled: (0, g.A6)(
                        (0, g.KD)(e),
                        matchesEndpoint(l)
                      ),
                      matchRejected: (0, g.A6)(
                        (0, g.Iv)(e),
                        matchesEndpoint(l)
                      ),
                    };
                  },
                };
              })({
                baseQuery: c,
                reducerPath: b,
                context: ed,
                api: l,
                serializeQueryArgs: C,
                assertTagType,
                selectors: ep,
                onSchemaFailure: el,
                catchSchemaFailure: ec,
                skipSchemaValidation: eu,
              }),
              { reducer: eS, actions: ek } = (function ({
                reducerPath: e,
                queryThunk: l,
                mutationThunk: c,
                serializeQueryArgs: d,
                context: {
                  endpointDefinitions: b,
                  apiUid: C,
                  extractRehydrationInfo: P,
                  hasRehydrationInfo: B,
                },
                assertTagType: Q,
                config: $,
              }) {
                let Z = (0, g.PH)(`${e}/resetApiState`);
                function writePendingCacheEntry(e, l, c, d) {
                  (e[l.queryCacheKey] ??= {
                    status: "uninitialized",
                    endpointName: l.endpointName,
                  }),
                    updateQuerySubstateIfExists(e, l.queryCacheKey, (e) => {
                      (e.status = "pending"),
                        (e.requestId =
                          c && e.requestId ? e.requestId : d.requestId),
                        void 0 !== l.originalArgs &&
                          (e.originalArgs = l.originalArgs),
                        (e.startedTimeStamp = d.startedTimeStamp);
                      let m = b[d.arg.endpointName];
                      isInfiniteQueryDefinition(m) &&
                        "direction" in l &&
                        (e.direction = l.direction);
                    });
                }
                function writeFulfilledCacheEntry(e, l, c, d) {
                  updateQuerySubstateIfExists(e, l.arg.queryCacheKey, (e) => {
                    if (e.requestId !== l.requestId && !d) return;
                    let { merge: m } = b[l.arg.endpointName];
                    if (((e.status = "fulfilled"), m)) {
                      if (void 0 !== e.data) {
                        let {
                            fulfilledTimeStamp: d,
                            arg: g,
                            baseQueryMeta: b,
                            requestId: C,
                          } = l,
                          P = (0, y.Uy)(e.data, (e) =>
                            m(e, c, {
                              arg: g.originalArgs,
                              baseQueryMeta: b,
                              fulfilledTimeStamp: d,
                              requestId: C,
                            })
                          );
                        e.data = P;
                      } else e.data = c;
                    } else
                      e.data =
                        b[l.arg.endpointName].structuralSharing ?? !0
                          ? (function copyWithStructuralSharing(e, l) {
                              if (
                                e === l ||
                                !(
                                  (I(e) && I(l)) ||
                                  (Array.isArray(e) && Array.isArray(l))
                                )
                              )
                                return l;
                              let c = Object.keys(l),
                                d = Object.keys(e),
                                m = c.length === d.length,
                                g = Array.isArray(l) ? [] : {};
                              for (let d of c)
                                (g[d] = copyWithStructuralSharing(e[d], l[d])),
                                  m && (m = e[d] === g[d]);
                              return m ? e : g;
                            })(
                              (0, y.mv)(e.data) ? (0, y.Js)(e.data) : e.data,
                              c
                            )
                          : c;
                    delete e.error,
                      (e.fulfilledTimeStamp = l.fulfilledTimeStamp);
                  });
                }
                let et = (0, g.oM)({
                    name: `${e}/queries`,
                    initialState: Y,
                    reducers: {
                      removeQueryResult: {
                        reducer(e, { payload: { queryCacheKey: l } }) {
                          delete e[l];
                        },
                        prepare: (0, g.cw)(),
                      },
                      cacheEntriesUpserted: {
                        reducer(e, l) {
                          for (let c of l.payload) {
                            let { queryDescription: d, value: m } = c;
                            writePendingCacheEntry(e, d, !0, {
                              arg: d,
                              requestId: l.meta.requestId,
                              startedTimeStamp: l.meta.timestamp,
                            }),
                              writeFulfilledCacheEntry(
                                e,
                                {
                                  arg: d,
                                  requestId: l.meta.requestId,
                                  fulfilledTimeStamp: l.meta.timestamp,
                                  baseQueryMeta: {},
                                },
                                m,
                                !0
                              );
                          }
                        },
                        prepare: (e) => {
                          let l = e.map((e) => {
                              let { endpointName: l, arg: c, value: m } = e,
                                g = b[l],
                                y = {
                                  type: "query",
                                  endpointName: l,
                                  originalArgs: e.arg,
                                  queryCacheKey: d({
                                    queryArgs: c,
                                    endpointDefinition: g,
                                    endpointName: l,
                                  }),
                                };
                              return { queryDescription: y, value: m };
                            }),
                            c = {
                              payload: l,
                              meta: {
                                [g.s4]: !0,
                                requestId: (0, g.x0)(),
                                timestamp: Date.now(),
                              },
                            };
                          return c;
                        },
                      },
                      queryResultPatched: {
                        reducer(
                          e,
                          { payload: { queryCacheKey: l, patches: c } }
                        ) {
                          updateQuerySubstateIfExists(e, l, (e) => {
                            e.data = (0, y.QE)(e.data, c.concat());
                          });
                        },
                        prepare: (0, g.cw)(),
                      },
                    },
                    extraReducers(e) {
                      e.addCase(
                        l.pending,
                        (e, { meta: l, meta: { arg: c } }) => {
                          let d = isUpsertQuery(c);
                          writePendingCacheEntry(e, c, d, l);
                        }
                      )
                        .addCase(l.fulfilled, (e, { meta: l, payload: c }) => {
                          let d = isUpsertQuery(l.arg);
                          writeFulfilledCacheEntry(e, l, c, d);
                        })
                        .addCase(
                          l.rejected,
                          (
                            e,
                            {
                              meta: { condition: l, arg: c, requestId: d },
                              error: m,
                              payload: g,
                            }
                          ) => {
                            updateQuerySubstateIfExists(
                              e,
                              c.queryCacheKey,
                              (e) => {
                                if (l);
                                else {
                                  if (e.requestId !== d) return;
                                  (e.status = "rejected"), (e.error = g ?? m);
                                }
                              }
                            );
                          }
                        )
                        .addMatcher(B, (e, l) => {
                          let { queries: c } = P(l);
                          for (let [l, d] of Object.entries(c))
                            (d?.status === "fulfilled" ||
                              d?.status === "rejected") &&
                              (e[l] = d);
                        });
                    },
                  }),
                  en = (0, g.oM)({
                    name: `${e}/mutations`,
                    initialState: Y,
                    reducers: {
                      removeMutationResult: {
                        reducer(e, { payload: l }) {
                          let c = getMutationCacheKey(l);
                          c in e && delete e[c];
                        },
                        prepare: (0, g.cw)(),
                      },
                    },
                    extraReducers(e) {
                      e.addCase(
                        c.pending,
                        (
                          e,
                          {
                            meta: l,
                            meta: { requestId: c, arg: d, startedTimeStamp: m },
                          }
                        ) => {
                          d.track &&
                            (e[getMutationCacheKey(l)] = {
                              requestId: c,
                              status: "pending",
                              endpointName: d.endpointName,
                              startedTimeStamp: m,
                            });
                        }
                      )
                        .addCase(c.fulfilled, (e, { payload: l, meta: c }) => {
                          c.arg.track &&
                            updateMutationSubstateIfExists(e, c, (e) => {
                              e.requestId === c.requestId &&
                                ((e.status = "fulfilled"),
                                (e.data = l),
                                (e.fulfilledTimeStamp = c.fulfilledTimeStamp));
                            });
                        })
                        .addCase(
                          c.rejected,
                          (e, { payload: l, error: c, meta: d }) => {
                            d.arg.track &&
                              updateMutationSubstateIfExists(e, d, (e) => {
                                e.requestId === d.requestId &&
                                  ((e.status = "rejected"), (e.error = l ?? c));
                              });
                          }
                        )
                        .addMatcher(B, (e, l) => {
                          let { mutations: c } = P(l);
                          for (let [l, d] of Object.entries(c))
                            (d?.status === "fulfilled" ||
                              d?.status === "rejected") &&
                              l !== d?.requestId &&
                              (e[l] = d);
                        });
                    },
                  }),
                  er = (0, g.oM)({
                    name: `${e}/invalidation`,
                    initialState: { tags: {}, keys: {} },
                    reducers: {
                      updateProvidedBy: {
                        reducer(e, l) {
                          for (let {
                            queryCacheKey: c,
                            providedTags: d,
                          } of l.payload) {
                            for (let {
                              type: l,
                              id: m,
                            } of (removeCacheKeyFromTags(e, c), d)) {
                              let d = ((e.tags[l] ??= {})[
                                  m || "__internal_without_id"
                                ] ??= []),
                                g = d.includes(c);
                              g || d.push(c);
                            }
                            e.keys[c] = d;
                          }
                        },
                        prepare: (0, g.cw)(),
                      },
                    },
                    extraReducers(e) {
                      e.addCase(
                        et.actions.removeQueryResult,
                        (e, { payload: { queryCacheKey: l } }) => {
                          removeCacheKeyFromTags(e, l);
                        }
                      )
                        .addMatcher(B, (e, l) => {
                          let { provided: c } = P(l);
                          for (let [l, d] of Object.entries(c))
                            for (let [c, m] of Object.entries(d)) {
                              let d = ((e.tags[l] ??= {})[
                                c || "__internal_without_id"
                              ] ??= []);
                              for (let e of m) {
                                let l = d.includes(e);
                                l || d.push(e);
                              }
                            }
                        })
                        .addMatcher(
                          (0, g.Q)((0, g.KD)(l), (0, g.h_)(l)),
                          (e, l) => {
                            writeProvidedTagsForQueries(e, [l]);
                          }
                        )
                        .addMatcher(
                          et.actions.cacheEntriesUpserted.match,
                          (e, l) => {
                            let c = l.payload.map(
                              ({ queryDescription: e, value: l }) => ({
                                type: "UNKNOWN",
                                payload: l,
                                meta: {
                                  requestStatus: "fulfilled",
                                  requestId: "UNKNOWN",
                                  arg: e,
                                },
                              })
                            );
                            writeProvidedTagsForQueries(e, c);
                          }
                        );
                    },
                  });
                function removeCacheKeyFromTags(e, l) {
                  let c = e.keys[l] ?? [];
                  for (let d of c) {
                    let c = d.type,
                      m = d.id ?? "__internal_without_id",
                      g = e.tags[c]?.[m];
                    g && (e.tags[c][m] = g.filter((e) => e !== l));
                  }
                  delete e.keys[l];
                }
                function writeProvidedTagsForQueries(e, l) {
                  let c = l.map((e) => {
                    let l = calculateProvidedByThunk(e, "providesTags", b, Q),
                      { queryCacheKey: c } = e.meta.arg;
                    return { queryCacheKey: c, providedTags: l };
                  });
                  er.caseReducers.updateProvidedBy(
                    e,
                    er.actions.updateProvidedBy(c)
                  );
                }
                let ei = (0, g.oM)({
                    name: `${e}/subscriptions`,
                    initialState: Y,
                    reducers: {
                      updateSubscriptionOptions(e, l) {},
                      unsubscribeQueryResult(e, l) {},
                      internal_getRTKQSubscriptions() {},
                    },
                  }),
                  eo = (0, g.oM)({
                    name: `${e}/internalSubscriptions`,
                    initialState: Y,
                    reducers: {
                      subscriptionsUpdated: {
                        reducer: (e, l) => (0, y.QE)(e, l.payload),
                        prepare: (0, g.cw)(),
                      },
                    },
                  }),
                  ea = (0, g.oM)({
                    name: `${e}/config`,
                    initialState: {
                      online:
                        "undefined" == typeof navigator ||
                        void 0 === navigator.onLine ||
                        navigator.onLine,
                      focused:
                        "undefined" == typeof document ||
                        "hidden" !== document.visibilityState,
                      middlewareRegistered: !1,
                      ...$,
                    },
                    reducers: {
                      middlewareRegistered(e, { payload: l }) {
                        e.middlewareRegistered =
                          ("conflict" !== e.middlewareRegistered && C === l) ||
                          "conflict";
                      },
                    },
                    extraReducers: (e) => {
                      e.addCase(V, (e) => {
                        e.online = !0;
                      })
                        .addCase(G, (e) => {
                          e.online = !1;
                        })
                        .addCase(N, (e) => {
                          e.focused = !0;
                        })
                        .addCase(F, (e) => {
                          e.focused = !1;
                        })
                        .addMatcher(B, (e) => ({ ...e }));
                    },
                  }),
                  es = (0, m.UY)({
                    queries: et.reducer,
                    mutations: en.reducer,
                    provided: er.reducer,
                    subscriptions: eo.reducer,
                    config: ea.reducer,
                  }),
                  el = {
                    ...ea.actions,
                    ...et.actions,
                    ...ei.actions,
                    ...eo.actions,
                    ...en.actions,
                    ...er.actions,
                    resetApiState: Z,
                  };
                return {
                  reducer: (e, l) => es(Z.match(l) ? void 0 : e, l),
                  actions: el,
                };
              })({
                context: ed,
                queryThunk: eb,
                infiniteQueryThunk: ev,
                mutationThunk: ew,
                serializeQueryArgs: C,
                reducerPath: b,
                assertTagType,
                config: {
                  refetchOnFocus: en,
                  refetchOnReconnect: eo,
                  refetchOnMountOrArgChange: Q,
                  keepUnusedDataFor: P,
                  reducerPath: b,
                  invalidationBehavior: ea,
                },
              });
            safeAssign(l.util, {
              patchQueryData: ex,
              updateQueryData: e_,
              upsertQueryData: eC,
              prefetch: eE,
              resetApiState: ek.resetApiState,
              upsertQueryEntries: ek.cacheEntriesUpserted,
            }),
              safeAssign(l.internalActions, ek);
            let { middleware: eP, actions: eM } = (function (e) {
              let { reducerPath: l, queryThunk: c, api: d, context: y } = e,
                { apiUid: b } = y,
                C = { invalidateTags: (0, g.PH)(`${l}/invalidateTags`) },
                isThisApiSliceAction = (e) => e.type.startsWith(`${l}/`),
                P = [
                  buildDevCheckHandler,
                  buildCacheCollectionHandler,
                  buildInvalidationByTagsHandler,
                  buildPollingHandler,
                  buildCacheLifecycleHandler,
                  buildQueryLifecycleHandler,
                ];
              return {
                middleware: (c) => {
                  let g = !1,
                    C = {
                      ...e,
                      internalState: { currentSubscriptions: {} },
                      refetchQuery,
                      isThisApiSliceAction,
                    },
                    I = P.map((e) => e(C)),
                    B = buildBatchedActionsHandler(C),
                    N = buildWindowEventHandler(C);
                  return (e) => (C) => {
                    let P;
                    if (!(0, m.LG)(C)) return e(C);
                    g ||
                      ((g = !0),
                      c.dispatch(d.internalActions.middlewareRegistered(b)));
                    let F = { ...c, next: e },
                      V = c.getState(),
                      [G, Q] = B(C, F, V);
                    if (
                      ((P = G ? e(C) : Q),
                      c.getState()[l] &&
                        (N(C, F, V),
                        isThisApiSliceAction(C) || y.hasRehydrationInfo(C)))
                    )
                      for (let e of I) e(C, F, V);
                    return P;
                  };
                },
                actions: C,
              };
              function refetchQuery(l) {
                return e.api.endpoints[l.endpointName].initiate(
                  l.originalArgs,
                  { subscribe: !1, forceRefetch: !0 }
                );
              }
            })({
              reducerPath: b,
              context: ed,
              queryThunk: eb,
              mutationThunk: ew,
              infiniteQueryThunk: ev,
              api: l,
              assertTagType,
              selectors: ep,
            });
            safeAssign(l.util, eM),
              safeAssign(l, { reducer: eS, middleware: eP });
            let {
              buildInitiateQuery: eT,
              buildInitiateInfiniteQuery: eI,
              buildInitiateMutation: ej,
              getRunningMutationThunk: eO,
              getRunningMutationsThunk: eB,
              getRunningQueriesThunk: eD,
              getRunningQueryThunk: eN,
            } = (function ({
              serializeQueryArgs: e,
              queryThunk: l,
              infiniteQueryThunk: c,
              mutationThunk: d,
              api: m,
              context: g,
            }) {
              let y = new Map(),
                b = new Map(),
                {
                  unsubscribeQueryResult: C,
                  removeMutationResult: P,
                  updateSubscriptionOptions: I,
                } = m.internalActions;
              return {
                buildInitiateQuery: function (e, l) {
                  let c = buildInitiateAnyQuery(e, l);
                  return c;
                },
                buildInitiateInfiniteQuery: function (e, l) {
                  let c = buildInitiateAnyQuery(e, l);
                  return c;
                },
                buildInitiateMutation: function (e) {
                  return (l, { track: c = !0, fixedCacheKey: m } = {}) =>
                    (g, y) => {
                      let C = d({
                          type: "mutation",
                          endpointName: e,
                          originalArgs: l,
                          track: c,
                          fixedCacheKey: m,
                        }),
                        I = g(C),
                        { requestId: B, abort: N, unwrap: F } = I,
                        V = I.unwrap()
                          .then((e) => ({ data: e }))
                          .catch((e) => ({ error: e })),
                        G = Object.assign(V, {
                          arg: I.arg,
                          requestId: B,
                          abort: N,
                          unwrap: F,
                          reset: () => {
                            g(P({ requestId: B, fixedCacheKey: m }));
                          },
                        }),
                        Q = b.get(g) || {};
                      return (
                        b.set(g, Q),
                        (Q[B] = G),
                        G.then(() => {
                          delete Q[B], countObjectKeys(Q) || b.delete(g);
                        }),
                        m &&
                          ((Q[m] = G),
                          G.then(() => {
                            Q[m] !== G ||
                              (delete Q[m], countObjectKeys(Q) || b.delete(g));
                          })),
                        G
                      );
                    };
                },
                getRunningQueryThunk: function (l, c) {
                  return (d) => {
                    let m = g.endpointDefinitions[l],
                      b = e({
                        queryArgs: c,
                        endpointDefinition: m,
                        endpointName: l,
                      });
                    return y.get(d)?.[b];
                  };
                },
                getRunningMutationThunk: function (e, l) {
                  return (e) => b.get(e)?.[l];
                },
                getRunningQueriesThunk: function () {
                  return (e) =>
                    Object.values(y.get(e) || {}).filter(isNotNullish);
                },
                getRunningMutationsThunk: function () {
                  return (e) =>
                    Object.values(b.get(e) || {}).filter(isNotNullish);
                },
              };
              function buildInitiateAnyQuery(d, g) {
                let queryAction =
                  (
                    b,
                    {
                      subscribe: P = !0,
                      forceRefetch: B,
                      subscriptionOptions: N,
                      [$]: F,
                      ...V
                    } = {}
                  ) =>
                  (G, Q) => {
                    let Z;
                    let Y = e({
                        queryArgs: b,
                        endpointDefinition: g,
                        endpointName: d,
                      }),
                      et = {
                        ...V,
                        type: "query",
                        subscribe: P,
                        forceRefetch: B,
                        subscriptionOptions: N,
                        endpointName: d,
                        originalArgs: b,
                        queryCacheKey: Y,
                        [$]: F,
                      };
                    if (isQueryDefinition(g)) Z = l(et);
                    else {
                      let { direction: e, initialPageParam: l } = V;
                      Z = c({ ...et, direction: e, initialPageParam: l });
                    }
                    let en = m.endpoints[d].select(b),
                      er = G(Z),
                      ei = en(Q()),
                      { requestId: eo, abort: ea } = er,
                      es = ei.requestId !== eo,
                      el = y.get(G)?.[Y],
                      selectFromState = () => en(Q()),
                      ec = Object.assign(
                        F
                          ? er.then(selectFromState)
                          : es && !el
                          ? Promise.resolve(ei)
                          : Promise.all([el, er]).then(selectFromState),
                        {
                          arg: b,
                          requestId: eo,
                          subscriptionOptions: N,
                          queryCacheKey: Y,
                          abort: ea,
                          async unwrap() {
                            let e = await ec;
                            if (e.isError) throw e.error;
                            return e.data;
                          },
                          refetch: () =>
                            G(
                              queryAction(b, {
                                subscribe: !1,
                                forceRefetch: !0,
                              })
                            ),
                          unsubscribe() {
                            P && G(C({ queryCacheKey: Y, requestId: eo }));
                          },
                          updateSubscriptionOptions(e) {
                            (ec.subscriptionOptions = e),
                              G(
                                I({
                                  endpointName: d,
                                  requestId: eo,
                                  queryCacheKey: Y,
                                  options: e,
                                })
                              );
                          },
                        }
                      );
                    if (!el && !es && !F) {
                      let e = y.has(G) ? y.get(G) : y.set(G, {}).get(G);
                      (e[Y] = ec),
                        ec.then(() => {
                          delete e[Y], countObjectKeys(e) || y.delete(G);
                        });
                    }
                    return ec;
                  };
                return queryAction;
              }
            })({
              queryThunk: eb,
              mutationThunk: ew,
              infiniteQueryThunk: ev,
              api: l,
              serializeQueryArgs: C,
              context: ed,
            });
            return (
              safeAssign(l.util, {
                getRunningMutationThunk: eO,
                getRunningMutationsThunk: eB,
                getRunningQueryThunk: eN,
                getRunningQueriesThunk: eD,
              }),
              {
                name: es,
                injectEndpoint(e, c) {
                  let d = (l.endpoints[e] ??= {});
                  isQueryDefinition(c) &&
                    safeAssign(
                      d,
                      { name: e, select: em(e, c), initiate: eT(e, c) },
                      eA(eb, e)
                    ),
                    "mutation" === c.type &&
                      safeAssign(
                        d,
                        { name: e, select: ey(), initiate: ej(e) },
                        eA(ew, e)
                      ),
                    isInfiniteQueryDefinition(c) &&
                      safeAssign(
                        d,
                        { name: e, select: eg(e, c), initiate: eI(e, c) },
                        eA(eb, e)
                      );
                },
              }
            );
          },
        });
      coreModule();
    },
    89239: function (e, l, c) {
      "use strict";
      c.d(l, {
        s4: function () {
          return P;
        },
        xC: function () {
          return configureStore;
        },
        PH: function () {
          return createAction;
        },
        hg: function () {
          return V;
        },
        oM: function () {
          return $;
        },
        rJ: function () {
          return formatProdErrorMessage;
        },
        A6: function () {
          return isAllOf;
        },
        Q: function () {
          return isAnyOf;
        },
        Gx: function () {
          return function isAsyncThunkAction(...e) {
            return 0 === e.length
              ? (e) =>
                  hasExpectedRequestMetadata(e, [
                    "pending",
                    "fulfilled",
                    "rejected",
                  ])
              : isAsyncThunkArray(e)
              ? isAnyOf(
                  ...e.flatMap((e) => [e.pending, e.rejected, e.fulfilled])
                )
              : isAsyncThunkAction()(e[0]);
          };
        },
        KD: function () {
          return function isFulfilled(...e) {
            return 0 === e.length
              ? (e) => hasExpectedRequestMetadata(e, ["fulfilled"])
              : isAsyncThunkArray(e)
              ? isAnyOf(...e.map((e) => e.fulfilled))
              : isFulfilled()(e[0]);
          };
        },
        zR: function () {
          return function isPending(...e) {
            return 0 === e.length
              ? (e) => hasExpectedRequestMetadata(e, ["pending"])
              : isAsyncThunkArray(e)
              ? isAnyOf(...e.map((e) => e.pending))
              : isPending()(e[0]);
          };
        },
        Iv: function () {
          return isRejected;
        },
        h_: function () {
          return function isRejectedWithValue(...e) {
            let hasFlag = (e) => e && e.meta && e.meta.rejectedWithValue;
            return 0 === e.length
              ? isAllOf(isRejected(...e), hasFlag)
              : isAsyncThunkArray(e)
              ? isAllOf(isRejected(...e), hasFlag)
              : isRejectedWithValue()(e[0]);
          };
        },
        x0: function () {
          return nanoid;
        },
        cw: function () {
          return prepareAutoBatched;
        },
      });
      var d,
        m = c(91367);
      function createThunkMiddleware(e) {
        return ({ dispatch: l, getState: c }) =>
          (d) =>
          (m) =>
            "function" == typeof m ? m(l, c, e) : d(m);
      }
      var g = createThunkMiddleware(),
        y = c(53874);
      c(21481);
      var b =
        "undefined" != typeof window &&
        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
          ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
          : function () {
              if (0 != arguments.length)
                return "object" == typeof arguments[0]
                  ? m.qC
                  : m.qC.apply(null, arguments);
            };
      "undefined" != typeof window &&
        window.__REDUX_DEVTOOLS_EXTENSION__ &&
        window.__REDUX_DEVTOOLS_EXTENSION__;
      var hasMatchFunction = (e) => e && "function" == typeof e.match;
      function createAction(e, l) {
        function actionCreator(...c) {
          if (l) {
            let d = l(...c);
            if (!d) throw Error(formatProdErrorMessage(0));
            return {
              type: e,
              payload: d.payload,
              ...("meta" in d && { meta: d.meta }),
              ...("error" in d && { error: d.error }),
            };
          }
          return { type: e, payload: c[0] };
        }
        return (
          (actionCreator.toString = () => `${e}`),
          (actionCreator.type = e),
          (actionCreator.match = (l) => (0, m.LG)(l) && l.type === e),
          actionCreator
        );
      }
      var C = class _Tuple extends Array {
        constructor(...e) {
          super(...e), Object.setPrototypeOf(this, _Tuple.prototype);
        }
        static get [Symbol.species]() {
          return _Tuple;
        }
        concat(...e) {
          return super.concat.apply(this, e);
        }
        prepend(...e) {
          return 1 === e.length && Array.isArray(e[0])
            ? new _Tuple(...e[0].concat(this))
            : new _Tuple(...e.concat(this));
        }
      };
      function freezeDraftable(e) {
        return (0, y.o$)(e) ? (0, y.Uy)(e, () => {}) : e;
      }
      function getOrInsertComputed(e, l, c) {
        return e.has(l) ? e.get(l) : e.set(l, c(l)).get(l);
      }
      var buildGetDefaultMiddleware = () =>
          function (e) {
            let {
                thunk: l = !0,
                immutableCheck: c = !0,
                serializableCheck: d = !0,
                actionCreatorCheck: m = !0,
              } = e ?? {},
              y = new C();
            return (
              l &&
                ("boolean" == typeof l
                  ? y.push(g)
                  : y.push(createThunkMiddleware(l.extraArgument))),
              y
            );
          },
        P = "RTK_autoBatch",
        prepareAutoBatched = () => (e) => ({ payload: e, meta: { [P]: !0 } }),
        createQueueWithTimer = (e) => (l) => {
          setTimeout(l, e);
        },
        autoBatchEnhancer =
          (e = { type: "raf" }) =>
          (l) =>
          (...c) => {
            let d = l(...c),
              m = !0,
              g = !1,
              y = !1,
              b = new Set(),
              C =
                "tick" === e.type
                  ? queueMicrotask
                  : "raf" === e.type
                  ? "undefined" != typeof window && window.requestAnimationFrame
                    ? window.requestAnimationFrame
                    : createQueueWithTimer(10)
                  : "callback" === e.type
                  ? e.queueNotification
                  : createQueueWithTimer(e.timeout),
              notifyListeners = () => {
                (y = !1), g && ((g = !1), b.forEach((e) => e()));
              };
            return Object.assign({}, d, {
              subscribe(e) {
                let l = d.subscribe(() => m && e());
                return (
                  b.add(e),
                  () => {
                    l(), b.delete(e);
                  }
                );
              },
              dispatch(e) {
                try {
                  return (
                    (g = !(m = !e?.meta?.[P])) &&
                      !y &&
                      ((y = !0), C(notifyListeners)),
                    d.dispatch(e)
                  );
                } finally {
                  m = !0;
                }
              },
            });
          },
        buildGetDefaultEnhancers = (e) =>
          function (l) {
            let { autoBatch: c = !0 } = l ?? {},
              d = new C(e);
            return (
              c && d.push(autoBatchEnhancer("object" == typeof c ? c : void 0)),
              d
            );
          };
      function configureStore(e) {
        let l, c;
        let d = buildGetDefaultMiddleware(),
          {
            reducer: g,
            middleware: y,
            devTools: C = !0,
            duplicateMiddlewareCheck: P = !0,
            preloadedState: I,
            enhancers: B,
          } = e || {};
        if ("function" == typeof g) l = g;
        else if ((0, m.PO)(g)) l = (0, m.UY)(g);
        else throw Error(formatProdErrorMessage(1));
        c = "function" == typeof y ? y(d) : d();
        let N = m.qC;
        C && (N = b({ trace: !1, ...("object" == typeof C && C) }));
        let F = (0, m.md)(...c),
          V = buildGetDefaultEnhancers(F),
          G = "function" == typeof B ? B(V) : V(),
          Q = N(...G);
        return (0, m.MT)(l, I, Q);
      }
      function executeReducerBuilderCallback(e) {
        let l;
        let c = {},
          d = [],
          m = {
            addCase(e, l) {
              let d = "string" == typeof e ? e : e.type;
              if (!d) throw Error(formatProdErrorMessage(28));
              if (d in c) throw Error(formatProdErrorMessage(29));
              return (c[d] = l), m;
            },
            addMatcher: (e, l) => (d.push({ matcher: e, reducer: l }), m),
            addDefaultCase: (e) => ((l = e), m),
          };
        return e(m), [c, d, l];
      }
      var matches = (e, l) => (hasMatchFunction(e) ? e.match(l) : e(l));
      function isAnyOf(...e) {
        return (l) => e.some((e) => matches(e, l));
      }
      function isAllOf(...e) {
        return (l) => e.every((e) => matches(e, l));
      }
      function hasExpectedRequestMetadata(e, l) {
        if (!e || !e.meta) return !1;
        let c = "string" == typeof e.meta.requestId,
          d = l.indexOf(e.meta.requestStatus) > -1;
        return c && d;
      }
      function isAsyncThunkArray(e) {
        return (
          "function" == typeof e[0] &&
          "pending" in e[0] &&
          "fulfilled" in e[0] &&
          "rejected" in e[0]
        );
      }
      function isRejected(...e) {
        return 0 === e.length
          ? (e) => hasExpectedRequestMetadata(e, ["rejected"])
          : isAsyncThunkArray(e)
          ? isAnyOf(...e.map((e) => e.rejected))
          : isRejected()(e[0]);
      }
      var nanoid = (e = 21) => {
          let l = "",
            c = e;
          for (; c--; )
            l +=
              "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[
                (64 * Math.random()) | 0
              ];
          return l;
        },
        I = ["name", "message", "stack", "code"],
        B = class {
          constructor(e, l) {
            (this.payload = e), (this.meta = l);
          }
          _type;
        },
        N = class {
          constructor(e, l) {
            (this.payload = e), (this.meta = l);
          }
          _type;
        },
        miniSerializeError = (e) => {
          if ("object" == typeof e && null !== e) {
            let l = {};
            for (let c of I) "string" == typeof e[c] && (l[c] = e[c]);
            return l;
          }
          return { message: String(e) };
        },
        F = "External signal was aborted",
        V = (() => {
          function createAsyncThunk2(e, l, c) {
            let d = createAction(e + "/fulfilled", (e, l, c, d) => ({
                payload: e,
                meta: {
                  ...(d || {}),
                  arg: c,
                  requestId: l,
                  requestStatus: "fulfilled",
                },
              })),
              m = createAction(e + "/pending", (e, l, c) => ({
                payload: void 0,
                meta: {
                  ...(c || {}),
                  arg: l,
                  requestId: e,
                  requestStatus: "pending",
                },
              })),
              g = createAction(e + "/rejected", (e, l, d, m, g) => ({
                payload: m,
                error: ((c && c.serializeError) || miniSerializeError)(
                  e || "Rejected"
                ),
                meta: {
                  ...(g || {}),
                  arg: d,
                  requestId: l,
                  rejectedWithValue: !!m,
                  requestStatus: "rejected",
                  aborted: e?.name === "AbortError",
                  condition: e?.name === "ConditionError",
                },
              }));
            return Object.assign(
              function (e, { signal: y } = {}) {
                return (b, C, P) => {
                  let I, V;
                  let G = c?.idGenerator ? c.idGenerator(e) : nanoid(),
                    Q = new AbortController();
                  function abort(e) {
                    (V = e), Q.abort();
                  }
                  y &&
                    (y.aborted
                      ? abort(F)
                      : y.addEventListener("abort", () => abort(F), {
                          once: !0,
                        }));
                  let $ = (async function () {
                    let y;
                    try {
                      var F;
                      let g = c?.condition?.(e, { getState: C, extra: P });
                      if (
                        ((F = g),
                        null !== F &&
                          "object" == typeof F &&
                          "function" == typeof F.then &&
                          (g = await g),
                        !1 === g || Q.signal.aborted)
                      )
                        throw {
                          name: "ConditionError",
                          message:
                            "Aborted due to condition callback returning false.",
                        };
                      let $ = new Promise((e, l) => {
                        (I = () => {
                          l({ name: "AbortError", message: V || "Aborted" });
                        }),
                          Q.signal.addEventListener("abort", I);
                      });
                      b(
                        m(
                          G,
                          e,
                          c?.getPendingMeta?.(
                            { requestId: G, arg: e },
                            { getState: C, extra: P }
                          )
                        )
                      ),
                        (y = await Promise.race([
                          $,
                          Promise.resolve(
                            l(e, {
                              dispatch: b,
                              getState: C,
                              extra: P,
                              requestId: G,
                              signal: Q.signal,
                              abort,
                              rejectWithValue: (e, l) => new B(e, l),
                              fulfillWithValue: (e, l) => new N(e, l),
                            })
                          ).then((l) => {
                            if (l instanceof B) throw l;
                            return l instanceof N
                              ? d(l.payload, G, e, l.meta)
                              : d(l, G, e);
                          }),
                        ]));
                    } catch (l) {
                      y =
                        l instanceof B
                          ? g(null, G, e, l.payload, l.meta)
                          : g(l, G, e);
                    } finally {
                      I && Q.signal.removeEventListener("abort", I);
                    }
                    let $ =
                      c &&
                      !c.dispatchConditionRejection &&
                      g.match(y) &&
                      y.meta.condition;
                    return $ || b(y), y;
                  })();
                  return Object.assign($, {
                    abort,
                    requestId: G,
                    arg: e,
                    unwrap: () => $.then(unwrapResult),
                  });
                };
              },
              {
                pending: m,
                rejected: g,
                fulfilled: d,
                settled: isAnyOf(g, d),
                typePrefix: e,
              }
            );
          }
          return (
            (createAsyncThunk2.withTypes = () => createAsyncThunk2),
            createAsyncThunk2
          );
        })();
      function unwrapResult(e) {
        if (e.meta && e.meta.rejectedWithValue) throw e.payload;
        if (e.error) throw e.error;
        return e.payload;
      }
      var G = Symbol.for("rtk-slice-createasyncthunk"),
        Q =
          (((d = Q || {}).reducer = "reducer"),
          (d.reducerWithPrepare = "reducerWithPrepare"),
          (d.asyncThunk = "asyncThunk"),
          d),
        $ = (function ({ creators: e } = {}) {
          let l = e?.asyncThunk?.[G];
          return function (e) {
            let c;
            let { name: d, reducerPath: m = d } = e;
            if (!d) throw Error(formatProdErrorMessage(11));
            let g =
                ("function" == typeof e.reducers
                  ? e.reducers(
                      (function () {
                        function asyncThunk(e, l) {
                          return {
                            _reducerDefinitionType: "asyncThunk",
                            payloadCreator: e,
                            ...l,
                          };
                        }
                        return (
                          (asyncThunk.withTypes = () => asyncThunk),
                          {
                            reducer: (e) =>
                              Object.assign(
                                { [e.name]: (...l) => e(...l) }[e.name],
                                { _reducerDefinitionType: "reducer" }
                              ),
                            preparedReducer: (e, l) => ({
                              _reducerDefinitionType: "reducerWithPrepare",
                              prepare: e,
                              reducer: l,
                            }),
                            asyncThunk,
                          }
                        );
                      })()
                    )
                  : e.reducers) || {},
              b = Object.keys(g),
              C = {
                sliceCaseReducersByName: {},
                sliceCaseReducersByType: {},
                actionCreators: {},
                sliceMatchers: [],
              },
              P = {
                addCase(e, l) {
                  let c = "string" == typeof e ? e : e.type;
                  if (!c) throw Error(formatProdErrorMessage(12));
                  if (c in C.sliceCaseReducersByType)
                    throw Error(formatProdErrorMessage(13));
                  return (C.sliceCaseReducersByType[c] = l), P;
                },
                addMatcher: (e, l) => (
                  C.sliceMatchers.push({ matcher: e, reducer: l }), P
                ),
                exposeAction: (e, l) => ((C.actionCreators[e] = l), P),
                exposeCaseReducer: (e, l) => (
                  (C.sliceCaseReducersByName[e] = l), P
                ),
              };
            function buildReducer() {
              let [l = {}, c = [], d] =
                  "function" == typeof e.extraReducers
                    ? executeReducerBuilderCallback(e.extraReducers)
                    : [e.extraReducers],
                m = { ...l, ...C.sliceCaseReducersByType };
              return (function (e, l) {
                let c;
                let [d, m, g] = executeReducerBuilderCallback(l);
                if ("function" == typeof e) c = () => freezeDraftable(e());
                else {
                  let l = freezeDraftable(e);
                  c = () => l;
                }
                function reducer(e = c(), l) {
                  let b = [
                    d[l.type],
                    ...m
                      .filter(({ matcher: e }) => e(l))
                      .map(({ reducer: e }) => e),
                  ];
                  return (
                    0 === b.filter((e) => !!e).length && (b = [g]),
                    b.reduce((e, c) => {
                      if (c) {
                        if ((0, y.mv)(e)) {
                          let d = c(e, l);
                          return void 0 === d ? e : d;
                        }
                        if ((0, y.o$)(e)) return (0, y.Uy)(e, (e) => c(e, l));
                        {
                          let d = c(e, l);
                          if (void 0 === d) {
                            if (null === e) return e;
                            throw Error(
                              "A case reducer on a non-draftable value must not return undefined"
                            );
                          }
                          return d;
                        }
                      }
                      return e;
                    }, e)
                  );
                }
                return (reducer.getInitialState = c), reducer;
              })(e.initialState, (e) => {
                for (let l in m) e.addCase(l, m[l]);
                for (let l of C.sliceMatchers)
                  e.addMatcher(l.matcher, l.reducer);
                for (let l of c) e.addMatcher(l.matcher, l.reducer);
                d && e.addDefaultCase(d);
              });
            }
            b.forEach((c) => {
              let m = g[c],
                y = {
                  reducerName: c,
                  type: `${d}/${c}`,
                  createNotation: "function" == typeof e.reducers,
                };
              "asyncThunk" === m._reducerDefinitionType
                ? (function ({ type: e, reducerName: l }, c, d, m) {
                    if (!m) throw Error(formatProdErrorMessage(18));
                    let {
                        payloadCreator: g,
                        fulfilled: y,
                        pending: b,
                        rejected: C,
                        settled: P,
                        options: I,
                      } = c,
                      B = m(e, g, I);
                    d.exposeAction(l, B),
                      y && d.addCase(B.fulfilled, y),
                      b && d.addCase(B.pending, b),
                      C && d.addCase(B.rejected, C),
                      P && d.addMatcher(B.settled, P),
                      d.exposeCaseReducer(l, {
                        fulfilled: y || noop,
                        pending: b || noop,
                        rejected: C || noop,
                        settled: P || noop,
                      });
                  })(y, m, P, l)
                : (function (
                    { type: e, reducerName: l, createNotation: c },
                    d,
                    m
                  ) {
                    let g, y;
                    if ("reducer" in d) {
                      if (
                        c &&
                        "reducerWithPrepare" !== d._reducerDefinitionType
                      )
                        throw Error(formatProdErrorMessage(17));
                      (g = d.reducer), (y = d.prepare);
                    } else g = d;
                    m.addCase(e, g)
                      .exposeCaseReducer(l, g)
                      .exposeAction(
                        l,
                        y ? createAction(e, y) : createAction(e)
                      );
                  })(y, m, P);
            });
            let selectSelf = (e) => e,
              I = new Map(),
              B = new WeakMap();
            function reducer(e, l) {
              return c || (c = buildReducer()), c(e, l);
            }
            function getInitialState() {
              return c || (c = buildReducer()), c.getInitialState();
            }
            function makeSelectorProps(l, c = !1) {
              function selectSlice(e) {
                let d = e[l];
                return (
                  void 0 === d &&
                    c &&
                    (d = getOrInsertComputed(B, selectSlice, getInitialState)),
                  d
                );
              }
              function getSelectors(l = selectSelf) {
                let d = getOrInsertComputed(I, c, () => new WeakMap());
                return getOrInsertComputed(d, l, () => {
                  let d = {};
                  for (let [m, g] of Object.entries(e.selectors ?? {}))
                    d[m] = (function (e, l, c, d) {
                      function wrapper(m, ...g) {
                        let y = l(m);
                        return void 0 === y && d && (y = c()), e(y, ...g);
                      }
                      return (wrapper.unwrapped = e), wrapper;
                    })(
                      g,
                      l,
                      () => getOrInsertComputed(B, l, getInitialState),
                      c
                    );
                  return d;
                });
              }
              return {
                reducerPath: l,
                getSelectors,
                get selectors() {
                  return getSelectors(selectSlice);
                },
                selectSlice,
              };
            }
            let N = {
              name: d,
              reducer,
              actions: C.actionCreators,
              caseReducers: C.sliceCaseReducersByName,
              getInitialState,
              ...makeSelectorProps(m),
              injectInto(e, { reducerPath: l, ...c } = {}) {
                let d = l ?? m;
                return (
                  e.inject({ reducerPath: d, reducer }, c),
                  { ...N, ...makeSelectorProps(d, !0) }
                );
              },
            };
            return N;
          };
        })();
      function noop() {}
      var assertFunction = (e, l) => {
          if ("function" != typeof e)
            throw TypeError(formatProdErrorMessage(32));
        },
        { assign: Z } = Object,
        Y = "listenerMiddleware",
        getListenerEntryPropsFrom = (e) => {
          let {
            type: l,
            actionCreator: c,
            matcher: d,
            predicate: m,
            effect: g,
          } = e;
          if (l) m = createAction(l).match;
          else if (c) (l = c.type), (m = c.match);
          else if (d) m = d;
          else if (m);
          else throw Error(formatProdErrorMessage(21));
          return (
            assertFunction(g, "options.listener"),
            { predicate: m, type: l, effect: g }
          );
        },
        et = Z(
          (e) => {
            let {
                type: l,
                predicate: c,
                effect: d,
              } = getListenerEntryPropsFrom(e),
              m = {
                id: nanoid(),
                effect: d,
                type: l,
                predicate: c,
                pending: new Set(),
                unsubscribe: () => {
                  throw Error(formatProdErrorMessage(22));
                },
              };
            return m;
          },
          { withTypes: () => et }
        ),
        en = Z(createAction(`${Y}/add`), { withTypes: () => en }),
        er = Z(createAction(`${Y}/remove`), { withTypes: () => er });
      function formatProdErrorMessage(e) {
        return `Minified Redux Toolkit error #${e}; visit https://redux-toolkit.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `;
      }
      Symbol.for("rtk-state-proxy-original");
    },
    87125: function (e, l, c) {
      "use strict";
      c.d(l, {
        j: function () {
          return g;
        },
      });
      var d = c(60954),
        m = c(60527),
        g = new (class extends d.l {
          #p;
          #h;
          #f;
          constructor() {
            super(),
              (this.#f = (e) => {
                if (!m.sk && window.addEventListener) {
                  let listener = () => e();
                  return (
                    window.addEventListener("visibilitychange", listener, !1),
                    () => {
                      window.removeEventListener("visibilitychange", listener);
                    }
                  );
                }
              });
          }
          onSubscribe() {
            this.#h || this.setEventListener(this.#f);
          }
          onUnsubscribe() {
            this.hasListeners() || (this.#h?.(), (this.#h = void 0));
          }
          setEventListener(e) {
            (this.#f = e),
              this.#h?.(),
              (this.#h = e((e) => {
                "boolean" == typeof e ? this.setFocused(e) : this.onFocus();
              }));
          }
          setFocused(e) {
            let l = this.#p !== e;
            l && ((this.#p = e), this.onFocus());
          }
          onFocus() {
            let e = this.isFocused();
            this.listeners.forEach((l) => {
              l(e);
            });
          }
          isFocused() {
            return "boolean" == typeof this.#p
              ? this.#p
              : globalThis.document?.visibilityState !== "hidden";
          }
        })();
    },
    44344: function (e, l, c) {
      "use strict";
      c.d(l, {
        R: function () {
          return getDefaultState;
        },
        m: function () {
          return y;
        },
      });
      var d = c(77268),
        m = c(71301),
        g = c(11590),
        y = class extends m.F {
          #m;
          #o;
          #g;
          constructor(e) {
            super(),
              (this.mutationId = e.mutationId),
              (this.#o = e.mutationCache),
              (this.#m = []),
              (this.state = e.state || getDefaultState()),
              this.setOptions(e.options),
              this.scheduleGc();
          }
          setOptions(e) {
            (this.options = e), this.updateGcTime(this.options.gcTime);
          }
          get meta() {
            return this.options.meta;
          }
          addObserver(e) {
            this.#m.includes(e) ||
              (this.#m.push(e),
              this.clearGcTimeout(),
              this.#o.notify({
                type: "observerAdded",
                mutation: this,
                observer: e,
              }));
          }
          removeObserver(e) {
            (this.#m = this.#m.filter((l) => l !== e)),
              this.scheduleGc(),
              this.#o.notify({
                type: "observerRemoved",
                mutation: this,
                observer: e,
              });
          }
          optionalRemove() {
            this.#m.length ||
              ("pending" === this.state.status
                ? this.scheduleGc()
                : this.#o.remove(this));
          }
          continue() {
            return this.#g?.continue() ?? this.execute(this.state.variables);
          }
          async execute(e) {
            let onContinue = () => {
              this.#y({ type: "continue" });
            };
            this.#g = (0, g.Mz)({
              fn: () =>
                this.options.mutationFn
                  ? this.options.mutationFn(e)
                  : Promise.reject(Error("No mutationFn found")),
              onFail: (e, l) => {
                this.#y({ type: "failed", failureCount: e, error: l });
              },
              onPause: () => {
                this.#y({ type: "pause" });
              },
              onContinue,
              retry: this.options.retry ?? 0,
              retryDelay: this.options.retryDelay,
              networkMode: this.options.networkMode,
              canRun: () => this.#o.canRun(this),
            });
            let l = "pending" === this.state.status,
              c = !this.#g.canStart();
            try {
              if (l) onContinue();
              else {
                this.#y({ type: "pending", variables: e, isPaused: c }),
                  await this.#o.config.onMutate?.(e, this);
                let l = await this.options.onMutate?.(e);
                l !== this.state.context &&
                  this.#y({
                    type: "pending",
                    context: l,
                    variables: e,
                    isPaused: c,
                  });
              }
              let d = await this.#g.start();
              return (
                await this.#o.config.onSuccess?.(
                  d,
                  e,
                  this.state.context,
                  this
                ),
                await this.options.onSuccess?.(d, e, this.state.context),
                await this.#o.config.onSettled?.(
                  d,
                  null,
                  this.state.variables,
                  this.state.context,
                  this
                ),
                await this.options.onSettled?.(d, null, e, this.state.context),
                this.#y({ type: "success", data: d }),
                d
              );
            } catch (l) {
              try {
                throw (
                  (await this.#o.config.onError?.(
                    l,
                    e,
                    this.state.context,
                    this
                  ),
                  await this.options.onError?.(l, e, this.state.context),
                  await this.#o.config.onSettled?.(
                    void 0,
                    l,
                    this.state.variables,
                    this.state.context,
                    this
                  ),
                  await this.options.onSettled?.(
                    void 0,
                    l,
                    e,
                    this.state.context
                  ),
                  l)
                );
              } finally {
                this.#y({ type: "error", error: l });
              }
            } finally {
              this.#o.runNext(this);
            }
          }
          #y(e) {
            (this.state = ((l) => {
              switch (e.type) {
                case "failed":
                  return {
                    ...l,
                    failureCount: e.failureCount,
                    failureReason: e.error,
                  };
                case "pause":
                  return { ...l, isPaused: !0 };
                case "continue":
                  return { ...l, isPaused: !1 };
                case "pending":
                  return {
                    ...l,
                    context: e.context,
                    data: void 0,
                    failureCount: 0,
                    failureReason: null,
                    error: null,
                    isPaused: e.isPaused,
                    status: "pending",
                    variables: e.variables,
                    submittedAt: Date.now(),
                  };
                case "success":
                  return {
                    ...l,
                    data: e.data,
                    failureCount: 0,
                    failureReason: null,
                    error: null,
                    status: "success",
                    isPaused: !1,
                  };
                case "error":
                  return {
                    ...l,
                    data: void 0,
                    error: e.error,
                    failureCount: l.failureCount + 1,
                    failureReason: e.error,
                    isPaused: !1,
                    status: "error",
                  };
              }
            })(this.state)),
              d.Vr.batch(() => {
                this.#m.forEach((l) => {
                  l.onMutationUpdate(e);
                }),
                  this.#o.notify({
                    mutation: this,
                    type: "updated",
                    action: e,
                  });
              });
          }
        };
      function getDefaultState() {
        return {
          context: void 0,
          data: void 0,
          error: null,
          failureCount: 0,
          failureReason: null,
          isPaused: !1,
          status: "idle",
          variables: void 0,
          submittedAt: 0,
        };
      }
    },
    77268: function (e, l, c) {
      "use strict";
      c.d(l, {
        Vr: function () {
          return d;
        },
      });
      var defaultScheduler = (e) => setTimeout(e, 0),
        d = (function () {
          let e = [],
            l = 0,
            notifyFn = (e) => {
              e();
            },
            batchNotifyFn = (e) => {
              e();
            },
            c = defaultScheduler,
            schedule = (d) => {
              l
                ? e.push(d)
                : c(() => {
                    notifyFn(d);
                  });
            },
            flush = () => {
              let l = e;
              (e = []),
                l.length &&
                  c(() => {
                    batchNotifyFn(() => {
                      l.forEach((e) => {
                        notifyFn(e);
                      });
                    });
                  });
            };
          return {
            batch: (e) => {
              let c;
              l++;
              try {
                c = e();
              } finally {
                --l || flush();
              }
              return c;
            },
            batchCalls:
              (e) =>
              (...l) => {
                schedule(() => {
                  e(...l);
                });
              },
            schedule,
            setNotifyFunction: (e) => {
              notifyFn = e;
            },
            setBatchNotifyFunction: (e) => {
              batchNotifyFn = e;
            },
            setScheduler: (e) => {
              c = e;
            },
          };
        })();
    },
    34498: function (e, l, c) {
      "use strict";
      c.d(l, {
        N: function () {
          return g;
        },
      });
      var d = c(60954),
        m = c(60527),
        g = new (class extends d.l {
          #b = !0;
          #h;
          #f;
          constructor() {
            super(),
              (this.#f = (e) => {
                if (!m.sk && window.addEventListener) {
                  let onlineListener = () => e(!0),
                    offlineListener = () => e(!1);
                  return (
                    window.addEventListener("online", onlineListener, !1),
                    window.addEventListener("offline", offlineListener, !1),
                    () => {
                      window.removeEventListener("online", onlineListener),
                        window.removeEventListener("offline", offlineListener);
                    }
                  );
                }
              });
          }
          onSubscribe() {
            this.#h || this.setEventListener(this.#f);
          }
          onUnsubscribe() {
            this.hasListeners() || (this.#h?.(), (this.#h = void 0));
          }
          setEventListener(e) {
            (this.#f = e),
              this.#h?.(),
              (this.#h = e(this.setOnline.bind(this)));
          }
          setOnline(e) {
            let l = this.#b !== e;
            l &&
              ((this.#b = e),
              this.listeners.forEach((l) => {
                l(e);
              }));
          }
          isOnline() {
            return this.#b;
          }
        })();
    },
    40053: function (e, l, c) {
      "use strict";
      c.d(l, {
        A: function () {
          return b;
        },
        z: function () {
          return fetchState;
        },
      });
      var d = c(60527),
        m = c(77268),
        g = c(11590),
        y = c(71301),
        b = class extends y.F {
          #v;
          #w;
          #x;
          #_;
          #g;
          #a;
          #C;
          constructor(e) {
            super(),
              (this.#C = !1),
              (this.#a = e.defaultOptions),
              this.setOptions(e.options),
              (this.observers = []),
              (this.#_ = e.client),
              (this.#x = this.#_.getQueryCache()),
              (this.queryKey = e.queryKey),
              (this.queryHash = e.queryHash),
              (this.#v = (function (e) {
                let l =
                    "function" == typeof e.initialData
                      ? e.initialData()
                      : e.initialData,
                  c = void 0 !== l,
                  d = c
                    ? "function" == typeof e.initialDataUpdatedAt
                      ? e.initialDataUpdatedAt()
                      : e.initialDataUpdatedAt
                    : 0;
                return {
                  data: l,
                  dataUpdateCount: 0,
                  dataUpdatedAt: c ? d ?? Date.now() : 0,
                  error: null,
                  errorUpdateCount: 0,
                  errorUpdatedAt: 0,
                  fetchFailureCount: 0,
                  fetchFailureReason: null,
                  fetchMeta: null,
                  isInvalidated: !1,
                  status: c ? "success" : "pending",
                  fetchStatus: "idle",
                };
              })(this.options)),
              (this.state = e.state ?? this.#v),
              this.scheduleGc();
          }
          get meta() {
            return this.options.meta;
          }
          get promise() {
            return this.#g?.promise;
          }
          setOptions(e) {
            (this.options = { ...this.#a, ...e }),
              this.updateGcTime(this.options.gcTime);
          }
          optionalRemove() {
            this.observers.length ||
              "idle" !== this.state.fetchStatus ||
              this.#x.remove(this);
          }
          setData(e, l) {
            let c = (0, d.oE)(this.state.data, e, this.options);
            return (
              this.#y({
                data: c,
                type: "success",
                dataUpdatedAt: l?.updatedAt,
                manual: l?.manual,
              }),
              c
            );
          }
          setState(e, l) {
            this.#y({ type: "setState", state: e, setStateOptions: l });
          }
          cancel(e) {
            let l = this.#g?.promise;
            return (
              this.#g?.cancel(e),
              l ? l.then(d.ZT).catch(d.ZT) : Promise.resolve()
            );
          }
          destroy() {
            super.destroy(), this.cancel({ silent: !0 });
          }
          reset() {
            this.destroy(), this.setState(this.#v);
          }
          isActive() {
            return this.observers.some(
              (e) => !1 !== (0, d.Nc)(e.options.enabled, this)
            );
          }
          isDisabled() {
            return this.getObserversCount() > 0
              ? !this.isActive()
              : this.options.queryFn === d.CN ||
                  this.state.dataUpdateCount + this.state.errorUpdateCount ===
                    0;
          }
          isStale() {
            return (
              !!this.state.isInvalidated ||
              (this.getObserversCount() > 0
                ? this.observers.some((e) => e.getCurrentResult().isStale)
                : void 0 === this.state.data)
            );
          }
          isStaleByTime(e = 0) {
            return (
              this.state.isInvalidated ||
              void 0 === this.state.data ||
              !(0, d.Kp)(this.state.dataUpdatedAt, e)
            );
          }
          onFocus() {
            let e = this.observers.find((e) => e.shouldFetchOnWindowFocus());
            e?.refetch({ cancelRefetch: !1 }), this.#g?.continue();
          }
          onOnline() {
            let e = this.observers.find((e) => e.shouldFetchOnReconnect());
            e?.refetch({ cancelRefetch: !1 }), this.#g?.continue();
          }
          addObserver(e) {
            this.observers.includes(e) ||
              (this.observers.push(e),
              this.clearGcTimeout(),
              this.#x.notify({
                type: "observerAdded",
                query: this,
                observer: e,
              }));
          }
          removeObserver(e) {
            this.observers.includes(e) &&
              ((this.observers = this.observers.filter((l) => l !== e)),
              this.observers.length ||
                (this.#g &&
                  (this.#C
                    ? this.#g.cancel({ revert: !0 })
                    : this.#g.cancelRetry()),
                this.scheduleGc()),
              this.#x.notify({
                type: "observerRemoved",
                query: this,
                observer: e,
              }));
          }
          getObserversCount() {
            return this.observers.length;
          }
          invalidate() {
            this.state.isInvalidated || this.#y({ type: "invalidate" });
          }
          fetch(e, l) {
            if ("idle" !== this.state.fetchStatus) {
              if (void 0 !== this.state.data && l?.cancelRefetch)
                this.cancel({ silent: !0 });
              else if (this.#g) return this.#g.continueRetry(), this.#g.promise;
            }
            if ((e && this.setOptions(e), !this.options.queryFn)) {
              let e = this.observers.find((e) => e.options.queryFn);
              e && this.setOptions(e.options);
            }
            let c = new AbortController(),
              addSignalProperty = (e) => {
                Object.defineProperty(e, "signal", {
                  enumerable: !0,
                  get: () => ((this.#C = !0), c.signal),
                });
              },
              m = {
                fetchOptions: l,
                options: this.options,
                queryKey: this.queryKey,
                client: this.#_,
                state: this.state,
                fetchFn: () => {
                  let e = (0, d.cG)(this.options, l),
                    c = {
                      client: this.#_,
                      queryKey: this.queryKey,
                      meta: this.meta,
                    };
                  return (addSignalProperty(c),
                  (this.#C = !1),
                  this.options.persister)
                    ? this.options.persister(e, c, this)
                    : e(c);
                },
              };
            addSignalProperty(m),
              this.options.behavior?.onFetch(m, this),
              (this.#w = this.state),
              ("idle" === this.state.fetchStatus ||
                this.state.fetchMeta !== m.fetchOptions?.meta) &&
                this.#y({ type: "fetch", meta: m.fetchOptions?.meta });
            let onError = (e) => {
              ((0, g.DV)(e) && e.silent) ||
                this.#y({ type: "error", error: e }),
                (0, g.DV)(e) ||
                  (this.#x.config.onError?.(e, this),
                  this.#x.config.onSettled?.(this.state.data, e, this)),
                this.scheduleGc();
            };
            return (
              (this.#g = (0, g.Mz)({
                initialPromise: l?.initialPromise,
                fn: m.fetchFn,
                abort: c.abort.bind(c),
                onSuccess: (e) => {
                  if (void 0 === e) {
                    onError(Error(`${this.queryHash} data is undefined`));
                    return;
                  }
                  try {
                    this.setData(e);
                  } catch (e) {
                    onError(e);
                    return;
                  }
                  this.#x.config.onSuccess?.(e, this),
                    this.#x.config.onSettled?.(e, this.state.error, this),
                    this.scheduleGc();
                },
                onError,
                onFail: (e, l) => {
                  this.#y({ type: "failed", failureCount: e, error: l });
                },
                onPause: () => {
                  this.#y({ type: "pause" });
                },
                onContinue: () => {
                  this.#y({ type: "continue" });
                },
                retry: m.options.retry,
                retryDelay: m.options.retryDelay,
                networkMode: m.options.networkMode,
                canRun: () => !0,
              })),
              this.#g.start()
            );
          }
          #y(e) {
            (this.state = ((l) => {
              switch (e.type) {
                case "failed":
                  return {
                    ...l,
                    fetchFailureCount: e.failureCount,
                    fetchFailureReason: e.error,
                  };
                case "pause":
                  return { ...l, fetchStatus: "paused" };
                case "continue":
                  return { ...l, fetchStatus: "fetching" };
                case "fetch":
                  return {
                    ...l,
                    ...fetchState(l.data, this.options),
                    fetchMeta: e.meta ?? null,
                  };
                case "success":
                  return {
                    ...l,
                    data: e.data,
                    dataUpdateCount: l.dataUpdateCount + 1,
                    dataUpdatedAt: e.dataUpdatedAt ?? Date.now(),
                    error: null,
                    isInvalidated: !1,
                    status: "success",
                    ...(!e.manual && {
                      fetchStatus: "idle",
                      fetchFailureCount: 0,
                      fetchFailureReason: null,
                    }),
                  };
                case "error":
                  let c = e.error;
                  if ((0, g.DV)(c) && c.revert && this.#w)
                    return { ...this.#w, fetchStatus: "idle" };
                  return {
                    ...l,
                    error: c,
                    errorUpdateCount: l.errorUpdateCount + 1,
                    errorUpdatedAt: Date.now(),
                    fetchFailureCount: l.fetchFailureCount + 1,
                    fetchFailureReason: c,
                    fetchStatus: "idle",
                    status: "error",
                  };
                case "invalidate":
                  return { ...l, isInvalidated: !0 };
                case "setState":
                  return { ...l, ...e.state };
              }
            })(this.state)),
              m.Vr.batch(() => {
                this.observers.forEach((e) => {
                  e.onQueryUpdate();
                }),
                  this.#x.notify({ query: this, type: "updated", action: e });
              });
          }
        };
      function fetchState(e, l) {
        return {
          fetchFailureCount: 0,
          fetchFailureReason: null,
          fetchStatus: (0, g.Kw)(l.networkMode) ? "fetching" : "paused",
          ...(void 0 === e && { error: null, status: "pending" }),
        };
      }
    },
    71301: function (e, l, c) {
      "use strict";
      c.d(l, {
        F: function () {
          return m;
        },
      });
      var d = c(60527),
        m = class {
          #E;
          destroy() {
            this.clearGcTimeout();
          }
          scheduleGc() {
            this.clearGcTimeout(),
              (0, d.PN)(this.gcTime) &&
                (this.#E = setTimeout(() => {
                  this.optionalRemove();
                }, this.gcTime));
          }
          updateGcTime(e) {
            this.gcTime = Math.max(this.gcTime || 0, e ?? (d.sk ? 1 / 0 : 3e5));
          }
          clearGcTimeout() {
            this.#E && (clearTimeout(this.#E), (this.#E = void 0));
          }
        };
    },
    11590: function (e, l, c) {
      "use strict";
      c.d(l, {
        DV: function () {
          return isCancelledError;
        },
        Kw: function () {
          return canFetch;
        },
        Mz: function () {
          return createRetryer;
        },
      });
      var d = c(87125),
        m = c(34498),
        g = c(27401),
        y = c(60527);
      function defaultRetryDelay(e) {
        return Math.min(1e3 * 2 ** e, 3e4);
      }
      function canFetch(e) {
        return (e ?? "online") !== "online" || m.N.isOnline();
      }
      var b = class extends Error {
        constructor(e) {
          super("CancelledError"),
            (this.revert = e?.revert),
            (this.silent = e?.silent);
        }
      };
      function isCancelledError(e) {
        return e instanceof b;
      }
      function createRetryer(e) {
        let l,
          c = !1,
          C = 0,
          P = !1,
          I = (0, g.O)(),
          canContinue = () =>
            d.j.isFocused() &&
            ("always" === e.networkMode || m.N.isOnline()) &&
            e.canRun(),
          canStart = () => canFetch(e.networkMode) && e.canRun(),
          resolve = (c) => {
            P || ((P = !0), e.onSuccess?.(c), l?.(), I.resolve(c));
          },
          reject = (c) => {
            P || ((P = !0), e.onError?.(c), l?.(), I.reject(c));
          },
          pause = () =>
            new Promise((c) => {
              (l = (e) => {
                (P || canContinue()) && c(e);
              }),
                e.onPause?.();
            }).then(() => {
              (l = void 0), P || e.onContinue?.();
            }),
          run = () => {
            let l;
            if (P) return;
            let d = 0 === C ? e.initialPromise : void 0;
            try {
              l = d ?? e.fn();
            } catch (e) {
              l = Promise.reject(e);
            }
            Promise.resolve(l)
              .then(resolve)
              .catch((l) => {
                if (P) return;
                let d = e.retry ?? (y.sk ? 0 : 3),
                  m = e.retryDelay ?? defaultRetryDelay,
                  g = "function" == typeof m ? m(C, l) : m,
                  b =
                    !0 === d ||
                    ("number" == typeof d && C < d) ||
                    ("function" == typeof d && d(C, l));
                if (c || !b) {
                  reject(l);
                  return;
                }
                C++,
                  e.onFail?.(C, l),
                  (0, y._v)(g)
                    .then(() => (canContinue() ? void 0 : pause()))
                    .then(() => {
                      c ? reject(l) : run();
                    });
              });
          };
        return {
          promise: I,
          cancel: (l) => {
            P || (reject(new b(l)), e.abort?.());
          },
          continue: () => (l?.(), I),
          cancelRetry: () => {
            c = !0;
          },
          continueRetry: () => {
            c = !1;
          },
          canStart,
          start: () => (canStart() ? run() : pause().then(run), I),
        };
      }
    },
    60954: function (e, l, c) {
      "use strict";
      c.d(l, {
        l: function () {
          return d;
        },
      });
      var d = class {
        constructor() {
          (this.listeners = new Set()),
            (this.subscribe = this.subscribe.bind(this));
        }
        subscribe(e) {
          return (
            this.listeners.add(e),
            this.onSubscribe(),
            () => {
              this.listeners.delete(e), this.onUnsubscribe();
            }
          );
        }
        hasListeners() {
          return this.listeners.size > 0;
        }
        onSubscribe() {}
        onUnsubscribe() {}
      };
    },
    27401: function (e, l, c) {
      "use strict";
      function pendingThenable() {
        let e, l;
        let c = new Promise((c, d) => {
          (e = c), (l = d);
        });
        function finalize(e) {
          Object.assign(c, e), delete c.resolve, delete c.reject;
        }
        return (
          (c.status = "pending"),
          c.catch(() => {}),
          (c.resolve = (l) => {
            finalize({ status: "fulfilled", value: l }), e(l);
          }),
          (c.reject = (e) => {
            finalize({ status: "rejected", reason: e }), l(e);
          }),
          c
        );
      }
      c.d(l, {
        O: function () {
          return pendingThenable;
        },
      });
    },
    60527: function (e, l, c) {
      "use strict";
      c.d(l, {
        CN: function () {
          return m;
        },
        Ht: function () {
          return addToStart;
        },
        KC: function () {
          return resolveStaleTime;
        },
        Kp: function () {
          return timeUntilStale;
        },
        Nc: function () {
          return resolveEnabled;
        },
        PN: function () {
          return isValidTimeout;
        },
        Q$: function () {
          return replaceEqualDeep;
        },
        Rm: function () {
          return hashQueryKeyByOptions;
        },
        SE: function () {
          return functionalUpdate;
        },
        VS: function () {
          return shallowEqualObjects;
        },
        VX: function () {
          return addToEnd;
        },
        X7: function () {
          return matchMutation;
        },
        Ym: function () {
          return hashKey;
        },
        ZT: function () {
          return noop;
        },
        _v: function () {
          return sleep;
        },
        _x: function () {
          return matchQuery;
        },
        cG: function () {
          return ensureQueryFn;
        },
        oE: function () {
          return replaceData;
        },
        sk: function () {
          return d;
        },
        to: function () {
          return partialMatchKey;
        },
      });
      var d = "undefined" == typeof window || "Deno" in globalThis;
      function noop() {}
      function functionalUpdate(e, l) {
        return "function" == typeof e ? e(l) : e;
      }
      function isValidTimeout(e) {
        return "number" == typeof e && e >= 0 && e !== 1 / 0;
      }
      function timeUntilStale(e, l) {
        return Math.max(e + (l || 0) - Date.now(), 0);
      }
      function resolveStaleTime(e, l) {
        return "function" == typeof e ? e(l) : e;
      }
      function resolveEnabled(e, l) {
        return "function" == typeof e ? e(l) : e;
      }
      function matchQuery(e, l) {
        let {
          type: c = "all",
          exact: d,
          fetchStatus: m,
          predicate: g,
          queryKey: y,
          stale: b,
        } = e;
        if (y) {
          if (d) {
            if (l.queryHash !== hashQueryKeyByOptions(y, l.options)) return !1;
          } else if (!partialMatchKey(l.queryKey, y)) return !1;
        }
        if ("all" !== c) {
          let e = l.isActive();
          if (("active" === c && !e) || ("inactive" === c && e)) return !1;
        }
        return (
          ("boolean" != typeof b || l.isStale() === b) &&
          (!m || m === l.state.fetchStatus) &&
          (!g || !!g(l))
        );
      }
      function matchMutation(e, l) {
        let { exact: c, status: d, predicate: m, mutationKey: g } = e;
        if (g) {
          if (!l.options.mutationKey) return !1;
          if (c) {
            if (hashKey(l.options.mutationKey) !== hashKey(g)) return !1;
          } else if (!partialMatchKey(l.options.mutationKey, g)) return !1;
        }
        return (!d || l.state.status === d) && (!m || !!m(l));
      }
      function hashQueryKeyByOptions(e, l) {
        let c = l?.queryKeyHashFn || hashKey;
        return c(e);
      }
      function hashKey(e) {
        return JSON.stringify(e, (e, l) =>
          isPlainObject(l)
            ? Object.keys(l)
                .sort()
                .reduce((e, c) => ((e[c] = l[c]), e), {})
            : l
        );
      }
      function partialMatchKey(e, l) {
        return (
          e === l ||
          (typeof e == typeof l &&
            !!e &&
            !!l &&
            "object" == typeof e &&
            "object" == typeof l &&
            Object.keys(l).every((c) => partialMatchKey(e[c], l[c])))
        );
      }
      function replaceEqualDeep(e, l) {
        if (e === l) return e;
        let c = isPlainArray(e) && isPlainArray(l);
        if (c || (isPlainObject(e) && isPlainObject(l))) {
          let d = c ? e : Object.keys(e),
            m = d.length,
            g = c ? l : Object.keys(l),
            y = g.length,
            b = c ? [] : {},
            C = 0;
          for (let m = 0; m < y; m++) {
            let y = c ? m : g[m];
            ((!c && d.includes(y)) || c) && void 0 === e[y] && void 0 === l[y]
              ? ((b[y] = void 0), C++)
              : ((b[y] = replaceEqualDeep(e[y], l[y])),
                b[y] === e[y] && void 0 !== e[y] && C++);
          }
          return m === y && C === m ? e : b;
        }
        return l;
      }
      function shallowEqualObjects(e, l) {
        if (!l || Object.keys(e).length !== Object.keys(l).length) return !1;
        for (let c in e) if (e[c] !== l[c]) return !1;
        return !0;
      }
      function isPlainArray(e) {
        return Array.isArray(e) && e.length === Object.keys(e).length;
      }
      function isPlainObject(e) {
        if (!hasObjectPrototype(e)) return !1;
        let l = e.constructor;
        if (void 0 === l) return !0;
        let c = l.prototype;
        return (
          !!(hasObjectPrototype(c) && c.hasOwnProperty("isPrototypeOf")) &&
          Object.getPrototypeOf(e) === Object.prototype
        );
      }
      function hasObjectPrototype(e) {
        return "[object Object]" === Object.prototype.toString.call(e);
      }
      function sleep(e) {
        return new Promise((l) => {
          setTimeout(l, e);
        });
      }
      function replaceData(e, l, c) {
        return "function" == typeof c.structuralSharing
          ? c.structuralSharing(e, l)
          : !1 !== c.structuralSharing
          ? replaceEqualDeep(e, l)
          : l;
      }
      function addToEnd(e, l, c = 0) {
        let d = [...e, l];
        return c && d.length > c ? d.slice(1) : d;
      }
      function addToStart(e, l, c = 0) {
        let d = [l, ...e];
        return c && d.length > c ? d.slice(0, -1) : d;
      }
      var m = Symbol();
      function ensureQueryFn(e, l) {
        return !e.queryFn && l?.initialPromise
          ? () => l.initialPromise
          : e.queryFn && e.queryFn !== m
          ? e.queryFn
          : () => Promise.reject(Error(`Missing queryFn: '${e.queryHash}'`));
      }
    },
    74732: function (e, l, c) {
      "use strict";
      c.d(l, {
        NL: function () {
          return useQueryClient;
        },
        aH: function () {
          return QueryClientProvider;
        },
      });
      var d = c(50959),
        m = c(11527),
        g = d.createContext(void 0),
        useQueryClient = (e) => {
          let l = d.useContext(g);
          if (e) return e;
          if (!l)
            throw Error(
              "No QueryClient set, use QueryClientProvider to set one"
            );
          return l;
        },
        QueryClientProvider = ({ client: e, children: l }) => (
          d.useEffect(
            () => (
              e.mount(),
              () => {
                e.unmount();
              }
            ),
            [e]
          ),
          (0, m.jsx)(g.Provider, { value: e, children: l })
        );
    },
    19086: function (e, l, c) {
      "use strict";
      c.d(l, {
        D: function () {
          return useMutation;
        },
      });
      var d = c(50959),
        m = c(44344),
        g = c(77268),
        y = c(60954),
        b = c(60527),
        C = class extends y.l {
          #_;
          #A = void 0;
          #S;
          #k;
          constructor(e, l) {
            super(),
              (this.#_ = e),
              this.setOptions(l),
              this.bindMethods(),
              this.#P();
          }
          bindMethods() {
            (this.mutate = this.mutate.bind(this)),
              (this.reset = this.reset.bind(this));
          }
          setOptions(e) {
            let l = this.options;
            (this.options = this.#_.defaultMutationOptions(e)),
              (0, b.VS)(this.options, l) ||
                this.#_
                  .getMutationCache()
                  .notify({
                    type: "observerOptionsUpdated",
                    mutation: this.#S,
                    observer: this,
                  }),
              l?.mutationKey &&
              this.options.mutationKey &&
              (0, b.Ym)(l.mutationKey) !== (0, b.Ym)(this.options.mutationKey)
                ? this.reset()
                : this.#S?.state.status === "pending" &&
                  this.#S.setOptions(this.options);
          }
          onUnsubscribe() {
            this.hasListeners() || this.#S?.removeObserver(this);
          }
          onMutationUpdate(e) {
            this.#P(), this.#M(e);
          }
          getCurrentResult() {
            return this.#A;
          }
          reset() {
            this.#S?.removeObserver(this),
              (this.#S = void 0),
              this.#P(),
              this.#M();
          }
          mutate(e, l) {
            return (
              (this.#k = l),
              this.#S?.removeObserver(this),
              (this.#S = this.#_
                .getMutationCache()
                .build(this.#_, this.options)),
              this.#S.addObserver(this),
              this.#S.execute(e)
            );
          }
          #P() {
            let e = this.#S?.state ?? (0, m.R)();
            this.#A = {
              ...e,
              isPending: "pending" === e.status,
              isSuccess: "success" === e.status,
              isError: "error" === e.status,
              isIdle: "idle" === e.status,
              mutate: this.mutate,
              reset: this.reset,
            };
          }
          #M(e) {
            g.Vr.batch(() => {
              if (this.#k && this.hasListeners()) {
                let l = this.#A.variables,
                  c = this.#A.context;
                e?.type === "success"
                  ? (this.#k.onSuccess?.(e.data, l, c),
                    this.#k.onSettled?.(e.data, null, l, c))
                  : e?.type === "error" &&
                    (this.#k.onError?.(e.error, l, c),
                    this.#k.onSettled?.(void 0, e.error, l, c));
              }
              this.listeners.forEach((e) => {
                e(this.#A);
              });
            });
          }
        },
        P = c(74732),
        I = c(56953);
      function useMutation(e, l) {
        let c = (0, P.NL)(l),
          [m] = d.useState(() => new C(c, e));
        d.useEffect(() => {
          m.setOptions(e);
        }, [m, e]);
        let y = d.useSyncExternalStore(
            d.useCallback((e) => m.subscribe(g.Vr.batchCalls(e)), [m]),
            () => m.getCurrentResult(),
            () => m.getCurrentResult()
          ),
          b = d.useCallback(
            (e, l) => {
              m.mutate(e, l).catch(I.Z);
            },
            [m]
          );
        if (y.error && (0, I.L)(m.options.throwOnError, [y.error]))
          throw y.error;
        return { ...y, mutate: b, mutateAsync: y.mutate };
      }
    },
    68823: function (e, l, c) {
      "use strict";
      let d;
      c.d(l, {
        a: function () {
          return useQuery;
        },
      });
      var m = c(87125),
        g = c(77268),
        y = c(40053),
        b = c(60954),
        C = c(27401),
        P = c(60527),
        I = class extends b.l {
          constructor(e, l) {
            super(),
              (this.options = l),
              (this.#_ = e),
              (this.#T = null),
              (this.#I = (0, C.O)()),
              this.options.experimental_prefetchInRender ||
                this.#I.reject(
                  Error(
                    "experimental_prefetchInRender feature flag is not enabled"
                  )
                ),
              this.bindMethods(),
              this.setOptions(l);
          }
          #_;
          #j = void 0;
          #O = void 0;
          #A = void 0;
          #B;
          #D;
          #I;
          #T;
          #N;
          #R;
          #F;
          #L;
          #U;
          #z;
          #W = new Set();
          bindMethods() {
            this.refetch = this.refetch.bind(this);
          }
          onSubscribe() {
            1 === this.listeners.size &&
              (this.#j.addObserver(this),
              shouldFetchOnMount(this.#j, this.options)
                ? this.#q()
                : this.updateResult(),
              this.#V());
          }
          onUnsubscribe() {
            this.hasListeners() || this.destroy();
          }
          shouldFetchOnReconnect() {
            return shouldFetchOn(
              this.#j,
              this.options,
              this.options.refetchOnReconnect
            );
          }
          shouldFetchOnWindowFocus() {
            return shouldFetchOn(
              this.#j,
              this.options,
              this.options.refetchOnWindowFocus
            );
          }
          destroy() {
            (this.listeners = new Set()),
              this.#H(),
              this.#G(),
              this.#j.removeObserver(this);
          }
          setOptions(e) {
            let l = this.options,
              c = this.#j;
            if (
              ((this.options = this.#_.defaultQueryOptions(e)),
              void 0 !== this.options.enabled &&
                "boolean" != typeof this.options.enabled &&
                "function" != typeof this.options.enabled &&
                "boolean" != typeof (0, P.Nc)(this.options.enabled, this.#j))
            )
              throw Error(
                "Expected enabled to be a boolean or a callback that returns a boolean"
              );
            this.#Q(),
              this.#j.setOptions(this.options),
              l._defaulted &&
                !(0, P.VS)(this.options, l) &&
                this.#_
                  .getQueryCache()
                  .notify({
                    type: "observerOptionsUpdated",
                    query: this.#j,
                    observer: this,
                  });
            let d = this.hasListeners();
            d &&
              shouldFetchOptionally(this.#j, c, this.options, l) &&
              this.#q(),
              this.updateResult(),
              d &&
                (this.#j !== c ||
                  (0, P.Nc)(this.options.enabled, this.#j) !==
                    (0, P.Nc)(l.enabled, this.#j) ||
                  (0, P.KC)(this.options.staleTime, this.#j) !==
                    (0, P.KC)(l.staleTime, this.#j)) &&
                this.#$();
            let m = this.#K();
            d &&
              (this.#j !== c ||
                (0, P.Nc)(this.options.enabled, this.#j) !==
                  (0, P.Nc)(l.enabled, this.#j) ||
                m !== this.#z) &&
              this.#Z(m);
          }
          getOptimisticResult(e) {
            let l = this.#_.getQueryCache().build(this.#_, e),
              c = this.createResult(l, e);
            return (
              (0, P.VS)(this.getCurrentResult(), c) ||
                ((this.#A = c),
                (this.#D = this.options),
                (this.#B = this.#j.state)),
              c
            );
          }
          getCurrentResult() {
            return this.#A;
          }
          trackResult(e, l) {
            let c = {};
            return (
              Object.keys(e).forEach((d) => {
                Object.defineProperty(c, d, {
                  configurable: !1,
                  enumerable: !0,
                  get: () => (this.trackProp(d), l?.(d), e[d]),
                });
              }),
              c
            );
          }
          trackProp(e) {
            this.#W.add(e);
          }
          getCurrentQuery() {
            return this.#j;
          }
          refetch({ ...e } = {}) {
            return this.fetch({ ...e });
          }
          fetchOptimistic(e) {
            let l = this.#_.defaultQueryOptions(e),
              c = this.#_.getQueryCache().build(this.#_, l);
            return c.fetch().then(() => this.createResult(c, l));
          }
          fetch(e) {
            return this.#q({ ...e, cancelRefetch: e.cancelRefetch ?? !0 }).then(
              () => (this.updateResult(), this.#A)
            );
          }
          #q(e) {
            this.#Q();
            let l = this.#j.fetch(this.options, e);
            return e?.throwOnError || (l = l.catch(P.ZT)), l;
          }
          #$() {
            this.#H();
            let e = (0, P.KC)(this.options.staleTime, this.#j);
            if (P.sk || this.#A.isStale || !(0, P.PN)(e)) return;
            let l = (0, P.Kp)(this.#A.dataUpdatedAt, e);
            this.#L = setTimeout(() => {
              this.#A.isStale || this.updateResult();
            }, l + 1);
          }
          #K() {
            return (
              ("function" == typeof this.options.refetchInterval
                ? this.options.refetchInterval(this.#j)
                : this.options.refetchInterval) ?? !1
            );
          }
          #Z(e) {
            this.#G(),
              (this.#z = e),
              !P.sk &&
                !1 !== (0, P.Nc)(this.options.enabled, this.#j) &&
                (0, P.PN)(this.#z) &&
                0 !== this.#z &&
                (this.#U = setInterval(() => {
                  (this.options.refetchIntervalInBackground ||
                    m.j.isFocused()) &&
                    this.#q();
                }, this.#z));
          }
          #V() {
            this.#$(), this.#Z(this.#K());
          }
          #H() {
            this.#L && (clearTimeout(this.#L), (this.#L = void 0));
          }
          #G() {
            this.#U && (clearInterval(this.#U), (this.#U = void 0));
          }
          createResult(e, l) {
            let c;
            let d = this.#j,
              m = this.options,
              g = this.#A,
              b = this.#B,
              I = this.#D,
              B = e !== d,
              N = B ? e.state : this.#O,
              { state: F } = e,
              V = { ...F },
              G = !1;
            if (l._optimisticResults) {
              let c = this.hasListeners(),
                g = !c && shouldFetchOnMount(e, l),
                b = c && shouldFetchOptionally(e, d, l, m);
              (g || b) && (V = { ...V, ...(0, y.z)(F.data, e.options) }),
                "isRestoring" === l._optimisticResults &&
                  (V.fetchStatus = "idle");
            }
            let { error: Q, errorUpdatedAt: $, status: Z } = V;
            c = V.data;
            let Y = !1;
            if (
              void 0 !== l.placeholderData &&
              void 0 === c &&
              "pending" === Z
            ) {
              let e;
              g?.isPlaceholderData && l.placeholderData === I?.placeholderData
                ? ((e = g.data), (Y = !0))
                : (e =
                    "function" == typeof l.placeholderData
                      ? l.placeholderData(this.#F?.state.data, this.#F)
                      : l.placeholderData),
                void 0 !== e &&
                  ((Z = "success"), (c = (0, P.oE)(g?.data, e, l)), (G = !0));
            }
            if (l.select && void 0 !== c && !Y) {
              if (g && c === b?.data && l.select === this.#N) c = this.#R;
              else
                try {
                  (this.#N = l.select),
                    (c = l.select(c)),
                    (c = (0, P.oE)(g?.data, c, l)),
                    (this.#R = c),
                    (this.#T = null);
                } catch (e) {
                  this.#T = e;
                }
            }
            this.#T &&
              ((Q = this.#T), (c = this.#R), ($ = Date.now()), (Z = "error"));
            let et = "fetching" === V.fetchStatus,
              en = "pending" === Z,
              er = "error" === Z,
              ei = en && et,
              eo = void 0 !== c,
              ea = {
                status: Z,
                fetchStatus: V.fetchStatus,
                isPending: en,
                isSuccess: "success" === Z,
                isError: er,
                isInitialLoading: ei,
                isLoading: ei,
                data: c,
                dataUpdatedAt: V.dataUpdatedAt,
                error: Q,
                errorUpdatedAt: $,
                failureCount: V.fetchFailureCount,
                failureReason: V.fetchFailureReason,
                errorUpdateCount: V.errorUpdateCount,
                isFetched: V.dataUpdateCount > 0 || V.errorUpdateCount > 0,
                isFetchedAfterMount:
                  V.dataUpdateCount > N.dataUpdateCount ||
                  V.errorUpdateCount > N.errorUpdateCount,
                isFetching: et,
                isRefetching: et && !en,
                isLoadingError: er && !eo,
                isPaused: "paused" === V.fetchStatus,
                isPlaceholderData: G,
                isRefetchError: er && eo,
                isStale: isStale(e, l),
                refetch: this.refetch,
                promise: this.#I,
              };
            if (this.options.experimental_prefetchInRender) {
              let finalizeThenableIfPossible = (e) => {
                  "error" === ea.status
                    ? e.reject(ea.error)
                    : void 0 !== ea.data && e.resolve(ea.data);
                },
                recreateThenable = () => {
                  let e = (this.#I = ea.promise = (0, C.O)());
                  finalizeThenableIfPossible(e);
                },
                l = this.#I;
              switch (l.status) {
                case "pending":
                  e.queryHash === d.queryHash && finalizeThenableIfPossible(l);
                  break;
                case "fulfilled":
                  ("error" === ea.status || ea.data !== l.value) &&
                    recreateThenable();
                  break;
                case "rejected":
                  ("error" !== ea.status || ea.error !== l.reason) &&
                    recreateThenable();
              }
            }
            return ea;
          }
          updateResult() {
            let e = this.#A,
              l = this.createResult(this.#j, this.options);
            (this.#B = this.#j.state),
              (this.#D = this.options),
              void 0 !== this.#B.data && (this.#F = this.#j),
              (0, P.VS)(l, e) ||
                ((this.#A = l),
                this.#M({
                  listeners: (() => {
                    if (!e) return !0;
                    let { notifyOnChangeProps: l } = this.options,
                      c = "function" == typeof l ? l() : l;
                    if ("all" === c || (!c && !this.#W.size)) return !0;
                    let d = new Set(c ?? this.#W);
                    return (
                      this.options.throwOnError && d.add("error"),
                      Object.keys(this.#A).some((l) => {
                        let c = this.#A[l] !== e[l];
                        return c && d.has(l);
                      })
                    );
                  })(),
                }));
          }
          #Q() {
            let e = this.#_.getQueryCache().build(this.#_, this.options);
            if (e === this.#j) return;
            let l = this.#j;
            (this.#j = e),
              (this.#O = e.state),
              this.hasListeners() &&
                (l?.removeObserver(this), e.addObserver(this));
          }
          onQueryUpdate() {
            this.updateResult(), this.hasListeners() && this.#V();
          }
          #M(e) {
            g.Vr.batch(() => {
              e.listeners &&
                this.listeners.forEach((e) => {
                  e(this.#A);
                }),
                this.#_
                  .getQueryCache()
                  .notify({ query: this.#j, type: "observerResultsUpdated" });
            });
          }
        };
      function shouldFetchOnMount(e, l) {
        return (
          (!1 !== (0, P.Nc)(l.enabled, e) &&
            void 0 === e.state.data &&
            !("error" === e.state.status && !1 === l.retryOnMount)) ||
          (void 0 !== e.state.data && shouldFetchOn(e, l, l.refetchOnMount))
        );
      }
      function shouldFetchOn(e, l, c) {
        if (!1 !== (0, P.Nc)(l.enabled, e)) {
          let d = "function" == typeof c ? c(e) : c;
          return "always" === d || (!1 !== d && isStale(e, l));
        }
        return !1;
      }
      function shouldFetchOptionally(e, l, c, d) {
        return (
          (e !== l || !1 === (0, P.Nc)(d.enabled, e)) &&
          (!c.suspense || "error" !== e.state.status) &&
          isStale(e, c)
        );
      }
      function isStale(e, l) {
        return (
          !1 !== (0, P.Nc)(l.enabled, e) &&
          e.isStaleByTime((0, P.KC)(l.staleTime, e))
        );
      }
      var B = c(50959),
        N = c(74732);
      c(11527);
      var F = B.createContext(
          ((d = !1),
          {
            clearReset: () => {
              d = !1;
            },
            reset: () => {
              d = !0;
            },
            isReset: () => d,
          })
        ),
        useQueryErrorResetBoundary = () => B.useContext(F),
        V = c(56953),
        ensurePreventErrorBoundaryRetry = (e, l) => {
          (e.suspense || e.throwOnError || e.experimental_prefetchInRender) &&
            !l.isReset() &&
            (e.retryOnMount = !1);
        },
        useClearResetErrorBoundary = (e) => {
          B.useEffect(() => {
            e.clearReset();
          }, [e]);
        },
        getHasError = ({
          result: e,
          errorResetBoundary: l,
          throwOnError: c,
          query: d,
          suspense: m,
        }) =>
          e.isError &&
          !l.isReset() &&
          !e.isFetching &&
          d &&
          ((m && void 0 === e.data) || (0, V.L)(c, [e.error, d])),
        G = B.createContext(!1),
        useIsRestoring = () => B.useContext(G);
      G.Provider;
      var ensureSuspenseTimers = (e) => {
          let l = e.staleTime;
          e.suspense &&
            ((e.staleTime =
              "function" == typeof l
                ? (...e) => Math.max(l(...e), 1e3)
                : Math.max(l ?? 1e3, 1e3)),
            "number" == typeof e.gcTime &&
              (e.gcTime = Math.max(e.gcTime, 1e3)));
        },
        willFetch = (e, l) => e.isLoading && e.isFetching && !l,
        shouldSuspend = (e, l) => e?.suspense && l.isPending,
        fetchOptimistic = (e, l, c) =>
          l.fetchOptimistic(e).catch(() => {
            c.clearReset();
          });
      function useQuery(e, l) {
        return (function (e, l, c) {
          let d = (0, N.NL)(c),
            m = useIsRestoring(),
            y = useQueryErrorResetBoundary(),
            b = d.defaultQueryOptions(e);
          d.getDefaultOptions().queries?._experimental_beforeQuery?.(b),
            (b._optimisticResults = m ? "isRestoring" : "optimistic"),
            ensureSuspenseTimers(b),
            ensurePreventErrorBoundaryRetry(b, y),
            useClearResetErrorBoundary(y);
          let C = !d.getQueryCache().get(b.queryHash),
            [I] = B.useState(() => new l(d, b)),
            F = I.getOptimisticResult(b),
            G = !m && !1 !== e.subscribed;
          if (
            (B.useSyncExternalStore(
              B.useCallback(
                (e) => {
                  let l = G ? I.subscribe(g.Vr.batchCalls(e)) : V.Z;
                  return I.updateResult(), l;
                },
                [I, G]
              ),
              () => I.getCurrentResult(),
              () => I.getCurrentResult()
            ),
            B.useEffect(() => {
              I.setOptions(b);
            }, [b, I]),
            shouldSuspend(b, F))
          )
            throw fetchOptimistic(b, I, y);
          if (
            getHasError({
              result: F,
              errorResetBoundary: y,
              throwOnError: b.throwOnError,
              query: d.getQueryCache().get(b.queryHash),
              suspense: b.suspense,
            })
          )
            throw F.error;
          if (
            (d.getDefaultOptions().queries?._experimental_afterQuery?.(b, F),
            b.experimental_prefetchInRender && !P.sk && willFetch(F, m))
          ) {
            let e = C
              ? fetchOptimistic(b, I, y)
              : d.getQueryCache().get(b.queryHash)?.promise;
            e?.catch(V.Z).finally(() => {
              I.updateResult();
            });
          }
          return b.notifyOnChangeProps ? F : I.trackResult(F);
        })(e, I, l);
      }
    },
    56953: function (e, l, c) {
      "use strict";
      function shouldThrowError(e, l) {
        return "function" == typeof e ? e(...l) : !!e;
      }
      function noop() {}
      c.d(l, {
        L: function () {
          return shouldThrowError;
        },
        Z: function () {
          return noop;
        },
      });
    },
    17813: function (e, l, c) {
      "use strict";
      c.d(l, {
        D: function () {
          return coinbaseWallet;
        },
      });
      var d = c(4842),
        m = c(4078),
        g = c(69301),
        y = c(42991),
        b = c(1701);
      function coinbaseWallet(e = {}) {
        let l, C, P, I, B, N, F, V, G;
        return "3" === e.version || e.headlessMode
          ? (0, d.K)((d) => ({
              id: "coinbaseWalletSDK",
              name: "Coinbase Wallet",
              rdns: "com.coinbase.wallet",
              type: coinbaseWallet.type,
              async connect({ chainId: e } = {}) {
                try {
                  let l = await this.getProvider(),
                    c = (
                      await l.request({ method: "eth_requestAccounts" })
                    ).map((e) => (0, g.K)(e));
                  P ||
                    ((P = this.onAccountsChanged.bind(this)),
                    l.on("accountsChanged", P)),
                    I ||
                      ((I = this.onChainChanged.bind(this)),
                      l.on("chainChanged", I)),
                    B ||
                      ((B = this.onDisconnect.bind(this)),
                      l.on("disconnect", B));
                  let d = await this.getChainId();
                  if (e && d !== e) {
                    let l = await this.switchChain({ chainId: e }).catch(
                      (e) => {
                        if (e.code === y.ab.code) throw e;
                        return { id: d };
                      }
                    );
                    d = l?.id ?? d;
                  }
                  return { accounts: c, chainId: d };
                } catch (e) {
                  if (
                    /(user closed modal|accounts received is empty|user denied account)/i.test(
                      e.message
                    )
                  )
                    throw new y.ab(e);
                  throw e;
                }
              },
              async disconnect() {
                let e = await this.getProvider();
                P && (e.removeListener("accountsChanged", P), (P = void 0)),
                  I && (e.removeListener("chainChanged", I), (I = void 0)),
                  B && (e.removeListener("disconnect", B), (B = void 0)),
                  e.disconnect(),
                  e.close();
              },
              async getAccounts() {
                let e = await this.getProvider();
                return (await e.request({ method: "eth_accounts" })).map((e) =>
                  (0, g.K)(e)
                );
              },
              async getChainId() {
                let e = await this.getProvider(),
                  l = await e.request({ method: "eth_chainId" });
                return Number(l);
              },
              async getProvider() {
                if (!C) {
                  let m = await (async () => {
                    let { default: e } = await Promise.all([
                      c.e(5872),
                      c.e(3158),
                      c.e(9497),
                      c.e(9606),
                    ]).then(c.t.bind(c, 19497, 19));
                    return "function" != typeof e &&
                      "function" == typeof e.default
                      ? e.default
                      : e;
                  })();
                  l = new m({ ...e, reloadOnDisconnect: !1 });
                  let g = l.walletExtension?.getChainId(),
                    y =
                      d.chains.find((l) =>
                        e.chainId ? l.id === e.chainId : l.id === g
                      ) || d.chains[0],
                    b = e.chainId || y?.id,
                    P = e.jsonRpcUrl || y?.rpcUrls.default.http[0];
                  C = l.makeWeb3Provider(P, b);
                }
                return C;
              },
              async isAuthorized() {
                try {
                  let e = await this.getAccounts();
                  return !!e.length;
                } catch {
                  return !1;
                }
              },
              async switchChain({ addEthereumChainParameter: e, chainId: l }) {
                let c = d.chains.find((e) => e.id === l);
                if (!c) throw new y.x3(new m.X4());
                let g = await this.getProvider();
                try {
                  return (
                    await g.request({
                      method: "wallet_switchEthereumChain",
                      params: [{ chainId: (0, b.eC)(c.id) }],
                    }),
                    c
                  );
                } catch (d) {
                  if (4902 === d.code)
                    try {
                      let d, m;
                      (d = e?.blockExplorerUrls
                        ? e.blockExplorerUrls
                        : c.blockExplorers?.default.url
                        ? [c.blockExplorers?.default.url]
                        : []),
                        (m = e?.rpcUrls?.length
                          ? e.rpcUrls
                          : [c.rpcUrls.default?.http[0] ?? ""]);
                      let y = {
                        blockExplorerUrls: d,
                        chainId: (0, b.eC)(l),
                        chainName: e?.chainName ?? c.name,
                        iconUrls: e?.iconUrls,
                        nativeCurrency: e?.nativeCurrency ?? c.nativeCurrency,
                        rpcUrls: m,
                      };
                      return (
                        await g.request({
                          method: "wallet_addEthereumChain",
                          params: [y],
                        }),
                        c
                      );
                    } catch (e) {
                      throw new y.ab(e);
                    }
                  throw new y.x3(d);
                }
              },
              onAccountsChanged(e) {
                0 === e.length
                  ? this.onDisconnect()
                  : d.emitter.emit("change", {
                      accounts: e.map((e) => (0, g.K)(e)),
                    });
              },
              onChainChanged(e) {
                let l = Number(e);
                d.emitter.emit("change", { chainId: l });
              },
              async onDisconnect(e) {
                d.emitter.emit("disconnect");
                let l = await this.getProvider();
                P && (l.removeListener("accountsChanged", P), (P = void 0)),
                  I && (l.removeListener("chainChanged", I), (I = void 0)),
                  B && (l.removeListener("disconnect", B), (B = void 0));
              },
            }))
          : (0, d.K)((l) => ({
              id: "coinbaseWalletSDK",
              name: "Coinbase Wallet",
              rdns: "com.coinbase.wallet",
              type: coinbaseWallet.type,
              async connect({ chainId: e, ...l } = {}) {
                try {
                  let c = await this.getProvider(),
                    d = (
                      await c.request({
                        method: "eth_requestAccounts",
                        params:
                          "instantOnboarding" in l && l.instantOnboarding
                            ? [{ onboarding: "instant" }]
                            : [],
                      })
                    ).map((e) => (0, g.K)(e));
                  F ||
                    ((F = this.onAccountsChanged.bind(this)),
                    c.on("accountsChanged", F)),
                    V ||
                      ((V = this.onChainChanged.bind(this)),
                      c.on("chainChanged", V)),
                    G ||
                      ((G = this.onDisconnect.bind(this)),
                      c.on("disconnect", G));
                  let m = await this.getChainId();
                  if (e && m !== e) {
                    let l = await this.switchChain({ chainId: e }).catch(
                      (e) => {
                        if (e.code === y.ab.code) throw e;
                        return { id: m };
                      }
                    );
                    m = l?.id ?? m;
                  }
                  return { accounts: d, chainId: m };
                } catch (e) {
                  if (
                    /(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(
                      e.message
                    )
                  )
                    throw new y.ab(e);
                  throw e;
                }
              },
              async disconnect() {
                let e = await this.getProvider();
                F && (e.removeListener("accountsChanged", F), (F = void 0)),
                  V && (e.removeListener("chainChanged", V), (V = void 0)),
                  G && (e.removeListener("disconnect", G), (G = void 0)),
                  e.disconnect(),
                  e.close?.();
              },
              async getAccounts() {
                let e = await this.getProvider();
                return (await e.request({ method: "eth_accounts" })).map((e) =>
                  (0, g.K)(e)
                );
              },
              async getChainId() {
                let e = await this.getProvider(),
                  l = await e.request({ method: "eth_chainId" });
                return Number(l);
              },
              async getProvider() {
                if (!N) {
                  let d =
                      "string" == typeof e.preference
                        ? { options: e.preference }
                        : {
                            ...e.preference,
                            options: e.preference?.options ?? "all",
                          },
                    { createCoinbaseWalletSDK: m } = await Promise.all([
                      c.e(5872),
                      c.e(8700),
                    ]).then(c.bind(c, 68700)),
                    g = m({
                      ...e,
                      appChainIds: l.chains.map((e) => e.id),
                      preference: d,
                    });
                  N = g.getProvider();
                }
                return N;
              },
              async isAuthorized() {
                try {
                  let e = await this.getAccounts();
                  return !!e.length;
                } catch {
                  return !1;
                }
              },
              async switchChain({ addEthereumChainParameter: e, chainId: c }) {
                let d = l.chains.find((e) => e.id === c);
                if (!d) throw new y.x3(new m.X4());
                let g = await this.getProvider();
                try {
                  return (
                    await g.request({
                      method: "wallet_switchEthereumChain",
                      params: [{ chainId: (0, b.eC)(d.id) }],
                    }),
                    d
                  );
                } catch (l) {
                  if (4902 === l.code)
                    try {
                      let l, m;
                      (l = e?.blockExplorerUrls
                        ? e.blockExplorerUrls
                        : d.blockExplorers?.default.url
                        ? [d.blockExplorers?.default.url]
                        : []),
                        (m = e?.rpcUrls?.length
                          ? e.rpcUrls
                          : [d.rpcUrls.default?.http[0] ?? ""]);
                      let y = {
                        blockExplorerUrls: l,
                        chainId: (0, b.eC)(c),
                        chainName: e?.chainName ?? d.name,
                        iconUrls: e?.iconUrls,
                        nativeCurrency: e?.nativeCurrency ?? d.nativeCurrency,
                        rpcUrls: m,
                      };
                      return (
                        await g.request({
                          method: "wallet_addEthereumChain",
                          params: [y],
                        }),
                        d
                      );
                    } catch (e) {
                      throw new y.ab(e);
                    }
                  throw new y.x3(l);
                }
              },
              onAccountsChanged(e) {
                0 === e.length
                  ? this.onDisconnect()
                  : l.emitter.emit("change", {
                      accounts: e.map((e) => (0, g.K)(e)),
                    });
              },
              onChainChanged(e) {
                let c = Number(e);
                l.emitter.emit("change", { chainId: c });
              },
              async onDisconnect(e) {
                l.emitter.emit("disconnect");
                let c = await this.getProvider();
                F && (c.removeListener("accountsChanged", F), (F = void 0)),
                  V && (c.removeListener("chainChanged", V), (V = void 0)),
                  G && (c.removeListener("disconnect", G), (G = void 0));
              },
            }));
      }
      coinbaseWallet.type = "coinbaseWallet";
    },
    6034: function (e, l, c) {
      "use strict";
      c.d(l, {
        T: function () {
          return safe;
        },
      });
      var d = c(4842),
        m = c(12335),
        g = c(69301),
        y = c(24770);
      function safe(e = {}) {
        let l, b;
        let { shimDisconnect: C = !1 } = e;
        return (0, d.K)((d) => ({
          id: "safe",
          name: "Safe",
          type: safe.type,
          async connect() {
            let e = await this.getProvider();
            if (!e) throw new m.M();
            let l = await this.getAccounts(),
              c = await this.getChainId();
            return (
              b || ((b = this.onDisconnect.bind(this)), e.on("disconnect", b)),
              C && (await d.storage?.removeItem("safe.disconnected")),
              { accounts: l, chainId: c }
            );
          },
          async disconnect() {
            let e = await this.getProvider();
            if (!e) throw new m.M();
            b && (e.removeListener("disconnect", b), (b = void 0)),
              C && (await d.storage?.setItem("safe.disconnected", !0));
          },
          async getAccounts() {
            let e = await this.getProvider();
            if (!e) throw new m.M();
            return (await e.request({ method: "eth_accounts" })).map(g.K);
          },
          async getProvider() {
            let d = "undefined" != typeof window && window?.parent !== window;
            if (d) {
              if (!l) {
                let { default: d } = await Promise.all([
                    c.e(7250),
                    c.e(7361),
                  ]).then(c.bind(c, 87361)),
                  m = new d(e),
                  g = await (0, y.F)(() => m.safe.getInfo(), {
                    timeout: e.unstable_getInfoTimeout ?? 10,
                  });
                if (!g) throw Error("Could not load Safe information");
                let b = await (async () => {
                  let e = await Promise.all([c.e(7250), c.e(7433)]).then(
                    c.t.bind(c, 27433, 19)
                  );
                  return "function" != typeof e.SafeAppProvider &&
                    "function" == typeof e.default.SafeAppProvider
                    ? e.default.SafeAppProvider
                    : e.SafeAppProvider;
                })();
                l = new b(g, m);
              }
              return l;
            }
          },
          async getChainId() {
            let e = await this.getProvider();
            if (!e) throw new m.M();
            return Number(e.chainId);
          },
          async isAuthorized() {
            try {
              let e = C && (await d.storage?.getItem("safe.disconnected"));
              if (e) return !1;
              let l = await this.getAccounts();
              return !!l.length;
            } catch {
              return !1;
            }
          },
          onAccountsChanged() {},
          onChainChanged() {},
          onDisconnect() {
            d.emitter.emit("disconnect");
          },
        }));
      }
      safe.type = "safe";
    },
    11516: function (e, l, c) {
      "use strict";
      c.d(l, {
        a: function () {
          return walletConnect;
        },
      });
      var d = c(4842),
        m = c(12335),
        g = c(4078),
        y = c(69301),
        b = c(42991),
        C = c(1701);
      function walletConnect(e) {
        let l, P, I, B, N, F, V, G;
        let Q = e.isNewChainsStale ?? !0;
        return (0, d.K)((d) => ({
          id: "walletConnect",
          name: "WalletConnect",
          type: walletConnect.type,
          async setup() {
            let e = await this.getProvider().catch(() => null);
            e &&
              (N || ((N = this.onConnect.bind(this)), e.on("connect", N)),
              V ||
                ((V = this.onSessionDelete.bind(this)),
                e.on("session_delete", V)));
          },
          async connect({ chainId: e, ...l } = {}) {
            try {
              let c = await this.getProvider();
              if (!c) throw new m.M();
              F || ((F = this.onDisplayUri), c.on("display_uri", F));
              let g = e;
              if (!g) {
                let e = (await d.storage?.getItem("state")) ?? {},
                  l = d.chains.some((l) => l.id === e.chainId);
                g = l ? e.chainId : d.chains[0]?.id;
              }
              if (!g) throw Error("No chains found on connector.");
              let b = await this.isChainsStale();
              if ((c.session && b && (await c.disconnect()), !c.session || b)) {
                let e = d.chains.filter((e) => e.id !== g).map((e) => e.id);
                await c.connect({
                  optionalChains: [g, ...e],
                  ...("pairingTopic" in l
                    ? { pairingTopic: l.pairingTopic }
                    : {}),
                }),
                  this.setRequestedChainsIds(d.chains.map((e) => e.id));
              }
              let C = (await c.enable()).map((e) => (0, y.K)(e)),
                P = await this.getChainId();
              return (
                F && (c.removeListener("display_uri", F), (F = void 0)),
                N && (c.removeListener("connect", N), (N = void 0)),
                I ||
                  ((I = this.onAccountsChanged.bind(this)),
                  c.on("accountsChanged", I)),
                B ||
                  ((B = this.onChainChanged.bind(this)),
                  c.on("chainChanged", B)),
                G ||
                  ((G = this.onDisconnect.bind(this)), c.on("disconnect", G)),
                V ||
                  ((V = this.onSessionDelete.bind(this)),
                  c.on("session_delete", V)),
                { accounts: C, chainId: P }
              );
            } catch (e) {
              if (/(user rejected|connection request reset)/i.test(e?.message))
                throw new b.ab(e);
              throw e;
            }
          },
          async disconnect() {
            let e = await this.getProvider();
            try {
              await e?.disconnect();
            } catch (e) {
              if (!/No matching key/i.test(e.message)) throw e;
            } finally {
              B && (e?.removeListener("chainChanged", B), (B = void 0)),
                G && (e?.removeListener("disconnect", G), (G = void 0)),
                N || ((N = this.onConnect.bind(this)), e?.on("connect", N)),
                I && (e?.removeListener("accountsChanged", I), (I = void 0)),
                V && (e?.removeListener("session_delete", V), (V = void 0)),
                this.setRequestedChainsIds([]);
            }
          },
          async getAccounts() {
            let e = await this.getProvider();
            return e.accounts.map((e) => (0, y.K)(e));
          },
          async getProvider({ chainId: m } = {}) {
            async function initProvider() {
              let l = d.chains.map((e) => e.id);
              if (!l.length) return;
              let { EthereumProvider: m } = await Promise.all([
                c.e(5872),
                c.e(5624),
              ]).then(c.bind(c, 65624));
              return await m.init({
                ...e,
                disableProviderPing: !0,
                optionalChains: l,
                projectId: e.projectId,
                rpcMap: Object.fromEntries(
                  d.chains.map((e) => {
                    let [l] = (function (e) {
                      let { chain: l } = e,
                        c = l.rpcUrls.default.http[0];
                      if (!e.transports) return [c];
                      let d = e.transports?.[l.id]?.({ chain: l }),
                        m = d?.value?.transports || [d];
                      return m.map(({ value: e }) => e?.url || c);
                    })({ chain: e, transports: d.transports });
                    return [e.id, l];
                  })
                ),
                showQrModal: e.showQrModal ?? !0,
              });
            }
            return (
              l ||
                (P || (P = initProvider()),
                (l = await P),
                l?.events.setMaxListeners(Number.POSITIVE_INFINITY)),
              m && (await this.switchChain?.({ chainId: m })),
              l
            );
          },
          async getChainId() {
            let e = await this.getProvider();
            return e.chainId;
          },
          async isAuthorized() {
            try {
              let [e, l] = await Promise.all([
                this.getAccounts(),
                this.getProvider(),
              ]);
              if (!e.length) return !1;
              let c = await this.isChainsStale();
              if (c && l.session)
                return await l.disconnect().catch(() => {}), !1;
              return !0;
            } catch {
              return !1;
            }
          },
          async switchChain({ addEthereumChainParameter: e, chainId: l }) {
            let c = await this.getProvider();
            if (!c) throw new m.M();
            let y = d.chains.find((e) => e.id === l);
            if (!y) throw new b.x3(new g.X4());
            try {
              await Promise.all([
                new Promise((e) => {
                  let listener = ({ chainId: c }) => {
                    c === l && (d.emitter.off("change", listener), e());
                  };
                  d.emitter.on("change", listener);
                }),
                c.request({
                  method: "wallet_switchEthereumChain",
                  params: [{ chainId: (0, C.eC)(l) }],
                }),
              ]);
              let e = await this.getRequestedChainsIds();
              return this.setRequestedChainsIds([...e, l]), y;
            } catch (d) {
              if (/(user rejected)/i.test(d.message)) throw new b.ab(d);
              try {
                let d, m;
                (d = e?.blockExplorerUrls
                  ? e.blockExplorerUrls
                  : y.blockExplorers?.default.url
                  ? [y.blockExplorers?.default.url]
                  : []),
                  (m = e?.rpcUrls?.length
                    ? e.rpcUrls
                    : [...y.rpcUrls.default.http]);
                let g = {
                  blockExplorerUrls: d,
                  chainId: (0, C.eC)(l),
                  chainName: e?.chainName ?? y.name,
                  iconUrls: e?.iconUrls,
                  nativeCurrency: e?.nativeCurrency ?? y.nativeCurrency,
                  rpcUrls: m,
                };
                await c.request({
                  method: "wallet_addEthereumChain",
                  params: [g],
                });
                let b = await this.getRequestedChainsIds();
                return this.setRequestedChainsIds([...b, l]), y;
              } catch (e) {
                throw new b.ab(e);
              }
            }
          },
          onAccountsChanged(e) {
            0 === e.length
              ? this.onDisconnect()
              : d.emitter.emit("change", {
                  accounts: e.map((e) => (0, y.K)(e)),
                });
          },
          onChainChanged(e) {
            let l = Number(e);
            d.emitter.emit("change", { chainId: l });
          },
          async onConnect(e) {
            let l = Number(e.chainId),
              c = await this.getAccounts();
            d.emitter.emit("connect", { accounts: c, chainId: l });
          },
          async onDisconnect(e) {
            this.setRequestedChainsIds([]), d.emitter.emit("disconnect");
            let l = await this.getProvider();
            I && (l.removeListener("accountsChanged", I), (I = void 0)),
              B && (l.removeListener("chainChanged", B), (B = void 0)),
              G && (l.removeListener("disconnect", G), (G = void 0)),
              V && (l.removeListener("session_delete", V), (V = void 0)),
              N || ((N = this.onConnect.bind(this)), l.on("connect", N));
          },
          onDisplayUri(e) {
            d.emitter.emit("message", { type: "display_uri", data: e });
          },
          onSessionDelete() {
            this.onDisconnect();
          },
          getNamespaceChainsIds() {
            if (!l) return [];
            let e = l.session?.namespaces.eip155?.accounts?.map((e) =>
              Number.parseInt(e.split(":")[1] || "")
            );
            return e ?? [];
          },
          async getRequestedChainsIds() {
            return (
              (await d.storage?.getItem(this.requestedChainsStorageKey)) ?? []
            );
          },
          async isChainsStale() {
            if (!Q) return !1;
            let e = d.chains.map((e) => e.id),
              l = this.getNamespaceChainsIds();
            if (l.length && !l.some((l) => e.includes(l))) return !1;
            let c = await this.getRequestedChainsIds();
            return !e.every((e) => c.includes(e));
          },
          async setRequestedChainsIds(e) {
            await d.storage?.setItem(this.requestedChainsStorageKey, e);
          },
          get requestedChainsStorageKey() {
            return `${this.id}.requestedChains`;
          },
        }));
      }
      walletConnect.type = "walletConnect";
    },
    88414: function (e, l, c) {
      "use strict";
      c.d(l, {
        e: function () {
          return waitForTransactionReceipt;
        },
      });
      var d = c(3644),
        m = c(4620),
        g = c(97704),
        y = c(17675),
        b = c(44507);
      async function waitForTransactionReceipt(e, l) {
        let { chainId: c, timeout: C = 0, ...P } = l,
          I = e.getClient({ chainId: c }),
          B = (0, b.s)(I, m.e, "waitForTransactionReceipt"),
          N = await B({ ...P, timeout: C });
        if ("reverted" === N.status) {
          let e = (0, b.s)(I, g.f, "getTransaction"),
            l = await e({ hash: N.transactionHash }),
            c = (0, b.s)(I, y.R, "call"),
            m = await c({
              ...l,
              data: l.input,
              gasPrice: "eip1559" !== l.type ? l.gasPrice : void 0,
              maxFeePerGas: "eip1559" === l.type ? l.maxFeePerGas : void 0,
              maxPriorityFeePerGas:
                "eip1559" === l.type ? l.maxPriorityFeePerGas : void 0,
            }),
            C = m?.data
              ? (0, d.rR)(`0x${m.data.substring(138)}`)
              : "unknown reason";
          throw Error(C);
        }
        return { ...N, chainId: I.chain.id };
      }
    },
    19602: function (e, l, c) {
      "use strict";
      c.d(l, {
        n: function () {
          return writeContract_writeContract;
        },
      });
      var d = c(40362),
        m = c(68311),
        g = c(28065),
        y = c(3086),
        b = c(59351),
        C = c(26456),
        P = c(44717),
        I = c(853),
        B = c(78e3),
        N = c(39751),
        F = c(26852),
        V = c(8383),
        G = c(36666),
        Q = c(94065),
        $ = c(21233),
        Z = c(61727),
        Y = c(16886),
        et = c(96279);
      let en = new Q.k(128);
      async function sendTransaction(e, l) {
        let {
          account: c = e.account,
          chain: g = e.chain,
          accessList: y,
          authorizationList: Q,
          blobs: er,
          data: ei,
          gas: eo,
          gasPrice: ea,
          maxFeePerBlobGas: es,
          maxFeePerGas: el,
          maxPriorityFeePerGas: ec,
          nonce: eu,
          value: ed,
          ...ep
        } = l;
        if (void 0 === c)
          throw new m.o({ docsPath: "/docs/actions/wallet/sendTransaction" });
        let eh = c ? (0, d.T)(c) : null;
        try {
          (0, $.F)(l);
          let c = await (async () =>
            l.to
              ? l.to
              : null !== l.to && Q && Q.length > 0
              ? await (0, P.z)({ authorization: Q[0] }).catch(() => {
                  throw new C.G(
                    "`to` is required. Could not infer from `authorizationList`."
                  );
                })
              : void 0)();
          if (eh?.type === "json-rpc" || null === eh) {
            let l;
            null !== g &&
              ((l = await (0, b.s)(e, Z.L, "getChainId")({})),
              (function ({ chain: e, currentChainId: l }) {
                if (!e) throw new I.Bk();
                if (l !== e.id) throw new I.Yl({ chain: e, currentChainId: l });
              })({ currentChainId: l, chain: g }));
            let d = e.chain?.formatters?.transactionRequest?.format,
              m = d || G.tG,
              C = m({
                ...(0, V.K)(ep, { format: d }),
                accessList: y,
                authorizationList: Q,
                blobs: er,
                chainId: l,
                data: ei,
                from: eh?.address,
                gas: eo,
                gasPrice: ea,
                maxFeePerBlobGas: es,
                maxFeePerGas: el,
                maxPriorityFeePerGas: ec,
                nonce: eu,
                to: c,
                value: ed,
              }),
              P = en.get(e.uid);
            try {
              return await e.request(
                {
                  method: P ? "wallet_sendTransaction" : "eth_sendTransaction",
                  params: [C],
                },
                { retryCount: 0 }
              );
            } catch (l) {
              if (!1 === P) throw l;
              if (
                "InvalidInputRpcError" === l.name ||
                "InvalidParamsRpcError" === l.name ||
                "MethodNotFoundRpcError" === l.name ||
                "MethodNotSupportedRpcError" === l.name
              )
                return await e
                  .request(
                    { method: "wallet_sendTransaction", params: [C] },
                    { retryCount: 0 }
                  )
                  .then((l) => (en.set(e.uid, !0), l))
                  .catch((c) => {
                    if (
                      "MethodNotFoundRpcError" === c.name ||
                      "MethodNotSupportedRpcError" === c.name
                    )
                      throw (en.set(e.uid, !1), l);
                    throw c;
                  });
              throw l;
            }
          }
          if (eh?.type === "local") {
            let l = await (0, b.s)(
                e,
                Y.ZE,
                "prepareTransactionRequest"
              )({
                account: eh,
                accessList: y,
                authorizationList: Q,
                blobs: er,
                chain: g,
                data: ei,
                gas: eo,
                gasPrice: ea,
                maxFeePerBlobGas: es,
                maxFeePerGas: el,
                maxPriorityFeePerGas: ec,
                nonce: eu,
                nonceManager: eh.nonceManager,
                parameters: [...Y.QZ, "sidecars"],
                value: ed,
                ...ep,
                to: c,
              }),
              d = g?.serializers?.transaction,
              m = await eh.signTransaction(l, { serializer: d });
            return await (0, b.s)(
              e,
              et.p,
              "sendRawTransaction"
            )({ serializedTransaction: m });
          }
          if (eh?.type === "smart")
            throw new m.Y({
              metaMessages: [
                "Consider using the `sendUserOperation` Action instead.",
              ],
              docsPath: "/docs/actions/bundler/sendUserOperation",
              type: "smart",
            });
          throw new m.Y({
            docsPath: "/docs/actions/wallet/sendTransaction",
            type: eh?.type,
          });
        } catch (e) {
          if (e instanceof m.Y) throw e;
          throw (function (e, { docsPath: l, ...c }) {
            let d = (() => {
              let l = (0, F.k)(e, c);
              return l instanceof B.cj ? e : l;
            })();
            return new N.mk(d, { docsPath: l, ...c });
          })(e, { ...l, account: eh, chain: l.chain || void 0 });
        }
      }
      async function writeContract(e, l) {
        let {
          abi: c,
          account: C = e.account,
          address: P,
          args: I,
          dataSuffix: B,
          functionName: N,
          ...F
        } = l;
        if (void 0 === C)
          throw new m.o({ docsPath: "/docs/contract/writeContract" });
        let V = C ? (0, d.T)(C) : null,
          G = (0, g.R)({ abi: c, args: I, functionName: N });
        try {
          return await (0, b.s)(
            e,
            sendTransaction,
            "sendTransaction"
          )({
            data: `${G}${B ? B.replace("0x", "") : ""}`,
            to: P,
            account: V,
            ...F,
          });
        } catch (e) {
          throw (0, y.S)(e, {
            abi: c,
            address: P,
            args: I,
            docsPath: "/docs/contract/writeContract",
            functionName: N,
            sender: V?.address,
          });
        }
      }
      var er = c(44507),
        ei = c(78907),
        eo = c(54022),
        ea = c(69301),
        es = c(4078);
      async function getConnectorClient(e, l = {}) {
        let c;
        if (l.connector) {
          let { connector: d } = l;
          if (
            "reconnecting" === e.state.status &&
            !d.getAccounts &&
            !d.getChainId
          )
            throw new es.$S({ connector: d });
          let [m, g] = await Promise.all([
            d.getAccounts().catch((e) => {
              if (null === l.account) return [];
              throw e;
            }),
            d.getChainId(),
          ]);
          c = { accounts: m, chainId: g, connector: d };
        } else c = e.state.connections.get(e.state.current);
        if (!c) throw new es.aH();
        let m = l.chainId ?? c.chainId,
          g = await c.connector.getChainId();
        if (g !== c.chainId)
          throw new es.XZ({
            connectionChainId: c.chainId,
            connectorChainId: g,
          });
        let y = c.connector;
        if (y.getClient) return y.getClient({ chainId: m });
        let b = (0, d.T)(l.account ?? c.accounts[0]);
        if (
          (b && (b.address = (0, ea.K)(b.address)),
          l.account &&
            !c.accounts.some(
              (e) => e.toLowerCase() === b.address.toLowerCase()
            ))
        )
          throw new es.JK({ address: b.address, connector: y });
        let C = e.chains.find((e) => e.id === m),
          P = await c.connector.getProvider({ chainId: m });
        return (0, ei.e)({
          account: b,
          chain: C,
          name: "Connector Client",
          transport: (e) => (0, eo.P)(P)({ ...e, retryCount: 0 }),
        });
      }
      async function writeContract_writeContract(e, l) {
        let c;
        let { account: d, chainId: m, connector: g, ...y } = l;
        c =
          "object" == typeof d && d?.type === "local"
            ? e.getClient({ chainId: m })
            : await getConnectorClient(e, {
                account: d ?? void 0,
                chainId: m,
                connector: g,
              });
        let b = (0, er.s)(c, writeContract, "writeContract"),
          C = await b({
            ...y,
            ...(d ? { account: d } : {}),
            chain: m ? { id: m } : null,
          });
        return C;
      }
    },
    4842: function (e, l, c) {
      "use strict";
      function createConnector(e) {
        return e;
      }
      c.d(l, {
        K: function () {
          return createConnector;
        },
      });
    },
    41402: function (e, l, c) {
      "use strict";
      c.d(l, {
        L: function () {
          return injected;
        },
      });
      var d = c(69301),
        m = c(42991),
        g = c(24770),
        y = c(21339),
        b = c(1701),
        C = c(4078),
        P = c(12335),
        I = c(4842);
      function injected(e = {}) {
        let l, c, N, F;
        let { shimDisconnect: V = !0, unstable_shimAsyncInject: G } = e;
        function getTarget() {
          let l = e.target;
          if ("function" == typeof l) {
            let e = l();
            if (e) return e;
          }
          return "object" == typeof l
            ? l
            : "string" == typeof l
            ? {
                ...(B[l] ?? {
                  id: l,
                  name: `${l[0].toUpperCase()}${l.slice(1)}`,
                  provider: `is${l[0].toUpperCase()}${l.slice(1)}`,
                }),
              }
            : {
                id: "injected",
                name: "Injected",
                provider: (e) => e?.ethereum,
              };
        }
        return (0, I.K)((I) => ({
          get icon() {
            return getTarget().icon;
          },
          get id() {
            return getTarget().id;
          },
          get name() {
            return getTarget().name;
          },
          get supportsSimulation() {
            return !0;
          },
          type: injected.type,
          async setup() {
            let c = await this.getProvider();
            c?.on &&
              e.target &&
              (N || ((N = this.onConnect.bind(this)), c.on("connect", N)),
              l ||
                ((l = this.onAccountsChanged.bind(this)),
                c.on("accountsChanged", l)));
          },
          async connect({ chainId: g, isReconnecting: y } = {}) {
            let b = await this.getProvider();
            if (!b) throw new P.M();
            let C = [];
            if (y) C = await this.getAccounts().catch(() => []);
            else if (V)
              try {
                let e = await b.request({
                  method: "wallet_requestPermissions",
                  params: [{ eth_accounts: {} }],
                });
                if (
                  (C = e[0]?.caveats?.[0]?.value?.map((e) => d.K(e))).length > 0
                ) {
                  let e = await this.getAccounts();
                  C = e;
                }
              } catch (e) {
                if (e.code === m.ab.code) throw new m.ab(e);
                if (e.code === m.pT.code) throw e;
              }
            try {
              if (!C?.length && !y) {
                let e = await b.request({ method: "eth_requestAccounts" });
                C = e.map((e) => (0, d.K)(e));
              }
              N && (b.removeListener("connect", N), (N = void 0)),
                l ||
                  ((l = this.onAccountsChanged.bind(this)),
                  b.on("accountsChanged", l)),
                c ||
                  ((c = this.onChainChanged.bind(this)),
                  b.on("chainChanged", c)),
                F ||
                  ((F = this.onDisconnect.bind(this)), b.on("disconnect", F));
              let P = await this.getChainId();
              if (g && P !== g) {
                let e = await this.switchChain({ chainId: g }).catch((e) => {
                  if (e.code === m.ab.code) throw e;
                  return { id: P };
                });
                P = e?.id ?? P;
              }
              return (
                V && (await I.storage?.removeItem(`${this.id}.disconnected`)),
                e.target ||
                  (await I.storage?.setItem("injected.connected", !0)),
                { accounts: C, chainId: P }
              );
            } catch (e) {
              if (e.code === m.ab.code) throw new m.ab(e);
              if (e.code === m.pT.code) throw new m.pT(e);
              throw e;
            }
          },
          async disconnect() {
            let l = await this.getProvider();
            if (!l) throw new P.M();
            c && (l.removeListener("chainChanged", c), (c = void 0)),
              F && (l.removeListener("disconnect", F), (F = void 0)),
              N || ((N = this.onConnect.bind(this)), l.on("connect", N));
            try {
              await (0, g.F)(
                () =>
                  l.request({
                    method: "wallet_revokePermissions",
                    params: [{ eth_accounts: {} }],
                  }),
                { timeout: 100 }
              );
            } catch {}
            V && (await I.storage?.setItem(`${this.id}.disconnected`, !0)),
              e.target || (await I.storage?.removeItem("injected.connected"));
          },
          async getAccounts() {
            let e = await this.getProvider();
            if (!e) throw new P.M();
            let l = await e.request({ method: "eth_accounts" });
            return l.map((e) => (0, d.K)(e));
          },
          async getChainId() {
            let e = await this.getProvider();
            if (!e) throw new P.M();
            let l = await e.request({ method: "eth_chainId" });
            return Number(l);
          },
          async getProvider() {
            let e;
            if ("undefined" == typeof window) return;
            let l = getTarget();
            return (
              (e =
                "function" == typeof l.provider
                  ? l.provider(window)
                  : "string" == typeof l.provider
                  ? findProvider(window, l.provider)
                  : l.provider) &&
                !e.removeListener &&
                ("off" in e && "function" == typeof e.off
                  ? (e.removeListener = e.off)
                  : (e.removeListener = () => {})),
              e
            );
          },
          async isAuthorized() {
            try {
              let l =
                V && (await I.storage?.getItem(`${this.id}.disconnected`));
              if (l) return !1;
              if (!e.target) {
                let e = await I.storage?.getItem("injected.connected");
                if (!e) return !1;
              }
              let c = await this.getProvider();
              if (!c) {
                if (void 0 !== G && !1 !== G) {
                  let handleEthereum = async () => {
                      "undefined" != typeof window &&
                        window.removeEventListener(
                          "ethereum#initialized",
                          handleEthereum
                        );
                      let e = await this.getProvider();
                      return !!e;
                    },
                    e = "number" == typeof G ? G : 1e3,
                    l = await Promise.race([
                      ...("undefined" != typeof window
                        ? [
                            new Promise((e) =>
                              window.addEventListener(
                                "ethereum#initialized",
                                () => e(handleEthereum()),
                                { once: !0 }
                              )
                            ),
                          ]
                        : []),
                      new Promise((l) =>
                        setTimeout(() => l(handleEthereum()), e)
                      ),
                    ]);
                  if (l) return !0;
                }
                throw new P.M();
              }
              let d = await (0, y.J)(() => this.getAccounts());
              return !!d.length;
            } catch {
              return !1;
            }
          },
          async switchChain({ addEthereumChainParameter: e, chainId: l }) {
            let c = await this.getProvider();
            if (!c) throw new P.M();
            let d = I.chains.find((e) => e.id === l);
            if (!d) throw new m.x3(new C.X4());
            let g = new Promise((e) => {
              let listener = (c) => {
                "chainId" in c &&
                  c.chainId === l &&
                  (I.emitter.off("change", listener), e());
              };
              I.emitter.on("change", listener);
            });
            try {
              return (
                await Promise.all([
                  c
                    .request({
                      method: "wallet_switchEthereumChain",
                      params: [{ chainId: (0, b.eC)(l) }],
                    })
                    .then(async () => {
                      let e = await this.getChainId();
                      e === l && I.emitter.emit("change", { chainId: l });
                    }),
                  g,
                ]),
                d
              );
            } catch (y) {
              if (4902 === y.code || y?.data?.originalError?.code === 4902)
                try {
                  let y, C;
                  let { default: P, ...B } = d.blockExplorers ?? {};
                  e?.blockExplorerUrls
                    ? (y = e.blockExplorerUrls)
                    : P && (y = [P.url, ...Object.values(B).map((e) => e.url)]),
                    (C = e?.rpcUrls?.length
                      ? e.rpcUrls
                      : [d.rpcUrls.default?.http[0] ?? ""]);
                  let N = {
                    blockExplorerUrls: y,
                    chainId: (0, b.eC)(l),
                    chainName: e?.chainName ?? d.name,
                    iconUrls: e?.iconUrls,
                    nativeCurrency: e?.nativeCurrency ?? d.nativeCurrency,
                    rpcUrls: C,
                  };
                  return (
                    await Promise.all([
                      c
                        .request({
                          method: "wallet_addEthereumChain",
                          params: [N],
                        })
                        .then(async () => {
                          let e = await this.getChainId();
                          if (e === l) I.emitter.emit("change", { chainId: l });
                          else
                            throw new m.ab(
                              Error(
                                "User rejected switch after adding network."
                              )
                            );
                        }),
                      g,
                    ]),
                    d
                  );
                } catch (e) {
                  throw new m.ab(e);
                }
              if (y.code === m.ab.code) throw new m.ab(y);
              throw new m.x3(y);
            }
          },
          async onAccountsChanged(e) {
            if (0 === e.length) this.onDisconnect();
            else if (I.emitter.listenerCount("connect")) {
              let e = (await this.getChainId()).toString();
              this.onConnect({ chainId: e }),
                V && (await I.storage?.removeItem(`${this.id}.disconnected`));
            } else
              I.emitter.emit("change", { accounts: e.map((e) => (0, d.K)(e)) });
          },
          onChainChanged(e) {
            let l = Number(e);
            I.emitter.emit("change", { chainId: l });
          },
          async onConnect(e) {
            let d = await this.getAccounts();
            if (0 === d.length) return;
            let m = Number(e.chainId);
            I.emitter.emit("connect", { accounts: d, chainId: m });
            let g = await this.getProvider();
            g &&
              (N && (g.removeListener("connect", N), (N = void 0)),
              l ||
                ((l = this.onAccountsChanged.bind(this)),
                g.on("accountsChanged", l)),
              c ||
                ((c = this.onChainChanged.bind(this)), g.on("chainChanged", c)),
              F || ((F = this.onDisconnect.bind(this)), g.on("disconnect", F)));
          },
          async onDisconnect(e) {
            let l = await this.getProvider();
            (e && 1013 === e.code && l && (await this.getAccounts()).length) ||
              (I.emitter.emit("disconnect"),
              l &&
                (c && (l.removeListener("chainChanged", c), (c = void 0)),
                F && (l.removeListener("disconnect", F), (F = void 0)),
                N || ((N = this.onConnect.bind(this)), l.on("connect", N))));
          },
        }));
      }
      injected.type = "injected";
      let B = {
        coinbaseWallet: {
          id: "coinbaseWallet",
          name: "Coinbase Wallet",
          provider: (e) =>
            e?.coinbaseWalletExtension
              ? e.coinbaseWalletExtension
              : findProvider(e, "isCoinbaseWallet"),
        },
        metaMask: {
          id: "metaMask",
          name: "MetaMask",
          provider: (e) =>
            findProvider(e, (e) => {
              if (!e.isMetaMask || (e.isBraveWallet && !e._events && !e._state))
                return !1;
              for (let l of [
                "isApexWallet",
                "isAvalanche",
                "isBitKeep",
                "isBlockWallet",
                "isKuCoinWallet",
                "isMathWallet",
                "isOkxWallet",
                "isOKExWallet",
                "isOneInchIOSWallet",
                "isOneInchAndroidWallet",
                "isOpera",
                "isPhantom",
                "isPortal",
                "isRabby",
                "isTokenPocket",
                "isTokenary",
                "isUniswapWallet",
                "isZerion",
              ])
                if (e[l]) return !1;
              return !0;
            }),
        },
        phantom: {
          id: "phantom",
          name: "Phantom",
          provider: (e) =>
            e?.phantom?.ethereum
              ? e.phantom?.ethereum
              : findProvider(e, "isPhantom"),
        },
      };
      function findProvider(e, l) {
        function isProvider(e) {
          return "function" == typeof l ? l(e) : "string" != typeof l || e[l];
        }
        let c = e.ethereum;
        return c?.providers
          ? c.providers.find((e) => isProvider(e))
          : c && isProvider(c)
          ? c
          : void 0;
      }
    },
    29315: function (e, l, c) {
      "use strict";
      c.d(l, {
        G: function () {
          return BaseError;
        },
      });
      let getVersion = () => "@wagmi/core@2.17.0";
      var d,
        m,
        __classPrivateFieldGet = function (e, l, c, d) {
          if ("a" === c && !d)
            throw TypeError("Private accessor was defined without a getter");
          if ("function" == typeof l ? e !== l || !d : !l.has(e))
            throw TypeError(
              "Cannot read private member from an object whose class did not declare it"
            );
          return "m" === c ? d : "a" === c ? d.call(e) : d ? d.value : l.get(e);
        };
      let BaseError = class BaseError extends Error {
        get docsBaseUrl() {
          return "https://wagmi.sh/core";
        }
        get version() {
          return getVersion();
        }
        constructor(e, l = {}) {
          super(),
            d.add(this),
            Object.defineProperty(this, "details", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "docsPath", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "metaMessages", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "shortMessage", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "WagmiCoreError",
            });
          let c =
              l.cause instanceof BaseError
                ? l.cause.details
                : l.cause?.message
                ? l.cause.message
                : l.details,
            m =
              (l.cause instanceof BaseError && l.cause.docsPath) || l.docsPath;
          (this.message = [
            e || "An error occurred.",
            "",
            ...(l.metaMessages ? [...l.metaMessages, ""] : []),
            ...(m
              ? [
                  `Docs: ${this.docsBaseUrl}${m}.html${
                    l.docsSlug ? `#${l.docsSlug}` : ""
                  }`,
                ]
              : []),
            ...(c ? [`Details: ${c}`] : []),
            `Version: ${this.version}`,
          ].join("\n")),
            l.cause && (this.cause = l.cause),
            (this.details = c),
            (this.docsPath = m),
            (this.metaMessages = l.metaMessages),
            (this.shortMessage = e);
        }
        walk(e) {
          return __classPrivateFieldGet(this, d, "m", m).call(this, this, e);
        }
      };
      (d = new WeakSet()),
        (m = function _BaseError_walk(e, l) {
          return l?.(e)
            ? e
            : e.cause
            ? __classPrivateFieldGet(this, d, "m", _BaseError_walk).call(
                this,
                e.cause,
                l
              )
            : e;
        });
    },
    4078: function (e, l, c) {
      "use strict";
      c.d(l, {
        $S: function () {
          return ConnectorUnavailableReconnectingError;
        },
        JK: function () {
          return ConnectorAccountNotFoundError;
        },
        X4: function () {
          return ChainNotConfiguredError;
        },
        XZ: function () {
          return ConnectorChainMismatchError;
        },
        aH: function () {
          return ConnectorNotConnectedError;
        },
      });
      var d = c(29315);
      let ChainNotConfiguredError = class ChainNotConfiguredError extends d.G {
        constructor() {
          super("Chain not configured."),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ChainNotConfiguredError",
            });
        }
      };
      let ConnectorNotConnectedError = class ConnectorNotConnectedError extends d.G {
        constructor() {
          super("Connector not connected."),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ConnectorNotConnectedError",
            });
        }
      };
      let ConnectorAccountNotFoundError = class ConnectorAccountNotFoundError extends d.G {
        constructor({ address: e, connector: l }) {
          super(`Account "${e}" not found for connector "${l.name}".`),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ConnectorAccountNotFoundError",
            });
        }
      };
      let ConnectorChainMismatchError = class ConnectorChainMismatchError extends d.G {
        constructor({ connectionChainId: e, connectorChainId: l }) {
          super(
            `The current chain of the connector (id: ${l}) does not match the connection's chain (id: ${e}).`,
            {
              metaMessages: [
                `Current Chain ID:  ${l}`,
                `Expected Chain ID: ${e}`,
              ],
            }
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ConnectorChainMismatchError",
            });
        }
      };
      let ConnectorUnavailableReconnectingError = class ConnectorUnavailableReconnectingError extends d.G {
        constructor({ connector: e }) {
          super(`Connector "${e.name}" unavailable while reconnecting.`, {
            details:
              "During the reconnection step, the only connector methods guaranteed to be available are: `id`, `name`, `type`, `uid`. All other methods are not guaranteed to be available until reconnection completes and connectors are fully restored. This error commonly occurs for connectors that asynchronously inject after reconnection has already started.",
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ConnectorUnavailableReconnectingError",
            });
        }
      };
    },
    12335: function (e, l, c) {
      "use strict";
      c.d(l, {
        M: function () {
          return ProviderNotFoundError;
        },
      });
      var d = c(29315);
      let ProviderNotFoundError = class ProviderNotFoundError extends d.G {
        constructor() {
          super("Provider not found."),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ProviderNotFoundError",
            });
        }
      };
    },
    44507: function (e, l, c) {
      "use strict";
      function getAction(e, l, c) {
        let d = e[l.name];
        if ("function" == typeof d) return d;
        let m = e[c];
        return "function" == typeof m ? m : (c) => l(e, c);
      }
      c.d(l, {
        s: function () {
          return getAction;
        },
      });
    },
    75055: function (e, l, c) {
      "use strict";
      function getAccount(e) {
        let l = e.state.current,
          c = e.state.connections.get(l),
          d = c?.accounts,
          m = d?.[0],
          g = e.chains.find((e) => e.id === c?.chainId),
          y = e.state.status;
        switch (y) {
          case "connected":
            return {
              address: m,
              addresses: d,
              chain: g,
              chainId: c?.chainId,
              connector: c?.connector,
              isConnected: !0,
              isConnecting: !1,
              isDisconnected: !1,
              isReconnecting: !1,
              status: y,
            };
          case "reconnecting":
            return {
              address: m,
              addresses: d,
              chain: g,
              chainId: c?.chainId,
              connector: c?.connector,
              isConnected: !!m,
              isConnecting: !1,
              isDisconnected: !1,
              isReconnecting: !0,
              status: y,
            };
          case "connecting":
            return {
              address: m,
              addresses: d,
              chain: g,
              chainId: c?.chainId,
              connector: c?.connector,
              isConnected: !1,
              isConnecting: !0,
              isDisconnected: !1,
              isReconnecting: !1,
              status: y,
            };
          case "disconnected":
            return {
              address: void 0,
              addresses: void 0,
              chain: void 0,
              chainId: void 0,
              connector: void 0,
              isConnected: !1,
              isConnecting: !1,
              isDisconnected: !0,
              isReconnecting: !1,
              status: y,
            };
        }
      }
      c.d(l, {
        D: function () {
          return getAccount;
        },
      });
    },
    39687: function (e, l, c) {
      "use strict";
      c.d(l, {
        L: function () {
          return readContract;
        },
      });
      var d = c(66195),
        m = c(32223);
      function readContract(e, l) {
        let { chainId: c, ...g } = l,
          y = e.getClient({ chainId: c }),
          b = (0, m.s)(y, d.L, "readContract");
        return b(g);
      }
    },
    40906: function (e, l, c) {
      "use strict";
      c.d(l, {
        J: function () {
          return readContracts;
        },
      });
      var d = c(40955),
        m = c(78040),
        g = c(32223);
      async function multicall_multicall(e, l) {
        let { allowFailure: c = !0, chainId: d, contracts: y, ...b } = l,
          C = e.getClient({ chainId: d }),
          P = (0, g.s)(C, m.A, "multicall");
        return P({ allowFailure: c, contracts: y, ...b });
      }
      var y = c(39687);
      async function readContracts(e, l) {
        let { allowFailure: c = !0, blockNumber: m, blockTag: g, ...b } = l,
          C = l.contracts;
        try {
          let l = {};
          for (let [c, d] of C.entries()) {
            let m = d.chainId ?? e.state.chainId;
            l[m] || (l[m] = []), l[m]?.push({ contract: d, index: c });
          }
          let d = (
              await Promise.all(
                Object.entries(l).map(([l, d]) =>
                  multicall_multicall(e, {
                    ...b,
                    allowFailure: c,
                    blockNumber: m,
                    blockTag: g,
                    chainId: Number.parseInt(l),
                    contracts: d.map(({ contract: e }) => e),
                  })
                )
              )
            ).flat(),
            y = Object.values(l).flatMap((e) => e.map(({ index: e }) => e));
          return d.reduce((e, l, c) => (e && (e[y[c]] = l), e), []);
        } catch (l) {
          if (l instanceof d.uq) throw l;
          let promises = () =>
            C.map((l) => (0, y.L)(e, { ...l, blockNumber: m, blockTag: g }));
          if (c)
            return (await Promise.allSettled(promises())).map((e) =>
              "fulfilled" === e.status
                ? { result: e.value, status: "success" }
                : { error: e.reason, result: void 0, status: "failure" }
            );
          return await Promise.all(promises());
        }
      }
    },
    53156: function (e, l, c) {
      "use strict";
      c.d(l, {
        u: function () {
          return watchAccount;
        },
      });
      var d = c(54692),
        m = c(75055);
      function watchAccount(e, l) {
        let { onChange: c } = l;
        return e.subscribe(() => (0, m.D)(e), c, {
          equalityFn(e, l) {
            let { connector: c, ...m } = e,
              { connector: g, ...y } = l;
            return (0, d.v)(m, y) && c?.id === g?.id && c?.uid === g?.uid;
          },
        });
      }
    },
    84335: function (e, l, c) {
      "use strict";
      function createConnector(e) {
        return e;
      }
      c.d(l, {
        K: function () {
          return createConnector;
        },
      });
    },
    28300: function (e, l, c) {
      "use strict";
      c.d(l, {
        G: function () {
          return BaseError;
        },
      });
      var d,
        m,
        g = c(26226);
      let getVersion = () => `@wagmi/core@${g.i}`;
      var __classPrivateFieldGet = function (e, l, c, d) {
        if ("a" === c && !d)
          throw TypeError("Private accessor was defined without a getter");
        if ("function" == typeof l ? e !== l || !d : !l.has(e))
          throw TypeError(
            "Cannot read private member from an object whose class did not declare it"
          );
        return "m" === c ? d : "a" === c ? d.call(e) : d ? d.value : l.get(e);
      };
      let BaseError = class BaseError extends Error {
        get docsBaseUrl() {
          return "https://wagmi.sh/core";
        }
        get version() {
          return getVersion();
        }
        constructor(e, l = {}) {
          super(),
            d.add(this),
            Object.defineProperty(this, "details", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "docsPath", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "metaMessages", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "shortMessage", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "WagmiCoreError",
            });
          let c =
              l.cause instanceof BaseError
                ? l.cause.details
                : l.cause?.message
                ? l.cause.message
                : l.details,
            m =
              (l.cause instanceof BaseError && l.cause.docsPath) || l.docsPath;
          (this.message = [
            e || "An error occurred.",
            "",
            ...(l.metaMessages ? [...l.metaMessages, ""] : []),
            ...(m
              ? [
                  `Docs: ${this.docsBaseUrl}${m}.html${
                    l.docsSlug ? `#${l.docsSlug}` : ""
                  }`,
                ]
              : []),
            ...(c ? [`Details: ${c}`] : []),
            `Version: ${this.version}`,
          ].join("\n")),
            l.cause && (this.cause = l.cause),
            (this.details = c),
            (this.docsPath = m),
            (this.metaMessages = l.metaMessages),
            (this.shortMessage = e);
        }
        walk(e) {
          return __classPrivateFieldGet(this, d, "m", m).call(this, this, e);
        }
      };
      (d = new WeakSet()),
        (m = function _BaseError_walk(e, l) {
          return l?.(e)
            ? e
            : e.cause
            ? __classPrivateFieldGet(this, d, "m", _BaseError_walk).call(
                this,
                e.cause,
                l
              )
            : e;
        });
    },
    99228: function (e, l, c) {
      "use strict";
      c.d(l, {
        $S: function () {
          return ConnectorUnavailableReconnectingError;
        },
        JK: function () {
          return ConnectorAccountNotFoundError;
        },
        X4: function () {
          return ChainNotConfiguredError;
        },
        XZ: function () {
          return ConnectorChainMismatchError;
        },
        aH: function () {
          return ConnectorNotConnectedError;
        },
        wi: function () {
          return ConnectorAlreadyConnectedError;
        },
      });
      var d = c(28300);
      let ChainNotConfiguredError = class ChainNotConfiguredError extends d.G {
        constructor() {
          super("Chain not configured."),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ChainNotConfiguredError",
            });
        }
      };
      let ConnectorAlreadyConnectedError = class ConnectorAlreadyConnectedError extends d.G {
        constructor() {
          super("Connector already connected."),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ConnectorAlreadyConnectedError",
            });
        }
      };
      let ConnectorNotConnectedError = class ConnectorNotConnectedError extends d.G {
        constructor() {
          super("Connector not connected."),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ConnectorNotConnectedError",
            });
        }
      };
      let ConnectorAccountNotFoundError = class ConnectorAccountNotFoundError extends d.G {
        constructor({ address: e, connector: l }) {
          super(`Account "${e}" not found for connector "${l.name}".`),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ConnectorAccountNotFoundError",
            });
        }
      };
      let ConnectorChainMismatchError = class ConnectorChainMismatchError extends d.G {
        constructor({ connectionChainId: e, connectorChainId: l }) {
          super(
            `The current chain of the connector (id: ${l}) does not match the connection's chain (id: ${e}).`,
            {
              metaMessages: [
                `Current Chain ID:  ${l}`,
                `Expected Chain ID: ${e}`,
              ],
            }
          ),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ConnectorChainMismatchError",
            });
        }
      };
      let ConnectorUnavailableReconnectingError = class ConnectorUnavailableReconnectingError extends d.G {
        constructor({ connector: e }) {
          super(`Connector "${e.name}" unavailable while reconnecting.`, {
            details:
              "During the reconnection step, the only connector methods guaranteed to be available are: `id`, `name`, `type`, `uid`. All other methods are not guaranteed to be available until reconnection completes and connectors are fully restored. This error commonly occurs for connectors that asynchronously inject after reconnection has already started.",
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ConnectorUnavailableReconnectingError",
            });
        }
      };
    },
    90687: function (e, l, c) {
      "use strict";
      c.d(l, {
        M: function () {
          return ProviderNotFoundError;
        },
        O: function () {
          return SwitchChainNotSupportedError;
        },
      });
      var d = c(28300);
      let ProviderNotFoundError = class ProviderNotFoundError extends d.G {
        constructor() {
          super("Provider not found."),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ProviderNotFoundError",
            });
        }
      };
      let SwitchChainNotSupportedError = class SwitchChainNotSupportedError extends d.G {
        constructor({ connector: e }) {
          super(`"${e.name}" does not support programmatic chain switching.`),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "SwitchChainNotSupportedError",
            });
        }
      };
    },
    35116: function (e, l, c) {
      "use strict";
      c.d(l, {
        OP: function () {
          return filterQueryOptions;
        },
        if: function () {
          return structuralSharing;
        },
        kq: function () {
          return hashFn;
        },
      });
      var d = c(60527);
      function structuralSharing(e, l) {
        return (0, d.Q$)(e, l);
      }
      function hashFn(e) {
        return JSON.stringify(e, (e, l) =>
          !(function (e) {
            if (!hasObjectPrototype(e)) return !1;
            let l = e.constructor;
            if (void 0 === l) return !0;
            let c = l.prototype;
            return !!(
              hasObjectPrototype(c) && c.hasOwnProperty("isPrototypeOf")
            );
          })(l)
            ? "bigint" == typeof l
              ? l.toString()
              : l
            : Object.keys(l)
                .sort()
                .reduce((e, c) => ((e[c] = l[c]), e), {})
        );
      }
      function hasObjectPrototype(e) {
        return "[object Object]" === Object.prototype.toString.call(e);
      }
      function filterQueryOptions(e) {
        let {
          _defaulted: l,
          behavior: c,
          gcTime: d,
          initialData: m,
          initialDataUpdatedAt: g,
          maxPages: y,
          meta: b,
          networkMode: C,
          queryFn: P,
          queryHash: I,
          queryKey: B,
          queryKeyHashFn: N,
          retry: F,
          retryDelay: V,
          structuralSharing: G,
          getPreviousPageParam: Q,
          getNextPageParam: $,
          initialPageParam: Z,
          _optimisticResults: Y,
          enabled: et,
          notifyOnChangeProps: en,
          placeholderData: er,
          refetchInterval: ei,
          refetchIntervalInBackground: eo,
          refetchOnMount: ea,
          refetchOnReconnect: es,
          refetchOnWindowFocus: el,
          retryOnMount: ec,
          select: eu,
          staleTime: ed,
          suspense: ep,
          throwOnError: eh,
          config: ef,
          connector: em,
          query: eg,
          ...ey
        } = e;
        return ey;
      }
    },
    54692: function (e, l, c) {
      "use strict";
      c.d(l, {
        v: function () {
          return function deepEqual(e, l) {
            if (e === l) return !0;
            if (e && l && "object" == typeof e && "object" == typeof l) {
              let c, d;
              if (e.constructor !== l.constructor) return !1;
              if (Array.isArray(e) && Array.isArray(l)) {
                if ((c = e.length) !== l.length) return !1;
                for (d = c; 0 != d--; ) if (!deepEqual(e[d], l[d])) return !1;
                return !0;
              }
              if (e.valueOf !== Object.prototype.valueOf)
                return e.valueOf() === l.valueOf();
              if (e.toString !== Object.prototype.toString)
                return e.toString() === l.toString();
              let m = Object.keys(e);
              if ((c = m.length) !== Object.keys(l).length) return !1;
              for (d = c; 0 != d--; )
                if (!Object.prototype.hasOwnProperty.call(l, m[d])) return !1;
              for (d = c; 0 != d--; ) {
                let c = m[d];
                if (c && !deepEqual(e[c], l[c])) return !1;
              }
              return !0;
            }
            return e != e && l != l;
          };
        },
      });
    },
    32223: function (e, l, c) {
      "use strict";
      function getAction(e, l, c) {
        let d = e[l.name];
        if ("function" == typeof d) return d;
        let m = e[c];
        return "function" == typeof m ? m : (c) => l(e, c);
      }
      c.d(l, {
        s: function () {
          return getAction;
        },
      });
    },
    26226: function (e, l, c) {
      "use strict";
      c.d(l, {
        i: function () {
          return d;
        },
      });
      let d = "2.17.0";
    },
    11426: function (e, l, c) {
      "use strict";
      c.d(l, {
        G: function () {
          return BaseError;
        },
      });
      let BaseError = class BaseError extends Error {
        constructor(e, l = {}) {
          let c =
              l.cause instanceof BaseError
                ? l.cause.details
                : l.cause?.message
                ? l.cause.message
                : l.details,
            d =
              (l.cause instanceof BaseError && l.cause.docsPath) || l.docsPath,
            m = [
              e || "An error occurred.",
              "",
              ...(l.metaMessages ? [...l.metaMessages, ""] : []),
              ...(d ? [`Docs: https://abitype.dev${d}`] : []),
              ...(c ? [`Details: ${c}`] : []),
              "Version: abitype@1.0.8",
            ].join("\n");
          super(m),
            Object.defineProperty(this, "details", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "docsPath", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "metaMessages", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "shortMessage", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "AbiTypeError",
            }),
            l.cause && (this.cause = l.cause),
            (this.details = c),
            (this.docsPath = d),
            (this.metaMessages = l.metaMessages),
            (this.shortMessage = e);
        }
      };
    },
    62543: function (e, l, c) {
      "use strict";
      c.d(l, {
        F: function () {
          return UnknownTypeError;
        },
        Hk: function () {
          return UnknownSolidityTypeError;
        },
        a_: function () {
          return InvalidAbiItemError;
        },
      });
      var d = c(11426);
      let InvalidAbiItemError = class InvalidAbiItemError extends d.G {
        constructor({ signature: e }) {
          super("Failed to parse ABI item.", {
            details: `parseAbiItem(${JSON.stringify(e, null, 2)})`,
            docsPath: "/api/human#parseabiitem-1",
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "InvalidAbiItemError",
            });
        }
      };
      let UnknownTypeError = class UnknownTypeError extends d.G {
        constructor({ type: e }) {
          super("Unknown type.", {
            metaMessages: [
              `Type "${e}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`,
            ],
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "UnknownTypeError",
            });
        }
      };
      let UnknownSolidityTypeError = class UnknownSolidityTypeError extends d.G {
        constructor({ type: e }) {
          super("Unknown type.", {
            metaMessages: [`Type "${e}" is not a valid ABI type.`],
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "UnknownSolidityTypeError",
            });
        }
      };
    },
    64344: function (e, l, c) {
      "use strict";
      c.d(l, {
        TT: function () {
          return SolidityProtectedKeywordError;
        },
        _D: function () {
          return InvalidFunctionModifierError;
        },
        aZ: function () {
          return InvalidAbiTypeParameterError;
        },
        jO: function () {
          return InvalidParameterError;
        },
        zL: function () {
          return InvalidModifierError;
        },
      });
      var d = c(11426);
      let InvalidParameterError = class InvalidParameterError extends d.G {
        constructor({ param: e }) {
          super("Invalid ABI parameter.", { details: e }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "InvalidParameterError",
            });
        }
      };
      let SolidityProtectedKeywordError = class SolidityProtectedKeywordError extends d.G {
        constructor({ param: e, name: l }) {
          super("Invalid ABI parameter.", {
            details: e,
            metaMessages: [
              `"${l}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`,
            ],
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "SolidityProtectedKeywordError",
            });
        }
      };
      let InvalidModifierError = class InvalidModifierError extends d.G {
        constructor({ param: e, type: l, modifier: c }) {
          super("Invalid ABI parameter.", {
            details: e,
            metaMessages: [
              `Modifier "${c}" not allowed${l ? ` in "${l}" type` : ""}.`,
            ],
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "InvalidModifierError",
            });
        }
      };
      let InvalidFunctionModifierError = class InvalidFunctionModifierError extends d.G {
        constructor({ param: e, type: l, modifier: c }) {
          super("Invalid ABI parameter.", {
            details: e,
            metaMessages: [
              `Modifier "${c}" not allowed${l ? ` in "${l}" type` : ""}.`,
              `Data location can only be specified for array, struct, or mapping types, but "${c}" was given.`,
            ],
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "InvalidFunctionModifierError",
            });
        }
      };
      let InvalidAbiTypeParameterError = class InvalidAbiTypeParameterError extends d.G {
        constructor({ abiParameter: e }) {
          super("Invalid ABI parameter.", {
            details: JSON.stringify(e, null, 2),
            metaMessages: ["ABI parameter type is invalid."],
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "InvalidAbiTypeParameterError",
            });
        }
      };
    },
    99935: function (e, l, c) {
      "use strict";
      c.d(l, {
        H6: function () {
          return InvalidStructSignatureError;
        },
        Vs: function () {
          return UnknownSignatureError;
        },
        wn: function () {
          return InvalidSignatureError;
        },
      });
      var d = c(11426);
      let InvalidSignatureError = class InvalidSignatureError extends d.G {
        constructor({ signature: e, type: l }) {
          super(`Invalid ${l} signature.`, { details: e }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "InvalidSignatureError",
            });
        }
      };
      let UnknownSignatureError = class UnknownSignatureError extends d.G {
        constructor({ signature: e }) {
          super("Unknown signature.", { details: e }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "UnknownSignatureError",
            });
        }
      };
      let InvalidStructSignatureError = class InvalidStructSignatureError extends d.G {
        constructor({ signature: e }) {
          super("Invalid struct signature.", {
            details: e,
            metaMessages: ["No properties exist."],
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "InvalidStructSignatureError",
            });
        }
      };
    },
    95253: function (e, l, c) {
      "use strict";
      c.d(l, {
        t: function () {
          return formatAbiItem;
        },
      });
      var d = c(16987);
      function formatAbiItem(e) {
        return "function" === e.type
          ? `function ${e.name}(${(0, d.P)(e.inputs)})${
              e.stateMutability && "nonpayable" !== e.stateMutability
                ? ` ${e.stateMutability}`
                : ""
            }${e.outputs?.length ? ` returns (${(0, d.P)(e.outputs)})` : ""}`
          : "event" === e.type
          ? `event ${e.name}(${(0, d.P)(e.inputs)})`
          : "error" === e.type
          ? `error ${e.name}(${(0, d.P)(e.inputs)})`
          : "constructor" === e.type
          ? `constructor(${(0, d.P)(e.inputs)})${
              "payable" === e.stateMutability ? " payable" : ""
            }`
          : "fallback" === e.type
          ? `fallback() external${
              "payable" === e.stateMutability ? " payable" : ""
            }`
          : "receive() external payable";
      }
    },
    16987: function (e, l, c) {
      "use strict";
      c.d(l, {
        P: function () {
          return formatAbiParameters;
        },
      });
      var d = c(71206);
      let m = /^tuple(?<array>(\[(\d*)\])*)$/;
      function formatAbiParameters(e) {
        let l = "",
          c = e.length;
        for (let g = 0; g < c; g++) {
          let y = e[g];
          (l += (function formatAbiParameter(e) {
            let l = e.type;
            if (m.test(e.type) && "components" in e) {
              l = "(";
              let c = e.components.length;
              for (let d = 0; d < c; d++) {
                let m = e.components[d];
                (l += formatAbiParameter(m)), d < c - 1 && (l += ", ");
              }
              let g = (0, d.Zw)(m, e.type);
              return (
                (l += `)${g?.array ?? ""}`),
                formatAbiParameter({ ...e, type: l })
              );
            }
            return ("indexed" in e && e.indexed && (l = `${l} indexed`), e.name)
              ? `${l} ${e.name}`
              : l;
          })(y)),
            g !== c - 1 && (l += ", ");
        }
        return l;
      }
    },
    22709: function (e, l, c) {
      "use strict";
      c.d(l, {
        Dt: function () {
          return N;
        },
        EC: function () {
          return isFallbackSignature;
        },
        N0: function () {
          return isStructSignature;
        },
        PI: function () {
          return execConstructorSignature;
        },
        QM: function () {
          return isReceiveSignature;
        },
        SA: function () {
          return execErrorSignature;
        },
        Wg: function () {
          return B;
        },
        _c: function () {
          return isErrorSignature;
        },
        a4: function () {
          return isConstructorSignature;
        },
        c3: function () {
          return isEventSignature;
        },
        g1: function () {
          return execStructSignature;
        },
        l$: function () {
          return execFunctionSignature;
        },
        qm: function () {
          return execFallbackSignature;
        },
        rh: function () {
          return isFunctionSignature;
        },
        wA: function () {
          return execEventSignature;
        },
      });
      var d = c(71206);
      let m = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
      function isErrorSignature(e) {
        return m.test(e);
      }
      function execErrorSignature(e) {
        return (0, d.Zw)(m, e);
      }
      let g = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
      function isEventSignature(e) {
        return g.test(e);
      }
      function execEventSignature(e) {
        return (0, d.Zw)(g, e);
      }
      let y =
        /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\s?\((?<returns>.*?)\))?$/;
      function isFunctionSignature(e) {
        return y.test(e);
      }
      function execFunctionSignature(e) {
        return (0, d.Zw)(y, e);
      }
      let b =
        /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \{(?<properties>.*?)\}$/;
      function isStructSignature(e) {
        return b.test(e);
      }
      function execStructSignature(e) {
        return (0, d.Zw)(b, e);
      }
      let C =
        /^constructor\((?<parameters>.*?)\)(?:\s(?<stateMutability>payable{1}))?$/;
      function isConstructorSignature(e) {
        return C.test(e);
      }
      function execConstructorSignature(e) {
        return (0, d.Zw)(C, e);
      }
      let P = /^fallback\(\) external(?:\s(?<stateMutability>payable{1}))?$/;
      function isFallbackSignature(e) {
        return P.test(e);
      }
      function execFallbackSignature(e) {
        return (0, d.Zw)(P, e);
      }
      let I = /^receive\(\) external payable$/;
      function isReceiveSignature(e) {
        return I.test(e);
      }
      let B = new Set(["indexed"]),
        N = new Set(["calldata", "memory", "storage"]);
    },
    93413: function (e, l, c) {
      "use strict";
      c.d(l, {
        D: function () {
          return parseStructs;
        },
      });
      var d = c(71206),
        m = c(62543),
        g = c(64344),
        y = c(99935),
        b = c(11426);
      let CircularReferenceError = class CircularReferenceError extends b.G {
        constructor({ type: e }) {
          super("Circular reference detected.", {
            metaMessages: [`Struct "${e}" is a circular reference.`],
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "CircularReferenceError",
            });
        }
      };
      var C = c(22709),
        P = c(42005);
      function parseStructs(e) {
        let l = {},
          c = e.length;
        for (let d = 0; d < c; d++) {
          let c = e[d];
          if (!(0, C.N0)(c)) continue;
          let m = (0, C.g1)(c);
          if (!m) throw new y.wn({ signature: c, type: "struct" });
          let g = m.properties.split(";"),
            b = [],
            I = g.length;
          for (let e = 0; e < I; e++) {
            let l = g[e],
              c = l.trim();
            if (!c) continue;
            let d = (0, P.C$)(c, { type: "struct" });
            b.push(d);
          }
          if (!b.length) throw new y.H6({ signature: c });
          l[m.name] = b;
        }
        let b = {},
          B = Object.entries(l),
          N = B.length;
        for (let e = 0; e < N; e++) {
          let [c, y] = B[e];
          b[c] = (function resolveStructs(e, l, c = new Set()) {
            let y = [],
              b = e.length;
            for (let C = 0; C < b; C++) {
              let b = e[C],
                B = d.cN.test(b.type);
              if (B) y.push(b);
              else {
                let e = (0, d.Zw)(I, b.type);
                if (!e?.type) throw new g.aZ({ abiParameter: b });
                let { array: C, type: B } = e;
                if (B in l) {
                  if (c.has(B)) throw new CircularReferenceError({ type: B });
                  y.push({
                    ...b,
                    type: `tuple${C ?? ""}`,
                    components: resolveStructs(
                      l[B] ?? [],
                      l,
                      new Set([...c, B])
                    ),
                  });
                } else if ((0, P.uN)(B)) y.push(b);
                else throw new m.F({ type: B });
              }
            }
            return y;
          })(y, l);
        }
        return b;
      }
      let I = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?$/;
    },
    42005: function (e, l, c) {
      "use strict";
      c.d(l, {
        uN: function () {
          return isSolidityType;
        },
        C$: function () {
          return parseAbiParameter;
        },
        cK: function () {
          return parseSignature;
        },
      });
      var d = c(71206),
        m = c(62543),
        g = c(64344),
        y = c(99935),
        b = c(11426);
      let InvalidParenthesisError = class InvalidParenthesisError extends b.G {
        constructor({ current: e, depth: l }) {
          super("Unbalanced parentheses.", {
            metaMessages: [
              `"${e.trim()}" has too many ${
                l > 0 ? "opening" : "closing"
              } parentheses.`,
            ],
            details: `Depth "${l}"`,
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "InvalidParenthesisError",
            });
        }
      };
      let C = new Map([
        ["address", { type: "address" }],
        ["bool", { type: "bool" }],
        ["bytes", { type: "bytes" }],
        ["bytes32", { type: "bytes32" }],
        ["int", { type: "int256" }],
        ["int256", { type: "int256" }],
        ["string", { type: "string" }],
        ["uint", { type: "uint256" }],
        ["uint8", { type: "uint8" }],
        ["uint16", { type: "uint16" }],
        ["uint24", { type: "uint24" }],
        ["uint32", { type: "uint32" }],
        ["uint64", { type: "uint64" }],
        ["uint96", { type: "uint96" }],
        ["uint112", { type: "uint112" }],
        ["uint160", { type: "uint160" }],
        ["uint192", { type: "uint192" }],
        ["uint256", { type: "uint256" }],
        ["address owner", { type: "address", name: "owner" }],
        ["address to", { type: "address", name: "to" }],
        ["bool approved", { type: "bool", name: "approved" }],
        ["bytes _data", { type: "bytes", name: "_data" }],
        ["bytes data", { type: "bytes", name: "data" }],
        ["bytes signature", { type: "bytes", name: "signature" }],
        ["bytes32 hash", { type: "bytes32", name: "hash" }],
        ["bytes32 r", { type: "bytes32", name: "r" }],
        ["bytes32 root", { type: "bytes32", name: "root" }],
        ["bytes32 s", { type: "bytes32", name: "s" }],
        ["string name", { type: "string", name: "name" }],
        ["string symbol", { type: "string", name: "symbol" }],
        ["string tokenURI", { type: "string", name: "tokenURI" }],
        ["uint tokenId", { type: "uint256", name: "tokenId" }],
        ["uint8 v", { type: "uint8", name: "v" }],
        ["uint256 balance", { type: "uint256", name: "balance" }],
        ["uint256 tokenId", { type: "uint256", name: "tokenId" }],
        ["uint256 value", { type: "uint256", name: "value" }],
        [
          "event:address indexed from",
          { type: "address", name: "from", indexed: !0 },
        ],
        [
          "event:address indexed to",
          { type: "address", name: "to", indexed: !0 },
        ],
        [
          "event:uint indexed tokenId",
          { type: "uint256", name: "tokenId", indexed: !0 },
        ],
        [
          "event:uint256 indexed tokenId",
          { type: "uint256", name: "tokenId", indexed: !0 },
        ],
      ]);
      var P = c(22709);
      function parseSignature(e, l = {}) {
        if ((0, P.rh)(e))
          return (function (e, l = {}) {
            let c = (0, P.l$)(e);
            if (!c) throw new y.wn({ signature: e, type: "function" });
            let d = splitParameters(c.parameters),
              m = [],
              g = d.length;
            for (let e = 0; e < g; e++)
              m.push(
                parseAbiParameter(d[e], {
                  modifiers: P.Dt,
                  structs: l,
                  type: "function",
                })
              );
            let b = [];
            if (c.returns) {
              let e = splitParameters(c.returns),
                d = e.length;
              for (let c = 0; c < d; c++)
                b.push(
                  parseAbiParameter(e[c], {
                    modifiers: P.Dt,
                    structs: l,
                    type: "function",
                  })
                );
            }
            return {
              name: c.name,
              type: "function",
              stateMutability: c.stateMutability ?? "nonpayable",
              inputs: m,
              outputs: b,
            };
          })(e, l);
        if ((0, P.c3)(e))
          return (function (e, l = {}) {
            let c = (0, P.wA)(e);
            if (!c) throw new y.wn({ signature: e, type: "event" });
            let d = splitParameters(c.parameters),
              m = [],
              g = d.length;
            for (let e = 0; e < g; e++)
              m.push(
                parseAbiParameter(d[e], {
                  modifiers: P.Wg,
                  structs: l,
                  type: "event",
                })
              );
            return { name: c.name, type: "event", inputs: m };
          })(e, l);
        if ((0, P._c)(e))
          return (function (e, l = {}) {
            let c = (0, P.SA)(e);
            if (!c) throw new y.wn({ signature: e, type: "error" });
            let d = splitParameters(c.parameters),
              m = [],
              g = d.length;
            for (let e = 0; e < g; e++)
              m.push(parseAbiParameter(d[e], { structs: l, type: "error" }));
            return { name: c.name, type: "error", inputs: m };
          })(e, l);
        if ((0, P.a4)(e))
          return (function (e, l = {}) {
            let c = (0, P.PI)(e);
            if (!c) throw new y.wn({ signature: e, type: "constructor" });
            let d = splitParameters(c.parameters),
              m = [],
              g = d.length;
            for (let e = 0; e < g; e++)
              m.push(
                parseAbiParameter(d[e], { structs: l, type: "constructor" })
              );
            return {
              type: "constructor",
              stateMutability: c.stateMutability ?? "nonpayable",
              inputs: m,
            };
          })(e, l);
        if ((0, P.EC)(e))
          return (function (e) {
            let l = (0, P.qm)(e);
            if (!l) throw new y.wn({ signature: e, type: "fallback" });
            return {
              type: "fallback",
              stateMutability: l.stateMutability ?? "nonpayable",
            };
          })(e);
        if ((0, P.QM)(e))
          return { type: "receive", stateMutability: "payable" };
        throw new y.Vs({ signature: e });
      }
      let I =
          /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/,
        B =
          /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/,
        N = /^u?int$/;
      function parseAbiParameter(e, l) {
        var c, y;
        let b;
        let V = (function (e, l, c) {
          let d = "";
          if (c)
            for (let e of Object.entries(c)) {
              if (!e) continue;
              let l = "";
              for (let c of e[1])
                l += `[${c.type}${c.name ? `:${c.name}` : ""}]`;
              d += `(${e[0]}{${l}})`;
            }
          return l ? `${l}:${e}${d}` : e;
        })(e, l?.type, l?.structs);
        if (C.has(V)) return C.get(V);
        let G = d.cN.test(e),
          Q = (0, d.Zw)(G ? B : I, e);
        if (!Q) throw new g.jO({ param: e });
        if (
          Q.name &&
          ("address" === (c = Q.name) ||
            "bool" === c ||
            "function" === c ||
            "string" === c ||
            "tuple" === c ||
            d.eL.test(c) ||
            d.lh.test(c) ||
            F.test(c))
        )
          throw new g.TT({ param: e, name: Q.name });
        let $ = Q.name ? { name: Q.name } : {},
          Z = "indexed" === Q.modifier ? { indexed: !0 } : {},
          Y = l?.structs ?? {},
          et = {};
        if (G) {
          b = "tuple";
          let e = splitParameters(Q.type),
            l = [],
            c = e.length;
          for (let d = 0; d < c; d++)
            l.push(parseAbiParameter(e[d], { structs: Y }));
          et = { components: l };
        } else if (Q.type in Y) (b = "tuple"), (et = { components: Y[Q.type] });
        else if (N.test(Q.type)) b = `${Q.type}256`;
        else if (((b = Q.type), l?.type !== "struct" && !isSolidityType(b)))
          throw new m.Hk({ type: b });
        if (Q.modifier) {
          if (!l?.modifiers?.has?.(Q.modifier))
            throw new g.zL({ param: e, type: l?.type, modifier: Q.modifier });
          if (
            P.Dt.has(Q.modifier) &&
            ((y = b),
            !Q.array && "bytes" !== y && "string" !== y && "tuple" !== y)
          )
            throw new g._D({ param: e, type: l?.type, modifier: Q.modifier });
        }
        let en = { type: `${b}${Q.array ?? ""}`, ...$, ...Z, ...et };
        return C.set(V, en), en;
      }
      function splitParameters(e, l = [], c = "", d = 0) {
        let m = e.trim().length;
        for (let g = 0; g < m; g++) {
          let m = e[g],
            y = e.slice(g + 1);
          switch (m) {
            case ",":
              return 0 === d
                ? splitParameters(y, [...l, c.trim()])
                : splitParameters(y, l, `${c}${m}`, d);
            case "(":
              return splitParameters(y, l, `${c}${m}`, d + 1);
            case ")":
              return splitParameters(y, l, `${c}${m}`, d - 1);
            default:
              return splitParameters(y, l, `${c}${m}`, d);
          }
        }
        if ("" === c) return l;
        if (0 !== d)
          throw new InvalidParenthesisError({ current: c, depth: d });
        return l.push(c.trim()), l;
      }
      function isSolidityType(e) {
        return (
          "address" === e ||
          "bool" === e ||
          "function" === e ||
          "string" === e ||
          d.eL.test(e) ||
          d.lh.test(e)
        );
      }
      let F =
        /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
    },
    71206: function (e, l, c) {
      "use strict";
      function execTyped(e, l) {
        let c = e.exec(l);
        return c?.groups;
      }
      c.d(l, {
        Zw: function () {
          return execTyped;
        },
        cN: function () {
          return g;
        },
        eL: function () {
          return d;
        },
        lh: function () {
          return m;
        },
      });
      let d = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/,
        m =
          /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/,
        g = /^\(.+?\).*?$/;
    },
    4814: function (e, l, c) {
      "use strict";
      function clsx() {
        for (var e, l, c = 0, d = "", m = arguments.length; c < m; c++)
          (e = arguments[c]) &&
            (l = (function r(e) {
              var l,
                c,
                d = "";
              if ("string" == typeof e || "number" == typeof e) d += e;
              else if ("object" == typeof e) {
                if (Array.isArray(e)) {
                  var m = e.length;
                  for (l = 0; l < m; l++)
                    e[l] && (c = r(e[l])) && (d && (d += " "), (d += c));
                } else for (c in e) e[c] && (d && (d += " "), (d += c));
              }
              return d;
            })(e)) &&
            (d && (d += " "), (d += l));
        return d;
      }
      c.d(l, {
        W: function () {
          return clsx;
        },
      }),
        (l.Z = clsx);
    },
    21216: function (e, l, c) {
      "use strict";
      c.d(l, {
        z: function () {
          return addMonths;
        },
      });
      var d = c(11022),
        m = c(95256);
      function addMonths(e, l) {
        let c = (0, d.Q)(e);
        if (isNaN(l)) return (0, m.L)(e, NaN);
        if (!l) return c;
        let g = c.getDate(),
          y = (0, m.L)(e, c.getTime());
        y.setMonth(c.getMonth() + l + 1, 0);
        let b = y.getDate();
        return g >= b
          ? y
          : (c.setFullYear(y.getFullYear(), y.getMonth(), g), c);
      }
    },
    10994: function (e, l, c) {
      "use strict";
      c.d(l, {
        dP: function () {
          return m;
        },
        jE: function () {
          return d;
        },
        vh: function () {
          return y;
        },
        yJ: function () {
          return g;
        },
      });
      let d = 6048e5,
        m = 864e5,
        g = 6e4,
        y = 36e5;
    },
    95256: function (e, l, c) {
      "use strict";
      function constructFrom(e, l) {
        return e instanceof Date ? new e.constructor(l) : new Date(l);
      }
      c.d(l, {
        L: function () {
          return constructFrom;
        },
      });
    },
    28260: function (e, l, c) {
      "use strict";
      c.d(l, {
        w: function () {
          return differenceInCalendarDays;
        },
      });
      var d = c(10994),
        m = c(11022);
      function startOfDay(e) {
        let l = (0, m.Q)(e);
        return l.setHours(0, 0, 0, 0), l;
      }
      function getTimezoneOffsetInMilliseconds(e) {
        let l = (0, m.Q)(e),
          c = new Date(
            Date.UTC(
              l.getFullYear(),
              l.getMonth(),
              l.getDate(),
              l.getHours(),
              l.getMinutes(),
              l.getSeconds(),
              l.getMilliseconds()
            )
          );
        return c.setUTCFullYear(l.getFullYear()), +e - +c;
      }
      function differenceInCalendarDays(e, l) {
        let c = startOfDay(e),
          m = startOfDay(l),
          g = +c - getTimezoneOffsetInMilliseconds(c),
          y = +m - getTimezoneOffsetInMilliseconds(m);
        return Math.round((g - y) / d.dP);
      }
    },
    71628: function (e, l, c) {
      "use strict";
      c.d(l, {
        ZP: function () {
          return date_fns_format;
        },
      });
      let d = {
        lessThanXSeconds: {
          one: "less than a second",
          other: "less than {{count}} seconds",
        },
        xSeconds: { one: "1 second", other: "{{count}} seconds" },
        halfAMinute: "half a minute",
        lessThanXMinutes: {
          one: "less than a minute",
          other: "less than {{count}} minutes",
        },
        xMinutes: { one: "1 minute", other: "{{count}} minutes" },
        aboutXHours: { one: "about 1 hour", other: "about {{count}} hours" },
        xHours: { one: "1 hour", other: "{{count}} hours" },
        xDays: { one: "1 day", other: "{{count}} days" },
        aboutXWeeks: { one: "about 1 week", other: "about {{count}} weeks" },
        xWeeks: { one: "1 week", other: "{{count}} weeks" },
        aboutXMonths: { one: "about 1 month", other: "about {{count}} months" },
        xMonths: { one: "1 month", other: "{{count}} months" },
        aboutXYears: { one: "about 1 year", other: "about {{count}} years" },
        xYears: { one: "1 year", other: "{{count}} years" },
        overXYears: { one: "over 1 year", other: "over {{count}} years" },
        almostXYears: { one: "almost 1 year", other: "almost {{count}} years" },
      };
      function buildFormatLongFn(e) {
        return (l = {}) => {
          let c = l.width ? String(l.width) : e.defaultWidth,
            d = e.formats[c] || e.formats[e.defaultWidth];
          return d;
        };
      }
      let m = {
          date: buildFormatLongFn({
            formats: {
              full: "EEEE, MMMM do, y",
              long: "MMMM do, y",
              medium: "MMM d, y",
              short: "MM/dd/yyyy",
            },
            defaultWidth: "full",
          }),
          time: buildFormatLongFn({
            formats: {
              full: "h:mm:ss a zzzz",
              long: "h:mm:ss a z",
              medium: "h:mm:ss a",
              short: "h:mm a",
            },
            defaultWidth: "full",
          }),
          dateTime: buildFormatLongFn({
            formats: {
              full: "{{date}} 'at' {{time}}",
              long: "{{date}} 'at' {{time}}",
              medium: "{{date}}, {{time}}",
              short: "{{date}}, {{time}}",
            },
            defaultWidth: "full",
          }),
        },
        g = {
          lastWeek: "'last' eeee 'at' p",
          yesterday: "'yesterday at' p",
          today: "'today at' p",
          tomorrow: "'tomorrow at' p",
          nextWeek: "eeee 'at' p",
          other: "P",
        };
      function buildLocalizeFn(e) {
        return (l, c) => {
          let d;
          let m = c?.context ? String(c.context) : "standalone";
          if ("formatting" === m && e.formattingValues) {
            let l = e.defaultFormattingWidth || e.defaultWidth,
              m = c?.width ? String(c.width) : l;
            d = e.formattingValues[m] || e.formattingValues[l];
          } else {
            let l = e.defaultWidth,
              m = c?.width ? String(c.width) : e.defaultWidth;
            d = e.values[m] || e.values[l];
          }
          let g = e.argumentCallback ? e.argumentCallback(l) : l;
          return d[g];
        };
      }
      let y = {
        ordinalNumber: (e, l) => {
          let c = Number(e),
            d = c % 100;
          if (d > 20 || d < 10)
            switch (d % 10) {
              case 1:
                return c + "st";
              case 2:
                return c + "nd";
              case 3:
                return c + "rd";
            }
          return c + "th";
        },
        era: buildLocalizeFn({
          values: {
            narrow: ["B", "A"],
            abbreviated: ["BC", "AD"],
            wide: ["Before Christ", "Anno Domini"],
          },
          defaultWidth: "wide",
        }),
        quarter: buildLocalizeFn({
          values: {
            narrow: ["1", "2", "3", "4"],
            abbreviated: ["Q1", "Q2", "Q3", "Q4"],
            wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],
          },
          defaultWidth: "wide",
          argumentCallback: (e) => e - 1,
        }),
        month: buildLocalizeFn({
          values: {
            narrow: [
              "J",
              "F",
              "M",
              "A",
              "M",
              "J",
              "J",
              "A",
              "S",
              "O",
              "N",
              "D",
            ],
            abbreviated: [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec",
            ],
            wide: [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December",
            ],
          },
          defaultWidth: "wide",
        }),
        day: buildLocalizeFn({
          values: {
            narrow: ["S", "M", "T", "W", "T", "F", "S"],
            short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            wide: [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
            ],
          },
          defaultWidth: "wide",
        }),
        dayPeriod: buildLocalizeFn({
          values: {
            narrow: {
              am: "a",
              pm: "p",
              midnight: "mi",
              noon: "n",
              morning: "morning",
              afternoon: "afternoon",
              evening: "evening",
              night: "night",
            },
            abbreviated: {
              am: "AM",
              pm: "PM",
              midnight: "midnight",
              noon: "noon",
              morning: "morning",
              afternoon: "afternoon",
              evening: "evening",
              night: "night",
            },
            wide: {
              am: "a.m.",
              pm: "p.m.",
              midnight: "midnight",
              noon: "noon",
              morning: "morning",
              afternoon: "afternoon",
              evening: "evening",
              night: "night",
            },
          },
          defaultWidth: "wide",
          formattingValues: {
            narrow: {
              am: "a",
              pm: "p",
              midnight: "mi",
              noon: "n",
              morning: "in the morning",
              afternoon: "in the afternoon",
              evening: "in the evening",
              night: "at night",
            },
            abbreviated: {
              am: "AM",
              pm: "PM",
              midnight: "midnight",
              noon: "noon",
              morning: "in the morning",
              afternoon: "in the afternoon",
              evening: "in the evening",
              night: "at night",
            },
            wide: {
              am: "a.m.",
              pm: "p.m.",
              midnight: "midnight",
              noon: "noon",
              morning: "in the morning",
              afternoon: "in the afternoon",
              evening: "in the evening",
              night: "at night",
            },
          },
          defaultFormattingWidth: "wide",
        }),
      };
      function buildMatchFn(e) {
        return (l, c = {}) => {
          let d;
          let m = c.width,
            g =
              (m && e.matchPatterns[m]) || e.matchPatterns[e.defaultMatchWidth],
            y = l.match(g);
          if (!y) return null;
          let b = y[0],
            C =
              (m && e.parsePatterns[m]) || e.parsePatterns[e.defaultParseWidth],
            P = Array.isArray(C)
              ? (function (e, l) {
                  for (let c = 0; c < e.length; c++) if (l(e[c])) return c;
                })(C, (e) => e.test(b))
              : (function (e, l) {
                  for (let c in e)
                    if (Object.prototype.hasOwnProperty.call(e, c) && l(e[c]))
                      return c;
                })(C, (e) => e.test(b));
          (d = e.valueCallback ? e.valueCallback(P) : P),
            (d = c.valueCallback ? c.valueCallback(d) : d);
          let I = l.slice(b.length);
          return { value: d, rest: I };
        };
      }
      let b = {
          ordinalNumber:
            ((I = {
              matchPattern: /^(\d+)(th|st|nd|rd)?/i,
              parsePattern: /\d+/i,
              valueCallback: (e) => parseInt(e, 10),
            }),
            (e, l = {}) => {
              let c = e.match(I.matchPattern);
              if (!c) return null;
              let d = c[0],
                m = e.match(I.parsePattern);
              if (!m) return null;
              let g = I.valueCallback ? I.valueCallback(m[0]) : m[0];
              g = l.valueCallback ? l.valueCallback(g) : g;
              let y = e.slice(d.length);
              return { value: g, rest: y };
            }),
          era: buildMatchFn({
            matchPatterns: {
              narrow: /^(b|a)/i,
              abbreviated:
                /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
              wide: /^(before christ|before common era|anno domini|common era)/i,
            },
            defaultMatchWidth: "wide",
            parsePatterns: { any: [/^b/i, /^(a|c)/i] },
            defaultParseWidth: "any",
          }),
          quarter: buildMatchFn({
            matchPatterns: {
              narrow: /^[1234]/i,
              abbreviated: /^q[1234]/i,
              wide: /^[1234](th|st|nd|rd)? quarter/i,
            },
            defaultMatchWidth: "wide",
            parsePatterns: { any: [/1/i, /2/i, /3/i, /4/i] },
            defaultParseWidth: "any",
            valueCallback: (e) => e + 1,
          }),
          month: buildMatchFn({
            matchPatterns: {
              narrow: /^[jfmasond]/i,
              abbreviated:
                /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
              wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,
            },
            defaultMatchWidth: "wide",
            parsePatterns: {
              narrow: [
                /^j/i,
                /^f/i,
                /^m/i,
                /^a/i,
                /^m/i,
                /^j/i,
                /^j/i,
                /^a/i,
                /^s/i,
                /^o/i,
                /^n/i,
                /^d/i,
              ],
              any: [
                /^ja/i,
                /^f/i,
                /^mar/i,
                /^ap/i,
                /^may/i,
                /^jun/i,
                /^jul/i,
                /^au/i,
                /^s/i,
                /^o/i,
                /^n/i,
                /^d/i,
              ],
            },
            defaultParseWidth: "any",
          }),
          day: buildMatchFn({
            matchPatterns: {
              narrow: /^[smtwf]/i,
              short: /^(su|mo|tu|we|th|fr|sa)/i,
              abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
              wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,
            },
            defaultMatchWidth: "wide",
            parsePatterns: {
              narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
              any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
            },
            defaultParseWidth: "any",
          }),
          dayPeriod: buildMatchFn({
            matchPatterns: {
              narrow:
                /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
              any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,
            },
            defaultMatchWidth: "any",
            parsePatterns: {
              any: {
                am: /^a/i,
                pm: /^p/i,
                midnight: /^mi/i,
                noon: /^no/i,
                morning: /morning/i,
                afternoon: /afternoon/i,
                evening: /evening/i,
                night: /night/i,
              },
            },
            defaultParseWidth: "any",
          }),
        },
        C = {
          code: "en-US",
          formatDistance: (e, l, c) => {
            let m;
            let g = d[e];
            return ((m =
              "string" == typeof g
                ? g
                : 1 === l
                ? g.one
                : g.other.replace("{{count}}", l.toString())),
            c?.addSuffix)
              ? c.comparison && c.comparison > 0
                ? "in " + m
                : m + " ago"
              : m;
          },
          formatLong: m,
          formatRelative: (e, l, c, d) => g[e],
          localize: y,
          match: b,
          options: { weekStartsOn: 0, firstWeekContainsDate: 1 },
        },
        P = {};
      var I,
        B = c(28260),
        N = c(11022),
        F = c(95256),
        V = c(10994);
      function startOfWeek(e, l) {
        let c =
            l?.weekStartsOn ??
            l?.locale?.options?.weekStartsOn ??
            P.weekStartsOn ??
            P.locale?.options?.weekStartsOn ??
            0,
          d = (0, N.Q)(e),
          m = d.getDay();
        return (
          d.setDate(d.getDate() - ((m < c ? 7 : 0) + m - c)),
          d.setHours(0, 0, 0, 0),
          d
        );
      }
      function startOfISOWeek(e) {
        return startOfWeek(e, { weekStartsOn: 1 });
      }
      function getISOWeekYear(e) {
        let l = (0, N.Q)(e),
          c = l.getFullYear(),
          d = (0, F.L)(e, 0);
        d.setFullYear(c + 1, 0, 4), d.setHours(0, 0, 0, 0);
        let m = startOfISOWeek(d),
          g = (0, F.L)(e, 0);
        g.setFullYear(c, 0, 4), g.setHours(0, 0, 0, 0);
        let y = startOfISOWeek(g);
        return l.getTime() >= m.getTime()
          ? c + 1
          : l.getTime() >= y.getTime()
          ? c
          : c - 1;
      }
      function getWeekYear(e, l) {
        let c = (0, N.Q)(e),
          d = c.getFullYear(),
          m =
            l?.firstWeekContainsDate ??
            l?.locale?.options?.firstWeekContainsDate ??
            P.firstWeekContainsDate ??
            P.locale?.options?.firstWeekContainsDate ??
            1,
          g = (0, F.L)(e, 0);
        g.setFullYear(d + 1, 0, m), g.setHours(0, 0, 0, 0);
        let y = startOfWeek(g, l),
          b = (0, F.L)(e, 0);
        b.setFullYear(d, 0, m), b.setHours(0, 0, 0, 0);
        let C = startOfWeek(b, l);
        return c.getTime() >= y.getTime()
          ? d + 1
          : c.getTime() >= C.getTime()
          ? d
          : d - 1;
      }
      function addLeadingZeros(e, l) {
        let c = Math.abs(e).toString().padStart(l, "0");
        return (e < 0 ? "-" : "") + c;
      }
      let G = {
          y(e, l) {
            let c = e.getFullYear(),
              d = c > 0 ? c : 1 - c;
            return addLeadingZeros("yy" === l ? d % 100 : d, l.length);
          },
          M(e, l) {
            let c = e.getMonth();
            return "M" === l ? String(c + 1) : addLeadingZeros(c + 1, 2);
          },
          d: (e, l) => addLeadingZeros(e.getDate(), l.length),
          a(e, l) {
            let c = e.getHours() / 12 >= 1 ? "pm" : "am";
            switch (l) {
              case "a":
              case "aa":
                return c.toUpperCase();
              case "aaa":
                return c;
              case "aaaaa":
                return c[0];
              default:
                return "am" === c ? "a.m." : "p.m.";
            }
          },
          h: (e, l) => addLeadingZeros(e.getHours() % 12 || 12, l.length),
          H: (e, l) => addLeadingZeros(e.getHours(), l.length),
          m: (e, l) => addLeadingZeros(e.getMinutes(), l.length),
          s: (e, l) => addLeadingZeros(e.getSeconds(), l.length),
          S(e, l) {
            let c = l.length,
              d = e.getMilliseconds();
            return addLeadingZeros(
              Math.trunc(d * Math.pow(10, c - 3)),
              l.length
            );
          },
        },
        Q = {
          midnight: "midnight",
          noon: "noon",
          morning: "morning",
          afternoon: "afternoon",
          evening: "evening",
          night: "night",
        },
        $ = {
          G: function (e, l, c) {
            let d = e.getFullYear() > 0 ? 1 : 0;
            switch (l) {
              case "G":
              case "GG":
              case "GGG":
                return c.era(d, { width: "abbreviated" });
              case "GGGGG":
                return c.era(d, { width: "narrow" });
              default:
                return c.era(d, { width: "wide" });
            }
          },
          y: function (e, l, c) {
            if ("yo" === l) {
              let l = e.getFullYear(),
                d = l > 0 ? l : 1 - l;
              return c.ordinalNumber(d, { unit: "year" });
            }
            return G.y(e, l);
          },
          Y: function (e, l, c, d) {
            let m = getWeekYear(e, d),
              g = m > 0 ? m : 1 - m;
            if ("YY" === l) {
              let e = g % 100;
              return addLeadingZeros(e, 2);
            }
            return "Yo" === l
              ? c.ordinalNumber(g, { unit: "year" })
              : addLeadingZeros(g, l.length);
          },
          R: function (e, l) {
            let c = getISOWeekYear(e);
            return addLeadingZeros(c, l.length);
          },
          u: function (e, l) {
            let c = e.getFullYear();
            return addLeadingZeros(c, l.length);
          },
          Q: function (e, l, c) {
            let d = Math.ceil((e.getMonth() + 1) / 3);
            switch (l) {
              case "Q":
                return String(d);
              case "QQ":
                return addLeadingZeros(d, 2);
              case "Qo":
                return c.ordinalNumber(d, { unit: "quarter" });
              case "QQQ":
                return c.quarter(d, {
                  width: "abbreviated",
                  context: "formatting",
                });
              case "QQQQQ":
                return c.quarter(d, { width: "narrow", context: "formatting" });
              default:
                return c.quarter(d, { width: "wide", context: "formatting" });
            }
          },
          q: function (e, l, c) {
            let d = Math.ceil((e.getMonth() + 1) / 3);
            switch (l) {
              case "q":
                return String(d);
              case "qq":
                return addLeadingZeros(d, 2);
              case "qo":
                return c.ordinalNumber(d, { unit: "quarter" });
              case "qqq":
                return c.quarter(d, {
                  width: "abbreviated",
                  context: "standalone",
                });
              case "qqqqq":
                return c.quarter(d, { width: "narrow", context: "standalone" });
              default:
                return c.quarter(d, { width: "wide", context: "standalone" });
            }
          },
          M: function (e, l, c) {
            let d = e.getMonth();
            switch (l) {
              case "M":
              case "MM":
                return G.M(e, l);
              case "Mo":
                return c.ordinalNumber(d + 1, { unit: "month" });
              case "MMM":
                return c.month(d, {
                  width: "abbreviated",
                  context: "formatting",
                });
              case "MMMMM":
                return c.month(d, { width: "narrow", context: "formatting" });
              default:
                return c.month(d, { width: "wide", context: "formatting" });
            }
          },
          L: function (e, l, c) {
            let d = e.getMonth();
            switch (l) {
              case "L":
                return String(d + 1);
              case "LL":
                return addLeadingZeros(d + 1, 2);
              case "Lo":
                return c.ordinalNumber(d + 1, { unit: "month" });
              case "LLL":
                return c.month(d, {
                  width: "abbreviated",
                  context: "standalone",
                });
              case "LLLLL":
                return c.month(d, { width: "narrow", context: "standalone" });
              default:
                return c.month(d, { width: "wide", context: "standalone" });
            }
          },
          w: function (e, l, c, d) {
            let m = (function (e, l) {
              let c = (0, N.Q)(e),
                d =
                  +startOfWeek(c, l) -
                  +(function (e, l) {
                    let c =
                        l?.firstWeekContainsDate ??
                        l?.locale?.options?.firstWeekContainsDate ??
                        P.firstWeekContainsDate ??
                        P.locale?.options?.firstWeekContainsDate ??
                        1,
                      d = getWeekYear(e, l),
                      m = (0, F.L)(e, 0);
                    m.setFullYear(d, 0, c), m.setHours(0, 0, 0, 0);
                    let g = startOfWeek(m, l);
                    return g;
                  })(c, l);
              return Math.round(d / V.jE) + 1;
            })(e, d);
            return "wo" === l
              ? c.ordinalNumber(m, { unit: "week" })
              : addLeadingZeros(m, l.length);
          },
          I: function (e, l, c) {
            let d = (function (e) {
              let l = (0, N.Q)(e),
                c =
                  +startOfISOWeek(l) -
                  +(function (e) {
                    let l = getISOWeekYear(e),
                      c = (0, F.L)(e, 0);
                    return (
                      c.setFullYear(l, 0, 4),
                      c.setHours(0, 0, 0, 0),
                      startOfISOWeek(c)
                    );
                  })(l);
              return Math.round(c / V.jE) + 1;
            })(e);
            return "Io" === l
              ? c.ordinalNumber(d, { unit: "week" })
              : addLeadingZeros(d, l.length);
          },
          d: function (e, l, c) {
            return "do" === l
              ? c.ordinalNumber(e.getDate(), { unit: "date" })
              : G.d(e, l);
          },
          D: function (e, l, c) {
            let d = (function (e) {
              let l = (0, N.Q)(e),
                c = (0, B.w)(
                  l,
                  (function (e) {
                    let l = (0, N.Q)(e),
                      c = (0, F.L)(e, 0);
                    return (
                      c.setFullYear(l.getFullYear(), 0, 1),
                      c.setHours(0, 0, 0, 0),
                      c
                    );
                  })(l)
                );
              return c + 1;
            })(e);
            return "Do" === l
              ? c.ordinalNumber(d, { unit: "dayOfYear" })
              : addLeadingZeros(d, l.length);
          },
          E: function (e, l, c) {
            let d = e.getDay();
            switch (l) {
              case "E":
              case "EE":
              case "EEE":
                return c.day(d, {
                  width: "abbreviated",
                  context: "formatting",
                });
              case "EEEEE":
                return c.day(d, { width: "narrow", context: "formatting" });
              case "EEEEEE":
                return c.day(d, { width: "short", context: "formatting" });
              default:
                return c.day(d, { width: "wide", context: "formatting" });
            }
          },
          e: function (e, l, c, d) {
            let m = e.getDay(),
              g = (m - d.weekStartsOn + 8) % 7 || 7;
            switch (l) {
              case "e":
                return String(g);
              case "ee":
                return addLeadingZeros(g, 2);
              case "eo":
                return c.ordinalNumber(g, { unit: "day" });
              case "eee":
                return c.day(m, {
                  width: "abbreviated",
                  context: "formatting",
                });
              case "eeeee":
                return c.day(m, { width: "narrow", context: "formatting" });
              case "eeeeee":
                return c.day(m, { width: "short", context: "formatting" });
              default:
                return c.day(m, { width: "wide", context: "formatting" });
            }
          },
          c: function (e, l, c, d) {
            let m = e.getDay(),
              g = (m - d.weekStartsOn + 8) % 7 || 7;
            switch (l) {
              case "c":
                return String(g);
              case "cc":
                return addLeadingZeros(g, l.length);
              case "co":
                return c.ordinalNumber(g, { unit: "day" });
              case "ccc":
                return c.day(m, {
                  width: "abbreviated",
                  context: "standalone",
                });
              case "ccccc":
                return c.day(m, { width: "narrow", context: "standalone" });
              case "cccccc":
                return c.day(m, { width: "short", context: "standalone" });
              default:
                return c.day(m, { width: "wide", context: "standalone" });
            }
          },
          i: function (e, l, c) {
            let d = e.getDay(),
              m = 0 === d ? 7 : d;
            switch (l) {
              case "i":
                return String(m);
              case "ii":
                return addLeadingZeros(m, l.length);
              case "io":
                return c.ordinalNumber(m, { unit: "day" });
              case "iii":
                return c.day(d, {
                  width: "abbreviated",
                  context: "formatting",
                });
              case "iiiii":
                return c.day(d, { width: "narrow", context: "formatting" });
              case "iiiiii":
                return c.day(d, { width: "short", context: "formatting" });
              default:
                return c.day(d, { width: "wide", context: "formatting" });
            }
          },
          a: function (e, l, c) {
            let d = e.getHours(),
              m = d / 12 >= 1 ? "pm" : "am";
            switch (l) {
              case "a":
              case "aa":
                return c.dayPeriod(m, {
                  width: "abbreviated",
                  context: "formatting",
                });
              case "aaa":
                return c
                  .dayPeriod(m, { width: "abbreviated", context: "formatting" })
                  .toLowerCase();
              case "aaaaa":
                return c.dayPeriod(m, {
                  width: "narrow",
                  context: "formatting",
                });
              default:
                return c.dayPeriod(m, { width: "wide", context: "formatting" });
            }
          },
          b: function (e, l, c) {
            let d;
            let m = e.getHours();
            switch (
              ((d =
                12 === m
                  ? Q.noon
                  : 0 === m
                  ? Q.midnight
                  : m / 12 >= 1
                  ? "pm"
                  : "am"),
              l)
            ) {
              case "b":
              case "bb":
                return c.dayPeriod(d, {
                  width: "abbreviated",
                  context: "formatting",
                });
              case "bbb":
                return c
                  .dayPeriod(d, { width: "abbreviated", context: "formatting" })
                  .toLowerCase();
              case "bbbbb":
                return c.dayPeriod(d, {
                  width: "narrow",
                  context: "formatting",
                });
              default:
                return c.dayPeriod(d, { width: "wide", context: "formatting" });
            }
          },
          B: function (e, l, c) {
            let d;
            let m = e.getHours();
            switch (
              ((d =
                m >= 17
                  ? Q.evening
                  : m >= 12
                  ? Q.afternoon
                  : m >= 4
                  ? Q.morning
                  : Q.night),
              l)
            ) {
              case "B":
              case "BB":
              case "BBB":
                return c.dayPeriod(d, {
                  width: "abbreviated",
                  context: "formatting",
                });
              case "BBBBB":
                return c.dayPeriod(d, {
                  width: "narrow",
                  context: "formatting",
                });
              default:
                return c.dayPeriod(d, { width: "wide", context: "formatting" });
            }
          },
          h: function (e, l, c) {
            if ("ho" === l) {
              let l = e.getHours() % 12;
              return 0 === l && (l = 12), c.ordinalNumber(l, { unit: "hour" });
            }
            return G.h(e, l);
          },
          H: function (e, l, c) {
            return "Ho" === l
              ? c.ordinalNumber(e.getHours(), { unit: "hour" })
              : G.H(e, l);
          },
          K: function (e, l, c) {
            let d = e.getHours() % 12;
            return "Ko" === l
              ? c.ordinalNumber(d, { unit: "hour" })
              : addLeadingZeros(d, l.length);
          },
          k: function (e, l, c) {
            let d = e.getHours();
            return (0 === d && (d = 24), "ko" === l)
              ? c.ordinalNumber(d, { unit: "hour" })
              : addLeadingZeros(d, l.length);
          },
          m: function (e, l, c) {
            return "mo" === l
              ? c.ordinalNumber(e.getMinutes(), { unit: "minute" })
              : G.m(e, l);
          },
          s: function (e, l, c) {
            return "so" === l
              ? c.ordinalNumber(e.getSeconds(), { unit: "second" })
              : G.s(e, l);
          },
          S: function (e, l) {
            return G.S(e, l);
          },
          X: function (e, l, c) {
            let d = e.getTimezoneOffset();
            if (0 === d) return "Z";
            switch (l) {
              case "X":
                return formatTimezoneWithOptionalMinutes(d);
              case "XXXX":
              case "XX":
                return formatTimezone(d);
              default:
                return formatTimezone(d, ":");
            }
          },
          x: function (e, l, c) {
            let d = e.getTimezoneOffset();
            switch (l) {
              case "x":
                return formatTimezoneWithOptionalMinutes(d);
              case "xxxx":
              case "xx":
                return formatTimezone(d);
              default:
                return formatTimezone(d, ":");
            }
          },
          O: function (e, l, c) {
            let d = e.getTimezoneOffset();
            switch (l) {
              case "O":
              case "OO":
              case "OOO":
                return "GMT" + formatTimezoneShort(d, ":");
              default:
                return "GMT" + formatTimezone(d, ":");
            }
          },
          z: function (e, l, c) {
            let d = e.getTimezoneOffset();
            switch (l) {
              case "z":
              case "zz":
              case "zzz":
                return "GMT" + formatTimezoneShort(d, ":");
              default:
                return "GMT" + formatTimezone(d, ":");
            }
          },
          t: function (e, l, c) {
            let d = Math.trunc(e.getTime() / 1e3);
            return addLeadingZeros(d, l.length);
          },
          T: function (e, l, c) {
            let d = e.getTime();
            return addLeadingZeros(d, l.length);
          },
        };
      function formatTimezoneShort(e, l = "") {
        let c = e > 0 ? "-" : "+",
          d = Math.abs(e),
          m = Math.trunc(d / 60),
          g = d % 60;
        return 0 === g
          ? c + String(m)
          : c + String(m) + l + addLeadingZeros(g, 2);
      }
      function formatTimezoneWithOptionalMinutes(e, l) {
        if (e % 60 == 0) {
          let l = e > 0 ? "-" : "+";
          return l + addLeadingZeros(Math.abs(e) / 60, 2);
        }
        return formatTimezone(e, l);
      }
      function formatTimezone(e, l = "") {
        let c = Math.abs(e),
          d = addLeadingZeros(Math.trunc(c / 60), 2),
          m = addLeadingZeros(c % 60, 2);
        return (e > 0 ? "-" : "+") + d + l + m;
      }
      let dateLongFormatter = (e, l) => {
          switch (e) {
            case "P":
              return l.date({ width: "short" });
            case "PP":
              return l.date({ width: "medium" });
            case "PPP":
              return l.date({ width: "long" });
            default:
              return l.date({ width: "full" });
          }
        },
        timeLongFormatter = (e, l) => {
          switch (e) {
            case "p":
              return l.time({ width: "short" });
            case "pp":
              return l.time({ width: "medium" });
            case "ppp":
              return l.time({ width: "long" });
            default:
              return l.time({ width: "full" });
          }
        },
        Z = {
          p: timeLongFormatter,
          P: (e, l) => {
            let c;
            let d = e.match(/(P+)(p+)?/) || [],
              m = d[1],
              g = d[2];
            if (!g) return dateLongFormatter(e, l);
            switch (m) {
              case "P":
                c = l.dateTime({ width: "short" });
                break;
              case "PP":
                c = l.dateTime({ width: "medium" });
                break;
              case "PPP":
                c = l.dateTime({ width: "long" });
                break;
              default:
                c = l.dateTime({ width: "full" });
            }
            return c
              .replace("{{date}}", dateLongFormatter(m, l))
              .replace("{{time}}", timeLongFormatter(g, l));
          },
        },
        Y = /^D+$/,
        et = /^Y+$/,
        en = ["D", "DD", "YY", "YYYY"],
        er = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,
        ei = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,
        eo = /^'([^]*?)'?$/,
        ea = /''/g,
        es = /[a-zA-Z]/;
      var date_fns_format = function (e, l, c) {
        let d = c?.locale ?? P.locale ?? C,
          m =
            c?.firstWeekContainsDate ??
            c?.locale?.options?.firstWeekContainsDate ??
            P.firstWeekContainsDate ??
            P.locale?.options?.firstWeekContainsDate ??
            1,
          g =
            c?.weekStartsOn ??
            c?.locale?.options?.weekStartsOn ??
            P.weekStartsOn ??
            P.locale?.options?.weekStartsOn ??
            0,
          y = (0, N.Q)(e);
        if (
          !(function (e) {
            if (
              !(
                e instanceof Date ||
                ("object" == typeof e &&
                  "[object Date]" === Object.prototype.toString.call(e))
              ) &&
              "number" != typeof e
            )
              return !1;
            let l = (0, N.Q)(e);
            return !isNaN(Number(l));
          })(y)
        )
          throw RangeError("Invalid time value");
        let b = l
          .match(ei)
          .map((e) => {
            let l = e[0];
            if ("p" === l || "P" === l) {
              let c = Z[l];
              return c(e, d.formatLong);
            }
            return e;
          })
          .join("")
          .match(er)
          .map((e) => {
            if ("''" === e) return { isToken: !1, value: "'" };
            let l = e[0];
            if ("'" === l)
              return {
                isToken: !1,
                value: (function (e) {
                  let l = e.match(eo);
                  return l ? l[1].replace(ea, "'") : e;
                })(e),
              };
            if ($[l]) return { isToken: !0, value: e };
            if (l.match(es))
              throw RangeError(
                "Format string contains an unescaped latin alphabet character `" +
                  l +
                  "`"
              );
            return { isToken: !1, value: e };
          });
        d.localize.preprocessor && (b = d.localize.preprocessor(y, b));
        let I = { firstWeekContainsDate: m, weekStartsOn: g, locale: d };
        return b
          .map((m) => {
            if (!m.isToken) return m.value;
            let g = m.value;
            ((!c?.useAdditionalWeekYearTokens && et.test(g)) ||
              (!c?.useAdditionalDayOfYearTokens && Y.test(g))) &&
              (function (e, l, c) {
                let d = (function (e, l, c) {
                  let d = "Y" === e[0] ? "years" : "days of the month";
                  return `Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${l}\`) for formatting ${d} to the input \`${c}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
                })(e, l, c);
                if ((console.warn(d), en.includes(e))) throw RangeError(d);
              })(g, l, String(e));
            let b = $[g[0]];
            return b(y, g, d.localize, I);
          })
          .join("");
      };
    },
    26182: function (e, l, c) {
      "use strict";
      c.d(l, {
        Z: function () {
          return date_fns_subYears;
        },
      });
      var d = c(21216),
        date_fns_subYears = function (e, l) {
          return (0, d.z)(e, -(12 * l));
        };
    },
    11022: function (e, l, c) {
      "use strict";
      function toDate(e) {
        let l = Object.prototype.toString.call(e);
        return e instanceof Date ||
          ("object" == typeof e && "[object Date]" === l)
          ? new e.constructor(+e)
          : new Date(
              "number" == typeof e ||
              "[object Number]" === l ||
              "string" == typeof e ||
              "[object String]" === l
                ? e
                : NaN
            );
      }
      c.d(l, {
        Q: function () {
          return toDate;
        },
      });
    },
    73983: function (e, l, c) {
      "use strict";
      c.d(l, {
        v: function () {
          return d;
        },
      });
      var d = c(2337);
    },
    53874: function (e, l, c) {
      "use strict";
      c.d(l, {
        Js: function () {
          return original;
        },
        QE: function () {
          return G;
        },
        Uy: function () {
          return F;
        },
        aS: function () {
          return V;
        },
        mv: function () {
          return isDraft;
        },
        o$: function () {
          return isDraftable;
        },
        vI: function () {
          return enablePatches;
        },
      });
      var d,
        m = Symbol.for("immer-nothing"),
        g = Symbol.for("immer-draftable"),
        y = Symbol.for("immer-state");
      function die(e, ...l) {
        throw Error(
          `[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`
        );
      }
      var b = Object.getPrototypeOf;
      function isDraft(e) {
        return !!e && !!e[y];
      }
      function isDraftable(e) {
        return (
          !!e &&
          (isPlainObject(e) ||
            Array.isArray(e) ||
            !!e[g] ||
            !!e.constructor?.[g] ||
            isMap(e) ||
            isSet(e))
        );
      }
      var C = Object.prototype.constructor.toString();
      function isPlainObject(e) {
        if (!e || "object" != typeof e) return !1;
        let l = b(e);
        if (null === l) return !0;
        let c = Object.hasOwnProperty.call(l, "constructor") && l.constructor;
        return (
          c === Object ||
          ("function" == typeof c && Function.toString.call(c) === C)
        );
      }
      function original(e) {
        return isDraft(e) || die(15, e), e[y].base_;
      }
      function each(e, l) {
        0 === getArchtype(e)
          ? Reflect.ownKeys(e).forEach((c) => {
              l(c, e[c], e);
            })
          : e.forEach((c, d) => l(d, c, e));
      }
      function getArchtype(e) {
        let l = e[y];
        return l
          ? l.type_
          : Array.isArray(e)
          ? 1
          : isMap(e)
          ? 2
          : isSet(e)
          ? 3
          : 0;
      }
      function has(e, l) {
        return 2 === getArchtype(e)
          ? e.has(l)
          : Object.prototype.hasOwnProperty.call(e, l);
      }
      function get(e, l) {
        return 2 === getArchtype(e) ? e.get(l) : e[l];
      }
      function set(e, l, c) {
        let d = getArchtype(e);
        2 === d ? e.set(l, c) : 3 === d ? e.add(c) : (e[l] = c);
      }
      function isMap(e) {
        return e instanceof Map;
      }
      function isSet(e) {
        return e instanceof Set;
      }
      function latest(e) {
        return e.copy_ || e.base_;
      }
      function shallowCopy(e, l) {
        if (isMap(e)) return new Map(e);
        if (isSet(e)) return new Set(e);
        if (Array.isArray(e)) return Array.prototype.slice.call(e);
        let c = isPlainObject(e);
        if (!0 !== l && ("class_only" !== l || c)) {
          let l = b(e);
          if (null !== l && c) return { ...e };
          let d = Object.create(l);
          return Object.assign(d, e);
        }
        {
          let l = Object.getOwnPropertyDescriptors(e);
          delete l[y];
          let c = Reflect.ownKeys(l);
          for (let d = 0; d < c.length; d++) {
            let m = c[d],
              g = l[m];
            !1 === g.writable && ((g.writable = !0), (g.configurable = !0)),
              (g.get || g.set) &&
                (l[m] = {
                  configurable: !0,
                  writable: !0,
                  enumerable: g.enumerable,
                  value: e[m],
                });
          }
          return Object.create(b(e), l);
        }
      }
      function freeze(e, l = !1) {
        return (
          isFrozen(e) ||
            isDraft(e) ||
            !isDraftable(e) ||
            (getArchtype(e) > 1 &&
              (e.set =
                e.add =
                e.clear =
                e.delete =
                  dontMutateFrozenCollections),
            Object.freeze(e),
            l && Object.entries(e).forEach(([e, l]) => freeze(l, !0))),
          e
        );
      }
      function dontMutateFrozenCollections() {
        die(2);
      }
      function isFrozen(e) {
        return Object.isFrozen(e);
      }
      var P = {};
      function getPlugin(e) {
        let l = P[e];
        return l || die(0, e), l;
      }
      function usePatchesInScope(e, l) {
        l &&
          (getPlugin("Patches"),
          (e.patches_ = []),
          (e.inversePatches_ = []),
          (e.patchListener_ = l));
      }
      function revokeScope(e) {
        leaveScope(e), e.drafts_.forEach(revokeDraft), (e.drafts_ = null);
      }
      function leaveScope(e) {
        e === d && (d = e.parent_);
      }
      function enterScope(e) {
        return (d = {
          drafts_: [],
          parent_: d,
          immer_: e,
          canAutoFreeze_: !0,
          unfinalizedDrafts_: 0,
        });
      }
      function revokeDraft(e) {
        let l = e[y];
        0 === l.type_ || 1 === l.type_ ? l.revoke_() : (l.revoked_ = !0);
      }
      function processResult(e, l) {
        l.unfinalizedDrafts_ = l.drafts_.length;
        let c = l.drafts_[0],
          d = void 0 !== e && e !== c;
        return (
          d
            ? (c[y].modified_ && (revokeScope(l), die(4)),
              isDraftable(e) &&
                ((e = finalize(l, e)), l.parent_ || maybeFreeze(l, e)),
              l.patches_ &&
                getPlugin("Patches").generateReplacementPatches_(
                  c[y].base_,
                  e,
                  l.patches_,
                  l.inversePatches_
                ))
            : (e = finalize(l, c, [])),
          revokeScope(l),
          l.patches_ && l.patchListener_(l.patches_, l.inversePatches_),
          e !== m ? e : void 0
        );
      }
      function finalize(e, l, c) {
        if (isFrozen(l)) return l;
        let d = l[y];
        if (!d) return each(l, (m, g) => finalizeProperty(e, d, l, m, g, c)), l;
        if (d.scope_ !== e) return l;
        if (!d.modified_) return maybeFreeze(e, d.base_, !0), d.base_;
        if (!d.finalized_) {
          (d.finalized_ = !0), d.scope_.unfinalizedDrafts_--;
          let l = d.copy_,
            m = l,
            g = !1;
          3 === d.type_ && ((m = new Set(l)), l.clear(), (g = !0)),
            each(m, (m, y) => finalizeProperty(e, d, l, m, y, c, g)),
            maybeFreeze(e, l, !1),
            c &&
              e.patches_ &&
              getPlugin("Patches").generatePatches_(
                d,
                c,
                e.patches_,
                e.inversePatches_
              );
        }
        return d.copy_;
      }
      function finalizeProperty(e, l, c, d, m, g, y) {
        if (isDraft(m)) {
          let y =
              g && l && 3 !== l.type_ && !has(l.assigned_, d)
                ? g.concat(d)
                : void 0,
            b = finalize(e, m, y);
          if ((set(c, d, b), !isDraft(b))) return;
          e.canAutoFreeze_ = !1;
        } else y && c.add(m);
        if (isDraftable(m) && !isFrozen(m)) {
          if (!e.immer_.autoFreeze_ && e.unfinalizedDrafts_ < 1) return;
          finalize(e, m),
            (!l || !l.scope_.parent_) &&
              "symbol" != typeof d &&
              Object.prototype.propertyIsEnumerable.call(c, d) &&
              maybeFreeze(e, m);
        }
      }
      function maybeFreeze(e, l, c = !1) {
        !e.parent_ && e.immer_.autoFreeze_ && e.canAutoFreeze_ && freeze(l, c);
      }
      var I = {
          get(e, l) {
            if (l === y) return e;
            let c = latest(e);
            if (!has(c, l))
              return (function (e, l, c) {
                let d = getDescriptorFromProto(l, c);
                return d
                  ? "value" in d
                    ? d.value
                    : d.get?.call(e.draft_)
                  : void 0;
              })(e, c, l);
            let d = c[l];
            return e.finalized_ || !isDraftable(d)
              ? d
              : d === peek(e.base_, l)
              ? (prepareCopy(e), (e.copy_[l] = createProxy(d, e)))
              : d;
          },
          has: (e, l) => l in latest(e),
          ownKeys: (e) => Reflect.ownKeys(latest(e)),
          set(e, l, c) {
            let d = getDescriptorFromProto(latest(e), l);
            if (d?.set) return d.set.call(e.draft_, c), !0;
            if (!e.modified_) {
              let d = peek(latest(e), l),
                m = d?.[y];
              if (m && m.base_ === c)
                return (e.copy_[l] = c), (e.assigned_[l] = !1), !0;
              if (
                (c === d ? 0 !== c || 1 / c == 1 / d : c != c && d != d) &&
                (void 0 !== c || has(e.base_, l))
              )
                return !0;
              prepareCopy(e), markChanged(e);
            }
            return (
              !!(
                (e.copy_[l] === c && (void 0 !== c || l in e.copy_)) ||
                (Number.isNaN(c) && Number.isNaN(e.copy_[l]))
              ) || ((e.copy_[l] = c), (e.assigned_[l] = !0), !0)
            );
          },
          deleteProperty: (e, l) => (
            void 0 !== peek(e.base_, l) || l in e.base_
              ? ((e.assigned_[l] = !1), prepareCopy(e), markChanged(e))
              : delete e.assigned_[l],
            e.copy_ && delete e.copy_[l],
            !0
          ),
          getOwnPropertyDescriptor(e, l) {
            let c = latest(e),
              d = Reflect.getOwnPropertyDescriptor(c, l);
            return d
              ? {
                  writable: !0,
                  configurable: 1 !== e.type_ || "length" !== l,
                  enumerable: d.enumerable,
                  value: c[l],
                }
              : d;
          },
          defineProperty() {
            die(11);
          },
          getPrototypeOf: (e) => b(e.base_),
          setPrototypeOf() {
            die(12);
          },
        },
        B = {};
      function peek(e, l) {
        let c = e[y],
          d = c ? latest(c) : e;
        return d[l];
      }
      function getDescriptorFromProto(e, l) {
        if (!(l in e)) return;
        let c = b(e);
        for (; c; ) {
          let e = Object.getOwnPropertyDescriptor(c, l);
          if (e) return e;
          c = b(c);
        }
      }
      function markChanged(e) {
        !e.modified_ &&
          ((e.modified_ = !0), e.parent_ && markChanged(e.parent_));
      }
      function prepareCopy(e) {
        e.copy_ ||
          (e.copy_ = shallowCopy(
            e.base_,
            e.scope_.immer_.useStrictShallowCopy_
          ));
      }
      function createProxy(e, l) {
        let c = isMap(e)
            ? getPlugin("MapSet").proxyMap_(e, l)
            : isSet(e)
            ? getPlugin("MapSet").proxySet_(e, l)
            : (function (e, l) {
                let c = Array.isArray(e),
                  m = {
                    type_: c ? 1 : 0,
                    scope_: l ? l.scope_ : d,
                    modified_: !1,
                    finalized_: !1,
                    assigned_: {},
                    parent_: l,
                    base_: e,
                    draft_: null,
                    copy_: null,
                    revoke_: null,
                    isManual_: !1,
                  },
                  g = m,
                  y = I;
                c && ((g = [m]), (y = B));
                let { revoke: b, proxy: C } = Proxy.revocable(g, y);
                return (m.draft_ = C), (m.revoke_ = b), C;
              })(e, l),
          m = l ? l.scope_ : d;
        return m.drafts_.push(c), c;
      }
      function enablePatches() {
        var e;
        let l = "replace",
          c = "remove";
        function deepClonePatchValue(e) {
          if (!isDraftable(e)) return e;
          if (Array.isArray(e)) return e.map(deepClonePatchValue);
          if (isMap(e))
            return new Map(
              Array.from(e.entries()).map(([e, l]) => [
                e,
                deepClonePatchValue(l),
              ])
            );
          if (isSet(e)) return new Set(Array.from(e).map(deepClonePatchValue));
          let l = Object.create(b(e));
          for (let c in e) l[c] = deepClonePatchValue(e[c]);
          return has(e, g) && (l[g] = e[g]), l;
        }
        function clonePatchValueIfNeeded(e) {
          return isDraft(e) ? deepClonePatchValue(e) : e;
        }
        P[(e = "Patches")] ||
          (P[e] = {
            applyPatches_: function (e, d) {
              return (
                d.forEach((d) => {
                  let { path: m, op: g } = d,
                    y = e;
                  for (let e = 0; e < m.length - 1; e++) {
                    let l = getArchtype(y),
                      c = m[e];
                    "string" != typeof c &&
                      "number" != typeof c &&
                      (c = "" + c),
                      (0 === l || 1 === l) &&
                        ("__proto__" === c || "constructor" === c) &&
                        die(19),
                      "function" == typeof y && "prototype" === c && die(19),
                      "object" != typeof (y = get(y, c)) &&
                        die(18, m.join("/"));
                  }
                  let b = getArchtype(y),
                    C = deepClonePatchValue(d.value),
                    P = m[m.length - 1];
                  switch (g) {
                    case l:
                      switch (b) {
                        case 2:
                          return y.set(P, C);
                        case 3:
                          die(16);
                        default:
                          return (y[P] = C);
                      }
                    case "add":
                      switch (b) {
                        case 1:
                          return "-" === P ? y.push(C) : y.splice(P, 0, C);
                        case 2:
                          return y.set(P, C);
                        case 3:
                          return y.add(C);
                        default:
                          return (y[P] = C);
                      }
                    case c:
                      switch (b) {
                        case 1:
                          return y.splice(P, 1);
                        case 2:
                          return y.delete(P);
                        case 3:
                          return y.delete(d.value);
                        default:
                          return delete y[P];
                      }
                    default:
                      die(17, g);
                  }
                }),
                e
              );
            },
            generatePatches_: function (e, d, m, g) {
              switch (e.type_) {
                case 0:
                case 2:
                  return (function (e, d, m, g) {
                    let { base_: y, copy_: b } = e;
                    each(e.assigned_, (e, C) => {
                      let P = get(y, e),
                        I = get(b, e),
                        B = C ? (has(y, e) ? l : "add") : c;
                      if (P === I && B === l) return;
                      let N = d.concat(e);
                      m.push(
                        B === c
                          ? { op: B, path: N }
                          : { op: B, path: N, value: I }
                      ),
                        g.push(
                          "add" === B
                            ? { op: c, path: N }
                            : B === c
                            ? {
                                op: "add",
                                path: N,
                                value: clonePatchValueIfNeeded(P),
                              }
                            : {
                                op: l,
                                path: N,
                                value: clonePatchValueIfNeeded(P),
                              }
                        );
                    });
                  })(e, d, m, g);
                case 1:
                  return (function (e, d, m, g) {
                    let { base_: y, assigned_: b } = e,
                      C = e.copy_;
                    C.length < y.length &&
                      (([y, C] = [C, y]), ([m, g] = [g, m]));
                    for (let e = 0; e < y.length; e++)
                      if (b[e] && C[e] !== y[e]) {
                        let c = d.concat([e]);
                        m.push({
                          op: l,
                          path: c,
                          value: clonePatchValueIfNeeded(C[e]),
                        }),
                          g.push({
                            op: l,
                            path: c,
                            value: clonePatchValueIfNeeded(y[e]),
                          });
                      }
                    for (let e = y.length; e < C.length; e++) {
                      let l = d.concat([e]);
                      m.push({
                        op: "add",
                        path: l,
                        value: clonePatchValueIfNeeded(C[e]),
                      });
                    }
                    for (let e = C.length - 1; y.length <= e; --e) {
                      let l = d.concat([e]);
                      g.push({ op: c, path: l });
                    }
                  })(e, d, m, g);
                case 3:
                  return (function (e, l, d, m) {
                    let { base_: g, copy_: y } = e,
                      b = 0;
                    g.forEach((e) => {
                      if (!y.has(e)) {
                        let g = l.concat([b]);
                        d.push({ op: c, path: g, value: e }),
                          m.unshift({ op: "add", path: g, value: e });
                      }
                      b++;
                    }),
                      (b = 0),
                      y.forEach((e) => {
                        if (!g.has(e)) {
                          let g = l.concat([b]);
                          d.push({ op: "add", path: g, value: e }),
                            m.unshift({ op: c, path: g, value: e });
                        }
                        b++;
                      });
                  })(e, d, m, g);
              }
            },
            generateReplacementPatches_: function (e, c, d, g) {
              d.push({ op: l, path: [], value: c === m ? void 0 : c }),
                g.push({ op: l, path: [], value: e });
            },
          });
      }
      each(I, (e, l) => {
        B[e] = function () {
          return (arguments[0] = arguments[0][0]), l.apply(this, arguments);
        };
      }),
        (B.deleteProperty = function (e, l) {
          return B.set.call(this, e, l, void 0);
        }),
        (B.set = function (e, l, c) {
          return I.set.call(this, e[0], l, c, e[0]);
        });
      var N = new (class {
          constructor(e) {
            (this.autoFreeze_ = !0),
              (this.useStrictShallowCopy_ = !1),
              (this.produce = (e, l, c) => {
                let d;
                if ("function" == typeof e && "function" != typeof l) {
                  let c = l;
                  l = e;
                  let d = this;
                  return function (e = c, ...m) {
                    return d.produce(e, (e) => l.call(this, e, ...m));
                  };
                }
                if (
                  ("function" != typeof l && die(6),
                  void 0 !== c && "function" != typeof c && die(7),
                  isDraftable(e))
                ) {
                  let m = enterScope(this),
                    g = createProxy(e, void 0),
                    y = !0;
                  try {
                    (d = l(g)), (y = !1);
                  } finally {
                    y ? revokeScope(m) : leaveScope(m);
                  }
                  return usePatchesInScope(m, c), processResult(d, m);
                }
                if (e && "object" == typeof e) die(1, e);
                else {
                  if (
                    (void 0 === (d = l(e)) && (d = e),
                    d === m && (d = void 0),
                    this.autoFreeze_ && freeze(d, !0),
                    c)
                  ) {
                    let l = [],
                      m = [];
                    getPlugin("Patches").generateReplacementPatches_(
                      e,
                      d,
                      l,
                      m
                    ),
                      c(l, m);
                  }
                  return d;
                }
              }),
              (this.produceWithPatches = (e, l) => {
                let c, d;
                if ("function" == typeof e)
                  return (l, ...c) =>
                    this.produceWithPatches(l, (l) => e(l, ...c));
                let m = this.produce(e, l, (e, l) => {
                  (c = e), (d = l);
                });
                return [m, c, d];
              }),
              "boolean" == typeof e?.autoFreeze &&
                this.setAutoFreeze(e.autoFreeze),
              "boolean" == typeof e?.useStrictShallowCopy &&
                this.setUseStrictShallowCopy(e.useStrictShallowCopy);
          }
          createDraft(e) {
            var l;
            isDraftable(e) || die(8),
              isDraft(e) &&
                (isDraft((l = e)) || die(10, l),
                (e = (function currentImpl(e) {
                  let l;
                  if (!isDraftable(e) || isFrozen(e)) return e;
                  let c = e[y];
                  if (c) {
                    if (!c.modified_) return c.base_;
                    (c.finalized_ = !0),
                      (l = shallowCopy(
                        e,
                        c.scope_.immer_.useStrictShallowCopy_
                      ));
                  } else l = shallowCopy(e, !0);
                  return (
                    each(l, (e, c) => {
                      set(l, e, currentImpl(c));
                    }),
                    c && (c.finalized_ = !1),
                    l
                  );
                })(l)));
            let c = enterScope(this),
              d = createProxy(e, void 0);
            return (d[y].isManual_ = !0), leaveScope(c), d;
          }
          finishDraft(e, l) {
            let c = e && e[y];
            (c && c.isManual_) || die(9);
            let { scope_: d } = c;
            return usePatchesInScope(d, l), processResult(void 0, d);
          }
          setAutoFreeze(e) {
            this.autoFreeze_ = e;
          }
          setUseStrictShallowCopy(e) {
            this.useStrictShallowCopy_ = e;
          }
          applyPatches(e, l) {
            let c;
            for (c = l.length - 1; c >= 0; c--) {
              let d = l[c];
              if (0 === d.path.length && "replace" === d.op) {
                e = d.value;
                break;
              }
            }
            c > -1 && (l = l.slice(c + 1));
            let d = getPlugin("Patches").applyPatches_;
            return isDraft(e) ? d(e, l) : this.produce(e, (e) => d(e, l));
          }
        })(),
        F = N.produce,
        V = N.produceWithPatches.bind(N);
      N.setAutoFreeze.bind(N), N.setUseStrictShallowCopy.bind(N);
      var G = N.applyPatches.bind(N);
      N.createDraft.bind(N), N.finishDraft.bind(N);
    },
    68563: function (e, l, c) {
      "use strict";
      let d, m;
      c.d(l, {
        x7: function () {
          return Oe;
        },
        ZP: function () {
          return ew;
        },
      });
      var g,
        y = c(50959);
      let b = { data: "" },
        t = (e) =>
          "object" == typeof window
            ? (
                (e ? e.querySelector("#_goober") : window._goober) ||
                Object.assign(
                  (e || document.head).appendChild(
                    document.createElement("style")
                  ),
                  { innerHTML: " ", id: "_goober" }
                )
              ).firstChild
            : e || b,
        C = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,
        P = /\/\*[^]*?\*\/|  +/g,
        I = /\n+/g,
        o = (e, l) => {
          let c = "",
            d = "",
            m = "";
          for (let g in e) {
            let y = e[g];
            "@" == g[0]
              ? "i" == g[1]
                ? (c = g + " " + y + ";")
                : (d +=
                    "f" == g[1]
                      ? o(y, g)
                      : g + "{" + o(y, "k" == g[1] ? "" : l) + "}")
              : "object" == typeof y
              ? (d += o(
                  y,
                  l
                    ? l.replace(/([^,])+/g, (e) =>
                        g.replace(/([^,]*:\S+\([^)]*\))|([^,])+/g, (l) =>
                          /&/.test(l) ? l.replace(/&/g, e) : e ? e + " " + l : l
                        )
                      )
                    : g
                ))
              : null != y &&
                ((g = /^--/.test(g)
                  ? g
                  : g.replace(/[A-Z]/g, "-$&").toLowerCase()),
                (m += o.p ? o.p(g, y) : g + ":" + y + ";"));
          }
          return c + (l && m ? l + "{" + m + "}" : m) + d;
        },
        B = {},
        s = (e) => {
          if ("object" == typeof e) {
            let l = "";
            for (let c in e) l += c + s(e[c]);
            return l;
          }
          return e;
        },
        i = (e, l, c, d, m) => {
          var g;
          let y = s(e),
            b =
              B[y] ||
              (B[y] = ((e) => {
                let l = 0,
                  c = 11;
                for (; l < e.length; ) c = (101 * c + e.charCodeAt(l++)) >>> 0;
                return "go" + c;
              })(y));
          if (!B[b]) {
            let l =
              y !== e
                ? e
                : ((e) => {
                    let l,
                      c,
                      d = [{}];
                    for (; (l = C.exec(e.replace(P, ""))); )
                      l[4]
                        ? d.shift()
                        : l[3]
                        ? ((c = l[3].replace(I, " ").trim()),
                          d.unshift((d[0][c] = d[0][c] || {})))
                        : (d[0][l[1]] = l[2].replace(I, " ").trim());
                    return d[0];
                  })(e);
            B[b] = o(m ? { ["@keyframes " + b]: l } : l, c ? "" : "." + b);
          }
          let N = c && B.g ? B.g : null;
          return (
            c && (B.g = B[b]),
            (g = B[b]),
            N
              ? (l.data = l.data.replace(N, g))
              : -1 === l.data.indexOf(g) &&
                (l.data = d ? g + l.data : l.data + g),
            b
          );
        },
        p = (e, l, c) =>
          e.reduce((e, d, m) => {
            let g = l[m];
            if (g && g.call) {
              let e = g(c),
                l = (e && e.props && e.props.className) || (/^go/.test(e) && e);
              g = l
                ? "." + l
                : e && "object" == typeof e
                ? e.props
                  ? ""
                  : o(e, "")
                : !1 === e
                ? ""
                : e;
            }
            return e + d + (null == g ? "" : g);
          }, "");
      function u(e) {
        let l = this || {},
          c = e.call ? e(l.p) : e;
        return i(
          c.unshift
            ? c.raw
              ? p(c, [].slice.call(arguments, 1), l.p)
              : c.reduce(
                  (e, c) => Object.assign(e, c && c.call ? c(l.p) : c),
                  {}
                )
            : c,
          t(l.target),
          l.g,
          l.o,
          l.k
        );
      }
      u.bind({ g: 1 });
      let N,
        F,
        V,
        G = u.bind({ k: 1 });
      function j(e, l) {
        let c = this || {};
        return function () {
          let d = arguments;
          function a(m, g) {
            let y = Object.assign({}, m),
              b = y.className || a.className;
            (c.p = Object.assign({ theme: F && F() }, y)),
              (c.o = / *go\d+/.test(b)),
              (y.className = u.apply(c, d) + (b ? " " + b : "")),
              l && (y.ref = g);
            let C = e;
            return (
              e[0] && ((C = y.as || e), delete y.as), V && C[0] && V(y), N(C, y)
            );
          }
          return l ? l(a) : a;
        };
      }
      var W = (e) => "function" == typeof e,
        dist_f = (e, l) => (W(e) ? e(l) : e),
        Q = ((d = 0), () => (++d).toString()),
        A = () => {
          if (void 0 === m && "u" > typeof window) {
            let e = matchMedia("(prefers-reduced-motion: reduce)");
            m = !e || e.matches;
          }
          return m;
        },
        U = (e, l) => {
          switch (l.type) {
            case 0:
              return { ...e, toasts: [l.toast, ...e.toasts].slice(0, 20) };
            case 1:
              return {
                ...e,
                toasts: e.toasts.map((e) =>
                  e.id === l.toast.id ? { ...e, ...l.toast } : e
                ),
              };
            case 2:
              let { toast: c } = l;
              return U(e, {
                type: e.toasts.find((e) => e.id === c.id) ? 1 : 0,
                toast: c,
              });
            case 3:
              let { toastId: d } = l;
              return {
                ...e,
                toasts: e.toasts.map((e) =>
                  e.id === d || void 0 === d
                    ? { ...e, dismissed: !0, visible: !1 }
                    : e
                ),
              };
            case 4:
              return void 0 === l.toastId
                ? { ...e, toasts: [] }
                : { ...e, toasts: e.toasts.filter((e) => e.id !== l.toastId) };
            case 5:
              return { ...e, pausedAt: l.time };
            case 6:
              let m = l.time - (e.pausedAt || 0);
              return {
                ...e,
                pausedAt: void 0,
                toasts: e.toasts.map((e) => ({
                  ...e,
                  pauseDuration: e.pauseDuration + m,
                })),
              };
          }
        },
        $ = [],
        Z = { toasts: [], pausedAt: void 0 },
        dist_u = (e) => {
          (Z = U(Z, e)),
            $.forEach((e) => {
              e(Z);
            });
        },
        Y = {
          blank: 4e3,
          error: 4e3,
          success: 2e3,
          loading: 1 / 0,
          custom: 4e3,
        },
        D = (e = {}) => {
          let [l, c] = (0, y.useState)(Z),
            d = (0, y.useRef)(Z);
          (0, y.useEffect)(
            () => (
              d.current !== Z && c(Z),
              $.push(c),
              () => {
                let e = $.indexOf(c);
                e > -1 && $.splice(e, 1);
              }
            ),
            []
          );
          let m = l.toasts.map((l) => {
            var c, d, m;
            return {
              ...e,
              ...e[l.type],
              ...l,
              removeDelay:
                l.removeDelay ||
                (null == (c = e[l.type]) ? void 0 : c.removeDelay) ||
                (null == e ? void 0 : e.removeDelay),
              duration:
                l.duration ||
                (null == (d = e[l.type]) ? void 0 : d.duration) ||
                (null == e ? void 0 : e.duration) ||
                Y[l.type],
              style: {
                ...e.style,
                ...(null == (m = e[l.type]) ? void 0 : m.style),
                ...l.style,
              },
            };
          });
          return { ...l, toasts: m };
        },
        J = (e, l = "blank", c) => ({
          createdAt: Date.now(),
          visible: !0,
          dismissed: !1,
          type: l,
          ariaProps: { role: "status", "aria-live": "polite" },
          message: e,
          pauseDuration: 0,
          ...c,
          id: (null == c ? void 0 : c.id) || Q(),
        }),
        x = (e) => (l, c) => {
          let d = J(l, e, c);
          return dist_u({ type: 2, toast: d }), d.id;
        },
        dist_c = (e, l) => x("blank")(e, l);
      (dist_c.error = x("error")),
        (dist_c.success = x("success")),
        (dist_c.loading = x("loading")),
        (dist_c.custom = x("custom")),
        (dist_c.dismiss = (e) => {
          dist_u({ type: 3, toastId: e });
        }),
        (dist_c.remove = (e) => dist_u({ type: 4, toastId: e })),
        (dist_c.promise = (e, l, c) => {
          let d = dist_c.loading(l.loading, {
            ...c,
            ...(null == c ? void 0 : c.loading),
          });
          return (
            "function" == typeof e && (e = e()),
            e
              .then((e) => {
                let m = l.success ? dist_f(l.success, e) : void 0;
                return (
                  m
                    ? dist_c.success(m, {
                        id: d,
                        ...c,
                        ...(null == c ? void 0 : c.success),
                      })
                    : dist_c.dismiss(d),
                  e
                );
              })
              .catch((e) => {
                let m = l.error ? dist_f(l.error, e) : void 0;
                m
                  ? dist_c.error(m, {
                      id: d,
                      ...c,
                      ...(null == c ? void 0 : c.error),
                    })
                  : dist_c.dismiss(d);
              }),
            e
          );
        });
      var K = (e, l) => {
          dist_u({ type: 1, toast: { id: e, height: l } });
        },
        X = () => {
          dist_u({ type: 5, time: Date.now() });
        },
        et = new Map(),
        en = 1e3,
        ee = (e, l = en) => {
          if (et.has(e)) return;
          let c = setTimeout(() => {
            et.delete(e), dist_u({ type: 4, toastId: e });
          }, l);
          et.set(e, c);
        },
        O = (e) => {
          let { toasts: l, pausedAt: c } = D(e);
          (0, y.useEffect)(() => {
            if (c) return;
            let e = Date.now(),
              d = l.map((l) => {
                if (l.duration === 1 / 0) return;
                let c = (l.duration || 0) + l.pauseDuration - (e - l.createdAt);
                if (c < 0) {
                  l.visible && dist_c.dismiss(l.id);
                  return;
                }
                return setTimeout(() => dist_c.dismiss(l.id), c);
              });
            return () => {
              d.forEach((e) => e && clearTimeout(e));
            };
          }, [l, c]);
          let d = (0, y.useCallback)(() => {
              c && dist_u({ type: 6, time: Date.now() });
            }, [c]),
            m = (0, y.useCallback)(
              (e, c) => {
                let {
                    reverseOrder: d = !1,
                    gutter: m = 8,
                    defaultPosition: g,
                  } = c || {},
                  y = l.filter(
                    (l) => (l.position || g) === (e.position || g) && l.height
                  ),
                  b = y.findIndex((l) => l.id === e.id),
                  C = y.filter((e, l) => l < b && e.visible).length;
                return y
                  .filter((e) => e.visible)
                  .slice(...(d ? [C + 1] : [0, C]))
                  .reduce((e, l) => e + (l.height || 0) + m, 0);
              },
              [l]
            );
          return (
            (0, y.useEffect)(() => {
              l.forEach((e) => {
                if (e.dismissed) ee(e.id, e.removeDelay);
                else {
                  let l = et.get(e.id);
                  l && (clearTimeout(l), et.delete(e.id));
                }
              });
            }, [l]),
            {
              toasts: l,
              handlers: {
                updateHeight: K,
                startPause: X,
                endPause: d,
                calculateOffset: m,
              },
            }
          );
        },
        er = G`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`,
        ei = G`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`,
        eo = G`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`,
        ea = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e) => e.primary || "#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${er} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${ei} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${(e) => e.secondary || "#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${eo} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`,
        es = G`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`,
        el = j("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${(e) => e.secondary || "#e0e0e0"};
  border-right-color: ${(e) => e.primary || "#616161"};
  animation: ${es} 1s linear infinite;
`,
        ec = G`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`,
        eu = G`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`,
        ed = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e) => e.primary || "#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${ec} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${eu} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${(e) => e.secondary || "#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`,
        ep = j("div")`
  position: absolute;
`,
        eh = j("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`,
        ef = G`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`,
        em = j("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${ef} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`,
        M = ({ toast: e }) => {
          let { icon: l, type: c, iconTheme: d } = e;
          return void 0 !== l
            ? "string" == typeof l
              ? y.createElement(em, null, l)
              : l
            : "blank" === c
            ? null
            : y.createElement(
                eh,
                null,
                y.createElement(el, { ...d }),
                "loading" !== c &&
                  y.createElement(
                    ep,
                    null,
                    "error" === c
                      ? y.createElement(ea, { ...d })
                      : y.createElement(ed, { ...d })
                  )
              );
        },
        ye = (e) => `
0% {transform: translate3d(0,${-200 * e}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`,
        ge = (e) => `
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${-150 * e}%,-1px) scale(.6); opacity:0;}
`,
        eg = j("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`,
        ey = j("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`,
        Ae = (e, l) => {
          let c = e.includes("top") ? 1 : -1,
            [d, m] = A()
              ? [
                  "0%{opacity:0;} 100%{opacity:1;}",
                  "0%{opacity:1;} 100%{opacity:0;}",
                ]
              : [ye(c), ge(c)];
          return {
            animation: l
              ? `${G(d)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards`
              : `${G(m)} 0.4s forwards cubic-bezier(.06,.71,.55,1)`,
          };
        },
        eb = y.memo(({ toast: e, position: l, style: c, children: d }) => {
          let m = e.height
              ? Ae(e.position || l || "top-center", e.visible)
              : { opacity: 0 },
            g = y.createElement(M, { toast: e }),
            b = y.createElement(ey, { ...e.ariaProps }, dist_f(e.message, e));
          return y.createElement(
            eg,
            { className: e.className, style: { ...m, ...c, ...e.style } },
            "function" == typeof d
              ? d({ icon: g, message: b })
              : y.createElement(y.Fragment, null, g, b)
          );
        });
      (g = y.createElement),
        (o.p = void 0),
        (N = g),
        (F = void 0),
        (V = void 0);
      var ve = ({
          id: e,
          className: l,
          style: c,
          onHeightUpdate: d,
          children: m,
        }) => {
          let g = y.useCallback(
            (l) => {
              if (l) {
                let i = () => {
                  d(e, l.getBoundingClientRect().height);
                };
                i(),
                  new MutationObserver(i).observe(l, {
                    subtree: !0,
                    childList: !0,
                    characterData: !0,
                  });
              }
            },
            [e, d]
          );
          return y.createElement("div", { ref: g, className: l, style: c }, m);
        },
        Ee = (e, l) => {
          let c = e.includes("top"),
            d = e.includes("center")
              ? { justifyContent: "center" }
              : e.includes("right")
              ? { justifyContent: "flex-end" }
              : {};
          return {
            left: 0,
            right: 0,
            display: "flex",
            position: "absolute",
            transition: A() ? void 0 : "all 230ms cubic-bezier(.21,1.02,.73,1)",
            transform: `translateY(${l * (c ? 1 : -1)}px)`,
            ...(c ? { top: 0 } : { bottom: 0 }),
            ...d,
          };
        },
        ev = u`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`,
        Oe = ({
          reverseOrder: e,
          position: l = "top-center",
          toastOptions: c,
          gutter: d,
          children: m,
          containerStyle: g,
          containerClassName: b,
        }) => {
          let { toasts: C, handlers: P } = O(c);
          return y.createElement(
            "div",
            {
              id: "_rht_toaster",
              style: {
                position: "fixed",
                zIndex: 9999,
                top: 16,
                left: 16,
                right: 16,
                bottom: 16,
                pointerEvents: "none",
                ...g,
              },
              className: b,
              onMouseEnter: P.startPause,
              onMouseLeave: P.endPause,
            },
            C.map((c) => {
              let g = c.position || l,
                b = Ee(
                  g,
                  P.calculateOffset(c, {
                    reverseOrder: e,
                    gutter: d,
                    defaultPosition: l,
                  })
                );
              return y.createElement(
                ve,
                {
                  id: c.id,
                  key: c.id,
                  onHeightUpdate: P.updateHeight,
                  className: c.visible ? ev : "",
                  style: b,
                },
                "custom" === c.type
                  ? dist_f(c.message, c)
                  : m
                  ? m(c)
                  : y.createElement(eb, { toast: c, position: g })
              );
            })
          );
        },
        ew = dist_c;
    },
    49723: function (e, l, c) {
      "use strict";
      c.d(l, {
        u: function () {
          return F;
        },
      });
      var d = c(50959),
        m = c(63166),
        g = c(82187),
        y = c(21481);
      /*
       * React Tooltip
       * {@link https://github.com/ReactTooltip/react-tooltip}
       * @copyright ReactTooltip Team
       * @license MIT
       */ let b = { core: !1, base: !1 };
      function S({
        css: e,
        id: l = "react-tooltip-base-styles",
        type: c = "base",
        ref: d,
      }) {
        var m, g;
        if (
          !e ||
          "undefined" == typeof document ||
          b[c] ||
          ("core" === c &&
            void 0 !== y &&
            (null === (m = null == y ? void 0 : y.env) || void 0 === m
              ? void 0
              : m.REACT_TOOLTIP_DISABLE_CORE_STYLES)) ||
          ("base" !== c &&
            void 0 !== y &&
            (null === (g = null == y ? void 0 : y.env) || void 0 === g
              ? void 0
              : g.REACT_TOOLTIP_DISABLE_BASE_STYLES))
        )
          return;
        "core" === c && (l = "react-tooltip-core-styles"), d || (d = {});
        let { insertAt: C } = d;
        if (document.getElementById(l)) return;
        let P = document.head || document.getElementsByTagName("head")[0],
          I = document.createElement("style");
        (I.id = l),
          (I.type = "text/css"),
          "top" === C && P.firstChild
            ? P.insertBefore(I, P.firstChild)
            : P.appendChild(I),
          I.styleSheet
            ? (I.styleSheet.cssText = e)
            : I.appendChild(document.createTextNode(e)),
          (b[c] = !0);
      }
      let E = async ({
          elementReference: e = null,
          tooltipReference: l = null,
          tooltipArrowReference: c = null,
          place: d = "top",
          offset: g = 10,
          strategy: y = "absolute",
          middlewares: b = [
            (0, m.cv)(Number(g)),
            (0, m.RR)({ fallbackAxisSideDirection: "start" }),
            (0, m.uY)({ padding: 5 }),
          ],
          border: C,
        }) =>
          e && null !== l
            ? c
              ? (b.push((0, m.x7)({ element: c, padding: 5 })),
                (0, m.oo)(e, l, {
                  placement: d,
                  strategy: y,
                  middleware: b,
                }).then(({ x: e, y: l, placement: c, middlewareData: d }) => {
                  var m, g;
                  let y = { left: `${e}px`, top: `${l}px`, border: C },
                    { x: b, y: P } =
                      null !== (m = d.arrow) && void 0 !== m
                        ? m
                        : { x: 0, y: 0 },
                    I =
                      null !==
                        (g = {
                          top: "bottom",
                          right: "left",
                          bottom: "top",
                          left: "right",
                        }[c.split("-")[0]]) && void 0 !== g
                        ? g
                        : "bottom",
                    B = 0;
                  if (C) {
                    let e = `${C}`.match(/(\d+)px/);
                    B = (null == e ? void 0 : e[1]) ? Number(e[1]) : 1;
                  }
                  return {
                    tooltipStyles: y,
                    tooltipArrowStyles: {
                      left: null != b ? `${b}px` : "",
                      top: null != P ? `${P}px` : "",
                      right: "",
                      bottom: "",
                      ...(C && { borderBottom: C, borderRight: C }),
                      [I]: `-${4 + B}px`,
                    },
                    place: c,
                  };
                }))
              : (0, m.oo)(e, l, {
                  placement: "bottom",
                  strategy: y,
                  middleware: b,
                }).then(({ x: e, y: l, placement: c }) => ({
                  tooltipStyles: { left: `${e}px`, top: `${l}px` },
                  tooltipArrowStyles: {},
                  place: c,
                }))
            : { tooltipStyles: {}, tooltipArrowStyles: {}, place: d },
        A = (e, l) =>
          !("CSS" in window && "supports" in window.CSS) ||
          window.CSS.supports(e, l),
        _ = (e, l, c) => {
          let d = null,
            r = function (...m) {
              let n = () => {
                (d = null), c || e.apply(this, m);
              };
              c && !d && (e.apply(this, m), (d = setTimeout(n, l))),
                c || (d && clearTimeout(d), (d = setTimeout(n, l)));
            };
          return (
            (r.cancel = () => {
              d && (clearTimeout(d), (d = null));
            }),
            r
          );
        },
        O = (e) => null !== e && !Array.isArray(e) && "object" == typeof e,
        k = (e, l) => {
          if (e === l) return !0;
          if (Array.isArray(e) && Array.isArray(l))
            return e.length === l.length && e.every((e, c) => k(e, l[c]));
          if (Array.isArray(e) !== Array.isArray(l)) return !1;
          if (!O(e) || !O(l)) return e === l;
          let c = Object.keys(e),
            d = Object.keys(l);
          return c.length === d.length && c.every((c) => k(e[c], l[c]));
        },
        T = (e) => {
          if (!(e instanceof HTMLElement || e instanceof SVGElement)) return !1;
          let l = getComputedStyle(e);
          return ["overflow", "overflow-x", "overflow-y"].some((e) => {
            let c = l.getPropertyValue(e);
            return "auto" === c || "scroll" === c;
          });
        },
        L = (e) => {
          if (!e) return null;
          let l = e.parentElement;
          for (; l; ) {
            if (T(l)) return l;
            l = l.parentElement;
          }
          return document.scrollingElement || document.documentElement;
        },
        C = "undefined" != typeof window ? d.useLayoutEffect : d.useEffect,
        R = (e) => {
          e.current && (clearTimeout(e.current), (e.current = null));
        },
        P = {
          anchorRefs: new Set(),
          activeAnchor: { current: null },
          attach: () => {},
          detach: () => {},
          setActiveAnchor: () => {},
        },
        I = (0, d.createContext)({ getTooltipData: () => P });
      function j(e = "DEFAULT_TOOLTIP_ID") {
        return (0, d.useContext)(I).getTooltipData(e);
      }
      var B = {
          tooltip: "core-styles-module_tooltip__3vRRp",
          fixed: "core-styles-module_fixed__pcSol",
          arrow: "core-styles-module_arrow__cvMwQ",
          noArrow: "core-styles-module_noArrow__xock6",
          clickable: "core-styles-module_clickable__ZuTTB",
          show: "core-styles-module_show__Nt9eE",
          closing: "core-styles-module_closing__sGnxF",
        },
        N = {
          tooltip: "styles-module_tooltip__mnnfp",
          arrow: "styles-module_arrow__K0L3T",
          dark: "styles-module_dark__xNqje",
          light: "styles-module_light__Z6W-X",
          success: "styles-module_success__A2AKt",
          warning: "styles-module_warning__SCK0X",
          error: "styles-module_error__JvumD",
          info: "styles-module_info__BWdHW",
        };
      let q = ({
          forwardRef: e,
          id: l,
          className: c,
          classNameArrow: y,
          variant: b = "dark",
          anchorId: P,
          anchorSelect: I,
          place: F = "top",
          offset: V = 10,
          events: G = ["hover"],
          openOnClick: Q = !1,
          positionStrategy: $ = "absolute",
          middlewares: Z,
          wrapper: Y,
          delayShow: et = 0,
          delayHide: en = 0,
          float: er = !1,
          hidden: ei = !1,
          noArrow: eo = !1,
          clickable: ea = !1,
          closeOnEsc: es = !1,
          closeOnScroll: el = !1,
          closeOnResize: ec = !1,
          openEvents: eu,
          closeEvents: ed,
          globalCloseEvents: ep,
          imperativeModeOnly: eh,
          style: ef,
          position: em,
          afterShow: eg,
          afterHide: ey,
          disableTooltip: eb,
          content: ev,
          contentWrapperRef: ew,
          isOpen: ex,
          defaultIsOpen: e_ = !1,
          setIsOpen: eC,
          activeAnchor: eE,
          setActiveAnchor: eA,
          border: eS,
          opacity: ek,
          arrowColor: eP,
          role: eM = "tooltip",
        }) => {
          var eT;
          let eI = (0, d.useRef)(null),
            ej = (0, d.useRef)(null),
            eO = (0, d.useRef)(null),
            eB = (0, d.useRef)(null),
            eD = (0, d.useRef)(null),
            [eN, eR] = (0, d.useState)({
              tooltipStyles: {},
              tooltipArrowStyles: {},
              place: F,
            }),
            [eF, eL] = (0, d.useState)(!1),
            [eU, ez] = (0, d.useState)(!1),
            [eW, eV] = (0, d.useState)(null),
            eH = (0, d.useRef)(!1),
            eG = (0, d.useRef)(null),
            { anchorRefs: eQ, setActiveAnchor: e$ } = j(l),
            eK = (0, d.useRef)(!1),
            [eZ, eY] = (0, d.useState)([]),
            eX = (0, d.useRef)(!1),
            eJ = Q || G.includes("click"),
            e0 =
              eJ ||
              (null == eu ? void 0 : eu.click) ||
              (null == eu ? void 0 : eu.dblclick) ||
              (null == eu ? void 0 : eu.mousedown),
            e1 = eu
              ? { ...eu }
              : {
                  mouseover: !0,
                  focus: !0,
                  mouseenter: !1,
                  click: !1,
                  dblclick: !1,
                  mousedown: !1,
                };
          !eu &&
            eJ &&
            Object.assign(e1, {
              mouseenter: !1,
              focus: !1,
              mouseover: !1,
              click: !0,
            });
          let e2 = ed
            ? { ...ed }
            : {
                mouseout: !0,
                blur: !0,
                mouseleave: !1,
                click: !1,
                dblclick: !1,
                mouseup: !1,
              };
          !ed &&
            eJ &&
            Object.assign(e2, { mouseleave: !1, blur: !1, mouseout: !1 });
          let e6 = ep
            ? { ...ep }
            : {
                escape: es || !1,
                scroll: el || !1,
                resize: ec || !1,
                clickOutsideAnchor: e0 || !1,
              };
          eh &&
            (Object.assign(e1, {
              mouseover: !1,
              focus: !1,
              mouseenter: !1,
              click: !1,
              dblclick: !1,
              mousedown: !1,
            }),
            Object.assign(e2, {
              mouseout: !1,
              blur: !1,
              mouseleave: !1,
              click: !1,
              dblclick: !1,
              mouseup: !1,
            }),
            Object.assign(e6, {
              escape: !1,
              scroll: !1,
              resize: !1,
              clickOutsideAnchor: !1,
            })),
            C(
              () => (
                (eX.current = !0),
                () => {
                  eX.current = !1;
                }
              ),
              []
            );
          let $e = (e) => {
            eX.current &&
              (e && ez(!0),
              setTimeout(() => {
                eX.current && (null == eC || eC(e), void 0 === ex && eL(e));
              }, 10));
          };
          (0, d.useEffect)(() => {
            if (void 0 === ex) return () => null;
            ex && ez(!0);
            let e = setTimeout(() => {
              eL(ex);
            }, 10);
            return () => {
              clearTimeout(e);
            };
          }, [ex]),
            (0, d.useEffect)(() => {
              if (eF !== eH.current) {
                if ((R(eD), (eH.current = eF), eF)) null == eg || eg();
                else {
                  let e = ((e) => {
                    let l = e.match(/^([\d.]+)(ms|s)$/);
                    if (!l) return 0;
                    let [, c, d] = l;
                    return Number(c) * ("ms" === d ? 1 : 1e3);
                  })(
                    getComputedStyle(document.body).getPropertyValue(
                      "--rt-transition-show-delay"
                    )
                  );
                  eD.current = setTimeout(() => {
                    ez(!1), eV(null), null == ey || ey();
                  }, e + 25);
                }
              }
            }, [eF]);
          let Ie = (e) => {
              eR((l) => (k(l, e) ? l : e));
            },
            je = (e = et) => {
              R(eO),
                eU
                  ? $e(!0)
                  : (eO.current = setTimeout(() => {
                      $e(!0);
                    }, e));
            },
            Be = (e = en) => {
              R(eB),
                (eB.current = setTimeout(() => {
                  eK.current || $e(!1);
                }, e));
            },
            ze = (e) => {
              var l;
              if (!e) return;
              let c =
                null !== (l = e.currentTarget) && void 0 !== l ? l : e.target;
              if (!(null == c ? void 0 : c.isConnected))
                return eA(null), void e$({ current: null });
              et ? je() : $e(!0), eA(c), e$({ current: c }), R(eB);
            },
            De = () => {
              ea ? Be(en || 100) : en ? Be() : $e(!1), R(eO);
            },
            qe = ({ x: e, y: l }) => {
              var c;
              E({
                place:
                  null !== (c = null == eW ? void 0 : eW.place) && void 0 !== c
                    ? c
                    : F,
                offset: V,
                elementReference: {
                  getBoundingClientRect: () => ({
                    x: e,
                    y: l,
                    width: 0,
                    height: 0,
                    top: l,
                    left: e,
                    right: e,
                    bottom: l,
                  }),
                },
                tooltipReference: eI.current,
                tooltipArrowReference: ej.current,
                strategy: $,
                middlewares: Z,
                border: eS,
              }).then((e) => {
                Ie(e);
              });
            },
            He = (e) => {
              if (!e) return;
              let l = { x: e.clientX, y: e.clientY };
              qe(l), (eG.current = l);
            },
            Me = (e) => {
              var l;
              if (!eF) return;
              let c = e.target;
              c.isConnected &&
                (null === (l = eI.current) || void 0 === l || !l.contains(c)) &&
                ([document.querySelector(`[id='${P}']`), ...eZ].some((e) =>
                  null == e ? void 0 : e.contains(c)
                ) ||
                  ($e(!1), R(eO)));
            },
            e3 = _(ze, 50, !0),
            e5 = _(De, 50, !0),
            Ve = (e) => {
              e5.cancel(), e3(e);
            },
            Fe = () => {
              e3.cancel(), e5();
            },
            e4 = (0, d.useCallback)(() => {
              var e, l;
              let c =
                null !== (e = null == eW ? void 0 : eW.position) && void 0 !== e
                  ? e
                  : em;
              c
                ? qe(c)
                : er
                ? eG.current && qe(eG.current)
                : (null == eE ? void 0 : eE.isConnected) &&
                  E({
                    place:
                      null !== (l = null == eW ? void 0 : eW.place) &&
                      void 0 !== l
                        ? l
                        : F,
                    offset: V,
                    elementReference: eE,
                    tooltipReference: eI.current,
                    tooltipArrowReference: ej.current,
                    strategy: $,
                    middlewares: Z,
                    border: eS,
                  }).then((e) => {
                    eX.current && Ie(e);
                  });
            }, [
              eF,
              eE,
              ev,
              ef,
              F,
              null == eW ? void 0 : eW.place,
              V,
              $,
              em,
              null == eW ? void 0 : eW.position,
              er,
            ]);
          (0, d.useEffect)(() => {
            var e, l;
            let c = new Set(eQ);
            eZ.forEach((e) => {
              (null == eb ? void 0 : eb(e)) || c.add({ current: e });
            });
            let d = document.querySelector(`[id='${P}']`);
            !d || (null == eb ? void 0 : eb(d)) || c.add({ current: d });
            let r = () => {
                $e(!1);
              },
              g = L(eE),
              y = L(eI.current);
            e6.scroll &&
              (window.addEventListener("scroll", r),
              null == g || g.addEventListener("scroll", r),
              null == y || y.addEventListener("scroll", r));
            let b = null;
            e6.resize
              ? window.addEventListener("resize", r)
              : eE &&
                eI.current &&
                (b = (0, m.Me)(eE, eI.current, e4, {
                  ancestorResize: !0,
                  elementResize: !0,
                  layoutShift: !0,
                }));
            let s = (e) => {
              "Escape" === e.key && $e(!1);
            };
            e6.escape && window.addEventListener("keydown", s),
              e6.clickOutsideAnchor && window.addEventListener("click", Me);
            let C = [],
              u = (e) =>
                !!(
                  (null == e ? void 0 : e.target) &&
                  (null == eE ? void 0 : eE.contains(e.target))
                ),
              p = (e) => {
                (eF && u(e)) || ze(e);
              },
              v = (e) => {
                eF && u(e) && De();
              },
              I = [
                "mouseover",
                "mouseout",
                "mouseenter",
                "mouseleave",
                "focus",
                "blur",
              ],
              B = ["click", "dblclick", "mousedown", "mouseup"];
            Object.entries(e1).forEach(([e, l]) => {
              l &&
                (I.includes(e)
                  ? C.push({ event: e, listener: Ve })
                  : B.includes(e) && C.push({ event: e, listener: p }));
            }),
              Object.entries(e2).forEach(([e, l]) => {
                l &&
                  (I.includes(e)
                    ? C.push({ event: e, listener: Fe })
                    : B.includes(e) && C.push({ event: e, listener: v }));
              }),
              er && C.push({ event: "pointermove", listener: He });
            let h = () => {
                eK.current = !0;
              },
              w = () => {
                (eK.current = !1), De();
              },
              N = ea && (e2.mouseout || e2.mouseleave);
            return (
              N &&
                (null === (e = eI.current) ||
                  void 0 === e ||
                  e.addEventListener("mouseover", h),
                null === (l = eI.current) ||
                  void 0 === l ||
                  l.addEventListener("mouseout", w)),
              C.forEach(({ event: e, listener: l }) => {
                c.forEach((c) => {
                  var d;
                  null === (d = c.current) ||
                    void 0 === d ||
                    d.addEventListener(e, l);
                });
              }),
              () => {
                var e, l;
                e6.scroll &&
                  (window.removeEventListener("scroll", r),
                  null == g || g.removeEventListener("scroll", r),
                  null == y || y.removeEventListener("scroll", r)),
                  e6.resize
                    ? window.removeEventListener("resize", r)
                    : null == b || b(),
                  e6.clickOutsideAnchor &&
                    window.removeEventListener("click", Me),
                  e6.escape && window.removeEventListener("keydown", s),
                  N &&
                    (null === (e = eI.current) ||
                      void 0 === e ||
                      e.removeEventListener("mouseover", h),
                    null === (l = eI.current) ||
                      void 0 === l ||
                      l.removeEventListener("mouseout", w)),
                  C.forEach(({ event: e, listener: l }) => {
                    c.forEach((c) => {
                      var d;
                      null === (d = c.current) ||
                        void 0 === d ||
                        d.removeEventListener(e, l);
                    });
                  });
              }
            );
          }, [eE, e4, eU, eQ, eZ, eu, ed, ep, eJ, et, en]),
            (0, d.useEffect)(() => {
              var e, c;
              let d =
                null !==
                  (c =
                    null !== (e = null == eW ? void 0 : eW.anchorSelect) &&
                    void 0 !== e
                      ? e
                      : I) && void 0 !== c
                  ? c
                  : "";
              !d && l && (d = `[data-tooltip-id='${l.replace(/'/g, "\\'")}']`);
              let m = new MutationObserver((e) => {
                let c = [],
                  m = [];
                e.forEach((e) => {
                  if (
                    ("attributes" === e.type &&
                      "data-tooltip-id" === e.attributeName &&
                      (e.target.getAttribute("data-tooltip-id") === l
                        ? c.push(e.target)
                        : e.oldValue === l && m.push(e.target)),
                    "childList" === e.type)
                  ) {
                    if (eE) {
                      let l = [...e.removedNodes].filter(
                        (e) => 1 === e.nodeType
                      );
                      if (d)
                        try {
                          m.push(...l.filter((e) => e.matches(d))),
                            m.push(
                              ...l.flatMap((e) => [...e.querySelectorAll(d)])
                            );
                        } catch (e) {}
                      l.some((e) => {
                        var l;
                        return (
                          !!(null === (l = null == e ? void 0 : e.contains) ||
                          void 0 === l
                            ? void 0
                            : l.call(e, eE)) &&
                          (ez(!1), $e(!1), eA(null), R(eO), R(eB), !0)
                        );
                      });
                    }
                    if (d)
                      try {
                        let l = [...e.addedNodes].filter(
                          (e) => 1 === e.nodeType
                        );
                        c.push(...l.filter((e) => e.matches(d))),
                          c.push(
                            ...l.flatMap((e) => [...e.querySelectorAll(d)])
                          );
                      } catch (e) {}
                  }
                }),
                  (c.length || m.length) &&
                    eY((e) => [...e.filter((e) => !m.includes(e)), ...c]);
              });
              return (
                m.observe(document.body, {
                  childList: !0,
                  subtree: !0,
                  attributes: !0,
                  attributeFilter: ["data-tooltip-id"],
                  attributeOldValue: !0,
                }),
                () => {
                  m.disconnect();
                }
              );
            }, [l, I, null == eW ? void 0 : eW.anchorSelect, eE]),
            (0, d.useEffect)(() => {
              e4();
            }, [e4]),
            (0, d.useEffect)(() => {
              if (!(null == ew ? void 0 : ew.current)) return () => null;
              let e = new ResizeObserver(() => {
                setTimeout(() => e4());
              });
              return (
                e.observe(ew.current),
                () => {
                  e.disconnect();
                }
              );
            }, [ev, null == ew ? void 0 : ew.current]),
            (0, d.useEffect)(() => {
              var e;
              let l = document.querySelector(`[id='${P}']`),
                c = [...eZ, l];
              (eE && c.includes(eE)) ||
                eA(null !== (e = eZ[0]) && void 0 !== e ? e : l);
            }, [P, eZ, eE]),
            (0, d.useEffect)(
              () => (
                e_ && $e(!0),
                () => {
                  R(eO), R(eB);
                }
              ),
              []
            ),
            (0, d.useEffect)(() => {
              var e;
              let c =
                null !== (e = null == eW ? void 0 : eW.anchorSelect) &&
                void 0 !== e
                  ? e
                  : I;
              if (
                (!c &&
                  l &&
                  (c = `[data-tooltip-id='${l.replace(/'/g, "\\'")}']`),
                c)
              )
                try {
                  let e = Array.from(document.querySelectorAll(c));
                  eY(e);
                } catch (e) {
                  eY([]);
                }
            }, [l, I, null == eW ? void 0 : eW.anchorSelect]),
            (0, d.useEffect)(() => {
              eO.current && (R(eO), je(et));
            }, [et]);
          let e7 =
              null !== (eT = null == eW ? void 0 : eW.content) && void 0 !== eT
                ? eT
                : ev,
            e8 = eF && Object.keys(eN.tooltipStyles).length > 0;
          return (
            (0, d.useImperativeHandle)(e, () => ({
              open: (e) => {
                if (null == e ? void 0 : e.anchorSelect)
                  try {
                    document.querySelector(e.anchorSelect);
                  } catch (l) {
                    return void console.warn(
                      `[react-tooltip] "${e.anchorSelect}" is not a valid CSS selector`
                    );
                  }
                eV(null != e ? e : null),
                  (null == e ? void 0 : e.delay) ? je(e.delay) : $e(!0);
              },
              close: (e) => {
                (null == e ? void 0 : e.delay) ? Be(e.delay) : $e(!1);
              },
              activeAnchor: eE,
              place: eN.place,
              isOpen: !!(eU && !ei && e7 && e8),
            })),
            eU && !ei && e7
              ? d.createElement(
                  Y,
                  {
                    id: l,
                    role: eM,
                    className: g(
                      "react-tooltip",
                      B.tooltip,
                      N.tooltip,
                      N[b],
                      c,
                      `react-tooltip__place-${eN.place}`,
                      B[e8 ? "show" : "closing"],
                      e8 ? "react-tooltip__show" : "react-tooltip__closing",
                      "fixed" === $ && B.fixed,
                      ea && B.clickable
                    ),
                    onTransitionEnd: (e) => {
                      R(eD),
                        eF ||
                          "opacity" !== e.propertyName ||
                          (ez(!1), eV(null), null == ey || ey());
                    },
                    style: {
                      ...ef,
                      ...eN.tooltipStyles,
                      opacity: void 0 !== ek && e8 ? ek : void 0,
                    },
                    ref: eI,
                  },
                  e7,
                  d.createElement(Y, {
                    className: g(
                      "react-tooltip-arrow",
                      B.arrow,
                      N.arrow,
                      y,
                      eo && B.noArrow
                    ),
                    style: {
                      ...eN.tooltipArrowStyles,
                      background: eP
                        ? `linear-gradient(to right bottom, transparent 50%, ${eP} 50%)`
                        : void 0,
                    },
                    ref: ej,
                  })
                )
              : null
          );
        },
        H = ({ content: e }) =>
          d.createElement("span", { dangerouslySetInnerHTML: { __html: e } }),
        F = d.forwardRef(
          (
            {
              id: e,
              anchorId: l,
              anchorSelect: c,
              content: m,
              html: y,
              render: b,
              className: C,
              classNameArrow: P,
              variant: I = "dark",
              place: B = "top",
              offset: N = 10,
              wrapper: F = "div",
              children: V = null,
              events: G = ["hover"],
              openOnClick: Q = !1,
              positionStrategy: $ = "absolute",
              middlewares: Z,
              delayShow: Y = 0,
              delayHide: et = 0,
              float: en = !1,
              hidden: er = !1,
              noArrow: ei = !1,
              clickable: eo = !1,
              closeOnEsc: ea = !1,
              closeOnScroll: es = !1,
              closeOnResize: el = !1,
              openEvents: ec,
              closeEvents: eu,
              globalCloseEvents: ed,
              imperativeModeOnly: ep = !1,
              style: eh,
              position: ef,
              isOpen: em,
              defaultIsOpen: eg = !1,
              disableStyleInjection: ey = !1,
              border: eb,
              opacity: ev,
              arrowColor: ew,
              setIsOpen: ex,
              afterShow: e_,
              afterHide: eC,
              disableTooltip: eE,
              role: eA = "tooltip",
            },
            eS
          ) => {
            let [ek, eP] = (0, d.useState)(m),
              [eM, eT] = (0, d.useState)(y),
              [eI, ej] = (0, d.useState)(B),
              [eO, eB] = (0, d.useState)(I),
              [eD, eN] = (0, d.useState)(N),
              [eR, eF] = (0, d.useState)(Y),
              [eL, eU] = (0, d.useState)(et),
              [ez, eW] = (0, d.useState)(en),
              [eV, eH] = (0, d.useState)(er),
              [eG, eQ] = (0, d.useState)(F),
              [e$, eK] = (0, d.useState)(G),
              [eZ, eY] = (0, d.useState)($),
              [eX, eJ] = (0, d.useState)(null),
              [e0, e1] = (0, d.useState)(null),
              e2 = (0, d.useRef)(ey),
              { anchorRefs: e6, activeAnchor: e3 } = j(e),
              Re = (e) =>
                null == e
                  ? void 0
                  : e.getAttributeNames().reduce((l, c) => {
                      var d;
                      return (
                        c.startsWith("data-tooltip-") &&
                          (l[c.replace(/^data-tooltip-/, "")] =
                            null !==
                              (d = null == e ? void 0 : e.getAttribute(c)) &&
                            void 0 !== d
                              ? d
                              : null),
                        l
                      );
                    }, {}),
              xe = (e) => {
                let l = {
                  place: (e) => {
                    ej(null != e ? e : B);
                  },
                  content: (e) => {
                    eP(null != e ? e : m);
                  },
                  html: (e) => {
                    eT(null != e ? e : y);
                  },
                  variant: (e) => {
                    eB(null != e ? e : I);
                  },
                  offset: (e) => {
                    eN(null === e ? N : Number(e));
                  },
                  wrapper: (e) => {
                    eQ(null != e ? e : F);
                  },
                  events: (e) => {
                    let l = null == e ? void 0 : e.split(" ");
                    eK(null != l ? l : G);
                  },
                  "position-strategy": (e) => {
                    eY(null != e ? e : $);
                  },
                  "delay-show": (e) => {
                    eF(null === e ? Y : Number(e));
                  },
                  "delay-hide": (e) => {
                    eU(null === e ? et : Number(e));
                  },
                  float: (e) => {
                    eW(null === e ? en : "true" === e);
                  },
                  hidden: (e) => {
                    eH(null === e ? er : "true" === e);
                  },
                  "class-name": (e) => {
                    eJ(e);
                  },
                };
                Object.values(l).forEach((e) => e(null)),
                  Object.entries(e).forEach(([e, c]) => {
                    var d;
                    null === (d = l[e]) || void 0 === d || d.call(l, c);
                  });
              };
            (0, d.useEffect)(() => {
              eP(m);
            }, [m]),
              (0, d.useEffect)(() => {
                eT(y);
              }, [y]),
              (0, d.useEffect)(() => {
                ej(B);
              }, [B]),
              (0, d.useEffect)(() => {
                eB(I);
              }, [I]),
              (0, d.useEffect)(() => {
                eN(N);
              }, [N]),
              (0, d.useEffect)(() => {
                eF(Y);
              }, [Y]),
              (0, d.useEffect)(() => {
                eU(et);
              }, [et]),
              (0, d.useEffect)(() => {
                eW(en);
              }, [en]),
              (0, d.useEffect)(() => {
                eH(er);
              }, [er]),
              (0, d.useEffect)(() => {
                eY($);
              }, [$]),
              (0, d.useEffect)(() => {
                e2.current !== ey &&
                  console.warn(
                    "[react-tooltip] Do not change `disableStyleInjection` dynamically."
                  );
              }, [ey]),
              (0, d.useEffect)(() => {
                "undefined" != typeof window &&
                  window.dispatchEvent(
                    new CustomEvent("react-tooltip-inject-styles", {
                      detail: { disableCore: "core" === ey, disableBase: ey },
                    })
                  );
              }, []),
              (0, d.useEffect)(() => {
                var d;
                let m = new Set(e6),
                  g = c;
                if (
                  (!g &&
                    e &&
                    (g = `[data-tooltip-id='${e.replace(/'/g, "\\'")}']`),
                  g)
                )
                  try {
                    document.querySelectorAll(g).forEach((e) => {
                      m.add({ current: e });
                    });
                  } catch (e) {
                    console.warn(
                      `[react-tooltip] "${g}" is not a valid CSS selector`
                    );
                  }
                let y = document.querySelector(`[id='${l}']`);
                if ((y && m.add({ current: y }), !m.size)) return () => null;
                let b =
                    null !== (d = null != e0 ? e0 : y) && void 0 !== d
                      ? d
                      : e3.current,
                  C = new MutationObserver((e) => {
                    e.forEach((e) => {
                      var l;
                      if (
                        !b ||
                        "attributes" !== e.type ||
                        !(null === (l = e.attributeName) || void 0 === l
                          ? void 0
                          : l.startsWith("data-tooltip-"))
                      )
                        return;
                      let c = Re(b);
                      xe(c);
                    });
                  });
                if (b) {
                  let e = Re(b);
                  xe(e),
                    C.observe(b, {
                      attributes: !0,
                      childList: !1,
                      subtree: !1,
                    });
                }
                return () => {
                  C.disconnect();
                };
              }, [e6, e3, e0, l, c]),
              (0, d.useEffect)(() => {
                (null == eh ? void 0 : eh.border) &&
                  console.warn(
                    "[react-tooltip] Do not set `style.border`. Use `border` prop instead."
                  ),
                  eb &&
                    !A("border", `${eb}`) &&
                    console.warn(
                      `[react-tooltip] "${eb}" is not a valid \`border\`.`
                    ),
                  (null == eh ? void 0 : eh.opacity) &&
                    console.warn(
                      "[react-tooltip] Do not set `style.opacity`. Use `opacity` prop instead."
                    ),
                  ev &&
                    !A("opacity", `${ev}`) &&
                    console.warn(
                      `[react-tooltip] "${ev}" is not a valid \`opacity\`.`
                    );
              }, []);
            let e5 = V,
              e4 = (0, d.useRef)(null);
            if (b) {
              let e = b({
                content:
                  (null == e0
                    ? void 0
                    : e0.getAttribute("data-tooltip-content")) ||
                  ek ||
                  null,
                activeAnchor: e0,
              });
              e5 = e
                ? d.createElement(
                    "div",
                    { ref: e4, className: "react-tooltip-content-wrapper" },
                    e
                  )
                : null;
            } else ek && (e5 = ek);
            eM && (e5 = d.createElement(H, { content: eM }));
            let e7 = {
              forwardRef: eS,
              id: e,
              anchorId: l,
              anchorSelect: c,
              className: g(C, eX),
              classNameArrow: P,
              content: e5,
              contentWrapperRef: e4,
              place: eI,
              variant: eO,
              offset: eD,
              wrapper: eG,
              events: e$,
              openOnClick: Q,
              positionStrategy: eZ,
              middlewares: Z,
              delayShow: eR,
              delayHide: eL,
              float: ez,
              hidden: eV,
              noArrow: ei,
              clickable: eo,
              closeOnEsc: ea,
              closeOnScroll: es,
              closeOnResize: el,
              openEvents: ec,
              closeEvents: eu,
              globalCloseEvents: ed,
              imperativeModeOnly: ep,
              style: eh,
              position: ef,
              isOpen: em,
              defaultIsOpen: eg,
              border: eb,
              opacity: ev,
              arrowColor: ew,
              setIsOpen: ex,
              afterShow: e_,
              afterHide: eC,
              disableTooltip: eE,
              activeAnchor: e0,
              setActiveAnchor: (e) => e1(e),
              role: eA,
            };
            return d.createElement(q, { ...e7 });
          }
        );
      "undefined" != typeof window &&
        window.addEventListener("react-tooltip-inject-styles", (e) => {
          e.detail.disableCore ||
            S({
              css: ":root{--rt-color-white:#fff;--rt-color-dark:#222;--rt-color-success:#8dc572;--rt-color-error:#be6464;--rt-color-warning:#f0ad4e;--rt-color-info:#337ab7;--rt-opacity:0.9;--rt-transition-show-delay:0.15s;--rt-transition-closing-delay:0.15s}.core-styles-module_tooltip__3vRRp{position:absolute;top:0;left:0;pointer-events:none;opacity:0;will-change:opacity}.core-styles-module_fixed__pcSol{position:fixed}.core-styles-module_arrow__cvMwQ{position:absolute;background:inherit}.core-styles-module_noArrow__xock6{display:none}.core-styles-module_clickable__ZuTTB{pointer-events:auto}.core-styles-module_show__Nt9eE{opacity:var(--rt-opacity);transition:opacity var(--rt-transition-show-delay)ease-out}.core-styles-module_closing__sGnxF{opacity:0;transition:opacity var(--rt-transition-closing-delay)ease-in}",
              type: "core",
            }),
            e.detail.disableBase ||
              S({
                css: `
.styles-module_tooltip__mnnfp{padding:8px 16px;border-radius:3px;font-size:90%;width:max-content}.styles-module_arrow__K0L3T{width:8px;height:8px}[class*='react-tooltip__place-top']>.styles-module_arrow__K0L3T{transform:rotate(45deg)}[class*='react-tooltip__place-right']>.styles-module_arrow__K0L3T{transform:rotate(135deg)}[class*='react-tooltip__place-bottom']>.styles-module_arrow__K0L3T{transform:rotate(225deg)}[class*='react-tooltip__place-left']>.styles-module_arrow__K0L3T{transform:rotate(315deg)}.styles-module_dark__xNqje{background:var(--rt-color-dark);color:var(--rt-color-white)}.styles-module_light__Z6W-X{background-color:var(--rt-color-white);color:var(--rt-color-dark)}.styles-module_success__A2AKt{background-color:var(--rt-color-success);color:var(--rt-color-white)}.styles-module_warning__SCK0X{background-color:var(--rt-color-warning);color:var(--rt-color-white)}.styles-module_error__JvumD{background-color:var(--rt-color-error);color:var(--rt-color-white)}.styles-module_info__BWdHW{background-color:var(--rt-color-info);color:var(--rt-color-white)}`,
                type: "base",
              });
        });
    },
    91367: function (e, l, c) {
      "use strict";
      function formatProdErrorMessage(e) {
        return `Minified Redux error #${e}; visit https://redux.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `;
      }
      c.d(l, {
        LG: function () {
          return isAction;
        },
        MT: function () {
          return createStore;
        },
        PO: function () {
          return isPlainObject;
        },
        UY: function () {
          return combineReducers;
        },
        md: function () {
          return applyMiddleware;
        },
        qC: function () {
          return compose;
        },
      });
      var d =
          ("function" == typeof Symbol && Symbol.observable) || "@@observable",
        randomString = () =>
          Math.random().toString(36).substring(7).split("").join("."),
        m = {
          INIT: `@@redux/INIT${randomString()}`,
          REPLACE: `@@redux/REPLACE${randomString()}`,
          PROBE_UNKNOWN_ACTION: () =>
            `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`,
        };
      function isPlainObject(e) {
        if ("object" != typeof e || null === e) return !1;
        let l = e;
        for (; null !== Object.getPrototypeOf(l); )
          l = Object.getPrototypeOf(l);
        return (
          Object.getPrototypeOf(e) === l || null === Object.getPrototypeOf(e)
        );
      }
      function createStore(e, l, c) {
        if ("function" != typeof e) throw Error(formatProdErrorMessage(2));
        if (
          ("function" == typeof l && "function" == typeof c) ||
          ("function" == typeof c && "function" == typeof arguments[3])
        )
          throw Error(formatProdErrorMessage(0));
        if (
          ("function" == typeof l && void 0 === c && ((c = l), (l = void 0)),
          void 0 !== c)
        ) {
          if ("function" != typeof c) throw Error(formatProdErrorMessage(1));
          return c(createStore)(e, l);
        }
        let g = e,
          y = l,
          b = new Map(),
          C = b,
          P = 0,
          I = !1;
        function ensureCanMutateNextListeners() {
          C === b &&
            ((C = new Map()),
            b.forEach((e, l) => {
              C.set(l, e);
            }));
        }
        function getState() {
          if (I) throw Error(formatProdErrorMessage(3));
          return y;
        }
        function subscribe(e) {
          if ("function" != typeof e) throw Error(formatProdErrorMessage(4));
          if (I) throw Error(formatProdErrorMessage(5));
          let l = !0;
          ensureCanMutateNextListeners();
          let c = P++;
          return (
            C.set(c, e),
            function () {
              if (l) {
                if (I) throw Error(formatProdErrorMessage(6));
                (l = !1),
                  ensureCanMutateNextListeners(),
                  C.delete(c),
                  (b = null);
              }
            }
          );
        }
        function dispatch(e) {
          if (!isPlainObject(e)) throw Error(formatProdErrorMessage(7));
          if (void 0 === e.type) throw Error(formatProdErrorMessage(8));
          if ("string" != typeof e.type)
            throw Error(formatProdErrorMessage(17));
          if (I) throw Error(formatProdErrorMessage(9));
          try {
            (I = !0), (y = g(y, e));
          } finally {
            I = !1;
          }
          let l = (b = C);
          return (
            l.forEach((e) => {
              e();
            }),
            e
          );
        }
        return (
          dispatch({ type: m.INIT }),
          {
            dispatch,
            subscribe,
            getState,
            replaceReducer: function (e) {
              if ("function" != typeof e)
                throw Error(formatProdErrorMessage(10));
              (g = e), dispatch({ type: m.REPLACE });
            },
            [d]: function () {
              return {
                subscribe(e) {
                  if ("object" != typeof e || null === e)
                    throw Error(formatProdErrorMessage(11));
                  function observeState() {
                    e.next && e.next(getState());
                  }
                  observeState();
                  let l = subscribe(observeState);
                  return { unsubscribe: l };
                },
                [d]() {
                  return this;
                },
              };
            },
          }
        );
      }
      function combineReducers(e) {
        let l;
        let c = Object.keys(e),
          d = {};
        for (let l = 0; l < c.length; l++) {
          let m = c[l];
          "function" == typeof e[m] && (d[m] = e[m]);
        }
        let g = Object.keys(d);
        try {
          !(function (e) {
            Object.keys(e).forEach((l) => {
              let c = e[l],
                d = c(void 0, { type: m.INIT });
              if (void 0 === d) throw Error(formatProdErrorMessage(12));
              if (void 0 === c(void 0, { type: m.PROBE_UNKNOWN_ACTION() }))
                throw Error(formatProdErrorMessage(13));
            });
          })(d);
        } catch (e) {
          l = e;
        }
        return function (e = {}, c) {
          if (l) throw l;
          let m = !1,
            y = {};
          for (let l = 0; l < g.length; l++) {
            let b = g[l],
              C = d[b],
              P = e[b],
              I = C(P, c);
            if (void 0 === I)
              throw (c && c.type, Error(formatProdErrorMessage(14)));
            (y[b] = I), (m = m || I !== P);
          }
          return (m = m || g.length !== Object.keys(e).length) ? y : e;
        };
      }
      function compose(...e) {
        return 0 === e.length
          ? (e) => e
          : 1 === e.length
          ? e[0]
          : e.reduce(
              (e, l) =>
                (...c) =>
                  e(l(...c))
            );
      }
      function applyMiddleware(...e) {
        return (l) => (c, d) => {
          let m = l(c, d),
            dispatch = () => {
              throw Error(formatProdErrorMessage(15));
            },
            g = {
              getState: m.getState,
              dispatch: (e, ...l) => dispatch(e, ...l),
            },
            y = e.map((e) => e(g));
          return (dispatch = compose(...y)(m.dispatch)), { ...m, dispatch };
        };
      }
      function isAction(e) {
        return isPlainObject(e) && "type" in e && "string" == typeof e.type;
      }
    },
    73649: function (e, l, c) {
      "use strict";
      c.d(l, {
        P1: function () {
          return N;
        },
        kO: function () {
          return weakMapMemoize;
        },
      });
      var ensureIsArray = (e) => (Array.isArray(e) ? e : [e]),
        d = 0,
        m = class {
          revision = d;
          _value;
          _lastValue;
          _isEqual = tripleEq;
          constructor(e, l = tripleEq) {
            (this._value = this._lastValue = e), (this._isEqual = l);
          }
          get value() {
            return this._value;
          }
          set value(e) {
            this.value !== e && ((this._value = e), (this.revision = ++d));
          }
        };
      function tripleEq(e, l) {
        return e === l;
      }
      function getValue(e) {
        return e instanceof m || console.warn("Not a valid cell! ", e), e.value;
      }
      var neverEq = (e, l) => !1;
      function createTag() {
        return (function (e, l = tripleEq) {
          return new m(null, l);
        })(0, neverEq);
      }
      var consumeCollection = (e) => {
        let l = e.collectionTag;
        null === l && (l = e.collectionTag = createTag()), getValue(l);
      };
      Symbol();
      var g = 0,
        y = Object.getPrototypeOf({}),
        b = class {
          constructor(e) {
            (this.value = e), (this.value = e), (this.tag.value = e);
          }
          proxy = new Proxy(this, C);
          tag = createTag();
          tags = {};
          children = {};
          collectionTag = null;
          id = g++;
        },
        C = {
          get(e, l) {
            let c = (function () {
              let { value: c } = e,
                d = Reflect.get(c, l);
              if ("symbol" == typeof l || l in y) return d;
              if ("object" == typeof d && null !== d) {
                let c = e.children[l];
                return (
                  void 0 === c &&
                    (c = e.children[l] =
                      Array.isArray(d) ? new P(d) : new b(d)),
                  c.tag && getValue(c.tag),
                  c.proxy
                );
              }
              {
                let c = e.tags[l];
                return (
                  void 0 === c && ((c = e.tags[l] = createTag()).value = d),
                  getValue(c),
                  d
                );
              }
            })();
            return c;
          },
          ownKeys: (e) => (consumeCollection(e), Reflect.ownKeys(e.value)),
          getOwnPropertyDescriptor: (e, l) =>
            Reflect.getOwnPropertyDescriptor(e.value, l),
          has: (e, l) => Reflect.has(e.value, l),
        },
        P = class {
          constructor(e) {
            (this.value = e), (this.value = e), (this.tag.value = e);
          }
          proxy = new Proxy([this], I);
          tag = createTag();
          tags = {};
          children = {};
          collectionTag = null;
          id = g++;
        },
        I = {
          get: ([e], l) => (
            "length" === l && consumeCollection(e), C.get(e, l)
          ),
          ownKeys: ([e]) => C.ownKeys(e),
          getOwnPropertyDescriptor: ([e], l) =>
            C.getOwnPropertyDescriptor(e, l),
          has: ([e], l) => C.has(e, l),
        },
        B =
          "undefined" != typeof WeakRef
            ? WeakRef
            : class {
                constructor(e) {
                  this.value = e;
                }
                deref() {
                  return this.value;
                }
              };
      function createCacheNode() {
        return { s: 0, v: void 0, o: null, p: null };
      }
      function weakMapMemoize(e, l = {}) {
        let c,
          d = createCacheNode(),
          { resultEqualityCheck: m } = l,
          g = 0;
        function memoized() {
          let l,
            y = d,
            { length: b } = arguments;
          for (let e = 0; e < b; e++) {
            let l = arguments[e];
            if (
              "function" == typeof l ||
              ("object" == typeof l && null !== l)
            ) {
              let e = y.o;
              null === e && (y.o = e = new WeakMap());
              let c = e.get(l);
              void 0 === c ? ((y = createCacheNode()), e.set(l, y)) : (y = c);
            } else {
              let e = y.p;
              null === e && (y.p = e = new Map());
              let c = e.get(l);
              void 0 === c ? ((y = createCacheNode()), e.set(l, y)) : (y = c);
            }
          }
          let C = y;
          if (1 === y.s) l = y.v;
          else if (((l = e.apply(null, arguments)), g++, m)) {
            let e = c?.deref?.() ?? c;
            null != e && m(e, l) && ((l = e), 0 !== g && g--);
            let d =
              ("object" == typeof l && null !== l) || "function" == typeof l;
            c = d ? new B(l) : l;
          }
          return (C.s = 1), (C.v = l), l;
        }
        return (
          (memoized.clearCache = () => {
            (d = createCacheNode()), memoized.resetResultsCount();
          }),
          (memoized.resultsCount = () => g),
          (memoized.resetResultsCount = () => {
            g = 0;
          }),
          memoized
        );
      }
      var N = (function (e, ...l) {
          let c =
              "function" == typeof e ? { memoize: e, memoizeOptions: l } : e,
            createSelector2 = (...e) => {
              let l,
                d = 0,
                m = 0,
                g = {},
                y = e.pop();
              "object" == typeof y && ((g = y), (y = e.pop())),
                (function (
                  e,
                  l = `expected a function, instead received ${typeof e}`
                ) {
                  if ("function" != typeof e) throw TypeError(l);
                })(
                  y,
                  `createSelector expects an output function after the inputs, but received: [${typeof y}]`
                );
              let b = { ...c, ...g },
                {
                  memoize: C,
                  memoizeOptions: P = [],
                  argsMemoize: I = weakMapMemoize,
                  argsMemoizeOptions: B = [],
                  devModeChecks: N = {},
                } = b,
                F = ensureIsArray(P),
                V = ensureIsArray(B),
                G = (function (e) {
                  let l = Array.isArray(e[0]) ? e[0] : e;
                  return (
                    !(function (
                      e,
                      l = "expected all items to be functions, instead received the following types: "
                    ) {
                      if (!e.every((e) => "function" == typeof e)) {
                        let c = e
                          .map((e) =>
                            "function" == typeof e
                              ? `function ${e.name || "unnamed"}()`
                              : typeof e
                          )
                          .join(", ");
                        throw TypeError(`${l}[${c}]`);
                      }
                    })(
                      l,
                      "createSelector expects all input-selectors to be functions, but received the following types: "
                    ),
                    l
                  );
                })(e),
                Q = C(function () {
                  return d++, y.apply(null, arguments);
                }, ...F),
                $ = I(function () {
                  m++;
                  let e = (function (e, l) {
                    let c = [],
                      { length: d } = e;
                    for (let m = 0; m < d; m++) c.push(e[m].apply(null, l));
                    return c;
                  })(G, arguments);
                  return (l = Q.apply(null, e));
                }, ...V);
              return Object.assign($, {
                resultFunc: y,
                memoizedResultFunc: Q,
                dependencies: G,
                dependencyRecomputations: () => m,
                resetDependencyRecomputations: () => {
                  m = 0;
                },
                lastResult: () => l,
                recomputations: () => d,
                resetRecomputations: () => {
                  d = 0;
                },
                memoize: C,
                argsMemoize: I,
              });
            };
          return (
            Object.assign(createSelector2, {
              withTypes: () => createSelector2,
            }),
            createSelector2
          );
        })(weakMapMemoize),
        F = Object.assign(
          (e, l = N) => {
            !(function (
              e,
              l = `expected an object, instead received ${typeof e}`
            ) {
              if ("object" != typeof e) throw TypeError(l);
            })(
              e,
              `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof e}`
            );
            let c = Object.keys(e),
              d = c.map((l) => e[l]),
              m = l(d, (...e) => e.reduce((e, l, d) => ((e[c[d]] = l), e), {}));
            return m;
          },
          { withTypes: () => F }
        );
    },
    5761: function (e, l, c) {
      "use strict";
      c.d(l, {
        m6: function () {
          return G;
        },
      });
      let createClassGroupUtils = (e) => {
          let l = createClassMap(e),
            { conflictingClassGroups: c, conflictingClassGroupModifiers: d } =
              e;
          return {
            getClassGroupId: (e) => {
              let c = e.split("-");
              return (
                "" === c[0] && 1 !== c.length && c.shift(),
                getGroupRecursive(c, l) || getGroupIdForArbitraryProperty(e)
              );
            },
            getConflictingClassGroupIds: (e, l) => {
              let m = c[e] || [];
              return l && d[e] ? [...m, ...d[e]] : m;
            },
          };
        },
        getGroupRecursive = (e, l) => {
          if (0 === e.length) return l.classGroupId;
          let c = e[0],
            d = l.nextPart.get(c),
            m = d ? getGroupRecursive(e.slice(1), d) : void 0;
          if (m) return m;
          if (0 === l.validators.length) return;
          let g = e.join("-");
          return l.validators.find(({ validator: e }) => e(g))?.classGroupId;
        },
        d = /^\[(.+)\]$/,
        getGroupIdForArbitraryProperty = (e) => {
          if (d.test(e)) {
            let l = d.exec(e)[1],
              c = l?.substring(0, l.indexOf(":"));
            if (c) return "arbitrary.." + c;
          }
        },
        createClassMap = (e) => {
          let { theme: l, prefix: c } = e,
            d = { nextPart: new Map(), validators: [] },
            m = getPrefixedClassGroupEntries(Object.entries(e.classGroups), c);
          return (
            m.forEach(([e, c]) => {
              processClassesRecursively(c, d, e, l);
            }),
            d
          );
        },
        processClassesRecursively = (e, l, c, d) => {
          e.forEach((e) => {
            if ("string" == typeof e) {
              let d = "" === e ? l : getPart(l, e);
              d.classGroupId = c;
              return;
            }
            if ("function" == typeof e) {
              if (isThemeGetter(e)) {
                processClassesRecursively(e(d), l, c, d);
                return;
              }
              l.validators.push({ validator: e, classGroupId: c });
              return;
            }
            Object.entries(e).forEach(([e, m]) => {
              processClassesRecursively(m, getPart(l, e), c, d);
            });
          });
        },
        getPart = (e, l) => {
          let c = e;
          return (
            l.split("-").forEach((e) => {
              c.nextPart.has(e) ||
                c.nextPart.set(e, { nextPart: new Map(), validators: [] }),
                (c = c.nextPart.get(e));
            }),
            c
          );
        },
        isThemeGetter = (e) => e.isThemeGetter,
        getPrefixedClassGroupEntries = (e, l) =>
          l
            ? e.map(([e, c]) => {
                let d = c.map((e) =>
                  "string" == typeof e
                    ? l + e
                    : "object" == typeof e
                    ? Object.fromEntries(
                        Object.entries(e).map(([e, c]) => [l + e, c])
                      )
                    : e
                );
                return [e, d];
              })
            : e,
        createLruCache = (e) => {
          if (e < 1) return { get: () => void 0, set: () => {} };
          let l = 0,
            c = new Map(),
            d = new Map(),
            update = (m, g) => {
              c.set(m, g), ++l > e && ((l = 0), (d = c), (c = new Map()));
            };
          return {
            get(e) {
              let l = c.get(e);
              return void 0 !== l
                ? l
                : void 0 !== (l = d.get(e))
                ? (update(e, l), l)
                : void 0;
            },
            set(e, l) {
              c.has(e) ? c.set(e, l) : update(e, l);
            },
          };
        },
        createParseClassName = (e) => {
          let { separator: l, experimentalParseClassName: c } = e,
            d = 1 === l.length,
            m = l[0],
            g = l.length,
            parseClassName = (e) => {
              let c;
              let y = [],
                b = 0,
                C = 0;
              for (let P = 0; P < e.length; P++) {
                let I = e[P];
                if (0 === b) {
                  if (I === m && (d || e.slice(P, P + g) === l)) {
                    y.push(e.slice(C, P)), (C = P + g);
                    continue;
                  }
                  if ("/" === I) {
                    c = P;
                    continue;
                  }
                }
                "[" === I ? b++ : "]" === I && b--;
              }
              let P = 0 === y.length ? e : e.substring(C),
                I = P.startsWith("!"),
                B = I ? P.substring(1) : P,
                N = c && c > C ? c - C : void 0;
              return {
                modifiers: y,
                hasImportantModifier: I,
                baseClassName: B,
                maybePostfixModifierPosition: N,
              };
            };
          return c
            ? (e) => c({ className: e, parseClassName })
            : parseClassName;
        },
        sortModifiers = (e) => {
          if (e.length <= 1) return e;
          let l = [],
            c = [];
          return (
            e.forEach((e) => {
              let d = "[" === e[0];
              d ? (l.push(...c.sort(), e), (c = [])) : c.push(e);
            }),
            l.push(...c.sort()),
            l
          );
        },
        createConfigUtils = (e) => ({
          cache: createLruCache(e.cacheSize),
          parseClassName: createParseClassName(e),
          ...createClassGroupUtils(e),
        }),
        m = /\s+/,
        mergeClassList = (e, l) => {
          let {
              parseClassName: c,
              getClassGroupId: d,
              getConflictingClassGroupIds: g,
            } = l,
            y = [],
            b = e.trim().split(m),
            C = "";
          for (let e = b.length - 1; e >= 0; e -= 1) {
            let l = b[e],
              {
                modifiers: m,
                hasImportantModifier: P,
                baseClassName: I,
                maybePostfixModifierPosition: B,
              } = c(l),
              N = !!B,
              F = d(N ? I.substring(0, B) : I);
            if (!F) {
              if (!N || !(F = d(I))) {
                C = l + (C.length > 0 ? " " + C : C);
                continue;
              }
              N = !1;
            }
            let V = sortModifiers(m).join(":"),
              G = P ? V + "!" : V,
              Q = G + F;
            if (y.includes(Q)) continue;
            y.push(Q);
            let $ = g(F, N);
            for (let e = 0; e < $.length; ++e) {
              let l = $[e];
              y.push(G + l);
            }
            C = l + (C.length > 0 ? " " + C : C);
          }
          return C;
        };
      function twJoin() {
        let e,
          l,
          c = 0,
          d = "";
        for (; c < arguments.length; )
          (e = arguments[c++]) &&
            (l = toValue(e)) &&
            (d && (d += " "), (d += l));
        return d;
      }
      let toValue = (e) => {
          let l;
          if ("string" == typeof e) return e;
          let c = "";
          for (let d = 0; d < e.length; d++)
            e[d] && (l = toValue(e[d])) && (c && (c += " "), (c += l));
          return c;
        },
        fromTheme = (e) => {
          let themeGetter = (l) => l[e] || [];
          return (themeGetter.isThemeGetter = !0), themeGetter;
        },
        g = /^\[(?:([a-z-]+):)?(.+)\]$/i,
        y = /^\d+\/\d+$/,
        b = new Set(["px", "full", "screen"]),
        C = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/,
        P =
          /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/,
        I = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/,
        B = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/,
        N =
          /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/,
        isLength = (e) => isNumber(e) || b.has(e) || y.test(e),
        isArbitraryLength = (e) =>
          getIsArbitraryValue(e, "length", isLengthOnly),
        isNumber = (e) => !!e && !Number.isNaN(Number(e)),
        isArbitraryNumber = (e) => getIsArbitraryValue(e, "number", isNumber),
        isInteger = (e) => !!e && Number.isInteger(Number(e)),
        isPercent = (e) => e.endsWith("%") && isNumber(e.slice(0, -1)),
        isArbitraryValue = (e) => g.test(e),
        isTshirtSize = (e) => C.test(e),
        F = new Set(["length", "size", "percentage"]),
        isArbitrarySize = (e) => getIsArbitraryValue(e, F, isNever),
        isArbitraryPosition = (e) =>
          getIsArbitraryValue(e, "position", isNever),
        V = new Set(["image", "url"]),
        isArbitraryImage = (e) => getIsArbitraryValue(e, V, isImage),
        isArbitraryShadow = (e) => getIsArbitraryValue(e, "", isShadow),
        isAny = () => !0,
        getIsArbitraryValue = (e, l, c) => {
          let d = g.exec(e);
          return (
            !!d &&
            (d[1] ? ("string" == typeof l ? d[1] === l : l.has(d[1])) : c(d[2]))
          );
        },
        isLengthOnly = (e) => P.test(e) && !I.test(e),
        isNever = () => !1,
        isShadow = (e) => B.test(e),
        isImage = (e) => N.test(e),
        G = (function (e) {
          let l, c, d;
          let functionToCall = function (m) {
            let g = [].reduce((e, l) => l(e), e());
            return (
              (c = (l = createConfigUtils(g)).cache.get),
              (d = l.cache.set),
              (functionToCall = tailwindMerge),
              tailwindMerge(m)
            );
          };
          function tailwindMerge(e) {
            let m = c(e);
            if (m) return m;
            let g = mergeClassList(e, l);
            return d(e, g), g;
          }
          return function () {
            return functionToCall(twJoin.apply(null, arguments));
          };
        })(() => {
          let e = fromTheme("colors"),
            l = fromTheme("spacing"),
            c = fromTheme("blur"),
            d = fromTheme("brightness"),
            m = fromTheme("borderColor"),
            g = fromTheme("borderRadius"),
            y = fromTheme("borderSpacing"),
            b = fromTheme("borderWidth"),
            C = fromTheme("contrast"),
            P = fromTheme("grayscale"),
            I = fromTheme("hueRotate"),
            B = fromTheme("invert"),
            N = fromTheme("gap"),
            F = fromTheme("gradientColorStops"),
            V = fromTheme("gradientColorStopPositions"),
            G = fromTheme("inset"),
            Q = fromTheme("margin"),
            $ = fromTheme("opacity"),
            Z = fromTheme("padding"),
            Y = fromTheme("saturate"),
            et = fromTheme("scale"),
            en = fromTheme("sepia"),
            er = fromTheme("skew"),
            ei = fromTheme("space"),
            eo = fromTheme("translate"),
            getOverscroll = () => ["auto", "contain", "none"],
            getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"],
            getSpacingWithAutoAndArbitrary = () => [
              "auto",
              isArbitraryValue,
              l,
            ],
            getSpacingWithArbitrary = () => [isArbitraryValue, l],
            getLengthWithEmptyAndArbitrary = () => [
              "",
              isLength,
              isArbitraryLength,
            ],
            getNumberWithAutoAndArbitrary = () => [
              "auto",
              isNumber,
              isArbitraryValue,
            ],
            getPositions = () => [
              "bottom",
              "center",
              "left",
              "left-bottom",
              "left-top",
              "right",
              "right-bottom",
              "right-top",
              "top",
            ],
            getLineStyles = () => [
              "solid",
              "dashed",
              "dotted",
              "double",
              "none",
            ],
            getBlendModes = () => [
              "normal",
              "multiply",
              "screen",
              "overlay",
              "darken",
              "lighten",
              "color-dodge",
              "color-burn",
              "hard-light",
              "soft-light",
              "difference",
              "exclusion",
              "hue",
              "saturation",
              "color",
              "luminosity",
            ],
            getAlign = () => [
              "start",
              "end",
              "center",
              "between",
              "around",
              "evenly",
              "stretch",
            ],
            getZeroAndEmpty = () => ["", "0", isArbitraryValue],
            getBreaks = () => [
              "auto",
              "avoid",
              "all",
              "avoid-page",
              "page",
              "left",
              "right",
              "column",
            ],
            getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
          return {
            cacheSize: 500,
            separator: ":",
            theme: {
              colors: [isAny],
              spacing: [isLength, isArbitraryLength],
              blur: ["none", "", isTshirtSize, isArbitraryValue],
              brightness: getNumberAndArbitrary(),
              borderColor: [e],
              borderRadius: [
                "none",
                "",
                "full",
                isTshirtSize,
                isArbitraryValue,
              ],
              borderSpacing: getSpacingWithArbitrary(),
              borderWidth: getLengthWithEmptyAndArbitrary(),
              contrast: getNumberAndArbitrary(),
              grayscale: getZeroAndEmpty(),
              hueRotate: getNumberAndArbitrary(),
              invert: getZeroAndEmpty(),
              gap: getSpacingWithArbitrary(),
              gradientColorStops: [e],
              gradientColorStopPositions: [isPercent, isArbitraryLength],
              inset: getSpacingWithAutoAndArbitrary(),
              margin: getSpacingWithAutoAndArbitrary(),
              opacity: getNumberAndArbitrary(),
              padding: getSpacingWithArbitrary(),
              saturate: getNumberAndArbitrary(),
              scale: getNumberAndArbitrary(),
              sepia: getZeroAndEmpty(),
              skew: getNumberAndArbitrary(),
              space: getSpacingWithArbitrary(),
              translate: getSpacingWithArbitrary(),
            },
            classGroups: {
              aspect: [
                { aspect: ["auto", "square", "video", isArbitraryValue] },
              ],
              container: ["container"],
              columns: [{ columns: [isTshirtSize] }],
              "break-after": [{ "break-after": getBreaks() }],
              "break-before": [{ "break-before": getBreaks() }],
              "break-inside": [
                {
                  "break-inside": [
                    "auto",
                    "avoid",
                    "avoid-page",
                    "avoid-column",
                  ],
                },
              ],
              "box-decoration": [{ "box-decoration": ["slice", "clone"] }],
              box: [{ box: ["border", "content"] }],
              display: [
                "block",
                "inline-block",
                "inline",
                "flex",
                "inline-flex",
                "table",
                "inline-table",
                "table-caption",
                "table-cell",
                "table-column",
                "table-column-group",
                "table-footer-group",
                "table-header-group",
                "table-row-group",
                "table-row",
                "flow-root",
                "grid",
                "inline-grid",
                "contents",
                "list-item",
                "hidden",
              ],
              float: [{ float: ["right", "left", "none", "start", "end"] }],
              clear: [
                { clear: ["left", "right", "both", "none", "start", "end"] },
              ],
              isolation: ["isolate", "isolation-auto"],
              "object-fit": [
                { object: ["contain", "cover", "fill", "none", "scale-down"] },
              ],
              "object-position": [
                { object: [...getPositions(), isArbitraryValue] },
              ],
              overflow: [{ overflow: getOverflow() }],
              "overflow-x": [{ "overflow-x": getOverflow() }],
              "overflow-y": [{ "overflow-y": getOverflow() }],
              overscroll: [{ overscroll: getOverscroll() }],
              "overscroll-x": [{ "overscroll-x": getOverscroll() }],
              "overscroll-y": [{ "overscroll-y": getOverscroll() }],
              position: ["static", "fixed", "absolute", "relative", "sticky"],
              inset: [{ inset: [G] }],
              "inset-x": [{ "inset-x": [G] }],
              "inset-y": [{ "inset-y": [G] }],
              start: [{ start: [G] }],
              end: [{ end: [G] }],
              top: [{ top: [G] }],
              right: [{ right: [G] }],
              bottom: [{ bottom: [G] }],
              left: [{ left: [G] }],
              visibility: ["visible", "invisible", "collapse"],
              z: [{ z: ["auto", isInteger, isArbitraryValue] }],
              basis: [{ basis: getSpacingWithAutoAndArbitrary() }],
              "flex-direction": [
                { flex: ["row", "row-reverse", "col", "col-reverse"] },
              ],
              "flex-wrap": [{ flex: ["wrap", "wrap-reverse", "nowrap"] }],
              flex: [
                { flex: ["1", "auto", "initial", "none", isArbitraryValue] },
              ],
              grow: [{ grow: getZeroAndEmpty() }],
              shrink: [{ shrink: getZeroAndEmpty() }],
              order: [
                {
                  order: ["first", "last", "none", isInteger, isArbitraryValue],
                },
              ],
              "grid-cols": [{ "grid-cols": [isAny] }],
              "col-start-end": [
                {
                  col: [
                    "auto",
                    { span: ["full", isInteger, isArbitraryValue] },
                    isArbitraryValue,
                  ],
                },
              ],
              "col-start": [{ "col-start": getNumberWithAutoAndArbitrary() }],
              "col-end": [{ "col-end": getNumberWithAutoAndArbitrary() }],
              "grid-rows": [{ "grid-rows": [isAny] }],
              "row-start-end": [
                {
                  row: [
                    "auto",
                    { span: [isInteger, isArbitraryValue] },
                    isArbitraryValue,
                  ],
                },
              ],
              "row-start": [{ "row-start": getNumberWithAutoAndArbitrary() }],
              "row-end": [{ "row-end": getNumberWithAutoAndArbitrary() }],
              "grid-flow": [
                {
                  "grid-flow": [
                    "row",
                    "col",
                    "dense",
                    "row-dense",
                    "col-dense",
                  ],
                },
              ],
              "auto-cols": [
                { "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue] },
              ],
              "auto-rows": [
                { "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue] },
              ],
              gap: [{ gap: [N] }],
              "gap-x": [{ "gap-x": [N] }],
              "gap-y": [{ "gap-y": [N] }],
              "justify-content": [{ justify: ["normal", ...getAlign()] }],
              "justify-items": [
                { "justify-items": ["start", "end", "center", "stretch"] },
              ],
              "justify-self": [
                {
                  "justify-self": ["auto", "start", "end", "center", "stretch"],
                },
              ],
              "align-content": [
                { content: ["normal", ...getAlign(), "baseline"] },
              ],
              "align-items": [
                { items: ["start", "end", "center", "baseline", "stretch"] },
              ],
              "align-self": [
                {
                  self: [
                    "auto",
                    "start",
                    "end",
                    "center",
                    "stretch",
                    "baseline",
                  ],
                },
              ],
              "place-content": [
                { "place-content": [...getAlign(), "baseline"] },
              ],
              "place-items": [
                {
                  "place-items": [
                    "start",
                    "end",
                    "center",
                    "baseline",
                    "stretch",
                  ],
                },
              ],
              "place-self": [
                { "place-self": ["auto", "start", "end", "center", "stretch"] },
              ],
              p: [{ p: [Z] }],
              px: [{ px: [Z] }],
              py: [{ py: [Z] }],
              ps: [{ ps: [Z] }],
              pe: [{ pe: [Z] }],
              pt: [{ pt: [Z] }],
              pr: [{ pr: [Z] }],
              pb: [{ pb: [Z] }],
              pl: [{ pl: [Z] }],
              m: [{ m: [Q] }],
              mx: [{ mx: [Q] }],
              my: [{ my: [Q] }],
              ms: [{ ms: [Q] }],
              me: [{ me: [Q] }],
              mt: [{ mt: [Q] }],
              mr: [{ mr: [Q] }],
              mb: [{ mb: [Q] }],
              ml: [{ ml: [Q] }],
              "space-x": [{ "space-x": [ei] }],
              "space-x-reverse": ["space-x-reverse"],
              "space-y": [{ "space-y": [ei] }],
              "space-y-reverse": ["space-y-reverse"],
              w: [
                {
                  w: [
                    "auto",
                    "min",
                    "max",
                    "fit",
                    "svw",
                    "lvw",
                    "dvw",
                    isArbitraryValue,
                    l,
                  ],
                },
              ],
              "min-w": [
                { "min-w": [isArbitraryValue, l, "min", "max", "fit"] },
              ],
              "max-w": [
                {
                  "max-w": [
                    isArbitraryValue,
                    l,
                    "none",
                    "full",
                    "min",
                    "max",
                    "fit",
                    "prose",
                    { screen: [isTshirtSize] },
                    isTshirtSize,
                  ],
                },
              ],
              h: [
                {
                  h: [
                    isArbitraryValue,
                    l,
                    "auto",
                    "min",
                    "max",
                    "fit",
                    "svh",
                    "lvh",
                    "dvh",
                  ],
                },
              ],
              "min-h": [
                {
                  "min-h": [
                    isArbitraryValue,
                    l,
                    "min",
                    "max",
                    "fit",
                    "svh",
                    "lvh",
                    "dvh",
                  ],
                },
              ],
              "max-h": [
                {
                  "max-h": [
                    isArbitraryValue,
                    l,
                    "min",
                    "max",
                    "fit",
                    "svh",
                    "lvh",
                    "dvh",
                  ],
                },
              ],
              size: [
                { size: [isArbitraryValue, l, "auto", "min", "max", "fit"] },
              ],
              "font-size": [
                { text: ["base", isTshirtSize, isArbitraryLength] },
              ],
              "font-smoothing": ["antialiased", "subpixel-antialiased"],
              "font-style": ["italic", "not-italic"],
              "font-weight": [
                {
                  font: [
                    "thin",
                    "extralight",
                    "light",
                    "normal",
                    "medium",
                    "semibold",
                    "bold",
                    "extrabold",
                    "black",
                    isArbitraryNumber,
                  ],
                },
              ],
              "font-family": [{ font: [isAny] }],
              "fvn-normal": ["normal-nums"],
              "fvn-ordinal": ["ordinal"],
              "fvn-slashed-zero": ["slashed-zero"],
              "fvn-figure": ["lining-nums", "oldstyle-nums"],
              "fvn-spacing": ["proportional-nums", "tabular-nums"],
              "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
              tracking: [
                {
                  tracking: [
                    "tighter",
                    "tight",
                    "normal",
                    "wide",
                    "wider",
                    "widest",
                    isArbitraryValue,
                  ],
                },
              ],
              "line-clamp": [
                { "line-clamp": ["none", isNumber, isArbitraryNumber] },
              ],
              leading: [
                {
                  leading: [
                    "none",
                    "tight",
                    "snug",
                    "normal",
                    "relaxed",
                    "loose",
                    isLength,
                    isArbitraryValue,
                  ],
                },
              ],
              "list-image": [{ "list-image": ["none", isArbitraryValue] }],
              "list-style-type": [
                { list: ["none", "disc", "decimal", isArbitraryValue] },
              ],
              "list-style-position": [{ list: ["inside", "outside"] }],
              "placeholder-color": [{ placeholder: [e] }],
              "placeholder-opacity": [{ "placeholder-opacity": [$] }],
              "text-alignment": [
                {
                  text: ["left", "center", "right", "justify", "start", "end"],
                },
              ],
              "text-color": [{ text: [e] }],
              "text-opacity": [{ "text-opacity": [$] }],
              "text-decoration": [
                "underline",
                "overline",
                "line-through",
                "no-underline",
              ],
              "text-decoration-style": [
                { decoration: [...getLineStyles(), "wavy"] },
              ],
              "text-decoration-thickness": [
                {
                  decoration: [
                    "auto",
                    "from-font",
                    isLength,
                    isArbitraryLength,
                  ],
                },
              ],
              "underline-offset": [
                { "underline-offset": ["auto", isLength, isArbitraryValue] },
              ],
              "text-decoration-color": [{ decoration: [e] }],
              "text-transform": [
                "uppercase",
                "lowercase",
                "capitalize",
                "normal-case",
              ],
              "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
              "text-wrap": [{ text: ["wrap", "nowrap", "balance", "pretty"] }],
              indent: [{ indent: getSpacingWithArbitrary() }],
              "vertical-align": [
                {
                  align: [
                    "baseline",
                    "top",
                    "middle",
                    "bottom",
                    "text-top",
                    "text-bottom",
                    "sub",
                    "super",
                    isArbitraryValue,
                  ],
                },
              ],
              whitespace: [
                {
                  whitespace: [
                    "normal",
                    "nowrap",
                    "pre",
                    "pre-line",
                    "pre-wrap",
                    "break-spaces",
                  ],
                },
              ],
              break: [{ break: ["normal", "words", "all", "keep"] }],
              hyphens: [{ hyphens: ["none", "manual", "auto"] }],
              content: [{ content: ["none", isArbitraryValue] }],
              "bg-attachment": [{ bg: ["fixed", "local", "scroll"] }],
              "bg-clip": [
                { "bg-clip": ["border", "padding", "content", "text"] },
              ],
              "bg-opacity": [{ "bg-opacity": [$] }],
              "bg-origin": [{ "bg-origin": ["border", "padding", "content"] }],
              "bg-position": [{ bg: [...getPositions(), isArbitraryPosition] }],
              "bg-repeat": [
                {
                  bg: [
                    "no-repeat",
                    { repeat: ["", "x", "y", "round", "space"] },
                  ],
                },
              ],
              "bg-size": [
                { bg: ["auto", "cover", "contain", isArbitrarySize] },
              ],
              "bg-image": [
                {
                  bg: [
                    "none",
                    {
                      "gradient-to": [
                        "t",
                        "tr",
                        "r",
                        "br",
                        "b",
                        "bl",
                        "l",
                        "tl",
                      ],
                    },
                    isArbitraryImage,
                  ],
                },
              ],
              "bg-color": [{ bg: [e] }],
              "gradient-from-pos": [{ from: [V] }],
              "gradient-via-pos": [{ via: [V] }],
              "gradient-to-pos": [{ to: [V] }],
              "gradient-from": [{ from: [F] }],
              "gradient-via": [{ via: [F] }],
              "gradient-to": [{ to: [F] }],
              rounded: [{ rounded: [g] }],
              "rounded-s": [{ "rounded-s": [g] }],
              "rounded-e": [{ "rounded-e": [g] }],
              "rounded-t": [{ "rounded-t": [g] }],
              "rounded-r": [{ "rounded-r": [g] }],
              "rounded-b": [{ "rounded-b": [g] }],
              "rounded-l": [{ "rounded-l": [g] }],
              "rounded-ss": [{ "rounded-ss": [g] }],
              "rounded-se": [{ "rounded-se": [g] }],
              "rounded-ee": [{ "rounded-ee": [g] }],
              "rounded-es": [{ "rounded-es": [g] }],
              "rounded-tl": [{ "rounded-tl": [g] }],
              "rounded-tr": [{ "rounded-tr": [g] }],
              "rounded-br": [{ "rounded-br": [g] }],
              "rounded-bl": [{ "rounded-bl": [g] }],
              "border-w": [{ border: [b] }],
              "border-w-x": [{ "border-x": [b] }],
              "border-w-y": [{ "border-y": [b] }],
              "border-w-s": [{ "border-s": [b] }],
              "border-w-e": [{ "border-e": [b] }],
              "border-w-t": [{ "border-t": [b] }],
              "border-w-r": [{ "border-r": [b] }],
              "border-w-b": [{ "border-b": [b] }],
              "border-w-l": [{ "border-l": [b] }],
              "border-opacity": [{ "border-opacity": [$] }],
              "border-style": [{ border: [...getLineStyles(), "hidden"] }],
              "divide-x": [{ "divide-x": [b] }],
              "divide-x-reverse": ["divide-x-reverse"],
              "divide-y": [{ "divide-y": [b] }],
              "divide-y-reverse": ["divide-y-reverse"],
              "divide-opacity": [{ "divide-opacity": [$] }],
              "divide-style": [{ divide: getLineStyles() }],
              "border-color": [{ border: [m] }],
              "border-color-x": [{ "border-x": [m] }],
              "border-color-y": [{ "border-y": [m] }],
              "border-color-s": [{ "border-s": [m] }],
              "border-color-e": [{ "border-e": [m] }],
              "border-color-t": [{ "border-t": [m] }],
              "border-color-r": [{ "border-r": [m] }],
              "border-color-b": [{ "border-b": [m] }],
              "border-color-l": [{ "border-l": [m] }],
              "divide-color": [{ divide: [m] }],
              "outline-style": [{ outline: ["", ...getLineStyles()] }],
              "outline-offset": [
                { "outline-offset": [isLength, isArbitraryValue] },
              ],
              "outline-w": [{ outline: [isLength, isArbitraryLength] }],
              "outline-color": [{ outline: [e] }],
              "ring-w": [{ ring: getLengthWithEmptyAndArbitrary() }],
              "ring-w-inset": ["ring-inset"],
              "ring-color": [{ ring: [e] }],
              "ring-opacity": [{ "ring-opacity": [$] }],
              "ring-offset-w": [
                { "ring-offset": [isLength, isArbitraryLength] },
              ],
              "ring-offset-color": [{ "ring-offset": [e] }],
              shadow: [
                {
                  shadow: [
                    "",
                    "inner",
                    "none",
                    isTshirtSize,
                    isArbitraryShadow,
                  ],
                },
              ],
              "shadow-color": [{ shadow: [isAny] }],
              opacity: [{ opacity: [$] }],
              "mix-blend": [
                {
                  "mix-blend": [
                    ...getBlendModes(),
                    "plus-lighter",
                    "plus-darker",
                  ],
                },
              ],
              "bg-blend": [{ "bg-blend": getBlendModes() }],
              filter: [{ filter: ["", "none"] }],
              blur: [{ blur: [c] }],
              brightness: [{ brightness: [d] }],
              contrast: [{ contrast: [C] }],
              "drop-shadow": [
                { "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue] },
              ],
              grayscale: [{ grayscale: [P] }],
              "hue-rotate": [{ "hue-rotate": [I] }],
              invert: [{ invert: [B] }],
              saturate: [{ saturate: [Y] }],
              sepia: [{ sepia: [en] }],
              "backdrop-filter": [{ "backdrop-filter": ["", "none"] }],
              "backdrop-blur": [{ "backdrop-blur": [c] }],
              "backdrop-brightness": [{ "backdrop-brightness": [d] }],
              "backdrop-contrast": [{ "backdrop-contrast": [C] }],
              "backdrop-grayscale": [{ "backdrop-grayscale": [P] }],
              "backdrop-hue-rotate": [{ "backdrop-hue-rotate": [I] }],
              "backdrop-invert": [{ "backdrop-invert": [B] }],
              "backdrop-opacity": [{ "backdrop-opacity": [$] }],
              "backdrop-saturate": [{ "backdrop-saturate": [Y] }],
              "backdrop-sepia": [{ "backdrop-sepia": [en] }],
              "border-collapse": [{ border: ["collapse", "separate"] }],
              "border-spacing": [{ "border-spacing": [y] }],
              "border-spacing-x": [{ "border-spacing-x": [y] }],
              "border-spacing-y": [{ "border-spacing-y": [y] }],
              "table-layout": [{ table: ["auto", "fixed"] }],
              caption: [{ caption: ["top", "bottom"] }],
              transition: [
                {
                  transition: [
                    "none",
                    "all",
                    "",
                    "colors",
                    "opacity",
                    "shadow",
                    "transform",
                    isArbitraryValue,
                  ],
                },
              ],
              duration: [{ duration: getNumberAndArbitrary() }],
              ease: [
                { ease: ["linear", "in", "out", "in-out", isArbitraryValue] },
              ],
              delay: [{ delay: getNumberAndArbitrary() }],
              animate: [
                {
                  animate: [
                    "none",
                    "spin",
                    "ping",
                    "pulse",
                    "bounce",
                    isArbitraryValue,
                  ],
                },
              ],
              transform: [{ transform: ["", "gpu", "none"] }],
              scale: [{ scale: [et] }],
              "scale-x": [{ "scale-x": [et] }],
              "scale-y": [{ "scale-y": [et] }],
              rotate: [{ rotate: [isInteger, isArbitraryValue] }],
              "translate-x": [{ "translate-x": [eo] }],
              "translate-y": [{ "translate-y": [eo] }],
              "skew-x": [{ "skew-x": [er] }],
              "skew-y": [{ "skew-y": [er] }],
              "transform-origin": [
                {
                  origin: [
                    "center",
                    "top",
                    "top-right",
                    "right",
                    "bottom-right",
                    "bottom",
                    "bottom-left",
                    "left",
                    "top-left",
                    isArbitraryValue,
                  ],
                },
              ],
              accent: [{ accent: ["auto", e] }],
              appearance: [{ appearance: ["none", "auto"] }],
              cursor: [
                {
                  cursor: [
                    "auto",
                    "default",
                    "pointer",
                    "wait",
                    "text",
                    "move",
                    "help",
                    "not-allowed",
                    "none",
                    "context-menu",
                    "progress",
                    "cell",
                    "crosshair",
                    "vertical-text",
                    "alias",
                    "copy",
                    "no-drop",
                    "grab",
                    "grabbing",
                    "all-scroll",
                    "col-resize",
                    "row-resize",
                    "n-resize",
                    "e-resize",
                    "s-resize",
                    "w-resize",
                    "ne-resize",
                    "nw-resize",
                    "se-resize",
                    "sw-resize",
                    "ew-resize",
                    "ns-resize",
                    "nesw-resize",
                    "nwse-resize",
                    "zoom-in",
                    "zoom-out",
                    isArbitraryValue,
                  ],
                },
              ],
              "caret-color": [{ caret: [e] }],
              "pointer-events": [{ "pointer-events": ["none", "auto"] }],
              resize: [{ resize: ["none", "y", "x", ""] }],
              "scroll-behavior": [{ scroll: ["auto", "smooth"] }],
              "scroll-m": [{ "scroll-m": getSpacingWithArbitrary() }],
              "scroll-mx": [{ "scroll-mx": getSpacingWithArbitrary() }],
              "scroll-my": [{ "scroll-my": getSpacingWithArbitrary() }],
              "scroll-ms": [{ "scroll-ms": getSpacingWithArbitrary() }],
              "scroll-me": [{ "scroll-me": getSpacingWithArbitrary() }],
              "scroll-mt": [{ "scroll-mt": getSpacingWithArbitrary() }],
              "scroll-mr": [{ "scroll-mr": getSpacingWithArbitrary() }],
              "scroll-mb": [{ "scroll-mb": getSpacingWithArbitrary() }],
              "scroll-ml": [{ "scroll-ml": getSpacingWithArbitrary() }],
              "scroll-p": [{ "scroll-p": getSpacingWithArbitrary() }],
              "scroll-px": [{ "scroll-px": getSpacingWithArbitrary() }],
              "scroll-py": [{ "scroll-py": getSpacingWithArbitrary() }],
              "scroll-ps": [{ "scroll-ps": getSpacingWithArbitrary() }],
              "scroll-pe": [{ "scroll-pe": getSpacingWithArbitrary() }],
              "scroll-pt": [{ "scroll-pt": getSpacingWithArbitrary() }],
              "scroll-pr": [{ "scroll-pr": getSpacingWithArbitrary() }],
              "scroll-pb": [{ "scroll-pb": getSpacingWithArbitrary() }],
              "scroll-pl": [{ "scroll-pl": getSpacingWithArbitrary() }],
              "snap-align": [
                { snap: ["start", "end", "center", "align-none"] },
              ],
              "snap-stop": [{ snap: ["normal", "always"] }],
              "snap-type": [{ snap: ["none", "x", "y", "both"] }],
              "snap-strictness": [{ snap: ["mandatory", "proximity"] }],
              touch: [{ touch: ["auto", "none", "manipulation"] }],
              "touch-x": [{ "touch-pan": ["x", "left", "right"] }],
              "touch-y": [{ "touch-pan": ["y", "up", "down"] }],
              "touch-pz": ["touch-pinch-zoom"],
              select: [{ select: ["none", "text", "all", "auto"] }],
              "will-change": [
                {
                  "will-change": [
                    "auto",
                    "scroll",
                    "contents",
                    "transform",
                    isArbitraryValue,
                  ],
                },
              ],
              fill: [{ fill: [e, "none"] }],
              "stroke-w": [
                { stroke: [isLength, isArbitraryLength, isArbitraryNumber] },
              ],
              stroke: [{ stroke: [e, "none"] }],
              sr: ["sr-only", "not-sr-only"],
              "forced-color-adjust": [
                { "forced-color-adjust": ["auto", "none"] },
              ],
            },
            conflictingClassGroups: {
              overflow: ["overflow-x", "overflow-y"],
              overscroll: ["overscroll-x", "overscroll-y"],
              inset: [
                "inset-x",
                "inset-y",
                "start",
                "end",
                "top",
                "right",
                "bottom",
                "left",
              ],
              "inset-x": ["right", "left"],
              "inset-y": ["top", "bottom"],
              flex: ["basis", "grow", "shrink"],
              gap: ["gap-x", "gap-y"],
              p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
              px: ["pr", "pl"],
              py: ["pt", "pb"],
              m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
              mx: ["mr", "ml"],
              my: ["mt", "mb"],
              size: ["w", "h"],
              "font-size": ["leading"],
              "fvn-normal": [
                "fvn-ordinal",
                "fvn-slashed-zero",
                "fvn-figure",
                "fvn-spacing",
                "fvn-fraction",
              ],
              "fvn-ordinal": ["fvn-normal"],
              "fvn-slashed-zero": ["fvn-normal"],
              "fvn-figure": ["fvn-normal"],
              "fvn-spacing": ["fvn-normal"],
              "fvn-fraction": ["fvn-normal"],
              "line-clamp": ["display", "overflow"],
              rounded: [
                "rounded-s",
                "rounded-e",
                "rounded-t",
                "rounded-r",
                "rounded-b",
                "rounded-l",
                "rounded-ss",
                "rounded-se",
                "rounded-ee",
                "rounded-es",
                "rounded-tl",
                "rounded-tr",
                "rounded-br",
                "rounded-bl",
              ],
              "rounded-s": ["rounded-ss", "rounded-es"],
              "rounded-e": ["rounded-se", "rounded-ee"],
              "rounded-t": ["rounded-tl", "rounded-tr"],
              "rounded-r": ["rounded-tr", "rounded-br"],
              "rounded-b": ["rounded-br", "rounded-bl"],
              "rounded-l": ["rounded-tl", "rounded-bl"],
              "border-spacing": ["border-spacing-x", "border-spacing-y"],
              "border-w": [
                "border-w-s",
                "border-w-e",
                "border-w-t",
                "border-w-r",
                "border-w-b",
                "border-w-l",
              ],
              "border-w-x": ["border-w-r", "border-w-l"],
              "border-w-y": ["border-w-t", "border-w-b"],
              "border-color": [
                "border-color-s",
                "border-color-e",
                "border-color-t",
                "border-color-r",
                "border-color-b",
                "border-color-l",
              ],
              "border-color-x": ["border-color-r", "border-color-l"],
              "border-color-y": ["border-color-t", "border-color-b"],
              "scroll-m": [
                "scroll-mx",
                "scroll-my",
                "scroll-ms",
                "scroll-me",
                "scroll-mt",
                "scroll-mr",
                "scroll-mb",
                "scroll-ml",
              ],
              "scroll-mx": ["scroll-mr", "scroll-ml"],
              "scroll-my": ["scroll-mt", "scroll-mb"],
              "scroll-p": [
                "scroll-px",
                "scroll-py",
                "scroll-ps",
                "scroll-pe",
                "scroll-pt",
                "scroll-pr",
                "scroll-pb",
                "scroll-pl",
              ],
              "scroll-px": ["scroll-pr", "scroll-pl"],
              "scroll-py": ["scroll-pt", "scroll-pb"],
              touch: ["touch-x", "touch-y", "touch-pz"],
              "touch-x": ["touch"],
              "touch-y": ["touch"],
              "touch-pz": ["touch"],
            },
            conflictingClassGroupModifiers: { "font-size": ["leading"] },
          };
        });
    },
    15767: function (e, l, c) {
      "use strict";
      c.r(l),
        c.d(l, {
          __addDisposableResource: function () {
            return __addDisposableResource;
          },
          __assign: function () {
            return __assign;
          },
          __asyncDelegator: function () {
            return __asyncDelegator;
          },
          __asyncGenerator: function () {
            return __asyncGenerator;
          },
          __asyncValues: function () {
            return __asyncValues;
          },
          __await: function () {
            return __await;
          },
          __awaiter: function () {
            return __awaiter;
          },
          __classPrivateFieldGet: function () {
            return __classPrivateFieldGet;
          },
          __classPrivateFieldIn: function () {
            return __classPrivateFieldIn;
          },
          __classPrivateFieldSet: function () {
            return __classPrivateFieldSet;
          },
          __createBinding: function () {
            return d;
          },
          __decorate: function () {
            return __decorate;
          },
          __disposeResources: function () {
            return __disposeResources;
          },
          __esDecorate: function () {
            return __esDecorate;
          },
          __exportStar: function () {
            return __exportStar;
          },
          __extends: function () {
            return __extends;
          },
          __generator: function () {
            return __generator;
          },
          __importDefault: function () {
            return __importDefault;
          },
          __importStar: function () {
            return __importStar;
          },
          __makeTemplateObject: function () {
            return __makeTemplateObject;
          },
          __metadata: function () {
            return __metadata;
          },
          __param: function () {
            return __param;
          },
          __propKey: function () {
            return __propKey;
          },
          __read: function () {
            return __read;
          },
          __rest: function () {
            return __rest;
          },
          __rewriteRelativeImportExtension: function () {
            return __rewriteRelativeImportExtension;
          },
          __runInitializers: function () {
            return __runInitializers;
          },
          __setFunctionName: function () {
            return __setFunctionName;
          },
          __spread: function () {
            return __spread;
          },
          __spreadArray: function () {
            return __spreadArray;
          },
          __spreadArrays: function () {
            return __spreadArrays;
          },
          __values: function () {
            return __values;
          },
        });
      var extendStatics = function (e, l) {
        return (extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (e, l) {
              e.__proto__ = l;
            }) ||
          function (e, l) {
            for (var c in l)
              Object.prototype.hasOwnProperty.call(l, c) && (e[c] = l[c]);
          })(e, l);
      };
      function __extends(e, l) {
        if ("function" != typeof l && null !== l)
          throw TypeError(
            "Class extends value " + String(l) + " is not a constructor or null"
          );
        function __() {
          this.constructor = e;
        }
        extendStatics(e, l),
          (e.prototype =
            null === l
              ? Object.create(l)
              : ((__.prototype = l.prototype), new __()));
      }
      var __assign = function () {
        return (__assign =
          Object.assign ||
          function (e) {
            for (var l, c = 1, d = arguments.length; c < d; c++)
              for (var m in (l = arguments[c]))
                Object.prototype.hasOwnProperty.call(l, m) && (e[m] = l[m]);
            return e;
          }).apply(this, arguments);
      };
      function __rest(e, l) {
        var c = {};
        for (var d in e)
          Object.prototype.hasOwnProperty.call(e, d) &&
            0 > l.indexOf(d) &&
            (c[d] = e[d]);
        if (null != e && "function" == typeof Object.getOwnPropertySymbols)
          for (
            var m = 0, d = Object.getOwnPropertySymbols(e);
            m < d.length;
            m++
          )
            0 > l.indexOf(d[m]) &&
              Object.prototype.propertyIsEnumerable.call(e, d[m]) &&
              (c[d[m]] = e[d[m]]);
        return c;
      }
      function __decorate(e, l, c, d) {
        var m,
          g = arguments.length,
          y =
            g < 3
              ? l
              : null === d
              ? (d = Object.getOwnPropertyDescriptor(l, c))
              : d;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
          y = Reflect.decorate(e, l, c, d);
        else
          for (var b = e.length - 1; b >= 0; b--)
            (m = e[b]) &&
              (y = (g < 3 ? m(y) : g > 3 ? m(l, c, y) : m(l, c)) || y);
        return g > 3 && y && Object.defineProperty(l, c, y), y;
      }
      function __param(e, l) {
        return function (c, d) {
          l(c, d, e);
        };
      }
      function __esDecorate(e, l, c, d, m, g) {
        function accept(e) {
          if (void 0 !== e && "function" != typeof e)
            throw TypeError("Function expected");
          return e;
        }
        for (
          var y,
            b = d.kind,
            C = "getter" === b ? "get" : "setter" === b ? "set" : "value",
            P = !l && e ? (d.static ? e : e.prototype) : null,
            I = l || (P ? Object.getOwnPropertyDescriptor(P, d.name) : {}),
            B = !1,
            N = c.length - 1;
          N >= 0;
          N--
        ) {
          var F = {};
          for (var V in d) F[V] = "access" === V ? {} : d[V];
          for (var V in d.access) F.access[V] = d.access[V];
          F.addInitializer = function (e) {
            if (B)
              throw TypeError(
                "Cannot add initializers after decoration has completed"
              );
            g.push(accept(e || null));
          };
          var G = (0, c[N])(
            "accessor" === b ? { get: I.get, set: I.set } : I[C],
            F
          );
          if ("accessor" === b) {
            if (void 0 === G) continue;
            if (null === G || "object" != typeof G)
              throw TypeError("Object expected");
            (y = accept(G.get)) && (I.get = y),
              (y = accept(G.set)) && (I.set = y),
              (y = accept(G.init)) && m.unshift(y);
          } else (y = accept(G)) && ("field" === b ? m.unshift(y) : (I[C] = y));
        }
        P && Object.defineProperty(P, d.name, I), (B = !0);
      }
      function __runInitializers(e, l, c) {
        for (var d = arguments.length > 2, m = 0; m < l.length; m++)
          c = d ? l[m].call(e, c) : l[m].call(e);
        return d ? c : void 0;
      }
      function __propKey(e) {
        return "symbol" == typeof e ? e : "".concat(e);
      }
      function __setFunctionName(e, l, c) {
        return (
          "symbol" == typeof l &&
            (l = l.description ? "[".concat(l.description, "]") : ""),
          Object.defineProperty(e, "name", {
            configurable: !0,
            value: c ? "".concat(c, " ", l) : l,
          })
        );
      }
      function __metadata(e, l) {
        if ("object" == typeof Reflect && "function" == typeof Reflect.metadata)
          return Reflect.metadata(e, l);
      }
      function __awaiter(e, l, c, d) {
        return new (c || (c = Promise))(function (m, g) {
          function fulfilled(e) {
            try {
              step(d.next(e));
            } catch (e) {
              g(e);
            }
          }
          function rejected(e) {
            try {
              step(d.throw(e));
            } catch (e) {
              g(e);
            }
          }
          function step(e) {
            var l;
            e.done
              ? m(e.value)
              : ((l = e.value) instanceof c
                  ? l
                  : new c(function (e) {
                      e(l);
                    })
                ).then(fulfilled, rejected);
          }
          step((d = d.apply(e, l || [])).next());
        });
      }
      function __generator(e, l) {
        var c,
          d,
          m,
          g = {
            label: 0,
            sent: function () {
              if (1 & m[0]) throw m[1];
              return m[1];
            },
            trys: [],
            ops: [],
          },
          y = Object.create(
            ("function" == typeof Iterator ? Iterator : Object).prototype
          );
        return (
          (y.next = verb(0)),
          (y.throw = verb(1)),
          (y.return = verb(2)),
          "function" == typeof Symbol &&
            (y[Symbol.iterator] = function () {
              return this;
            }),
          y
        );
        function verb(b) {
          return function (C) {
            return (function (b) {
              if (c) throw TypeError("Generator is already executing.");
              for (; y && ((y = 0), b[0] && (g = 0)), g; )
                try {
                  if (
                    ((c = 1),
                    d &&
                      (m =
                        2 & b[0]
                          ? d.return
                          : b[0]
                          ? d.throw || ((m = d.return) && m.call(d), 0)
                          : d.next) &&
                      !(m = m.call(d, b[1])).done)
                  )
                    return m;
                  switch (((d = 0), m && (b = [2 & b[0], m.value]), b[0])) {
                    case 0:
                    case 1:
                      m = b;
                      break;
                    case 4:
                      return g.label++, { value: b[1], done: !1 };
                    case 5:
                      g.label++, (d = b[1]), (b = [0]);
                      continue;
                    case 7:
                      (b = g.ops.pop()), g.trys.pop();
                      continue;
                    default:
                      if (
                        !(m = (m = g.trys).length > 0 && m[m.length - 1]) &&
                        (6 === b[0] || 2 === b[0])
                      ) {
                        g = 0;
                        continue;
                      }
                      if (3 === b[0] && (!m || (b[1] > m[0] && b[1] < m[3]))) {
                        g.label = b[1];
                        break;
                      }
                      if (6 === b[0] && g.label < m[1]) {
                        (g.label = m[1]), (m = b);
                        break;
                      }
                      if (m && g.label < m[2]) {
                        (g.label = m[2]), g.ops.push(b);
                        break;
                      }
                      m[2] && g.ops.pop(), g.trys.pop();
                      continue;
                  }
                  b = l.call(e, g);
                } catch (e) {
                  (b = [6, e]), (d = 0);
                } finally {
                  c = m = 0;
                }
              if (5 & b[0]) throw b[1];
              return { value: b[0] ? b[1] : void 0, done: !0 };
            })([b, C]);
          };
        }
      }
      var d = Object.create
        ? function (e, l, c, d) {
            void 0 === d && (d = c);
            var m = Object.getOwnPropertyDescriptor(l, c);
            (!m ||
              ("get" in m ? !l.__esModule : m.writable || m.configurable)) &&
              (m = {
                enumerable: !0,
                get: function () {
                  return l[c];
                },
              }),
              Object.defineProperty(e, d, m);
          }
        : function (e, l, c, d) {
            void 0 === d && (d = c), (e[d] = l[c]);
          };
      function __exportStar(e, l) {
        for (var c in e)
          "default" === c ||
            Object.prototype.hasOwnProperty.call(l, c) ||
            d(l, e, c);
      }
      function __values(e) {
        var l = "function" == typeof Symbol && Symbol.iterator,
          c = l && e[l],
          d = 0;
        if (c) return c.call(e);
        if (e && "number" == typeof e.length)
          return {
            next: function () {
              return (
                e && d >= e.length && (e = void 0),
                { value: e && e[d++], done: !e }
              );
            },
          };
        throw TypeError(
          l ? "Object is not iterable." : "Symbol.iterator is not defined."
        );
      }
      function __read(e, l) {
        var c = "function" == typeof Symbol && e[Symbol.iterator];
        if (!c) return e;
        var d,
          m,
          g = c.call(e),
          y = [];
        try {
          for (; (void 0 === l || l-- > 0) && !(d = g.next()).done; )
            y.push(d.value);
        } catch (e) {
          m = { error: e };
        } finally {
          try {
            d && !d.done && (c = g.return) && c.call(g);
          } finally {
            if (m) throw m.error;
          }
        }
        return y;
      }
      function __spread() {
        for (var e = [], l = 0; l < arguments.length; l++)
          e = e.concat(__read(arguments[l]));
        return e;
      }
      function __spreadArrays() {
        for (var e = 0, l = 0, c = arguments.length; l < c; l++)
          e += arguments[l].length;
        for (var d = Array(e), m = 0, l = 0; l < c; l++)
          for (var g = arguments[l], y = 0, b = g.length; y < b; y++, m++)
            d[m] = g[y];
        return d;
      }
      function __spreadArray(e, l, c) {
        if (c || 2 == arguments.length)
          for (var d, m = 0, g = l.length; m < g; m++)
            (!d && m in l) ||
              (d || (d = Array.prototype.slice.call(l, 0, m)), (d[m] = l[m]));
        return e.concat(d || Array.prototype.slice.call(l));
      }
      function __await(e) {
        return this instanceof __await ? ((this.v = e), this) : new __await(e);
      }
      function __asyncGenerator(e, l, c) {
        if (!Symbol.asyncIterator)
          throw TypeError("Symbol.asyncIterator is not defined.");
        var d,
          m = c.apply(e, l || []),
          g = [];
        return (
          (d = Object.create(
            ("function" == typeof AsyncIterator ? AsyncIterator : Object)
              .prototype
          )),
          verb("next"),
          verb("throw"),
          verb("return", function (e) {
            return function (l) {
              return Promise.resolve(l).then(e, reject);
            };
          }),
          (d[Symbol.asyncIterator] = function () {
            return this;
          }),
          d
        );
        function verb(e, l) {
          m[e] &&
            ((d[e] = function (l) {
              return new Promise(function (c, d) {
                g.push([e, l, c, d]) > 1 || resume(e, l);
              });
            }),
            l && (d[e] = l(d[e])));
        }
        function resume(e, l) {
          try {
            var c;
            (c = m[e](l)).value instanceof __await
              ? Promise.resolve(c.value.v).then(fulfill, reject)
              : settle(g[0][2], c);
          } catch (e) {
            settle(g[0][3], e);
          }
        }
        function fulfill(e) {
          resume("next", e);
        }
        function reject(e) {
          resume("throw", e);
        }
        function settle(e, l) {
          e(l), g.shift(), g.length && resume(g[0][0], g[0][1]);
        }
      }
      function __asyncDelegator(e) {
        var l, c;
        return (
          (l = {}),
          verb("next"),
          verb("throw", function (e) {
            throw e;
          }),
          verb("return"),
          (l[Symbol.iterator] = function () {
            return this;
          }),
          l
        );
        function verb(d, m) {
          l[d] = e[d]
            ? function (l) {
                return (c = !c)
                  ? { value: __await(e[d](l)), done: !1 }
                  : m
                  ? m(l)
                  : l;
              }
            : m;
        }
      }
      function __asyncValues(e) {
        if (!Symbol.asyncIterator)
          throw TypeError("Symbol.asyncIterator is not defined.");
        var l,
          c = e[Symbol.asyncIterator];
        return c
          ? c.call(e)
          : ((e = __values(e)),
            (l = {}),
            verb("next"),
            verb("throw"),
            verb("return"),
            (l[Symbol.asyncIterator] = function () {
              return this;
            }),
            l);
        function verb(c) {
          l[c] =
            e[c] &&
            function (l) {
              return new Promise(function (d, m) {
                !(function (e, l, c, d) {
                  Promise.resolve(d).then(function (l) {
                    e({ value: l, done: c });
                  }, l);
                })(d, m, (l = e[c](l)).done, l.value);
              });
            };
        }
      }
      function __makeTemplateObject(e, l) {
        return (
          Object.defineProperty
            ? Object.defineProperty(e, "raw", { value: l })
            : (e.raw = l),
          e
        );
      }
      var m = Object.create
          ? function (e, l) {
              Object.defineProperty(e, "default", { enumerable: !0, value: l });
            }
          : function (e, l) {
              e.default = l;
            },
        ownKeys = function (e) {
          return (ownKeys =
            Object.getOwnPropertyNames ||
            function (e) {
              var l = [];
              for (var c in e)
                Object.prototype.hasOwnProperty.call(e, c) && (l[l.length] = c);
              return l;
            })(e);
        };
      function __importStar(e) {
        if (e && e.__esModule) return e;
        var l = {};
        if (null != e)
          for (var c = ownKeys(e), g = 0; g < c.length; g++)
            "default" !== c[g] && d(l, e, c[g]);
        return m(l, e), l;
      }
      function __importDefault(e) {
        return e && e.__esModule ? e : { default: e };
      }
      function __classPrivateFieldGet(e, l, c, d) {
        if ("a" === c && !d)
          throw TypeError("Private accessor was defined without a getter");
        if ("function" == typeof l ? e !== l || !d : !l.has(e))
          throw TypeError(
            "Cannot read private member from an object whose class did not declare it"
          );
        return "m" === c ? d : "a" === c ? d.call(e) : d ? d.value : l.get(e);
      }
      function __classPrivateFieldSet(e, l, c, d, m) {
        if ("m" === d) throw TypeError("Private method is not writable");
        if ("a" === d && !m)
          throw TypeError("Private accessor was defined without a setter");
        if ("function" == typeof l ? e !== l || !m : !l.has(e))
          throw TypeError(
            "Cannot write private member to an object whose class did not declare it"
          );
        return "a" === d ? m.call(e, c) : m ? (m.value = c) : l.set(e, c), c;
      }
      function __classPrivateFieldIn(e, l) {
        if (null === l || ("object" != typeof l && "function" != typeof l))
          throw TypeError("Cannot use 'in' operator on non-object");
        return "function" == typeof e ? l === e : e.has(l);
      }
      function __addDisposableResource(e, l, c) {
        if (null != l) {
          var d, m;
          if ("object" != typeof l && "function" != typeof l)
            throw TypeError("Object expected.");
          if (c) {
            if (!Symbol.asyncDispose)
              throw TypeError("Symbol.asyncDispose is not defined.");
            d = l[Symbol.asyncDispose];
          }
          if (void 0 === d) {
            if (!Symbol.dispose)
              throw TypeError("Symbol.dispose is not defined.");
            (d = l[Symbol.dispose]), c && (m = d);
          }
          if ("function" != typeof d) throw TypeError("Object not disposable.");
          m &&
            (d = function () {
              try {
                m.call(this);
              } catch (e) {
                return Promise.reject(e);
              }
            }),
            e.stack.push({ value: l, dispose: d, async: c });
        } else c && e.stack.push({ async: !0 });
        return l;
      }
      var g =
        "function" == typeof SuppressedError
          ? SuppressedError
          : function (e, l, c) {
              var d = Error(c);
              return (
                (d.name = "SuppressedError"),
                (d.error = e),
                (d.suppressed = l),
                d
              );
            };
      function __disposeResources(e) {
        function fail(l) {
          (e.error = e.hasError
            ? new g(l, e.error, "An error was suppressed during disposal.")
            : l),
            (e.hasError = !0);
        }
        var l,
          c = 0;
        return (function next() {
          for (; (l = e.stack.pop()); )
            try {
              if (!l.async && 1 === c)
                return (c = 0), e.stack.push(l), Promise.resolve().then(next);
              if (l.dispose) {
                var d = l.dispose.call(l.value);
                if (l.async)
                  return (
                    (c |= 2),
                    Promise.resolve(d).then(next, function (e) {
                      return fail(e), next();
                    })
                  );
              } else c |= 1;
            } catch (e) {
              fail(e);
            }
          if (1 === c)
            return e.hasError ? Promise.reject(e.error) : Promise.resolve();
          if (e.hasError) throw e.error;
        })();
      }
      function __rewriteRelativeImportExtension(e, l) {
        return "string" == typeof e && /^\.\.?\//.test(e)
          ? e.replace(
              /\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i,
              function (e, c, d, m, g) {
                return c
                  ? l
                    ? ".jsx"
                    : ".js"
                  : !d || (m && g)
                  ? d + m + "." + g.toLowerCase() + "js"
                  : e;
              }
            )
          : e;
      }
      l.default = {
        __extends,
        __assign,
        __rest,
        __decorate,
        __param,
        __esDecorate,
        __runInitializers,
        __propKey,
        __setFunctionName,
        __metadata,
        __awaiter,
        __generator,
        __createBinding: d,
        __exportStar,
        __values,
        __read,
        __spread,
        __spreadArrays,
        __spreadArray,
        __await,
        __asyncGenerator,
        __asyncDelegator,
        __asyncValues,
        __makeTemplateObject,
        __importStar,
        __importDefault,
        __classPrivateFieldGet,
        __classPrivateFieldSet,
        __classPrivateFieldIn,
        __addDisposableResource,
        __disposeResources,
        __rewriteRelativeImportExtension,
      };
    },
    40362: function (e, l, c) {
      "use strict";
      function parseAccount(e) {
        return "string" == typeof e ? { address: e, type: "json-rpc" } : e;
      }
      c.d(l, {
        T: function () {
          return parseAccount;
        },
      });
    },
    13227: function (e, l, c) {
      "use strict";
      c.d(l, {
        w: function () {
          return getEnsName;
        },
      });
      var d = c(85188),
        m = c(21376),
        g = c(1701),
        y = c(23183),
        b = c(61460),
        C = c(59351),
        P = c(66195);
      async function getEnsName(
        e,
        {
          address: l,
          blockNumber: c,
          blockTag: I,
          gatewayUrls: B,
          strict: N,
          universalResolverAddress: F,
        }
      ) {
        let V = F;
        if (!V) {
          if (!e.chain)
            throw Error(
              "client chain not configured. universalResolverAddress is required."
            );
          V = (0, m.L)({
            blockNumber: c,
            chain: e.chain,
            contract: "ensUniversalResolver",
          });
        }
        let G = `${l.toLowerCase().substring(2)}.addr.reverse`;
        try {
          let m = {
              address: V,
              abi: d.du,
              functionName: "reverse",
              args: [(0, g.NC)((0, b.T)(G))],
              blockNumber: c,
              blockTag: I,
            },
            y = (0, C.s)(e, P.L, "readContract"),
            [N, F] = B ? await y({ ...m, args: [...m.args, B] }) : await y(m);
          if (l.toLowerCase() !== F.toLowerCase()) return null;
          return N;
        } catch (e) {
          if (N) throw e;
          if ((0, y.c)(e, "reverse")) return null;
          throw e;
        }
      }
    },
    17675: function (e, l, c) {
      "use strict";
      c.d(l, {
        R: function () {
          return call;
        },
      });
      var d = c(22709),
        m = c(93413),
        g = c(42005);
      function parseAbi(e) {
        let l = (0, m.D)(e),
          c = [],
          y = e.length;
        for (let m = 0; m < y; m++) {
          let y = e[m];
          (0, d.N0)(y) || c.push((0, g.cK)(y, l));
        }
        return c;
      }
      var y = c(40362),
        b = c(85188),
        C = c(19739),
        P = c(26456),
        I = c(853),
        B = c(40955),
        N = c(15873),
        F = c(53991),
        V = c(28065),
        G = c(21376),
        Q = c(1701),
        $ = c(23546),
        Z = c(8383),
        Y = c(36666),
        et = c(92283),
        en = c(68916),
        er = c(21233);
      async function call(e, l) {
        let {
            account: d = e.account,
            batch: m = !!e.batch?.multicall,
            blockNumber: g,
            blockTag: b = "latest",
            accessList: N,
            blobs: V,
            code: G,
            data: et,
            factory: ei,
            factoryData: eo,
            gas: ea,
            gasPrice: es,
            maxFeePerBlobGas: el,
            maxFeePerGas: ec,
            maxPriorityFeePerGas: eu,
            nonce: ed,
            to: ep,
            value: eh,
            stateOverride: ef,
            ...em
          } = l,
          eg = d ? (0, y.T)(d) : void 0;
        if (G && (ei || eo))
          throw new P.G(
            "Cannot provide both `code` & `factory`/`factoryData` as parameters."
          );
        if (G && ep)
          throw new P.G("Cannot provide both `code` & `to` as parameters.");
        let ey = G && et,
          eb = ei && eo && ep && et,
          ev = ey || eb,
          ew = ey
            ? (function (e) {
                let { code: l, data: c } = e;
                return (0, F.w)({
                  abi: parseAbi(["constructor(bytes, bytes)"]),
                  bytecode: C.NO,
                  args: [l, c],
                });
              })({ code: G, data: et })
            : eb
            ? (function (e) {
                let { data: l, factory: c, factoryData: d, to: m } = e;
                return (0, F.w)({
                  abi: parseAbi([
                    "constructor(address, bytes, address, bytes)",
                  ]),
                  bytecode: C.pG,
                  args: [m, l, c, d],
                });
              })({ data: et, factory: ei, factoryData: eo, to: ep })
            : et;
        try {
          (0, er.F)(l);
          let c = g ? (0, Q.eC)(g) : void 0,
            d = c || b,
            y = (0, en.mF)(ef),
            C = e.chain?.formatters?.transactionRequest?.format,
            P = C || Y.tG,
            B = P({
              ...(0, Z.K)(em, { format: C }),
              from: eg?.address,
              accessList: N,
              blobs: V,
              data: ew,
              gas: ea,
              gasPrice: es,
              maxFeePerBlobGas: el,
              maxFeePerGas: ec,
              maxPriorityFeePerGas: eu,
              nonce: ed,
              to: ev ? void 0 : ep,
              value: eh,
            });
          if (
            m &&
            (function ({ request: e }) {
              let { data: l, to: c, ...d } = e;
              return (
                !(!l || l.startsWith("0x82ad56cb")) &&
                !!c &&
                !(Object.values(d).filter((e) => void 0 !== e).length > 0)
              );
            })({ request: B }) &&
            !y
          )
            try {
              return await scheduleMulticall(e, {
                ...B,
                blockNumber: g,
                blockTag: b,
              });
            } catch (e) {
              if (!(e instanceof I.pZ) && !(e instanceof I.mm)) throw e;
            }
          let F = await e.request({
            method: "eth_call",
            params: y ? [B, d, y] : [B, d],
          });
          if ("0x" === F) return { data: void 0 };
          return { data: F };
        } catch (y) {
          let d = (function (e) {
              if (!(e instanceof P.G)) return;
              let l = e.walk();
              return "object" == typeof l?.data ? l.data?.data : l.data;
            })(y),
            { offchainLookup: m, offchainLookupSignature: g } = await c
              .e(4603)
              .then(c.bind(c, 94603));
          if (!1 !== e.ccipRead && d?.slice(0, 10) === g && ep)
            return { data: await m(e, { data: d, to: ep }) };
          if (ev && d?.slice(0, 10) === "0x101bb98d")
            throw new B.Mo({ factory: ei });
          throw (0, $.P)(y, { ...l, account: eg, chain: e.chain });
        }
      }
      async function scheduleMulticall(e, l) {
        let { batchSize: c = 1024, wait: d = 0 } =
            "object" == typeof e.batch?.multicall ? e.batch.multicall : {},
          {
            blockNumber: m,
            blockTag: g = "latest",
            data: y,
            multicallAddress: C,
            to: P,
          } = l,
          F = C;
        if (!F) {
          if (!e.chain) throw new I.pZ();
          F = (0, G.L)({
            blockNumber: m,
            chain: e.chain,
            contract: "multicall3",
          });
        }
        let $ = m ? (0, Q.eC)(m) : void 0,
          Z = $ || g,
          { schedule: Y } = (0, et.S)({
            id: `${e.uid}.${Z}`,
            wait: d,
            shouldSplitBatch(e) {
              let l = e.reduce((e, { data: l }) => e + (l.length - 2), 0);
              return l > 2 * c;
            },
            fn: async (l) => {
              let c = l.map((e) => ({
                  allowFailure: !0,
                  callData: e.data,
                  target: e.to,
                })),
                d = (0, V.R)({
                  abi: b.F8,
                  args: [c],
                  functionName: "aggregate3",
                }),
                m = await e.request({
                  method: "eth_call",
                  params: [{ data: d, to: F }, Z],
                });
              return (0, N.k)({
                abi: b.F8,
                args: [c],
                functionName: "aggregate3",
                data: m || "0x",
              });
            },
          }),
          [{ returnData: en, success: er }] = await Y({ data: y, to: P });
        if (!er) throw new B.VQ({ data: en });
        return "0x" === en ? { data: void 0 } : { data: en };
      }
    },
    7723: function (e, l, c) {
      "use strict";
      c.d(l, {
        C: function () {
          return internal_estimateFeesPerGas;
        },
        X: function () {
          return estimateFeesPerGas;
        },
      });
      var d = c(95970),
        m = c(59351),
        g = c(47938),
        y = c(17188),
        b = c(74161);
      async function estimateFeesPerGas(e, l) {
        return internal_estimateFeesPerGas(e, l);
      }
      async function internal_estimateFeesPerGas(e, l) {
        let {
            block: c,
            chain: C = e.chain,
            request: P,
            type: I = "eip1559",
          } = l || {},
          B = await (async () =>
            "function" == typeof C?.fees?.baseFeeMultiplier
              ? C.fees.baseFeeMultiplier({ block: c, client: e, request: P })
              : C?.fees?.baseFeeMultiplier ?? 1.2)();
        if (B < 1) throw new d.Fz();
        let N = B.toString().split(".")[1]?.length ?? 0,
          F = 10 ** N,
          multiply = (e) => (e * BigInt(Math.ceil(B * F))) / BigInt(F),
          V = c || (await (0, m.s)(e, y.Q, "getBlock")({}));
        if ("function" == typeof C?.fees?.estimateFeesPerGas) {
          let l = await C.fees.estimateFeesPerGas({
            block: c,
            client: e,
            multiply,
            request: P,
            type: I,
          });
          if (null !== l) return l;
        }
        if ("eip1559" === I) {
          if ("bigint" != typeof V.baseFeePerGas) throw new d.e5();
          let l =
              "bigint" == typeof P?.maxPriorityFeePerGas
                ? P.maxPriorityFeePerGas
                : await (0, g.h)(e, { block: V, chain: C, request: P }),
            c = multiply(V.baseFeePerGas),
            m = P?.maxFeePerGas ?? c + l;
          return { maxFeePerGas: m, maxPriorityFeePerGas: l };
        }
        let G =
          P?.gasPrice ?? multiply(await (0, m.s)(e, b.o, "getGasPrice")({}));
        return { gasPrice: G };
      }
    },
    88911: function (e, l, c) {
      "use strict";
      c.d(l, {
        Q: function () {
          return estimateGas;
        },
      });
      var d = c(40362),
        m = c(26456),
        g = c(44717),
        y = c(1701),
        b = c(61180),
        C = c(41926),
        P = c(39751);
      let EstimateGasExecutionError = class EstimateGasExecutionError extends m.G {
        constructor(
          e,
          {
            account: l,
            docsPath: c,
            chain: d,
            data: m,
            gas: g,
            gasPrice: y,
            maxFeePerGas: I,
            maxPriorityFeePerGas: B,
            nonce: N,
            to: F,
            value: V,
          }
        ) {
          let G = (0, P.xr)({
            from: l?.address,
            to: F,
            value:
              void 0 !== V &&
              `${(0, b.d)(V)} ${d?.nativeCurrency?.symbol || "ETH"}`,
            data: m,
            gas: g,
            gasPrice: void 0 !== y && `${(0, C.o)(y)} gwei`,
            maxFeePerGas: void 0 !== I && `${(0, C.o)(I)} gwei`,
            maxPriorityFeePerGas: void 0 !== B && `${(0, C.o)(B)} gwei`,
            nonce: N,
          });
          super(e.shortMessage, {
            cause: e,
            docsPath: c,
            metaMessages: [
              ...(e.metaMessages ? [...e.metaMessages, " "] : []),
              "Estimate Gas Arguments:",
              G,
            ].filter(Boolean),
            name: "EstimateGasExecutionError",
          }),
            Object.defineProperty(this, "cause", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.cause = e);
        }
      };
      var I = c(78e3),
        B = c(26852),
        N = c(8383),
        F = c(36666),
        V = c(68916),
        G = c(21233),
        Q = c(16886),
        $ = c(99044);
      async function estimateGas(e, l) {
        let { account: c = e.account } = l,
          b = c ? (0, d.T)(c) : void 0;
        try {
          let {
              accessList: c,
              authorizationList: d,
              blobs: C,
              blobVersionedHashes: P,
              blockNumber: I,
              blockTag: B,
              data: Z,
              gas: Y,
              gasPrice: et,
              maxFeePerBlobGas: en,
              maxFeePerGas: er,
              maxPriorityFeePerGas: ei,
              nonce: eo,
              value: ea,
              stateOverride: es,
              ...el
            } = await (0, Q.ZE)(e, {
              ...l,
              parameters:
                b?.type === "local" ? void 0 : ["blobVersionedHashes"],
            }),
            ec = I ? (0, y.eC)(I) : void 0,
            eu = ec || B,
            ed = (0, V.mF)(es),
            ep = await (async () =>
              el.to
                ? el.to
                : d && d.length > 0
                ? await (0, g.z)({ authorization: d[0] }).catch(() => {
                    throw new m.G(
                      "`to` is required. Could not infer from `authorizationList`"
                    );
                  })
                : void 0)();
          (0, G.F)(l);
          let eh = e.chain?.formatters?.transactionRequest?.format,
            ef = eh || F.tG,
            em = ef({
              ...(0, N.K)(el, { format: eh }),
              from: b?.address,
              accessList: c,
              authorizationList: d,
              blobs: C,
              blobVersionedHashes: P,
              data: Z,
              gas: Y,
              gasPrice: et,
              maxFeePerBlobGas: en,
              maxFeePerGas: er,
              maxPriorityFeePerGas: ei,
              nonce: eo,
              to: ep,
              value: ea,
            });
          function estimateGas_rpc(l) {
            let { block: c, request: d, rpcStateOverride: m } = l;
            return e.request({
              method: "eth_estimateGas",
              params: m ? [d, c ?? "latest", m] : c ? [d, c] : [d],
            });
          }
          let eg = BigInt(
            await estimateGas_rpc({
              block: eu,
              request: em,
              rpcStateOverride: ed,
            })
          );
          if (d) {
            let l = await (0, $.s)(e, { address: em.from }),
              c = await Promise.all(
                d.map(async (e) => {
                  let { address: c } = e,
                    d = await estimateGas_rpc({
                      block: eu,
                      request: {
                        authorizationList: void 0,
                        data: Z,
                        from: b?.address,
                        to: c,
                        value: (0, y.eC)(l),
                      },
                      rpcStateOverride: ed,
                    }).catch(() => 100000n);
                  return 2n * BigInt(d);
                })
              );
            eg += c.reduce((e, l) => e + l, 0n);
          }
          return eg;
        } catch (c) {
          throw (function (e, { docsPath: l, ...c }) {
            let d = (() => {
              let l = (0, B.k)(e, c);
              return l instanceof I.cj ? e : l;
            })();
            return new EstimateGasExecutionError(d, { docsPath: l, ...c });
          })(c, { ...l, account: b, chain: e.chain });
        }
      }
    },
    47938: function (e, l, c) {
      "use strict";
      c.d(l, {
        _: function () {
          return estimateMaxPriorityFeePerGas;
        },
        h: function () {
          return internal_estimateMaxPriorityFeePerGas;
        },
      });
      var d = c(95970),
        m = c(3644),
        g = c(59351),
        y = c(17188),
        b = c(74161);
      async function estimateMaxPriorityFeePerGas(e, l) {
        return internal_estimateMaxPriorityFeePerGas(e, l);
      }
      async function internal_estimateMaxPriorityFeePerGas(e, l) {
        let { block: c, chain: C = e.chain, request: P } = l || {};
        try {
          let l = C?.fees?.maxPriorityFeePerGas ?? C?.fees?.defaultPriorityFee;
          if ("function" == typeof l) {
            let d = c || (await (0, g.s)(e, y.Q, "getBlock")({})),
              m = await l({ block: d, client: e, request: P });
            if (null === m) throw Error();
            return m;
          }
          if (void 0 !== l) return l;
          let d = await e.request({ method: "eth_maxPriorityFeePerGas" });
          return (0, m.y_)(d);
        } catch {
          let [l, m] = await Promise.all([
            c ? Promise.resolve(c) : (0, g.s)(e, y.Q, "getBlock")({}),
            (0, g.s)(e, b.o, "getGasPrice")({}),
          ]);
          if ("bigint" != typeof l.baseFeePerGas) throw new d.e5();
          let C = m - l.baseFeePerGas;
          if (C < 0n) return 0n;
          return C;
        }
      }
    },
    99044: function (e, l, c) {
      "use strict";
      c.d(l, {
        s: function () {
          return getBalance;
        },
      });
      var d = c(1701);
      async function getBalance(
        e,
        { address: l, blockNumber: c, blockTag: m = "latest" }
      ) {
        let g = c ? (0, d.eC)(c) : void 0,
          y = await e.request({
            method: "eth_getBalance",
            params: [l, g || m],
          });
        return BigInt(y);
      }
    },
    17188: function (e, l, c) {
      "use strict";
      c.d(l, {
        Q: function () {
          return getBlock;
        },
      });
      var d = c(34054),
        m = c(1701),
        g = c(20503);
      async function getBlock(
        e,
        {
          blockHash: l,
          blockNumber: c,
          blockTag: y,
          includeTransactions: b,
        } = {}
      ) {
        let C = b ?? !1,
          P = void 0 !== c ? (0, m.eC)(c) : void 0,
          I = null;
        if (
          !(I = l
            ? await e.request(
                { method: "eth_getBlockByHash", params: [l, C] },
                { dedupe: !0 }
              )
            : await e.request(
                {
                  method: "eth_getBlockByNumber",
                  params: [P || (y ?? "latest"), C],
                },
                { dedupe: !!P }
              ))
        )
          throw new d.f({ blockHash: l, blockNumber: c });
        let B = e.chain?.formatters?.block?.format || g.Z;
        return B(I);
      }
    },
    99839: function (e, l, c) {
      "use strict";
      c.d(l, {
        z: function () {
          return getBlockNumber;
        },
      });
      let d = new Map(),
        m = new Map();
      async function withCache(
        e,
        { cacheKey: l, cacheTime: c = Number.POSITIVE_INFINITY }
      ) {
        let g = (function (e) {
            let buildCache = (e, l) => ({
                clear: () => l.delete(e),
                get: () => l.get(e),
                set: (c) => l.set(e, c),
              }),
              l = buildCache(e, d),
              c = buildCache(e, m);
            return {
              clear: () => {
                l.clear(), c.clear();
              },
              promise: l,
              response: c,
            };
          })(l),
          y = g.response.get();
        if (y && c > 0) {
          let e = new Date().getTime() - y.created.getTime();
          if (e < c) return y.data;
        }
        let b = g.promise.get();
        b || ((b = e()), g.promise.set(b));
        try {
          let e = await b;
          return g.response.set({ created: new Date(), data: e }), e;
        } finally {
          g.promise.clear();
        }
      }
      let cacheKey = (e) => `blockNumber.${e}`;
      async function getBlockNumber(e, { cacheTime: l = e.cacheTime } = {}) {
        let c = await withCache(
          () => e.request({ method: "eth_blockNumber" }),
          { cacheKey: cacheKey(e.uid), cacheTime: l }
        );
        return BigInt(c);
      }
    },
    61727: function (e, l, c) {
      "use strict";
      c.d(l, {
        L: function () {
          return getChainId;
        },
      });
      var d = c(3644);
      async function getChainId(e) {
        let l = await e.request({ method: "eth_chainId" }, { dedupe: !0 });
        return (0, d.ly)(l);
      }
    },
    74161: function (e, l, c) {
      "use strict";
      async function getGasPrice(e) {
        let l = await e.request({ method: "eth_gasPrice" });
        return BigInt(l);
      }
      c.d(l, {
        o: function () {
          return getGasPrice;
        },
      });
    },
    97704: function (e, l, c) {
      "use strict";
      c.d(l, {
        f: function () {
          return getTransaction;
        },
      });
      var d = c(39751),
        m = c(1701),
        g = c(55009);
      async function getTransaction(
        e,
        { blockHash: l, blockNumber: c, blockTag: y, hash: b, index: C }
      ) {
        let P = y || "latest",
          I = void 0 !== c ? (0, m.eC)(c) : void 0,
          B = null;
        if (
          (b
            ? (B = await e.request(
                { method: "eth_getTransactionByHash", params: [b] },
                { dedupe: !0 }
              ))
            : l
            ? (B = await e.request(
                {
                  method: "eth_getTransactionByBlockHashAndIndex",
                  params: [l, (0, m.eC)(C)],
                },
                { dedupe: !0 }
              ))
            : (I || P) &&
              (B = await e.request(
                {
                  method: "eth_getTransactionByBlockNumberAndIndex",
                  params: [I || P, (0, m.eC)(C)],
                },
                { dedupe: !!I }
              )),
          !B)
        )
          throw new d.Bh({
            blockHash: l,
            blockNumber: c,
            blockTag: P,
            hash: b,
            index: C,
          });
        let N = e.chain?.formatters?.transaction?.format || g.Tr;
        return N(B);
      }
    },
    66564: function (e, l, c) {
      "use strict";
      c.d(l, {
        K: function () {
          return getTransactionCount;
        },
      });
      var d = c(3644),
        m = c(1701);
      async function getTransactionCount(
        e,
        { address: l, blockTag: c = "latest", blockNumber: g }
      ) {
        let y = await e.request(
          {
            method: "eth_getTransactionCount",
            params: [l, g ? (0, m.eC)(g) : c],
          },
          { dedupe: !!g }
        );
        return (0, d.ly)(y);
      }
    },
    59013: function (e, l, c) {
      "use strict";
      c.d(l, {
        a: function () {
          return getTransactionReceipt;
        },
      });
      var d = c(39751),
        m = c(46134);
      async function getTransactionReceipt(e, { hash: l }) {
        let c = await e.request(
          { method: "eth_getTransactionReceipt", params: [l] },
          { dedupe: !0 }
        );
        if (!c) throw new d.Yb({ hash: l });
        let g = e.chain?.formatters?.transactionReceipt?.format || m.fA;
        return g(c);
      }
    },
    78040: function (e, l, c) {
      "use strict";
      c.d(l, {
        A: function () {
          return multicall;
        },
      });
      var d = c(85188),
        m = c(771),
        g = c(26456),
        y = c(40955),
        b = c(15873),
        C = c(28065),
        P = c(21376),
        I = c(3086),
        B = c(59351),
        N = c(66195);
      async function multicall(e, l) {
        let {
            allowFailure: c = !0,
            batchSize: F,
            blockNumber: V,
            blockTag: G,
            multicallAddress: Q,
            stateOverride: $,
          } = l,
          Z = l.contracts,
          Y =
            F ??
            (("object" == typeof e.batch?.multicall &&
              e.batch.multicall.batchSize) ||
              1024),
          et = Q;
        if (!et) {
          if (!e.chain)
            throw Error(
              "client chain not configured. multicallAddress is required."
            );
          et = (0, P.L)({
            blockNumber: V,
            chain: e.chain,
            contract: "multicall3",
          });
        }
        let en = [[]],
          er = 0,
          ei = 0;
        for (let e = 0; e < Z.length; e++) {
          let { abi: l, address: d, args: m, functionName: g } = Z[e];
          try {
            let e = (0, C.R)({ abi: l, args: m, functionName: g });
            (ei += (e.length - 2) / 2),
              Y > 0 &&
                ei > Y &&
                en[er].length > 0 &&
                (er++, (ei = (e.length - 2) / 2), (en[er] = [])),
              (en[er] = [
                ...en[er],
                { allowFailure: !0, callData: e, target: d },
              ]);
          } catch (y) {
            let e = (0, I.S)(y, {
              abi: l,
              address: d,
              args: m,
              docsPath: "/docs/contract/multicall",
              functionName: g,
            });
            if (!c) throw e;
            en[er] = [
              ...en[er],
              { allowFailure: !0, callData: "0x", target: d },
            ];
          }
        }
        let eo = await Promise.allSettled(
            en.map((l) =>
              (0, B.s)(
                e,
                N.L,
                "readContract"
              )({
                abi: d.F8,
                address: et,
                args: [l],
                blockNumber: V,
                blockTag: G,
                functionName: "aggregate3",
                stateOverride: $,
              })
            )
          ),
          ea = [];
        for (let e = 0; e < eo.length; e++) {
          let l = eo[e];
          if ("rejected" === l.status) {
            if (!c) throw l.reason;
            for (let c = 0; c < en[e].length; c++)
              ea.push({ status: "failure", error: l.reason, result: void 0 });
            continue;
          }
          let d = l.value;
          for (let l = 0; l < d.length; l++) {
            let { returnData: g, success: C } = d[l],
              { callData: P } = en[e][l],
              { abi: B, address: N, functionName: F, args: V } = Z[ea.length];
            try {
              if ("0x" === P) throw new m.wb();
              if (!C) throw new y.VQ({ data: g });
              let e = (0, b.k)({ abi: B, args: V, data: g, functionName: F });
              ea.push(c ? { result: e, status: "success" } : e);
            } catch (l) {
              let e = (0, I.S)(l, {
                abi: B,
                address: N,
                args: V,
                docsPath: "/docs/contract/multicall",
                functionName: F,
              });
              if (!c) throw e;
              ea.push({ error: e, result: void 0, status: "failure" });
            }
          }
        }
        if (ea.length !== Z.length) throw new g.G("multicall results mismatch");
        return ea;
      }
    },
    66195: function (e, l, c) {
      "use strict";
      c.d(l, {
        L: function () {
          return readContract;
        },
      });
      var d = c(15873),
        m = c(28065),
        g = c(3086),
        y = c(59351),
        b = c(17675);
      async function readContract(e, l) {
        let { abi: c, address: C, args: P, functionName: I, ...B } = l,
          N = (0, m.R)({ abi: c, args: P, functionName: I });
        try {
          let { data: l } = await (0, y.s)(
            e,
            b.R,
            "call"
          )({ ...B, data: N, to: C });
          return (0, d.k)({
            abi: c,
            args: P,
            functionName: I,
            data: l || "0x",
          });
        } catch (e) {
          throw (0, g.S)(e, {
            abi: c,
            address: C,
            args: P,
            docsPath: "/docs/contract/readContract",
            functionName: I,
          });
        }
      }
    },
    4620: function (e, l, c) {
      "use strict";
      c.d(l, {
        e: function () {
          return waitForTransactionReceipt;
        },
      });
      var d = c(34054),
        m = c(39751),
        g = c(59351),
        y = c(29951),
        b = c(22408),
        C = c(21339),
        P = c(32836),
        I = c(17188),
        B = c(97704),
        N = c(59013),
        F = c(27455);
      async function waitForTransactionReceipt(
        e,
        {
          confirmations: l = 1,
          hash: c,
          onReplaced: V,
          pollingInterval: G = e.pollingInterval,
          retryCount: Q = 6,
          retryDelay: $ = ({ count: e }) => 200 * ~~(1 << e),
          timeout: Z = 18e4,
        }
      ) {
        let Y, et, en;
        let er = (0, P.P)(["waitForTransactionReceipt", e.uid, c]),
          ei = !1,
          { promise: eo, resolve: ea, reject: es } = (0, b.n)(),
          el = Z ? setTimeout(() => es(new m.mc({ hash: c })), Z) : void 0,
          ec = (0, y.N7)(
            er,
            { onReplaced: V, resolve: ea, reject: es },
            (y) => {
              let b = (0, g.s)(
                e,
                F.q,
                "watchBlockNumber"
              )({
                emitMissed: !0,
                emitOnBegin: !0,
                poll: !0,
                pollingInterval: G,
                async onBlockNumber(P) {
                  let done = (e) => {
                      clearTimeout(el), b(), e(), ec();
                    },
                    F = P;
                  if (!ei)
                    try {
                      if (en) {
                        if (
                          l > 1 &&
                          (!en.blockNumber || F - en.blockNumber + 1n < l)
                        )
                          return;
                        done(() => y.resolve(en));
                        return;
                      }
                      if (
                        (Y ||
                          ((ei = !0),
                          await (0, C.J)(
                            async () => {
                              (Y = await (0, g.s)(
                                e,
                                B.f,
                                "getTransaction"
                              )({ hash: c })).blockNumber &&
                                (F = Y.blockNumber);
                            },
                            { delay: $, retryCount: Q }
                          ),
                          (ei = !1)),
                        (en = await (0, g.s)(
                          e,
                          N.a,
                          "getTransactionReceipt"
                        )({ hash: c })),
                        l > 1 &&
                          (!en.blockNumber || F - en.blockNumber + 1n < l))
                      )
                        return;
                      done(() => y.resolve(en));
                    } catch (c) {
                      if (c instanceof m.Bh || c instanceof m.Yb) {
                        if (!Y) {
                          ei = !1;
                          return;
                        }
                        try {
                          (et = Y), (ei = !0);
                          let c = await (0, C.J)(
                            () =>
                              (0, g.s)(
                                e,
                                I.Q,
                                "getBlock"
                              )({ blockNumber: F, includeTransactions: !0 }),
                            {
                              delay: $,
                              retryCount: Q,
                              shouldRetry: ({ error: e }) => e instanceof d.f,
                            }
                          );
                          ei = !1;
                          let m = c.transactions.find(
                            ({ from: e, nonce: l }) =>
                              e === et.from && l === et.nonce
                          );
                          if (
                            !m ||
                            ((en = await (0, g.s)(
                              e,
                              N.a,
                              "getTransactionReceipt"
                            )({ hash: m.hash })),
                            l > 1 &&
                              (!en.blockNumber || F - en.blockNumber + 1n < l))
                          )
                            return;
                          let b = "replaced";
                          m.to === et.to &&
                          m.value === et.value &&
                          m.input === et.input
                            ? (b = "repriced")
                            : m.from === m.to &&
                              0n === m.value &&
                              (b = "cancelled"),
                            done(() => {
                              y.onReplaced?.({
                                reason: b,
                                replacedTransaction: et,
                                transaction: m,
                                transactionReceipt: en,
                              }),
                                y.resolve(en);
                            });
                        } catch (e) {
                          done(() => y.reject(e));
                        }
                      } else done(() => y.reject(c));
                    }
                },
              });
            }
          );
        return eo;
      }
    },
    27455: function (e, l, c) {
      "use strict";
      c.d(l, {
        q: function () {
          return watchBlockNumber;
        },
      });
      var d = c(3644),
        m = c(59351),
        g = c(29951),
        y = c(9075),
        b = c(32836),
        C = c(99839);
      function watchBlockNumber(
        e,
        {
          emitOnBegin: l = !1,
          emitMissed: c = !1,
          onBlockNumber: P,
          onError: I,
          poll: B,
          pollingInterval: N = e.pollingInterval,
        }
      ) {
        let F;
        let V =
          void 0 !== B
            ? B
            : "webSocket" !== e.transport.type &&
              ("fallback" !== e.transport.type ||
                "webSocket" !== e.transport.transports[0].config.type);
        return V
          ? (() => {
              let d = (0, b.P)(["watchBlockNumber", e.uid, l, c, N]);
              return (0, g.N7)(d, { onBlockNumber: P, onError: I }, (d) =>
                (0, y.$)(
                  async () => {
                    try {
                      let l = await (0, m.s)(
                        e,
                        C.z,
                        "getBlockNumber"
                      )({ cacheTime: 0 });
                      if (F) {
                        if (l === F) return;
                        if (l - F > 1 && c)
                          for (let e = F + 1n; e < l; e++)
                            d.onBlockNumber(e, F), (F = e);
                      }
                      (!F || l > F) && (d.onBlockNumber(l, F), (F = l));
                    } catch (e) {
                      d.onError?.(e);
                    }
                  },
                  { emitOnBegin: l, interval: N }
                )
              );
            })()
          : (() => {
              let m = (0, b.P)(["watchBlockNumber", e.uid, l, c]);
              return (0, g.N7)(m, { onBlockNumber: P, onError: I }, (l) => {
                let c = !0,
                  unsubscribe = () => (c = !1);
                return (
                  (async () => {
                    try {
                      let m = (() => {
                          if ("fallback" === e.transport.type) {
                            let l = e.transport.transports.find(
                              (e) => "webSocket" === e.config.type
                            );
                            return l ? l.value : e.transport;
                          }
                          return e.transport;
                        })(),
                        { unsubscribe: g } = await m.subscribe({
                          params: ["newHeads"],
                          onData(e) {
                            if (!c) return;
                            let m = (0, d.y_)(e.result?.number);
                            l.onBlockNumber(m, F), (F = m);
                          },
                          onError(e) {
                            l.onError?.(e);
                          },
                        });
                      (unsubscribe = g), c || unsubscribe();
                    } catch (e) {
                      I?.(e);
                    }
                  })(),
                  () => unsubscribe()
                );
              });
            })();
      }
    },
    16886: function (e, l, c) {
      "use strict";
      c.d(l, {
        QZ: function () {
          return $;
        },
        ZE: function () {
          return prepareTransactionRequest;
        },
      });
      var d = c(40362),
        m = c(7723),
        g = c(88911),
        y = c(17188),
        b = c(66564),
        C = c(95970),
        P = c(17806),
        I = c(43208),
        B = c(31199),
        N = c(99694),
        F = c(59351),
        V = c(21233),
        G = c(48187),
        Q = c(61727);
      let $ = [
          "blobVersionedHashes",
          "chainId",
          "fees",
          "gas",
          "nonce",
          "type",
        ],
        Z = new Map();
      async function prepareTransactionRequest(e, l) {
        let c, Y;
        let {
            account: et = e.account,
            blobs: en,
            chain: er,
            gas: ei,
            kzg: eo,
            nonce: ea,
            nonceManager: es,
            parameters: el = $,
            type: ec,
          } = l,
          eu = et ? (0, d.T)(et) : et,
          ed = { ...l, ...(eu ? { from: eu?.address } : {}) };
        async function getBlock() {
          return (
            c ||
            (c = await (0, F.s)(e, y.Q, "getBlock")({ blockTag: "latest" }))
          );
        }
        async function getChainId() {
          if (Y) return Y;
          if (er) return er.id;
          if (void 0 !== l.chainId) return l.chainId;
          let c = await (0, F.s)(e, Q.L, "getChainId")({});
          return (Y = c);
        }
        if (el.includes("nonce") && void 0 === ea && eu) {
          if (es) {
            let l = await getChainId();
            ed.nonce = await es.consume({
              address: eu.address,
              chainId: l,
              client: e,
            });
          } else
            ed.nonce = await (0, F.s)(
              e,
              b.K,
              "getTransactionCount"
            )({ address: eu.address, blockTag: "pending" });
        }
        if (
          (el.includes("blobVersionedHashes") || el.includes("sidecars")) &&
          en &&
          eo
        ) {
          let e = (0, P.P)({ blobs: en, kzg: eo });
          if (el.includes("blobVersionedHashes")) {
            let l = (0, B.C)({ commitments: e, to: "hex" });
            ed.blobVersionedHashes = l;
          }
          if (el.includes("sidecars")) {
            let l = (0, I.y)({ blobs: en, commitments: e, kzg: eo }),
              c = (0, N.j)({ blobs: en, commitments: e, proofs: l, to: "hex" });
            ed.sidecars = c;
          }
        }
        if (
          (el.includes("chainId") && (ed.chainId = await getChainId()),
          (el.includes("fees") || el.includes("type")) && void 0 === ec)
        )
          try {
            ed.type = (0, G.l)(ed);
          } catch {
            let l = Z.get(e.uid);
            if (void 0 === l) {
              let c = await getBlock();
              (l = "bigint" == typeof c?.baseFeePerGas), Z.set(e.uid, l);
            }
            ed.type = l ? "eip1559" : "legacy";
          }
        if (el.includes("fees")) {
          if ("legacy" !== ed.type && "eip2930" !== ed.type) {
            if (
              void 0 === ed.maxFeePerGas ||
              void 0 === ed.maxPriorityFeePerGas
            ) {
              let c = await getBlock(),
                { maxFeePerGas: d, maxPriorityFeePerGas: g } = await (0, m.C)(
                  e,
                  { block: c, chain: er, request: ed }
                );
              if (
                void 0 === l.maxPriorityFeePerGas &&
                l.maxFeePerGas &&
                l.maxFeePerGas < g
              )
                throw new C.ld({ maxPriorityFeePerGas: g });
              (ed.maxPriorityFeePerGas = g), (ed.maxFeePerGas = d);
            }
          } else {
            if (void 0 !== l.maxFeePerGas || void 0 !== l.maxPriorityFeePerGas)
              throw new C.e5();
            if (void 0 === l.gasPrice) {
              let l = await getBlock(),
                { gasPrice: c } = await (0, m.C)(e, {
                  block: l,
                  chain: er,
                  request: ed,
                  type: "legacy",
                });
              ed.gasPrice = c;
            }
          }
        }
        return (
          el.includes("gas") &&
            void 0 === ei &&
            (ed.gas = await (0, F.s)(
              e,
              g.Q,
              "estimateGas"
            )({
              ...ed,
              account: eu ? { address: eu.address, type: "json-rpc" } : eu,
            })),
          (0, V.F)(ed),
          delete ed.parameters,
          ed
        );
      }
    },
    96279: function (e, l, c) {
      "use strict";
      async function sendRawTransaction(e, { serializedTransaction: l }) {
        return e.request(
          { method: "eth_sendRawTransaction", params: [l] },
          { retryCount: 0 }
        );
      }
      c.d(l, {
        p: function () {
          return sendRawTransaction;
        },
      });
    },
    73662: function (e, l, c) {
      "use strict";
      c.d(l, {
        u: function () {
          return g;
        },
      });
      var d = c(48775),
        m = c(19240);
      let g = (0, m.a)({
        ...d.i,
        id: 8453,
        name: "Base",
        nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
        rpcUrls: { default: { http: ["https://mainnet.base.org"] } },
        blockExplorers: {
          default: {
            name: "Basescan",
            url: "https://basescan.org",
            apiUrl: "https://api.basescan.org/api",
          },
        },
        contracts: {
          ...d.i.contracts,
          disputeGameFactory: {
            1: { address: "0x43edB88C4B80fDD2AdFF2412A7BebF9dF42cB40e" },
          },
          l2OutputOracle: {
            1: { address: "0x56315b90c40730925ec5485cf004d835058518A0" },
          },
          multicall3: {
            address: "0xca11bde05977b3631167028862be2a173976ca11",
            blockCreated: 5022,
          },
          portal: {
            1: {
              address: "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
              blockCreated: 17482143,
            },
          },
          l1StandardBridge: {
            1: {
              address: "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
              blockCreated: 17482143,
            },
          },
        },
        sourceId: 1,
      });
    },
    47505: function (e, l, c) {
      "use strict";
      c.d(l, {
        R: function () {
          return m;
        },
      });
      var d = c(19240);
      let m = (0, d.a)({
        id: 1,
        name: "Ethereum",
        nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
        rpcUrls: { default: { http: ["https://eth.merkle.io"] } },
        blockExplorers: {
          default: {
            name: "Etherscan",
            url: "https://etherscan.io",
            apiUrl: "https://api.etherscan.io/api",
          },
        },
        contracts: {
          ensRegistry: {
            address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          },
          ensUniversalResolver: {
            address: "0xce01f8eee7E479C928F8919abD53E553a36CeF67",
            blockCreated: 19258213,
          },
          multicall3: {
            address: "0xca11bde05977b3631167028862be2a173976ca11",
            blockCreated: 14353601,
          },
        },
      });
    },
    78907: function (e, l, c) {
      "use strict";
      c.d(l, {
        e: function () {
          return createClient;
        },
      });
      var d = c(40362),
        m = c(40130);
      function createClient(e) {
        let {
            batch: l,
            cacheTime: c = e.pollingInterval ?? 4e3,
            ccipRead: g,
            key: y = "base",
            name: b = "Base Client",
            pollingInterval: C = 4e3,
            type: P = "base",
          } = e,
          I = e.chain,
          B = e.account ? (0, d.T)(e.account) : void 0,
          {
            config: N,
            request: F,
            value: V,
          } = e.transport({ chain: I, pollingInterval: C }),
          G = { ...N, ...V },
          Q = {
            account: B,
            batch: l,
            cacheTime: c,
            ccipRead: g,
            chain: I,
            key: y,
            name: b,
            pollingInterval: C,
            request: F,
            transport: G,
            type: P,
            uid: (0, m.h)(),
          };
        return Object.assign(Q, {
          extend: (function extend(e) {
            return (l) => {
              let c = l(e);
              for (let e in Q) delete c[e];
              let d = { ...e, ...c };
              return Object.assign(d, { extend: extend(d) });
            };
          })(Q),
        });
      }
    },
    93265: function (e, l, c) {
      "use strict";
      c.d(l, {
        q: function () {
          return createTransport;
        },
      });
      var d = c(26456),
        m = c(69699),
        g = c(42991),
        y = c(1701),
        b = c(94065);
      let C = new b.k(8192);
      var P = c(21339),
        I = c(32836),
        B = c(40130);
      function createTransport(
        {
          key: e,
          methods: l,
          name: c,
          request: b,
          retryCount: N = 3,
          retryDelay: F = 150,
          timeout: V,
          type: G,
        },
        Q
      ) {
        let $ = (0, B.h)();
        return {
          config: {
            key: e,
            methods: l,
            name: c,
            request: b,
            retryCount: N,
            retryDelay: F,
            timeout: V,
            type: G,
          },
          request: (function (e, l = {}) {
            return async (c, b = {}) => {
              let {
                  dedupe: B = !1,
                  methods: N,
                  retryDelay: F = 150,
                  retryCount: V = 3,
                  uid: G,
                } = { ...l, ...b },
                { method: Q } = c;
              if (
                N?.exclude?.includes(Q) ||
                (N?.include && !N.include.includes(Q))
              )
                throw new g.gS(Error("method not supported"), { method: Q });
              let $ = B ? (0, y.$G)(`${G}.${(0, I.P)(c)}`) : void 0;
              return (function (e, { enabled: l = !0, id: c }) {
                if (!l || !c) return e();
                if (C.get(c)) return C.get(c);
                let d = e().finally(() => C.delete(c));
                return C.set(c, d), d;
              })(
                () =>
                  (0, P.J)(
                    async () => {
                      try {
                        return await e(c);
                      } catch (e) {
                        switch (e.code) {
                          case g.s7.code:
                            throw new g.s7(e);
                          case g.B.code:
                            throw new g.B(e);
                          case g.LX.code:
                            throw new g.LX(e, { method: c.method });
                          case g.nY.code:
                            throw new g.nY(e);
                          case g.XS.code:
                            throw new g.XS(e);
                          case g.yR.code:
                            throw new g.yR(e);
                          case g.Og.code:
                            throw new g.Og(e);
                          case g.pT.code:
                            throw new g.pT(e);
                          case g.KB.code:
                            throw new g.KB(e);
                          case g.gS.code:
                            throw new g.gS(e, { method: c.method });
                          case g.Pv.code:
                            throw new g.Pv(e);
                          case g.GD.code:
                            throw new g.GD(e);
                          case g.ab.code:
                            throw new g.ab(e);
                          case g.PE.code:
                            throw new g.PE(e);
                          case g.Ts.code:
                            throw new g.Ts(e);
                          case g.u5.code:
                            throw new g.u5(e);
                          case g.I0.code:
                            throw new g.I0(e);
                          case g.x3.code:
                            throw new g.x3(e);
                          case g.vl.code:
                            throw new g.vl(e);
                          case g.Uu.code:
                            throw new g.Uu(e);
                          case g.Nt.code:
                            throw new g.Nt(e);
                          case g.EJ.code:
                            throw new g.EJ(e);
                          case g.fl.code:
                            throw new g.fl(e);
                          case g.NO.code:
                            throw new g.NO(e);
                          case g.r0.code:
                            throw new g.r0(e);
                          case 5e3:
                            throw new g.ab(e);
                          default:
                            if (e instanceof d.G) throw e;
                            throw new g.ir(e);
                        }
                      }
                    },
                    {
                      delay: ({ count: e, error: l }) => {
                        if (l && l instanceof m.Gg) {
                          let e = l?.headers?.get("Retry-After");
                          if (e?.match(/\d/)) return 1e3 * Number.parseInt(e);
                        }
                        return ~~(1 << e) * F;
                      },
                      retryCount: V,
                      shouldRetry: ({ error: e }) =>
                        "code" in e && "number" == typeof e.code
                          ? -1 === e.code ||
                            e.code === g.Pv.code ||
                            e.code === g.XS.code
                          : !(e instanceof m.Gg) ||
                            !e.status ||
                            403 === e.status ||
                            408 === e.status ||
                            413 === e.status ||
                            429 === e.status ||
                            500 === e.status ||
                            502 === e.status ||
                            503 === e.status ||
                            504 === e.status,
                    }
                  ),
                { enabled: B, id: $ }
              );
            };
          })(b, { methods: l, retryCount: N, retryDelay: F, uid: $ }),
          value: Q,
        };
      }
    },
    54022: function (e, l, c) {
      "use strict";
      c.d(l, {
        P: function () {
          return custom;
        },
      });
      var d = c(93265);
      function custom(e, l = {}) {
        let {
          key: c = "custom",
          methods: m,
          name: g = "Custom Provider",
          retryDelay: y,
        } = l;
        return ({ retryCount: b }) =>
          (0, d.q)({
            key: c,
            methods: m,
            name: g,
            request: e.request.bind(e),
            retryCount: l.retryCount ?? b,
            retryDelay: y,
            type: "custom",
          });
      }
    },
    11654: function (e, l, c) {
      "use strict";
      c.d(l, {
        d: function () {
          return http;
        },
      });
      var d = c(69699),
        m = c(26456);
      let UrlRequiredError = class UrlRequiredError extends m.G {
        constructor() {
          super(
            "No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.",
            { docsPath: "/docs/clients/intro", name: "UrlRequiredError" }
          );
        }
      };
      var g = c(92283),
        y = c(24770),
        b = c(32836);
      let C = {
        current: 0,
        take() {
          return this.current++;
        },
        reset() {
          this.current = 0;
        },
      };
      var P = c(93265);
      function http(e, l = {}) {
        let {
          batch: c,
          fetchOptions: m,
          key: I = "http",
          methods: B,
          name: N = "HTTP JSON-RPC",
          onFetchRequest: F,
          onFetchResponse: V,
          retryDelay: G,
          raw: Q,
        } = l;
        return ({ chain: $, retryCount: Z, timeout: Y }) => {
          let { batchSize: et = 1e3, wait: en = 0 } =
              "object" == typeof c ? c : {},
            er = l.retryCount ?? Z,
            ei = Y ?? l.timeout ?? 1e4,
            eo = e || $?.rpcUrls.default.http[0];
          if (!eo) throw new UrlRequiredError();
          let ea = (function (e, l = {}) {
            return {
              async request(c) {
                let {
                    body: m,
                    onRequest: g = l.onRequest,
                    onResponse: P = l.onResponse,
                    timeout: I = l.timeout ?? 1e4,
                  } = c,
                  B = { ...(l.fetchOptions ?? {}), ...(c.fetchOptions ?? {}) },
                  { headers: N, method: F, signal: V } = B;
                try {
                  let l;
                  let c = await (0, y.F)(
                    async ({ signal: l }) => {
                      let c = {
                          ...B,
                          body: Array.isArray(m)
                            ? (0, b.P)(
                                m.map((e) => ({
                                  jsonrpc: "2.0",
                                  id: e.id ?? C.take(),
                                  ...e,
                                }))
                              )
                            : (0, b.P)({
                                jsonrpc: "2.0",
                                id: m.id ?? C.take(),
                                ...m,
                              }),
                          headers: { "Content-Type": "application/json", ...N },
                          method: F || "POST",
                          signal: V || (I > 0 ? l : null),
                        },
                        d = new Request(e, c),
                        y = (await g?.(d, c)) ?? { ...c, url: e },
                        P = await fetch(y.url ?? e, y);
                      return P;
                    },
                    {
                      errorInstance: new d.W5({ body: m, url: e }),
                      timeout: I,
                      signal: !0,
                    }
                  );
                  if (
                    (P && (await P(c)),
                    c.headers
                      .get("Content-Type")
                      ?.startsWith("application/json"))
                  )
                    l = await c.json();
                  else {
                    l = await c.text();
                    try {
                      l = JSON.parse(l || "{}");
                    } catch (e) {
                      if (c.ok) throw e;
                      l = { error: l };
                    }
                  }
                  if (!c.ok)
                    throw new d.Gg({
                      body: m,
                      details: (0, b.P)(l.error) || c.statusText,
                      headers: c.headers,
                      status: c.status,
                      url: e,
                    });
                  return l;
                } catch (l) {
                  if (l instanceof d.Gg || l instanceof d.W5) throw l;
                  throw new d.Gg({ body: m, cause: l, url: e });
                }
              },
            };
          })(eo, { fetchOptions: m, onRequest: F, onResponse: V, timeout: ei });
          return (0, P.q)(
            {
              key: I,
              methods: B,
              name: N,
              async request({ method: e, params: l }) {
                let m = { method: e, params: l },
                  { schedule: y } = (0, g.S)({
                    id: eo,
                    wait: en,
                    shouldSplitBatch: (e) => e.length > et,
                    fn: (e) => ea.request({ body: e }),
                    sort: (e, l) => e.id - l.id,
                  }),
                  fn = async (e) =>
                    c ? y(e) : [await ea.request({ body: e })],
                  [{ error: b, result: C }] = await fn(m);
                if (Q) return { error: b, result: C };
                if (b) throw new d.bs({ body: m, error: b, url: eo });
                return C;
              },
              retryCount: er,
              retryDelay: G,
              timeout: ei,
              type: "http",
            },
            { fetchOptions: m, url: eo }
          );
        };
      }
    },
    85188: function (e, l, c) {
      "use strict";
      c.d(l, {
        $o: function () {
          return I;
        },
        F8: function () {
          return d;
        },
        Wo: function () {
          return B;
        },
        X$: function () {
          return P;
        },
        Yi: function () {
          return m;
        },
        du: function () {
          return b;
        },
        k3: function () {
          return y;
        },
        nZ: function () {
          return C;
        },
      });
      let d = [
          {
            inputs: [
              {
                components: [
                  { name: "target", type: "address" },
                  { name: "allowFailure", type: "bool" },
                  { name: "callData", type: "bytes" },
                ],
                name: "calls",
                type: "tuple[]",
              },
            ],
            name: "aggregate3",
            outputs: [
              {
                components: [
                  { name: "success", type: "bool" },
                  { name: "returnData", type: "bytes" },
                ],
                name: "returnData",
                type: "tuple[]",
              },
            ],
            stateMutability: "view",
            type: "function",
          },
        ],
        m = [
          {
            name: "query",
            type: "function",
            stateMutability: "view",
            inputs: [
              {
                type: "tuple[]",
                name: "queries",
                components: [
                  { type: "address", name: "sender" },
                  { type: "string[]", name: "urls" },
                  { type: "bytes", name: "data" },
                ],
              },
            ],
            outputs: [
              { type: "bool[]", name: "failures" },
              { type: "bytes[]", name: "responses" },
            ],
          },
          {
            name: "HttpError",
            type: "error",
            inputs: [
              { type: "uint16", name: "status" },
              { type: "string", name: "message" },
            ],
          },
        ],
        g = [
          { inputs: [], name: "ResolverNotFound", type: "error" },
          { inputs: [], name: "ResolverWildcardNotSupported", type: "error" },
          { inputs: [], name: "ResolverNotContract", type: "error" },
          {
            inputs: [{ name: "returnData", type: "bytes" }],
            name: "ResolverError",
            type: "error",
          },
          {
            inputs: [
              {
                components: [
                  { name: "status", type: "uint16" },
                  { name: "message", type: "string" },
                ],
                name: "errors",
                type: "tuple[]",
              },
            ],
            name: "HttpError",
            type: "error",
          },
        ],
        y = [
          ...g,
          {
            name: "resolve",
            type: "function",
            stateMutability: "view",
            inputs: [
              { name: "name", type: "bytes" },
              { name: "data", type: "bytes" },
            ],
            outputs: [
              { name: "", type: "bytes" },
              { name: "address", type: "address" },
            ],
          },
          {
            name: "resolve",
            type: "function",
            stateMutability: "view",
            inputs: [
              { name: "name", type: "bytes" },
              { name: "data", type: "bytes" },
              { name: "gateways", type: "string[]" },
            ],
            outputs: [
              { name: "", type: "bytes" },
              { name: "address", type: "address" },
            ],
          },
        ],
        b = [
          ...g,
          {
            name: "reverse",
            type: "function",
            stateMutability: "view",
            inputs: [{ type: "bytes", name: "reverseName" }],
            outputs: [
              { type: "string", name: "resolvedName" },
              { type: "address", name: "resolvedAddress" },
              { type: "address", name: "reverseResolver" },
              { type: "address", name: "resolver" },
            ],
          },
          {
            name: "reverse",
            type: "function",
            stateMutability: "view",
            inputs: [
              { type: "bytes", name: "reverseName" },
              { type: "string[]", name: "gateways" },
            ],
            outputs: [
              { type: "string", name: "resolvedName" },
              { type: "address", name: "resolvedAddress" },
              { type: "address", name: "reverseResolver" },
              { type: "address", name: "resolver" },
            ],
          },
        ],
        C = [
          {
            name: "text",
            type: "function",
            stateMutability: "view",
            inputs: [
              { name: "name", type: "bytes32" },
              { name: "key", type: "string" },
            ],
            outputs: [{ name: "", type: "string" }],
          },
        ],
        P = [
          {
            name: "addr",
            type: "function",
            stateMutability: "view",
            inputs: [{ name: "name", type: "bytes32" }],
            outputs: [{ name: "", type: "address" }],
          },
          {
            name: "addr",
            type: "function",
            stateMutability: "view",
            inputs: [
              { name: "name", type: "bytes32" },
              { name: "coinType", type: "uint256" },
            ],
            outputs: [{ name: "", type: "bytes" }],
          },
        ],
        I = [
          {
            inputs: [
              { name: "_signer", type: "address" },
              { name: "_hash", type: "bytes32" },
              { name: "_signature", type: "bytes" },
            ],
            stateMutability: "nonpayable",
            type: "constructor",
          },
          {
            inputs: [
              { name: "_signer", type: "address" },
              { name: "_hash", type: "bytes32" },
              { name: "_signature", type: "bytes" },
            ],
            outputs: [{ type: "bool" }],
            stateMutability: "nonpayable",
            type: "function",
            name: "isValidSig",
          },
        ],
        B = [
          {
            type: "event",
            name: "Approval",
            inputs: [
              { indexed: !0, name: "owner", type: "address" },
              { indexed: !0, name: "spender", type: "address" },
              { indexed: !1, name: "value", type: "uint256" },
            ],
          },
          {
            type: "event",
            name: "Transfer",
            inputs: [
              { indexed: !0, name: "from", type: "address" },
              { indexed: !0, name: "to", type: "address" },
              { indexed: !1, name: "value", type: "uint256" },
            ],
          },
          {
            type: "function",
            name: "allowance",
            stateMutability: "view",
            inputs: [
              { name: "owner", type: "address" },
              { name: "spender", type: "address" },
            ],
            outputs: [{ type: "uint256" }],
          },
          {
            type: "function",
            name: "approve",
            stateMutability: "nonpayable",
            inputs: [
              { name: "spender", type: "address" },
              { name: "amount", type: "uint256" },
            ],
            outputs: [{ type: "bool" }],
          },
          {
            type: "function",
            name: "balanceOf",
            stateMutability: "view",
            inputs: [{ name: "account", type: "address" }],
            outputs: [{ type: "uint256" }],
          },
          {
            type: "function",
            name: "decimals",
            stateMutability: "view",
            inputs: [],
            outputs: [{ type: "uint8" }],
          },
          {
            type: "function",
            name: "name",
            stateMutability: "view",
            inputs: [],
            outputs: [{ type: "string" }],
          },
          {
            type: "function",
            name: "symbol",
            stateMutability: "view",
            inputs: [],
            outputs: [{ type: "string" }],
          },
          {
            type: "function",
            name: "totalSupply",
            stateMutability: "view",
            inputs: [],
            outputs: [{ type: "uint256" }],
          },
          {
            type: "function",
            name: "transfer",
            stateMutability: "nonpayable",
            inputs: [
              { name: "recipient", type: "address" },
              { name: "amount", type: "uint256" },
            ],
            outputs: [{ type: "bool" }],
          },
          {
            type: "function",
            name: "transferFrom",
            stateMutability: "nonpayable",
            inputs: [
              { name: "sender", type: "address" },
              { name: "recipient", type: "address" },
              { name: "amount", type: "uint256" },
            ],
            outputs: [{ type: "bool" }],
          },
        ];
    },
    19739: function (e, l, c) {
      "use strict";
      c.d(l, {
        NO: function () {
          return d;
        },
        ST: function () {
          return g;
        },
        pG: function () {
          return m;
        },
      });
      let d =
          "0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe",
        m =
          "0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe",
        g =
          "0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572";
    },
    83204: function (e, l, c) {
      "use strict";
      c.d(l, {
        l: function () {
          return d;
        },
      });
      let d = 1;
    },
    46010: function (e, l, c) {
      "use strict";
      c.d(l, {
        rU: function () {
          return d;
        },
        zL: function () {
          return m;
        },
      });
      let d = 2n ** 16n - 1n,
        m = 2n ** 256n - 1n;
    },
    94516: function (e, l, c) {
      "use strict";
      c.d(l, {
        $: function () {
          return d;
        },
        Up: function () {
          return m;
        },
        hZ: function () {
          return g;
        },
      });
      let d = {
          1: "An `assert` condition failed.",
          17: "Arithmetic operation resulted in underflow or overflow.",
          18: "Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).",
          33: "Attempted to convert to an invalid type.",
          34: "Attempted to access a storage byte array that is incorrectly encoded.",
          49: "Performed `.pop()` on an empty array",
          50: "Array index is out of bounds.",
          65: "Allocated too much memory or created an array which is too large.",
          81: "Attempted to call a zero-initialized variable of internal function type.",
        },
        m = {
          inputs: [{ name: "message", type: "string" }],
          name: "Error",
          type: "error",
        },
        g = {
          inputs: [{ name: "reason", type: "uint256" }],
          name: "Panic",
          type: "error",
        };
    },
    43778: function (e, l, c) {
      "use strict";
      c.d(l, {
        Bd: function () {
          return g;
        },
        Zn: function () {
          return m;
        },
        ez: function () {
          return d;
        },
      });
      let d = { gwei: 9, wei: 18 },
        m = { ether: -9, wei: 9 },
        g = { ether: -18, gwei: -9 };
    },
    771: function (e, l, c) {
      "use strict";
      c.d(l, {
        CI: function () {
          return InvalidAbiDecodingTypeError;
        },
        FM: function () {
          return AbiEventSignatureEmptyTopicsError;
        },
        Gy: function () {
          return DecodeLogTopicsMismatch;
        },
        KY: function () {
          return BytesSizeMismatchError;
        },
        M4: function () {
          return AbiEncodingBytesSizeMismatchError;
        },
        MS: function () {
          return AbiErrorNotFoundError;
        },
        MX: function () {
          return AbiFunctionOutputsNotFoundError;
        },
        S4: function () {
          return AbiItemAmbiguityError;
        },
        SM: function () {
          return DecodeLogDataMismatch;
        },
        Zh: function () {
          return AbiErrorInputsNotFoundError;
        },
        cO: function () {
          return AbiConstructorParamsNotFoundError;
        },
        dh: function () {
          return InvalidAbiEncodingTypeError;
        },
        eF: function () {
          return AbiFunctionSignatureNotFoundError;
        },
        fM: function () {
          return AbiConstructorNotFoundError;
        },
        fs: function () {
          return AbiEncodingLengthMismatchError;
        },
        gr: function () {
          return AbiEncodingArrayLengthMismatchError;
        },
        hn: function () {
          return InvalidArrayError;
        },
        lC: function () {
          return AbiEventSignatureNotFoundError;
        },
        mv: function () {
          return AbiEventNotFoundError;
        },
        wM: function () {
          return InvalidDefinitionTypeError;
        },
        wb: function () {
          return AbiDecodingZeroDataError;
        },
        xB: function () {
          return AbiDecodingDataSizeTooSmallError;
        },
        xL: function () {
          return AbiFunctionNotFoundError;
        },
        yP: function () {
          return AbiErrorSignatureNotFoundError;
        },
      });
      var d = c(21283),
        m = c(59679),
        g = c(26456);
      let AbiConstructorNotFoundError = class AbiConstructorNotFoundError extends g.G {
        constructor({ docsPath: e }) {
          super(
            "A constructor was not found on the ABI.\nMake sure you are using the correct ABI and that the constructor exists on it.",
            { docsPath: e, name: "AbiConstructorNotFoundError" }
          );
        }
      };
      let AbiConstructorParamsNotFoundError = class AbiConstructorParamsNotFoundError extends g.G {
        constructor({ docsPath: e }) {
          super(
            "Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.\nMake sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.",
            { docsPath: e, name: "AbiConstructorParamsNotFoundError" }
          );
        }
      };
      let AbiDecodingDataSizeTooSmallError = class AbiDecodingDataSizeTooSmallError extends g.G {
        constructor({ data: e, params: l, size: c }) {
          super(`Data size of ${c} bytes is too small for given parameters.`, {
            metaMessages: [
              `Params: (${(0, d.h)(l, { includeName: !0 })})`,
              `Data:   ${e} (${c} bytes)`,
            ],
            name: "AbiDecodingDataSizeTooSmallError",
          }),
            Object.defineProperty(this, "data", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "params", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "size", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.data = e),
            (this.params = l),
            (this.size = c);
        }
      };
      let AbiDecodingZeroDataError = class AbiDecodingZeroDataError extends g.G {
        constructor() {
          super('Cannot decode zero data ("0x") with ABI parameters.', {
            name: "AbiDecodingZeroDataError",
          });
        }
      };
      let AbiEncodingArrayLengthMismatchError = class AbiEncodingArrayLengthMismatchError extends g.G {
        constructor({ expectedLength: e, givenLength: l, type: c }) {
          super(
            `ABI encoding array length mismatch for type ${c}.
Expected length: ${e}
Given length: ${l}`,
            { name: "AbiEncodingArrayLengthMismatchError" }
          );
        }
      };
      let AbiEncodingBytesSizeMismatchError = class AbiEncodingBytesSizeMismatchError extends g.G {
        constructor({ expectedSize: e, value: l }) {
          super(
            `Size of bytes "${l}" (bytes${(0, m.d)(
              l
            )}) does not match expected size (bytes${e}).`,
            { name: "AbiEncodingBytesSizeMismatchError" }
          );
        }
      };
      let AbiEncodingLengthMismatchError = class AbiEncodingLengthMismatchError extends g.G {
        constructor({ expectedLength: e, givenLength: l }) {
          super(
            `ABI encoding params/values length mismatch.
Expected length (params): ${e}
Given length (values): ${l}`,
            { name: "AbiEncodingLengthMismatchError" }
          );
        }
      };
      let AbiErrorInputsNotFoundError = class AbiErrorInputsNotFoundError extends g.G {
        constructor(e, { docsPath: l }) {
          super(
            `Arguments (\`args\`) were provided to "${e}", but "${e}" on the ABI does not contain any parameters (\`inputs\`).
Cannot encode error result without knowing what the parameter types are.
Make sure you are using the correct ABI and that the inputs exist on it.`,
            { docsPath: l, name: "AbiErrorInputsNotFoundError" }
          );
        }
      };
      let AbiErrorNotFoundError = class AbiErrorNotFoundError extends g.G {
        constructor(e, { docsPath: l } = {}) {
          super(
            `Error ${e ? `"${e}" ` : ""}not found on ABI.
Make sure you are using the correct ABI and that the error exists on it.`,
            { docsPath: l, name: "AbiErrorNotFoundError" }
          );
        }
      };
      let AbiErrorSignatureNotFoundError = class AbiErrorSignatureNotFoundError extends g.G {
        constructor(e, { docsPath: l }) {
          super(
            `Encoded error signature "${e}" not found on ABI.
Make sure you are using the correct ABI and that the error exists on it.
You can look up the decoded signature here: https://openchain.xyz/signatures?query=${e}.`,
            { docsPath: l, name: "AbiErrorSignatureNotFoundError" }
          ),
            Object.defineProperty(this, "signature", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.signature = e);
        }
      };
      let AbiEventSignatureEmptyTopicsError = class AbiEventSignatureEmptyTopicsError extends g.G {
        constructor({ docsPath: e }) {
          super("Cannot extract event signature from empty topics.", {
            docsPath: e,
            name: "AbiEventSignatureEmptyTopicsError",
          });
        }
      };
      let AbiEventSignatureNotFoundError = class AbiEventSignatureNotFoundError extends g.G {
        constructor(e, { docsPath: l }) {
          super(
            `Encoded event signature "${e}" not found on ABI.
Make sure you are using the correct ABI and that the event exists on it.
You can look up the signature here: https://openchain.xyz/signatures?query=${e}.`,
            { docsPath: l, name: "AbiEventSignatureNotFoundError" }
          );
        }
      };
      let AbiEventNotFoundError = class AbiEventNotFoundError extends g.G {
        constructor(e, { docsPath: l } = {}) {
          super(
            `Event ${e ? `"${e}" ` : ""}not found on ABI.
Make sure you are using the correct ABI and that the event exists on it.`,
            { docsPath: l, name: "AbiEventNotFoundError" }
          );
        }
      };
      let AbiFunctionNotFoundError = class AbiFunctionNotFoundError extends g.G {
        constructor(e, { docsPath: l } = {}) {
          super(
            `Function ${e ? `"${e}" ` : ""}not found on ABI.
Make sure you are using the correct ABI and that the function exists on it.`,
            { docsPath: l, name: "AbiFunctionNotFoundError" }
          );
        }
      };
      let AbiFunctionOutputsNotFoundError = class AbiFunctionOutputsNotFoundError extends g.G {
        constructor(e, { docsPath: l }) {
          super(
            `Function "${e}" does not contain any \`outputs\` on ABI.
Cannot decode function result without knowing what the parameter types are.
Make sure you are using the correct ABI and that the function exists on it.`,
            { docsPath: l, name: "AbiFunctionOutputsNotFoundError" }
          );
        }
      };
      let AbiFunctionSignatureNotFoundError = class AbiFunctionSignatureNotFoundError extends g.G {
        constructor(e, { docsPath: l }) {
          super(
            `Encoded function signature "${e}" not found on ABI.
Make sure you are using the correct ABI and that the function exists on it.
You can look up the signature here: https://openchain.xyz/signatures?query=${e}.`,
            { docsPath: l, name: "AbiFunctionSignatureNotFoundError" }
          );
        }
      };
      let AbiItemAmbiguityError = class AbiItemAmbiguityError extends g.G {
        constructor(e, l) {
          super("Found ambiguous types in overloaded ABI items.", {
            metaMessages: [
              `\`${e.type}\` in \`${(0, d.t)(e.abiItem)}\`, and`,
              `\`${l.type}\` in \`${(0, d.t)(l.abiItem)}\``,
              "",
              "These types encode differently and cannot be distinguished at runtime.",
              "Remove one of the ambiguous items in the ABI.",
            ],
            name: "AbiItemAmbiguityError",
          });
        }
      };
      let BytesSizeMismatchError = class BytesSizeMismatchError extends g.G {
        constructor({ expectedSize: e, givenSize: l }) {
          super(`Expected bytes${e}, got bytes${l}.`, {
            name: "BytesSizeMismatchError",
          });
        }
      };
      let DecodeLogDataMismatch = class DecodeLogDataMismatch extends g.G {
        constructor({ abiItem: e, data: l, params: c, size: m }) {
          super(
            `Data size of ${m} bytes is too small for non-indexed event parameters.`,
            {
              metaMessages: [
                `Params: (${(0, d.h)(c, { includeName: !0 })})`,
                `Data:   ${l} (${m} bytes)`,
              ],
              name: "DecodeLogDataMismatch",
            }
          ),
            Object.defineProperty(this, "abiItem", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "data", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "params", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "size", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.abiItem = e),
            (this.data = l),
            (this.params = c),
            (this.size = m);
        }
      };
      let DecodeLogTopicsMismatch = class DecodeLogTopicsMismatch extends g.G {
        constructor({ abiItem: e, param: l }) {
          super(
            `Expected a topic for indexed event parameter${
              l.name ? ` "${l.name}"` : ""
            } on event "${(0, d.t)(e, { includeName: !0 })}".`,
            { name: "DecodeLogTopicsMismatch" }
          ),
            Object.defineProperty(this, "abiItem", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.abiItem = e);
        }
      };
      let InvalidAbiEncodingTypeError = class InvalidAbiEncodingTypeError extends g.G {
        constructor(e, { docsPath: l }) {
          super(
            `Type "${e}" is not a valid encoding type.
Please provide a valid ABI type.`,
            { docsPath: l, name: "InvalidAbiEncodingType" }
          );
        }
      };
      let InvalidAbiDecodingTypeError = class InvalidAbiDecodingTypeError extends g.G {
        constructor(e, { docsPath: l }) {
          super(
            `Type "${e}" is not a valid decoding type.
Please provide a valid ABI type.`,
            { docsPath: l, name: "InvalidAbiDecodingType" }
          );
        }
      };
      let InvalidArrayError = class InvalidArrayError extends g.G {
        constructor(e) {
          super(`Value "${e}" is not a valid array.`, {
            name: "InvalidArrayError",
          });
        }
      };
      let InvalidDefinitionTypeError = class InvalidDefinitionTypeError extends g.G {
        constructor(e) {
          super(
            `"${e}" is not a valid definition type.
Valid types: "function", "event", "error"`,
            { name: "InvalidDefinitionTypeError" }
          );
        }
      };
    },
    68311: function (e, l, c) {
      "use strict";
      c.d(l, {
        Y: function () {
          return AccountTypeNotSupportedError;
        },
        o: function () {
          return AccountNotFoundError;
        },
      });
      var d = c(26456);
      let AccountNotFoundError = class AccountNotFoundError extends d.G {
        constructor({ docsPath: e } = {}) {
          super(
            "Could not find an Account to execute with this Action.\nPlease provide an Account with the `account` argument on the Action, or by supplying an `account` to the Client.",
            { docsPath: e, docsSlug: "account", name: "AccountNotFoundError" }
          );
        }
      };
      let AccountTypeNotSupportedError = class AccountTypeNotSupportedError extends d.G {
        constructor({ docsPath: e, metaMessages: l, type: c }) {
          super(`Account type "${c}" is not supported.`, {
            docsPath: e,
            metaMessages: l,
            name: "AccountTypeNotSupportedError",
          });
        }
      };
    },
    63964: function (e, l, c) {
      "use strict";
      c.d(l, {
        b: function () {
          return InvalidAddressError;
        },
      });
      var d = c(26456);
      let InvalidAddressError = class InvalidAddressError extends d.G {
        constructor({ address: e }) {
          super(`Address "${e}" is invalid.`, {
            metaMessages: [
              "- Address must be a hex value of 20 bytes (40 hex characters).",
              "- Address must match its checksum counterpart.",
            ],
            name: "InvalidAddressError",
          });
        }
      };
    },
    26456: function (e, l, c) {
      "use strict";
      c.d(l, {
        G: function () {
          return BaseError;
        },
      });
      let d = "2.28.0",
        m = {
          getDocsUrl: ({ docsBaseUrl: e, docsPath: l = "", docsSlug: c }) =>
            l ? `${e ?? "https://viem.sh"}${l}${c ? `#${c}` : ""}` : void 0,
          version: `viem@${d}`,
        };
      let BaseError = class BaseError extends Error {
        constructor(e, l = {}) {
          let c =
              l.cause instanceof BaseError
                ? l.cause.details
                : l.cause?.message
                ? l.cause.message
                : l.details,
            g =
              (l.cause instanceof BaseError && l.cause.docsPath) || l.docsPath,
            y = m.getDocsUrl?.({ ...l, docsPath: g }),
            b = [
              e || "An error occurred.",
              "",
              ...(l.metaMessages ? [...l.metaMessages, ""] : []),
              ...(y ? [`Docs: ${y}`] : []),
              ...(c ? [`Details: ${c}`] : []),
              ...(m.version ? [`Version: ${m.version}`] : []),
            ].join("\n");
          super(b, l.cause ? { cause: l.cause } : void 0),
            Object.defineProperty(this, "details", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "docsPath", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "metaMessages", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "shortMessage", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "version", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "BaseError",
            }),
            (this.details = c),
            (this.docsPath = g),
            (this.metaMessages = l.metaMessages),
            (this.name = l.name ?? this.name),
            (this.shortMessage = e),
            (this.version = d);
        }
        walk(e) {
          return (function walk(e, l) {
            return l?.(e)
              ? e
              : e && "object" == typeof e && "cause" in e && void 0 !== e.cause
              ? walk(e.cause, l)
              : l
              ? null
              : e;
          })(this, e);
        }
      };
    },
    25003: function (e, l, c) {
      "use strict";
      c.d(l, {
        RX: function () {
          return EmptyBlobError;
        },
        cJ: function () {
          return InvalidVersionedHashVersionError;
        },
        m7: function () {
          return BlobSizeTooLargeError;
        },
        xd: function () {
          return InvalidVersionedHashSizeError;
        },
      });
      var d = c(83204),
        m = c(26456);
      let BlobSizeTooLargeError = class BlobSizeTooLargeError extends m.G {
        constructor({ maxSize: e, size: l }) {
          super("Blob size is too large.", {
            metaMessages: [`Max: ${e} bytes`, `Given: ${l} bytes`],
            name: "BlobSizeTooLargeError",
          });
        }
      };
      let EmptyBlobError = class EmptyBlobError extends m.G {
        constructor() {
          super("Blob data must not be empty.", { name: "EmptyBlobError" });
        }
      };
      let InvalidVersionedHashSizeError = class InvalidVersionedHashSizeError extends m.G {
        constructor({ hash: e, size: l }) {
          super(`Versioned hash "${e}" size is invalid.`, {
            metaMessages: ["Expected: 32", `Received: ${l}`],
            name: "InvalidVersionedHashSizeError",
          });
        }
      };
      let InvalidVersionedHashVersionError = class InvalidVersionedHashVersionError extends m.G {
        constructor({ hash: e, version: l }) {
          super(`Versioned hash "${e}" version is invalid.`, {
            metaMessages: [`Expected: ${d.l}`, `Received: ${l}`],
            name: "InvalidVersionedHashVersionError",
          });
        }
      };
    },
    34054: function (e, l, c) {
      "use strict";
      c.d(l, {
        f: function () {
          return BlockNotFoundError;
        },
      });
      var d = c(26456);
      let BlockNotFoundError = class BlockNotFoundError extends d.G {
        constructor({ blockHash: e, blockNumber: l }) {
          let c = "Block";
          e && (c = `Block at hash "${e}"`),
            l && (c = `Block at number "${l}"`),
            super(`${c} could not be found.`, { name: "BlockNotFoundError" });
        }
      };
    },
    853: function (e, l, c) {
      "use strict";
      c.d(l, {
        Bk: function () {
          return ChainNotFoundError;
        },
        Yl: function () {
          return ChainMismatchError;
        },
        hJ: function () {
          return InvalidChainIdError;
        },
        mm: function () {
          return ChainDoesNotSupportContract;
        },
        pZ: function () {
          return ClientChainNotConfiguredError;
        },
      });
      var d = c(26456);
      let ChainDoesNotSupportContract = class ChainDoesNotSupportContract extends d.G {
        constructor({ blockNumber: e, chain: l, contract: c }) {
          super(`Chain "${l.name}" does not support contract "${c.name}".`, {
            metaMessages: [
              "This could be due to any of the following:",
              ...(e && c.blockCreated && c.blockCreated > e
                ? [
                    `- The contract "${c.name}" was not deployed until block ${c.blockCreated} (current block ${e}).`,
                  ]
                : [
                    `- The chain does not have the contract "${c.name}" configured.`,
                  ]),
            ],
            name: "ChainDoesNotSupportContract",
          });
        }
      };
      let ChainMismatchError = class ChainMismatchError extends d.G {
        constructor({ chain: e, currentChainId: l }) {
          super(
            `The current chain of the wallet (id: ${l}) does not match the target chain for the transaction (id: ${e.id} – ${e.name}).`,
            {
              metaMessages: [
                `Current Chain ID:  ${l}`,
                `Expected Chain ID: ${e.id} – ${e.name}`,
              ],
              name: "ChainMismatchError",
            }
          );
        }
      };
      let ChainNotFoundError = class ChainNotFoundError extends d.G {
        constructor() {
          super(
            "No chain was provided to the request.\nPlease provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient.",
            { name: "ChainNotFoundError" }
          );
        }
      };
      let ClientChainNotConfiguredError = class ClientChainNotConfiguredError extends d.G {
        constructor() {
          super("No chain was provided to the Client.", {
            name: "ClientChainNotConfiguredError",
          });
        }
      };
      let InvalidChainIdError = class InvalidChainIdError extends d.G {
        constructor({ chainId: e }) {
          super(
            "number" == typeof e
              ? `Chain ID "${e}" is invalid.`
              : "Chain ID is invalid.",
            { name: "InvalidChainIdError" }
          );
        }
      };
    },
    40955: function (e, l, c) {
      "use strict";
      c.d(l, {
        cg: function () {
          return CallExecutionError;
        },
        uq: function () {
          return ContractFunctionExecutionError;
        },
        Lu: function () {
          return ContractFunctionRevertedError;
        },
        Dk: function () {
          return ContractFunctionZeroDataError;
        },
        Mo: function () {
          return CounterfactualDeploymentFailedError;
        },
        VQ: function () {
          return RawContractError;
        },
      });
      var d = c(40362),
        m = c(94516),
        g = c(92894),
        y = c(21283),
        b = c(32836);
      function formatAbiItemWithArgs({
        abiItem: e,
        args: l,
        includeFunctionName: c = !0,
        includeName: d = !1,
      }) {
        if ("name" in e && "inputs" in e && e.inputs)
          return `${c ? e.name : ""}(${e.inputs
            .map(
              (e, c) =>
                `${d && e.name ? `${e.name}: ` : ""}${
                  "object" == typeof l[c] ? (0, b.P)(l[c]) : l[c]
                }`
            )
            .join(", ")})`;
      }
      var C = c(38652),
        P = c(61180),
        I = c(41926),
        B = c(771),
        N = c(26456),
        F = c(76366),
        V = c(39751),
        G = c(77063);
      let CallExecutionError = class CallExecutionError extends N.G {
        constructor(
          e,
          {
            account: l,
            docsPath: c,
            chain: m,
            data: g,
            gas: y,
            gasPrice: b,
            maxFeePerGas: C,
            maxPriorityFeePerGas: B,
            nonce: N,
            to: G,
            value: Q,
            stateOverride: $,
          }
        ) {
          let Z = l ? (0, d.T)(l) : void 0,
            Y = (0, V.xr)({
              from: Z?.address,
              to: G,
              value:
                void 0 !== Q &&
                `${(0, P.d)(Q)} ${m?.nativeCurrency?.symbol || "ETH"}`,
              data: g,
              gas: y,
              gasPrice: void 0 !== b && `${(0, I.o)(b)} gwei`,
              maxFeePerGas: void 0 !== C && `${(0, I.o)(C)} gwei`,
              maxPriorityFeePerGas: void 0 !== B && `${(0, I.o)(B)} gwei`,
              nonce: N,
            });
          $ &&
            (Y += `
${(0, F.Bj)($)}`),
            super(e.shortMessage, {
              cause: e,
              docsPath: c,
              metaMessages: [
                ...(e.metaMessages ? [...e.metaMessages, " "] : []),
                "Raw Call Arguments:",
                Y,
              ].filter(Boolean),
              name: "CallExecutionError",
            }),
            Object.defineProperty(this, "cause", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.cause = e);
        }
      };
      let ContractFunctionExecutionError = class ContractFunctionExecutionError extends N.G {
        constructor(
          e,
          {
            abi: l,
            args: c,
            contractAddress: d,
            docsPath: m,
            functionName: g,
            sender: b,
          }
        ) {
          let P = (0, C.mE)({ abi: l, args: c, name: g }),
            I = P
              ? formatAbiItemWithArgs({
                  abiItem: P,
                  args: c,
                  includeFunctionName: !1,
                  includeName: !1,
                })
              : void 0,
            B = P ? (0, y.t)(P, { includeName: !0 }) : void 0,
            N = (0, V.xr)({
              address: d && (0, G.C)(d),
              function: B,
              args:
                I &&
                "()" !== I &&
                `${[...Array(g?.length ?? 0).keys()]
                  .map(() => " ")
                  .join("")}${I}`,
              sender: b,
            });
          super(
            e.shortMessage ||
              `An unknown error occurred while executing the contract function "${g}".`,
            {
              cause: e,
              docsPath: m,
              metaMessages: [
                ...(e.metaMessages ? [...e.metaMessages, " "] : []),
                N && "Contract Call:",
                N,
              ].filter(Boolean),
              name: "ContractFunctionExecutionError",
            }
          ),
            Object.defineProperty(this, "abi", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "args", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "cause", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "contractAddress", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "formattedArgs", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "functionName", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "sender", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.abi = l),
            (this.args = c),
            (this.cause = e),
            (this.contractAddress = d),
            (this.functionName = g),
            (this.sender = b);
        }
      };
      let ContractFunctionRevertedError = class ContractFunctionRevertedError extends N.G {
        constructor({ abi: e, data: l, functionName: c, message: d }) {
          let b, C, P, I, N;
          if (l && "0x" !== l)
            try {
              N = (0, g.p)({ abi: e, data: l });
              let { abiItem: c, errorName: d, args: b } = N;
              if ("Error" === d) P = b[0];
              else if ("Panic" === d) {
                let [e] = b;
                P = m.$[e];
              } else {
                let e = c ? (0, y.t)(c, { includeName: !0 }) : void 0,
                  l =
                    c && b
                      ? formatAbiItemWithArgs({
                          abiItem: c,
                          args: b,
                          includeFunctionName: !1,
                          includeName: !1,
                        })
                      : void 0;
                C = [
                  e ? `Error: ${e}` : "",
                  l && "()" !== l
                    ? `       ${[...Array(d?.length ?? 0).keys()]
                        .map(() => " ")
                        .join("")}${l}`
                    : "",
                ];
              }
            } catch (e) {
              b = e;
            }
          else d && (P = d);
          b instanceof B.yP &&
            ((I = b.signature),
            (C = [
              `Unable to decode signature "${I}" as it was not found on the provided ABI.`,
              "Make sure you are using the correct ABI and that the error exists on it.",
              `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${I}.`,
            ])),
            super(
              (P && "execution reverted" !== P) || I
                ? [
                    `The contract function "${c}" reverted with the following ${
                      I ? "signature" : "reason"
                    }:`,
                    P || I,
                  ].join("\n")
                : `The contract function "${c}" reverted.`,
              {
                cause: b,
                metaMessages: C,
                name: "ContractFunctionRevertedError",
              }
            ),
            Object.defineProperty(this, "data", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "raw", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "reason", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "signature", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.data = N),
            (this.raw = l),
            (this.reason = P),
            (this.signature = I);
        }
      };
      let ContractFunctionZeroDataError = class ContractFunctionZeroDataError extends N.G {
        constructor({ functionName: e }) {
          super(`The contract function "${e}" returned no data ("0x").`, {
            metaMessages: [
              "This could be due to any of the following:",
              `  - The contract does not have the function "${e}",`,
              "  - The parameters passed to the contract function may be invalid, or",
              "  - The address is not a contract.",
            ],
            name: "ContractFunctionZeroDataError",
          });
        }
      };
      let CounterfactualDeploymentFailedError = class CounterfactualDeploymentFailedError extends N.G {
        constructor({ factory: e }) {
          super(
            `Deployment for counterfactual contract call failed${
              e ? ` for factory "${e}".` : ""
            }`,
            {
              metaMessages: [
                "Please ensure:",
                "- The `factory` is a valid contract deployment factory (ie. Create2 Factory, ERC-4337 Factory, etc).",
                "- The `factoryData` is a valid encoded function call for contract deployment function on the factory.",
              ],
              name: "CounterfactualDeploymentFailedError",
            }
          );
        }
      };
      let RawContractError = class RawContractError extends N.G {
        constructor({ data: e, message: l }) {
          super(l || "", { name: "RawContractError" }),
            Object.defineProperty(this, "code", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: 3,
            }),
            Object.defineProperty(this, "data", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.data = e);
        }
      };
    },
    94041: function (e, l, c) {
      "use strict";
      c.d(l, {
        KD: function () {
          return RecursiveReadLimitExceededError;
        },
        T_: function () {
          return NegativeOffsetError;
        },
        lQ: function () {
          return PositionOutOfBoundsError;
        },
      });
      var d = c(26456);
      let NegativeOffsetError = class NegativeOffsetError extends d.G {
        constructor({ offset: e }) {
          super(`Offset \`${e}\` cannot be negative.`, {
            name: "NegativeOffsetError",
          });
        }
      };
      let PositionOutOfBoundsError = class PositionOutOfBoundsError extends d.G {
        constructor({ length: e, position: l }) {
          super(
            `Position \`${l}\` is out of bounds (\`0 < position < ${e}\`).`,
            { name: "PositionOutOfBoundsError" }
          );
        }
      };
      let RecursiveReadLimitExceededError = class RecursiveReadLimitExceededError extends d.G {
        constructor({ count: e, limit: l }) {
          super(
            `Recursive read limit of \`${l}\` exceeded (recursive read count: \`${e}\`).`,
            { name: "RecursiveReadLimitExceededError" }
          );
        }
      };
    },
    47118: function (e, l, c) {
      "use strict";
      c.d(l, {
        $s: function () {
          return SizeExceedsPaddingSizeError;
        },
        W_: function () {
          return InvalidBytesLengthError;
        },
        mV: function () {
          return SliceOffsetOutOfBoundsError;
        },
      });
      var d = c(26456);
      let SliceOffsetOutOfBoundsError = class SliceOffsetOutOfBoundsError extends d.G {
        constructor({ offset: e, position: l, size: c }) {
          super(
            `Slice ${
              "start" === l ? "starting" : "ending"
            } at offset "${e}" is out-of-bounds (size: ${c}).`,
            { name: "SliceOffsetOutOfBoundsError" }
          );
        }
      };
      let SizeExceedsPaddingSizeError = class SizeExceedsPaddingSizeError extends d.G {
        constructor({ size: e, targetSize: l, type: c }) {
          super(
            `${c.charAt(0).toUpperCase()}${c
              .slice(1)
              .toLowerCase()} size (${e}) exceeds padding size (${l}).`,
            { name: "SizeExceedsPaddingSizeError" }
          );
        }
      };
      let InvalidBytesLengthError = class InvalidBytesLengthError extends d.G {
        constructor({ size: e, targetSize: l, type: c }) {
          super(
            `${c.charAt(0).toUpperCase()}${c
              .slice(1)
              .toLowerCase()} is expected to be ${l} ${c} long, but is ${e} ${c} long.`,
            { name: "InvalidBytesLengthError" }
          );
        }
      };
    },
    43521: function (e, l, c) {
      "use strict";
      c.d(l, {
        Cd: function () {
          return InvalidHexBooleanError;
        },
        J5: function () {
          return IntegerOutOfRangeError;
        },
        M6: function () {
          return SizeOverflowError;
        },
        yr: function () {
          return InvalidBytesBooleanError;
        },
      });
      var d = c(26456);
      let IntegerOutOfRangeError = class IntegerOutOfRangeError extends d.G {
        constructor({ max: e, min: l, signed: c, size: d, value: m }) {
          super(
            `Number "${m}" is not in safe ${
              d ? `${8 * d}-bit ${c ? "signed" : "unsigned"} ` : ""
            }integer range ${e ? `(${l} to ${e})` : `(above ${l})`}`,
            { name: "IntegerOutOfRangeError" }
          );
        }
      };
      let InvalidBytesBooleanError = class InvalidBytesBooleanError extends d.G {
        constructor(e) {
          super(
            `Bytes value "${e}" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`,
            { name: "InvalidBytesBooleanError" }
          );
        }
      };
      let InvalidHexBooleanError = class InvalidHexBooleanError extends d.G {
        constructor(e) {
          super(
            `Hex value "${e}" is not a valid boolean. The hex value must be "0x0" (false) or "0x1" (true).`,
            { name: "InvalidHexBooleanError" }
          );
        }
      };
      let SizeOverflowError = class SizeOverflowError extends d.G {
        constructor({ givenSize: e, maxSize: l }) {
          super(`Size cannot exceed ${l} bytes. Given size: ${e} bytes.`, {
            name: "SizeOverflowError",
          });
        }
      };
    },
    95970: function (e, l, c) {
      "use strict";
      c.d(l, {
        Fz: function () {
          return BaseFeeScalarError;
        },
        e5: function () {
          return Eip1559FeesNotSupportedError;
        },
        ld: function () {
          return MaxFeePerGasTooLowError;
        },
      });
      var d = c(41926),
        m = c(26456);
      let BaseFeeScalarError = class BaseFeeScalarError extends m.G {
        constructor() {
          super("`baseFeeMultiplier` must be greater than 1.", {
            name: "BaseFeeScalarError",
          });
        }
      };
      let Eip1559FeesNotSupportedError = class Eip1559FeesNotSupportedError extends m.G {
        constructor() {
          super("Chain does not support EIP-1559 fees.", {
            name: "Eip1559FeesNotSupportedError",
          });
        }
      };
      let MaxFeePerGasTooLowError = class MaxFeePerGasTooLowError extends m.G {
        constructor({ maxPriorityFeePerGas: e }) {
          super(
            `\`maxFeePerGas\` cannot be less than the \`maxPriorityFeePerGas\` (${(0,
            d.o)(e)} gwei).`,
            { name: "MaxFeePerGasTooLowError" }
          );
        }
      };
    },
    78e3: function (e, l, c) {
      "use strict";
      c.d(l, {
        C_: function () {
          return InsufficientFundsError;
        },
        G$: function () {
          return FeeCapTooLowError;
        },
        Hh: function () {
          return FeeCapTooHighError;
        },
        M_: function () {
          return ExecutionRevertedError;
        },
        WF: function () {
          return IntrinsicGasTooHighError;
        },
        ZI: function () {
          return NonceTooHighError;
        },
        cj: function () {
          return UnknownNodeError;
        },
        cs: function () {
          return TipAboveFeeCapError;
        },
        dR: function () {
          return IntrinsicGasTooLowError;
        },
        pZ: function () {
          return TransactionTypeNotSupportedError;
        },
        se: function () {
          return NonceMaxValueError;
        },
        vU: function () {
          return NonceTooLowError;
        },
      });
      var d = c(41926),
        m = c(26456);
      let ExecutionRevertedError = class ExecutionRevertedError extends m.G {
        constructor({ cause: e, message: l } = {}) {
          let c = l
            ?.replace("execution reverted: ", "")
            ?.replace("execution reverted", "");
          super(
            `Execution reverted ${
              c ? `with reason: ${c}` : "for an unknown reason"
            }.`,
            { cause: e, name: "ExecutionRevertedError" }
          );
        }
      };
      Object.defineProperty(ExecutionRevertedError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 3,
      }),
        Object.defineProperty(ExecutionRevertedError, "nodeMessage", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: /execution reverted/,
        });
      let FeeCapTooHighError = class FeeCapTooHighError extends m.G {
        constructor({ cause: e, maxFeePerGas: l } = {}) {
          super(
            `The fee cap (\`maxFeePerGas\`${
              l ? ` = ${(0, d.o)(l)} gwei` : ""
            }) cannot be higher than the maximum allowed value (2^256-1).`,
            { cause: e, name: "FeeCapTooHighError" }
          );
        }
      };
      Object.defineProperty(FeeCapTooHighError, "nodeMessage", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value:
          /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/,
      });
      let FeeCapTooLowError = class FeeCapTooLowError extends m.G {
        constructor({ cause: e, maxFeePerGas: l } = {}) {
          super(
            `The fee cap (\`maxFeePerGas\`${
              l ? ` = ${(0, d.o)(l)}` : ""
            } gwei) cannot be lower than the block base fee.`,
            { cause: e, name: "FeeCapTooLowError" }
          );
        }
      };
      Object.defineProperty(FeeCapTooLowError, "nodeMessage", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value:
          /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/,
      });
      let NonceTooHighError = class NonceTooHighError extends m.G {
        constructor({ cause: e, nonce: l } = {}) {
          super(
            `Nonce provided for the transaction ${
              l ? `(${l}) ` : ""
            }is higher than the next one expected.`,
            { cause: e, name: "NonceTooHighError" }
          );
        }
      };
      Object.defineProperty(NonceTooHighError, "nodeMessage", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: /nonce too high/,
      });
      let NonceTooLowError = class NonceTooLowError extends m.G {
        constructor({ cause: e, nonce: l } = {}) {
          super(
            `Nonce provided for the transaction ${
              l ? `(${l}) ` : ""
            }is lower than the current nonce of the account.
Try increasing the nonce or find the latest nonce with \`getTransactionCount\`.`,
            { cause: e, name: "NonceTooLowError" }
          );
        }
      };
      Object.defineProperty(NonceTooLowError, "nodeMessage", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: /nonce too low|transaction already imported|already known/,
      });
      let NonceMaxValueError = class NonceMaxValueError extends m.G {
        constructor({ cause: e, nonce: l } = {}) {
          super(
            `Nonce provided for the transaction ${
              l ? `(${l}) ` : ""
            }exceeds the maximum allowed nonce.`,
            { cause: e, name: "NonceMaxValueError" }
          );
        }
      };
      Object.defineProperty(NonceMaxValueError, "nodeMessage", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: /nonce has max value/,
      });
      let InsufficientFundsError = class InsufficientFundsError extends m.G {
        constructor({ cause: e } = {}) {
          super(
            "The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.",
            {
              cause: e,
              metaMessages: [
                "This error could arise when the account does not have enough funds to:",
                " - pay for the total gas fee,",
                " - pay for the value to send.",
                " ",
                "The cost of the transaction is calculated as `gas * gas fee + value`, where:",
                " - `gas` is the amount of gas needed for transaction to execute,",
                " - `gas fee` is the gas fee,",
                " - `value` is the amount of ether to send to the recipient.",
              ],
              name: "InsufficientFundsError",
            }
          );
        }
      };
      Object.defineProperty(InsufficientFundsError, "nodeMessage", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: /insufficient funds|exceeds transaction sender account balance/,
      });
      let IntrinsicGasTooHighError = class IntrinsicGasTooHighError extends m.G {
        constructor({ cause: e, gas: l } = {}) {
          super(
            `The amount of gas ${
              l ? `(${l}) ` : ""
            }provided for the transaction exceeds the limit allowed for the block.`,
            { cause: e, name: "IntrinsicGasTooHighError" }
          );
        }
      };
      Object.defineProperty(IntrinsicGasTooHighError, "nodeMessage", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: /intrinsic gas too high|gas limit reached/,
      });
      let IntrinsicGasTooLowError = class IntrinsicGasTooLowError extends m.G {
        constructor({ cause: e, gas: l } = {}) {
          super(
            `The amount of gas ${
              l ? `(${l}) ` : ""
            }provided for the transaction is too low.`,
            { cause: e, name: "IntrinsicGasTooLowError" }
          );
        }
      };
      Object.defineProperty(IntrinsicGasTooLowError, "nodeMessage", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: /intrinsic gas too low/,
      });
      let TransactionTypeNotSupportedError = class TransactionTypeNotSupportedError extends m.G {
        constructor({ cause: e }) {
          super("The transaction type is not supported for this chain.", {
            cause: e,
            name: "TransactionTypeNotSupportedError",
          });
        }
      };
      Object.defineProperty(TransactionTypeNotSupportedError, "nodeMessage", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: /transaction type not valid/,
      });
      let TipAboveFeeCapError = class TipAboveFeeCapError extends m.G {
        constructor({
          cause: e,
          maxPriorityFeePerGas: l,
          maxFeePerGas: c,
        } = {}) {
          super(
            `The provided tip (\`maxPriorityFeePerGas\`${
              l ? ` = ${(0, d.o)(l)} gwei` : ""
            }) cannot be higher than the fee cap (\`maxFeePerGas\`${
              c ? ` = ${(0, d.o)(c)} gwei` : ""
            }).`,
            { cause: e, name: "TipAboveFeeCapError" }
          );
        }
      };
      Object.defineProperty(TipAboveFeeCapError, "nodeMessage", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value:
          /max priority fee per gas higher than max fee per gas|tip higher than fee cap/,
      });
      let UnknownNodeError = class UnknownNodeError extends m.G {
        constructor({ cause: e }) {
          super(`An error occurred while executing: ${e?.shortMessage}`, {
            cause: e,
            name: "UnknownNodeError",
          });
        }
      };
    },
    69699: function (e, l, c) {
      "use strict";
      c.d(l, {
        Gg: function () {
          return HttpRequestError;
        },
        W5: function () {
          return TimeoutError;
        },
        bs: function () {
          return RpcRequestError;
        },
      });
      var d = c(32836),
        m = c(26456),
        g = c(77063);
      let HttpRequestError = class HttpRequestError extends m.G {
        constructor({
          body: e,
          cause: l,
          details: c,
          headers: m,
          status: y,
          url: b,
        }) {
          super("HTTP request failed.", {
            cause: l,
            details: c,
            metaMessages: [
              y && `Status: ${y}`,
              `URL: ${(0, g.G)(b)}`,
              e && `Request body: ${(0, d.P)(e)}`,
            ].filter(Boolean),
            name: "HttpRequestError",
          }),
            Object.defineProperty(this, "body", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "headers", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "status", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "url", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.body = e),
            (this.headers = m),
            (this.status = y),
            (this.url = b);
        }
      };
      let RpcRequestError = class RpcRequestError extends m.G {
        constructor({ body: e, error: l, url: c }) {
          super("RPC Request failed.", {
            cause: l,
            details: l.message,
            metaMessages: [
              `URL: ${(0, g.G)(c)}`,
              `Request body: ${(0, d.P)(e)}`,
            ],
            name: "RpcRequestError",
          }),
            Object.defineProperty(this, "code", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            Object.defineProperty(this, "data", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.code = l.code),
            (this.data = l.data);
        }
      };
      let TimeoutError = class TimeoutError extends m.G {
        constructor({ body: e, url: l }) {
          super("The request took too long to respond.", {
            details: "The request timed out.",
            metaMessages: [
              `URL: ${(0, g.G)(l)}`,
              `Request body: ${(0, d.P)(e)}`,
            ],
            name: "TimeoutError",
          });
        }
      };
    },
    42991: function (e, l, c) {
      "use strict";
      c.d(l, {
        B: function () {
          return InvalidRequestRpcError;
        },
        EJ: function () {
          return UnknownBundleIdError;
        },
        GD: function () {
          return JsonRpcVersionUnsupportedError;
        },
        I0: function () {
          return ChainDisconnectedError;
        },
        KB: function () {
          return TransactionRejectedRpcError;
        },
        LX: function () {
          return MethodNotFoundRpcError;
        },
        NO: function () {
          return AtomicReadyWalletRejectedUpgradeError;
        },
        Nt: function () {
          return DuplicateIdError;
        },
        Og: function () {
          return ResourceNotFoundRpcError;
        },
        PE: function () {
          return UnauthorizedProviderError;
        },
        Pv: function () {
          return LimitExceededRpcError;
        },
        Ts: function () {
          return UnsupportedProviderMethodError;
        },
        Uu: function () {
          return UnsupportedChainIdError;
        },
        XS: function () {
          return InternalRpcError;
        },
        ab: function () {
          return UserRejectedRequestError;
        },
        fl: function () {
          return BundleTooLargeError;
        },
        gS: function () {
          return MethodNotSupportedRpcError;
        },
        ir: function () {
          return UnknownRpcError;
        },
        nY: function () {
          return InvalidParamsRpcError;
        },
        pT: function () {
          return ResourceUnavailableRpcError;
        },
        r0: function () {
          return AtomicityNotSupportedError;
        },
        s7: function () {
          return ParseRpcError;
        },
        u5: function () {
          return ProviderDisconnectedError;
        },
        vl: function () {
          return UnsupportedNonOptionalCapabilityError;
        },
        x3: function () {
          return SwitchChainError;
        },
        yR: function () {
          return InvalidInputRpcError;
        },
      });
      var d = c(26456),
        m = c(69699);
      let RpcError = class RpcError extends d.G {
        constructor(
          e,
          { code: l, docsPath: c, metaMessages: d, name: g, shortMessage: y }
        ) {
          super(y, {
            cause: e,
            docsPath: c,
            metaMessages: d || e?.metaMessages,
            name: g || "RpcError",
          }),
            Object.defineProperty(this, "code", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.name = g || e.name),
            (this.code = e instanceof m.bs ? e.code : l ?? -1);
        }
      };
      let ProviderRpcError = class ProviderRpcError extends RpcError {
        constructor(e, l) {
          super(e, l),
            Object.defineProperty(this, "data", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.data = l.data);
        }
      };
      let ParseRpcError = class ParseRpcError extends RpcError {
        constructor(e) {
          super(e, {
            code: ParseRpcError.code,
            name: "ParseRpcError",
            shortMessage:
              "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.",
          });
        }
      };
      Object.defineProperty(ParseRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32700,
      });
      let InvalidRequestRpcError = class InvalidRequestRpcError extends RpcError {
        constructor(e) {
          super(e, {
            code: InvalidRequestRpcError.code,
            name: "InvalidRequestRpcError",
            shortMessage: "JSON is not a valid request object.",
          });
        }
      };
      Object.defineProperty(InvalidRequestRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32600,
      });
      let MethodNotFoundRpcError = class MethodNotFoundRpcError extends RpcError {
        constructor(e, { method: l } = {}) {
          super(e, {
            code: MethodNotFoundRpcError.code,
            name: "MethodNotFoundRpcError",
            shortMessage: `The method${
              l ? ` "${l}"` : ""
            } does not exist / is not available.`,
          });
        }
      };
      Object.defineProperty(MethodNotFoundRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32601,
      });
      let InvalidParamsRpcError = class InvalidParamsRpcError extends RpcError {
        constructor(e) {
          super(e, {
            code: InvalidParamsRpcError.code,
            name: "InvalidParamsRpcError",
            shortMessage:
              "Invalid parameters were provided to the RPC method.\nDouble check you have provided the correct parameters.",
          });
        }
      };
      Object.defineProperty(InvalidParamsRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32602,
      });
      let InternalRpcError = class InternalRpcError extends RpcError {
        constructor(e) {
          super(e, {
            code: InternalRpcError.code,
            name: "InternalRpcError",
            shortMessage: "An internal error was received.",
          });
        }
      };
      Object.defineProperty(InternalRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32603,
      });
      let InvalidInputRpcError = class InvalidInputRpcError extends RpcError {
        constructor(e) {
          super(e, {
            code: InvalidInputRpcError.code,
            name: "InvalidInputRpcError",
            shortMessage:
              "Missing or invalid parameters.\nDouble check you have provided the correct parameters.",
          });
        }
      };
      Object.defineProperty(InvalidInputRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32e3,
      });
      let ResourceNotFoundRpcError = class ResourceNotFoundRpcError extends RpcError {
        constructor(e) {
          super(e, {
            code: ResourceNotFoundRpcError.code,
            name: "ResourceNotFoundRpcError",
            shortMessage: "Requested resource not found.",
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "ResourceNotFoundRpcError",
            });
        }
      };
      Object.defineProperty(ResourceNotFoundRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32001,
      });
      let ResourceUnavailableRpcError = class ResourceUnavailableRpcError extends RpcError {
        constructor(e) {
          super(e, {
            code: ResourceUnavailableRpcError.code,
            name: "ResourceUnavailableRpcError",
            shortMessage: "Requested resource not available.",
          });
        }
      };
      Object.defineProperty(ResourceUnavailableRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32002,
      });
      let TransactionRejectedRpcError = class TransactionRejectedRpcError extends RpcError {
        constructor(e) {
          super(e, {
            code: TransactionRejectedRpcError.code,
            name: "TransactionRejectedRpcError",
            shortMessage: "Transaction creation failed.",
          });
        }
      };
      Object.defineProperty(TransactionRejectedRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32003,
      });
      let MethodNotSupportedRpcError = class MethodNotSupportedRpcError extends RpcError {
        constructor(e, { method: l } = {}) {
          super(e, {
            code: MethodNotSupportedRpcError.code,
            name: "MethodNotSupportedRpcError",
            shortMessage: `Method${l ? ` "${l}"` : ""} is not supported.`,
          });
        }
      };
      Object.defineProperty(MethodNotSupportedRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32004,
      });
      let LimitExceededRpcError = class LimitExceededRpcError extends RpcError {
        constructor(e) {
          super(e, {
            code: LimitExceededRpcError.code,
            name: "LimitExceededRpcError",
            shortMessage: "Request exceeds defined limit.",
          });
        }
      };
      Object.defineProperty(LimitExceededRpcError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32005,
      });
      let JsonRpcVersionUnsupportedError = class JsonRpcVersionUnsupportedError extends RpcError {
        constructor(e) {
          super(e, {
            code: JsonRpcVersionUnsupportedError.code,
            name: "JsonRpcVersionUnsupportedError",
            shortMessage: "Version of JSON-RPC protocol is not supported.",
          });
        }
      };
      Object.defineProperty(JsonRpcVersionUnsupportedError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: -32006,
      });
      let UserRejectedRequestError = class UserRejectedRequestError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: UserRejectedRequestError.code,
            name: "UserRejectedRequestError",
            shortMessage: "User rejected the request.",
          });
        }
      };
      Object.defineProperty(UserRejectedRequestError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 4001,
      });
      let UnauthorizedProviderError = class UnauthorizedProviderError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: UnauthorizedProviderError.code,
            name: "UnauthorizedProviderError",
            shortMessage:
              "The requested method and/or account has not been authorized by the user.",
          });
        }
      };
      Object.defineProperty(UnauthorizedProviderError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 4100,
      });
      let UnsupportedProviderMethodError = class UnsupportedProviderMethodError extends ProviderRpcError {
        constructor(e, { method: l } = {}) {
          super(e, {
            code: UnsupportedProviderMethodError.code,
            name: "UnsupportedProviderMethodError",
            shortMessage: `The Provider does not support the requested method${
              l ? ` " ${l}"` : ""
            }.`,
          });
        }
      };
      Object.defineProperty(UnsupportedProviderMethodError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 4200,
      });
      let ProviderDisconnectedError = class ProviderDisconnectedError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: ProviderDisconnectedError.code,
            name: "ProviderDisconnectedError",
            shortMessage: "The Provider is disconnected from all chains.",
          });
        }
      };
      Object.defineProperty(ProviderDisconnectedError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 4900,
      });
      let ChainDisconnectedError = class ChainDisconnectedError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: ChainDisconnectedError.code,
            name: "ChainDisconnectedError",
            shortMessage:
              "The Provider is not connected to the requested chain.",
          });
        }
      };
      Object.defineProperty(ChainDisconnectedError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 4901,
      });
      let SwitchChainError = class SwitchChainError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: SwitchChainError.code,
            name: "SwitchChainError",
            shortMessage: "An error occurred when attempting to switch chain.",
          });
        }
      };
      Object.defineProperty(SwitchChainError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 4902,
      });
      let UnsupportedNonOptionalCapabilityError = class UnsupportedNonOptionalCapabilityError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: UnsupportedNonOptionalCapabilityError.code,
            name: "UnsupportedNonOptionalCapabilityError",
            shortMessage:
              "This Wallet does not support a capability that was not marked as optional.",
          });
        }
      };
      Object.defineProperty(UnsupportedNonOptionalCapabilityError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 5700,
      });
      let UnsupportedChainIdError = class UnsupportedChainIdError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: UnsupportedChainIdError.code,
            name: "UnsupportedChainIdError",
            shortMessage:
              "This Wallet does not support the requested chain ID.",
          });
        }
      };
      Object.defineProperty(UnsupportedChainIdError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 5710,
      });
      let DuplicateIdError = class DuplicateIdError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: DuplicateIdError.code,
            name: "DuplicateIdError",
            shortMessage: "There is already a bundle submitted with this ID.",
          });
        }
      };
      Object.defineProperty(DuplicateIdError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 5720,
      });
      let UnknownBundleIdError = class UnknownBundleIdError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: UnknownBundleIdError.code,
            name: "UnknownBundleIdError",
            shortMessage: "This bundle id is unknown / has not been submitted",
          });
        }
      };
      Object.defineProperty(UnknownBundleIdError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 5730,
      });
      let BundleTooLargeError = class BundleTooLargeError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: BundleTooLargeError.code,
            name: "BundleTooLargeError",
            shortMessage:
              "The call bundle is too large for the Wallet to process.",
          });
        }
      };
      Object.defineProperty(BundleTooLargeError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 5740,
      });
      let AtomicReadyWalletRejectedUpgradeError = class AtomicReadyWalletRejectedUpgradeError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: AtomicReadyWalletRejectedUpgradeError.code,
            name: "AtomicReadyWalletRejectedUpgradeError",
            shortMessage:
              "The Wallet can support atomicity after an upgrade, but the user rejected the upgrade.",
          });
        }
      };
      Object.defineProperty(AtomicReadyWalletRejectedUpgradeError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 5750,
      });
      let AtomicityNotSupportedError = class AtomicityNotSupportedError extends ProviderRpcError {
        constructor(e) {
          super(e, {
            code: AtomicityNotSupportedError.code,
            name: "AtomicityNotSupportedError",
            shortMessage:
              "The wallet does not support atomic execution but the request requires it.",
          });
        }
      };
      Object.defineProperty(AtomicityNotSupportedError, "code", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: 5760,
      });
      let UnknownRpcError = class UnknownRpcError extends RpcError {
        constructor(e) {
          super(e, {
            name: "UnknownRpcError",
            shortMessage: "An unknown RPC error occurred.",
          });
        }
      };
    },
    76366: function (e, l, c) {
      "use strict";
      c.d(l, {
        Bj: function () {
          return prettyStateOverride;
        },
        Nc: function () {
          return AccountStateConflictError;
        },
        Z8: function () {
          return StateAssignmentConflictError;
        },
      });
      var d = c(26456);
      let AccountStateConflictError = class AccountStateConflictError extends d.G {
        constructor({ address: e }) {
          super(`State for account "${e}" is set multiple times.`, {
            name: "AccountStateConflictError",
          });
        }
      };
      let StateAssignmentConflictError = class StateAssignmentConflictError extends d.G {
        constructor() {
          super("state and stateDiff are set on the same account.", {
            name: "StateAssignmentConflictError",
          });
        }
      };
      function prettyStateMapping(e) {
        return e.reduce(
          (e, { slot: l, value: c }) => `${e}        ${l}: ${c}
`,
          ""
        );
      }
      function prettyStateOverride(e) {
        return e
          .reduce((e, { address: l, ...c }) => {
            let d = `${e}    ${l}:
`;
            return (
              c.nonce &&
                (d += `      nonce: ${c.nonce}
`),
              c.balance &&
                (d += `      balance: ${c.balance}
`),
              c.code &&
                (d += `      code: ${c.code}
`),
              c.state && (d += "      state:\n" + prettyStateMapping(c.state)),
              c.stateDiff &&
                (d += "      stateDiff:\n" + prettyStateMapping(c.stateDiff)),
              d
            );
          }, "  State Override:\n")
          .slice(0, -1);
      }
    },
    39751: function (e, l, c) {
      "use strict";
      c.d(l, {
        Bh: function () {
          return TransactionNotFoundError;
        },
        JC: function () {
          return InvalidStorageKeySizeError;
        },
        Yb: function () {
          return TransactionReceiptNotFoundError;
        },
        j3: function () {
          return InvalidSerializableTransactionError;
        },
        mc: function () {
          return WaitForTransactionReceiptTimeoutError;
        },
        mk: function () {
          return TransactionExecutionError;
        },
        vl: function () {
          return InvalidLegacyVError;
        },
        xY: function () {
          return FeeConflictError;
        },
        xr: function () {
          return prettyPrint;
        },
      });
      var d = c(61180),
        m = c(41926),
        g = c(26456);
      function prettyPrint(e) {
        let l = Object.entries(e)
            .map(([e, l]) => (void 0 === l || !1 === l ? null : [e, l]))
            .filter(Boolean),
          c = l.reduce((e, [l]) => Math.max(e, l.length), 0);
        return l.map(([e, l]) => `  ${`${e}:`.padEnd(c + 1)}  ${l}`).join("\n");
      }
      let FeeConflictError = class FeeConflictError extends g.G {
        constructor() {
          super(
            "Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.\nUse `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.",
            { name: "FeeConflictError" }
          );
        }
      };
      let InvalidLegacyVError = class InvalidLegacyVError extends g.G {
        constructor({ v: e }) {
          super(`Invalid \`v\` value "${e}". Expected 27 or 28.`, {
            name: "InvalidLegacyVError",
          });
        }
      };
      let InvalidSerializableTransactionError = class InvalidSerializableTransactionError extends g.G {
        constructor({ transaction: e }) {
          super("Cannot infer a transaction type from provided transaction.", {
            metaMessages: [
              "Provided Transaction:",
              "{",
              prettyPrint(e),
              "}",
              "",
              "To infer the type, either provide:",
              "- a `type` to the Transaction, or",
              "- an EIP-1559 Transaction with `maxFeePerGas`, or",
              "- an EIP-2930 Transaction with `gasPrice` & `accessList`, or",
              "- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or",
              "- an EIP-7702 Transaction with `authorizationList`, or",
              "- a Legacy Transaction with `gasPrice`",
            ],
            name: "InvalidSerializableTransactionError",
          });
        }
      };
      let InvalidStorageKeySizeError = class InvalidStorageKeySizeError extends g.G {
        constructor({ storageKey: e }) {
          super(
            `Size for storage key "${e}" is invalid. Expected 32 bytes. Got ${Math.floor(
              (e.length - 2) / 2
            )} bytes.`,
            { name: "InvalidStorageKeySizeError" }
          );
        }
      };
      let TransactionExecutionError = class TransactionExecutionError extends g.G {
        constructor(
          e,
          {
            account: l,
            docsPath: c,
            chain: g,
            data: y,
            gas: b,
            gasPrice: C,
            maxFeePerGas: P,
            maxPriorityFeePerGas: I,
            nonce: B,
            to: N,
            value: F,
          }
        ) {
          let V = prettyPrint({
            chain: g && `${g?.name} (id: ${g?.id})`,
            from: l?.address,
            to: N,
            value:
              void 0 !== F &&
              `${(0, d.d)(F)} ${g?.nativeCurrency?.symbol || "ETH"}`,
            data: y,
            gas: b,
            gasPrice: void 0 !== C && `${(0, m.o)(C)} gwei`,
            maxFeePerGas: void 0 !== P && `${(0, m.o)(P)} gwei`,
            maxPriorityFeePerGas: void 0 !== I && `${(0, m.o)(I)} gwei`,
            nonce: B,
          });
          super(e.shortMessage, {
            cause: e,
            docsPath: c,
            metaMessages: [
              ...(e.metaMessages ? [...e.metaMessages, " "] : []),
              "Request Arguments:",
              V,
            ].filter(Boolean),
            name: "TransactionExecutionError",
          }),
            Object.defineProperty(this, "cause", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.cause = e);
        }
      };
      let TransactionNotFoundError = class TransactionNotFoundError extends g.G {
        constructor({
          blockHash: e,
          blockNumber: l,
          blockTag: c,
          hash: d,
          index: m,
        }) {
          let g = "Transaction";
          c &&
            void 0 !== m &&
            (g = `Transaction at block time "${c}" at index "${m}"`),
            e &&
              void 0 !== m &&
              (g = `Transaction at block hash "${e}" at index "${m}"`),
            l &&
              void 0 !== m &&
              (g = `Transaction at block number "${l}" at index "${m}"`),
            d && (g = `Transaction with hash "${d}"`),
            super(`${g} could not be found.`, {
              name: "TransactionNotFoundError",
            });
        }
      };
      let TransactionReceiptNotFoundError = class TransactionReceiptNotFoundError extends g.G {
        constructor({ hash: e }) {
          super(
            `Transaction receipt with hash "${e}" could not be found. The Transaction may not be processed on a block yet.`,
            { name: "TransactionReceiptNotFoundError" }
          );
        }
      };
      let WaitForTransactionReceiptTimeoutError = class WaitForTransactionReceiptTimeoutError extends g.G {
        constructor({ hash: e }) {
          super(
            `Timed out while waiting for transaction with hash "${e}" to be confirmed.`,
            { name: "WaitForTransactionReceiptTimeoutError" }
          );
        }
      };
    },
    77063: function (e, l, c) {
      "use strict";
      c.d(l, {
        C: function () {
          return getContractAddress;
        },
        G: function () {
          return getUrl;
        },
      });
      let getContractAddress = (e) => e,
        getUrl = (e) => e;
    },
    48775: function (e, l, c) {
      "use strict";
      c.d(l, {
        i: function () {
          return V;
        },
      });
      var d = c(3644),
        m = c(20503),
        g = c(55009),
        y = c(46134);
      let b = {
        block: (0, m.G)({
          format(e) {
            let l = e.transactions?.map((e) => {
              if ("string" == typeof e) return e;
              let l = g.Tr(e);
              return (
                "0x7e" === l.typeHex &&
                  ((l.isSystemTx = e.isSystemTx),
                  (l.mint = e.mint ? d.y_(e.mint) : void 0),
                  (l.sourceHash = e.sourceHash),
                  (l.type = "deposit")),
                l
              );
            });
            return { transactions: l, stateRoot: e.stateRoot };
          },
        }),
        transaction: (0, g.y_)({
          format(e) {
            let l = {};
            return (
              "0x7e" === e.type &&
                ((l.isSystemTx = e.isSystemTx),
                (l.mint = e.mint ? (0, d.y_)(e.mint) : void 0),
                (l.sourceHash = e.sourceHash),
                (l.type = "deposit")),
              l
            );
          },
        }),
        transactionReceipt: (0, y.dI)({
          format: (e) => ({
            l1GasPrice: e.l1GasPrice ? (0, d.y_)(e.l1GasPrice) : null,
            l1GasUsed: e.l1GasUsed ? (0, d.y_)(e.l1GasUsed) : null,
            l1Fee: e.l1Fee ? (0, d.y_)(e.l1Fee) : null,
            l1FeeScalar: e.l1FeeScalar ? Number(e.l1FeeScalar) : null,
          }),
        }),
      };
      var C = c(63964),
        P = c(87874),
        I = c(12265),
        B = c(1701),
        N = c(10673),
        F = c(67170);
      let V = {
        contracts: {
          gasPriceOracle: {
            address: "0x420000000000000000000000000000000000000F",
          },
          l1Block: { address: "0x4200000000000000000000000000000000000015" },
          l2CrossDomainMessenger: {
            address: "0x4200000000000000000000000000000000000007",
          },
          l2Erc721Bridge: {
            address: "0x4200000000000000000000000000000000000014",
          },
          l2StandardBridge: {
            address: "0x4200000000000000000000000000000000000010",
          },
          l2ToL1MessagePasser: {
            address: "0x4200000000000000000000000000000000000016",
          },
        },
        formatters: b,
        serializers: {
          transaction: function (e, l) {
            return "deposit" === e.type || void 0 !== e.sourceHash
              ? (function (e) {
                  !(function (e) {
                    let { from: l, to: c } = e;
                    if (l && !(0, P.U)(l)) throw new C.b({ address: l });
                    if (c && !(0, P.U)(c)) throw new C.b({ address: c });
                  })(e);
                  let {
                      sourceHash: l,
                      data: c,
                      from: d,
                      gas: m,
                      isSystemTx: g,
                      mint: y,
                      to: b,
                      value: F,
                    } = e,
                    V = [
                      l,
                      d,
                      b ?? "0x",
                      y ? (0, B.NC)(y) : "0x",
                      F ? (0, B.NC)(F) : "0x",
                      m ? (0, B.NC)(m) : "0x",
                      g ? "0x1" : "0x",
                      c ?? "0x",
                    ];
                  return (0, I.SM)(["0x7e", (0, N.LV)(V)]);
                })(e)
              : (0, F.D)(e, l);
          },
        },
      };
    },
    3680: function (e, l, c) {
      "use strict";
      c.d(l, {
        r: function () {
          return decodeAbiParameters;
        },
      });
      var d = c(771),
        m = c(69301),
        g = c(34254),
        y = c(59679),
        b = c(46548),
        C = c(83749),
        P = c(43521),
        I = c(3644),
        B = c(1701);
      function bytesToNumber(e, l = {}) {
        void 0 !== l.size && (0, I.Yf)(e, { size: l.size });
        let c = (0, B.ci)(e, l);
        return (0, I.ly)(c, l);
      }
      var N = c(23279),
        F = c(74600);
      function decodeAbiParameters(e, l) {
        let c = "string" == typeof l ? (0, N.nr)(l) : l,
          V = (0, g.q)(c);
        if (0 === (0, y.d)(c) && e.length > 0) throw new d.wb();
        if ((0, y.d)(l) && 32 > (0, y.d)(l))
          throw new d.xB({
            data: "string" == typeof l ? l : (0, B.ci)(l),
            params: e,
            size: (0, y.d)(l),
          });
        let G = 0,
          Q = [];
        for (let l = 0; l < e.length; ++l) {
          let c = e[l];
          V.setPosition(G);
          let [g, y] = (function decodeParameter(e, l, { staticPosition: c }) {
            let g = (0, F.S)(l.type);
            if (g) {
              let [d, m] = g;
              return (function (e, l, { length: c, staticPosition: d }) {
                if (!c) {
                  let c = bytesToNumber(e.readBytes(32)),
                    m = d + c,
                    g = m + 32;
                  e.setPosition(m);
                  let y = bytesToNumber(e.readBytes(32)),
                    b = hasDynamicChild(l),
                    C = 0,
                    P = [];
                  for (let c = 0; c < y; ++c) {
                    e.setPosition(g + (b ? 32 * c : C));
                    let [d, m] = decodeParameter(e, l, { staticPosition: g });
                    (C += m), P.push(d);
                  }
                  return e.setPosition(d + 32), [P, 32];
                }
                if (hasDynamicChild(l)) {
                  let m = bytesToNumber(e.readBytes(32)),
                    g = d + m,
                    y = [];
                  for (let d = 0; d < c; ++d) {
                    e.setPosition(g + 32 * d);
                    let [c] = decodeParameter(e, l, { staticPosition: g });
                    y.push(c);
                  }
                  return e.setPosition(d + 32), [y, 32];
                }
                let m = 0,
                  g = [];
                for (let y = 0; y < c; ++y) {
                  let [c, y] = decodeParameter(e, l, { staticPosition: d + m });
                  (m += y), g.push(c);
                }
                return [g, m];
              })(e, { ...l, type: m }, { length: d, staticPosition: c });
            }
            if ("tuple" === l.type)
              return (function (e, l, { staticPosition: c }) {
                let d =
                    0 === l.components.length ||
                    l.components.some(({ name: e }) => !e),
                  m = d ? [] : {},
                  g = 0;
                if (hasDynamicChild(l)) {
                  let y = bytesToNumber(e.readBytes(32)),
                    b = c + y;
                  for (let c = 0; c < l.components.length; ++c) {
                    let y = l.components[c];
                    e.setPosition(b + g);
                    let [C, P] = decodeParameter(e, y, { staticPosition: b });
                    (g += P), (m[d ? c : y?.name] = C);
                  }
                  return e.setPosition(c + 32), [m, 32];
                }
                for (let y = 0; y < l.components.length; ++y) {
                  let b = l.components[y],
                    [C, P] = decodeParameter(e, b, { staticPosition: c });
                  (m[d ? y : b?.name] = C), (g += P);
                }
                return [m, g];
              })(e, l, { staticPosition: c });
            if ("address" === l.type)
              return (function (e) {
                let l = e.readBytes(32);
                return [(0, m.x)((0, B.ci)((0, b.T4)(l, -20))), 32];
              })(e);
            if ("bool" === l.type)
              return [
                (function (e, l = {}) {
                  let c = e;
                  if (
                    (void 0 !== l.size &&
                      ((0, I.Yf)(c, { size: l.size }), (c = (0, C.f)(c))),
                    c.length > 1 || c[0] > 1)
                  )
                    throw new P.yr(c);
                  return !!c[0];
                })(e.readBytes(32), { size: 32 }),
                32,
              ];
            if (l.type.startsWith("bytes"))
              return (function (e, l, { staticPosition: c }) {
                let [d, m] = l.type.split("bytes");
                if (!m) {
                  let l = bytesToNumber(e.readBytes(32));
                  e.setPosition(c + l);
                  let d = bytesToNumber(e.readBytes(32));
                  if (0 === d) return e.setPosition(c + 32), ["0x", 32];
                  let m = e.readBytes(d);
                  return e.setPosition(c + 32), [(0, B.ci)(m), 32];
                }
                let g = (0, B.ci)(e.readBytes(Number.parseInt(m), 32));
                return [g, 32];
              })(e, l, { staticPosition: c });
            if (l.type.startsWith("uint") || l.type.startsWith("int"))
              return (function (e, l) {
                let c = l.type.startsWith("int"),
                  d = Number.parseInt(l.type.split("int")[1] || "256"),
                  m = e.readBytes(32);
                return [
                  d > 48
                    ? (function (e, l = {}) {
                        void 0 !== l.size && (0, I.Yf)(e, { size: l.size });
                        let c = (0, B.ci)(e, l);
                        return (0, I.y_)(c, l);
                      })(m, { signed: c })
                    : bytesToNumber(m, { signed: c }),
                  32,
                ];
              })(e, l);
            if ("string" === l.type)
              return (function (e, { staticPosition: l }) {
                let c = bytesToNumber(e.readBytes(32)),
                  d = l + c;
                e.setPosition(d);
                let m = bytesToNumber(e.readBytes(32));
                if (0 === m) return e.setPosition(l + 32), ["", 32];
                let g = e.readBytes(m, 32),
                  y = (function (e, l = {}) {
                    let c = e;
                    return (
                      void 0 !== l.size &&
                        ((0, I.Yf)(c, { size: l.size }),
                        (c = (0, C.f)(c, { dir: "right" }))),
                      new TextDecoder().decode(c)
                    );
                  })((0, C.f)(g));
                return e.setPosition(l + 32), [y, 32];
              })(e, { staticPosition: c });
            throw new d.CI(l.type, {
              docsPath: "/docs/contract/decodeAbiParameters",
            });
          })(V, c, { staticPosition: 0 });
          (G += y), Q.push(g);
        }
        return Q;
      }
      function hasDynamicChild(e) {
        let { type: l } = e;
        if ("string" === l || "bytes" === l || l.endsWith("[]")) return !0;
        if ("tuple" === l) return e.components?.some(hasDynamicChild);
        let c = (0, F.S)(e.type);
        return !!(c && hasDynamicChild({ ...e, type: c[1] }));
      }
    },
    92894: function (e, l, c) {
      "use strict";
      c.d(l, {
        p: function () {
          return decodeErrorResult;
        },
      });
      var d = c(94516),
        m = c(771),
        g = c(46548),
        y = c(61895),
        b = c(3680),
        C = c(21283);
      function decodeErrorResult(e) {
        let { abi: l, data: c } = e,
          P = (0, g.tP)(c, 0, 4);
        if ("0x" === P) throw new m.wb();
        let I = [...(l || []), d.Up, d.hZ],
          B = I.find((e) => "error" === e.type && P === (0, y.C)((0, C.t)(e)));
        if (!B)
          throw new m.yP(P, { docsPath: "/docs/contract/decodeErrorResult" });
        return {
          abiItem: B,
          args:
            "inputs" in B && B.inputs && B.inputs.length > 0
              ? (0, b.r)(B.inputs, (0, g.tP)(c, 4))
              : void 0,
          errorName: B.name,
        };
      }
    },
    15873: function (e, l, c) {
      "use strict";
      c.d(l, {
        k: function () {
          return decodeFunctionResult;
        },
      });
      var d = c(771),
        m = c(3680),
        g = c(38652);
      let y = "/docs/contract/decodeFunctionResult";
      function decodeFunctionResult(e) {
        let { abi: l, args: c, functionName: b, data: C } = e,
          P = l[0];
        if (b) {
          let e = (0, g.mE)({ abi: l, args: c, name: b });
          if (!e) throw new d.xL(b, { docsPath: y });
          P = e;
        }
        if ("function" !== P.type) throw new d.xL(void 0, { docsPath: y });
        if (!P.outputs) throw new d.MX(P.name, { docsPath: y });
        let I = (0, m.r)(P.outputs, C);
        return I && I.length > 1 ? I : I && 1 === I.length ? I[0] : void 0;
      }
    },
    74600: function (e, l, c) {
      "use strict";
      c.d(l, {
        E: function () {
          return encodeAbiParameters;
        },
        S: function () {
          return getArrayComponents;
        },
      });
      var d = c(771),
        m = c(63964),
        g = c(26456),
        y = c(43521),
        b = c(87874),
        C = c(12265),
        P = c(30498),
        I = c(59679),
        B = c(46548),
        N = c(1701),
        F = c(13429);
      function encodeAbiParameters(e, l) {
        if (e.length !== l.length)
          throw new d.fs({ expectedLength: e.length, givenLength: l.length });
        let c = (function ({ params: e, values: l }) {
            let c = [];
            for (let V = 0; V < e.length; V++)
              c.push(
                (function prepareParam({ param: e, value: l }) {
                  let c = getArrayComponents(e.type);
                  if (c) {
                    let [m, g] = c;
                    return (function (e, { length: l, param: c }) {
                      let m = null === l;
                      if (!Array.isArray(e)) throw new d.hn(e);
                      if (!m && e.length !== l)
                        throw new d.gr({
                          expectedLength: l,
                          givenLength: e.length,
                          type: `${c.type}[${l}]`,
                        });
                      let g = !1,
                        y = [];
                      for (let l = 0; l < e.length; l++) {
                        let d = prepareParam({ param: c, value: e[l] });
                        d.dynamic && (g = !0), y.push(d);
                      }
                      if (m || g) {
                        let e = encodeParams(y);
                        if (m) {
                          let l = (0, N.eC)(y.length, { size: 32 });
                          return {
                            dynamic: !0,
                            encoded: y.length > 0 ? (0, C.zo)([l, e]) : l,
                          };
                        }
                        if (g) return { dynamic: !0, encoded: e };
                      }
                      return {
                        dynamic: !1,
                        encoded: (0, C.zo)(y.map(({ encoded: e }) => e)),
                      };
                    })(l, { length: m, param: { ...e, type: g } });
                  }
                  if ("tuple" === e.type)
                    return (function (e, { param: l }) {
                      let c = !1,
                        d = [];
                      for (let m = 0; m < l.components.length; m++) {
                        let g = l.components[m],
                          y = Array.isArray(e) ? m : g.name,
                          b = prepareParam({ param: g, value: e[y] });
                        d.push(b), b.dynamic && (c = !0);
                      }
                      return {
                        dynamic: c,
                        encoded: c
                          ? encodeParams(d)
                          : (0, C.zo)(d.map(({ encoded: e }) => e)),
                      };
                    })(l, { param: e });
                  if ("address" === e.type)
                    return (function (e) {
                      if (!(0, b.U)(e)) throw new m.b({ address: e });
                      return {
                        dynamic: !1,
                        encoded: (0, P.gc)(e.toLowerCase()),
                      };
                    })(l);
                  if ("bool" === e.type)
                    return (function (e) {
                      if ("boolean" != typeof e)
                        throw new g.G(
                          `Invalid boolean value: "${e}" (type: ${typeof e}). Expected: \`true\` or \`false\`.`
                        );
                      return { dynamic: !1, encoded: (0, P.gc)((0, N.C4)(e)) };
                    })(l);
                  if (e.type.startsWith("uint") || e.type.startsWith("int")) {
                    let c = e.type.startsWith("int"),
                      [, , d = "256"] = F.lh.exec(e.type) ?? [];
                    return (function (e, { signed: l, size: c = 256 }) {
                      if ("number" == typeof c) {
                        let d = 2n ** (BigInt(c) - (l ? 1n : 0n)) - 1n,
                          m = l ? -d - 1n : 0n;
                        if (e > d || e < m)
                          throw new y.J5({
                            max: d.toString(),
                            min: m.toString(),
                            signed: l,
                            size: c / 8,
                            value: e.toString(),
                          });
                      }
                      return {
                        dynamic: !1,
                        encoded: (0, N.eC)(e, { size: 32, signed: l }),
                      };
                    })(l, { signed: c, size: Number(d) });
                  }
                  if (e.type.startsWith("bytes"))
                    return (function (e, { param: l }) {
                      let [, c] = l.type.split("bytes"),
                        m = (0, I.d)(e);
                      if (!c) {
                        let l = e;
                        return (
                          m % 32 != 0 &&
                            (l = (0, P.gc)(l, {
                              dir: "right",
                              size: 32 * Math.ceil((e.length - 2) / 2 / 32),
                            })),
                          {
                            dynamic: !0,
                            encoded: (0, C.zo)([
                              (0, P.gc)((0, N.eC)(m, { size: 32 })),
                              l,
                            ]),
                          }
                        );
                      }
                      if (m !== Number.parseInt(c))
                        throw new d.M4({
                          expectedSize: Number.parseInt(c),
                          value: e,
                        });
                      return {
                        dynamic: !1,
                        encoded: (0, P.gc)(e, { dir: "right" }),
                      };
                    })(l, { param: e });
                  if ("string" === e.type)
                    return (function (e) {
                      let l = (0, N.$G)(e),
                        c = Math.ceil((0, I.d)(l) / 32),
                        d = [];
                      for (let e = 0; e < c; e++)
                        d.push(
                          (0, P.gc)((0, B.tP)(l, 32 * e, (e + 1) * 32), {
                            dir: "right",
                          })
                        );
                      return {
                        dynamic: !0,
                        encoded: (0, C.zo)([
                          (0, P.gc)((0, N.eC)((0, I.d)(l), { size: 32 })),
                          ...d,
                        ]),
                      };
                    })(l);
                  throw new d.dh(e.type, {
                    docsPath: "/docs/contract/encodeAbiParameters",
                  });
                })({ param: e[V], value: l[V] })
              );
            return c;
          })({ params: e, values: l }),
          V = encodeParams(c);
        return 0 === V.length ? "0x" : V;
      }
      function encodeParams(e) {
        let l = 0;
        for (let c = 0; c < e.length; c++) {
          let { dynamic: d, encoded: m } = e[c];
          d ? (l += 32) : (l += (0, I.d)(m));
        }
        let c = [],
          d = [],
          m = 0;
        for (let g = 0; g < e.length; g++) {
          let { dynamic: y, encoded: b } = e[g];
          y
            ? (c.push((0, N.eC)(l + m, { size: 32 })),
              d.push(b),
              (m += (0, I.d)(b)))
            : c.push(b);
        }
        return (0, C.zo)([...c, ...d]);
      }
      function getArrayComponents(e) {
        let l = e.match(/^(.*)\[(\d+)?\]$/);
        return l ? [l[2] ? Number(l[2]) : null, l[1]] : void 0;
      }
    },
    53991: function (e, l, c) {
      "use strict";
      c.d(l, {
        w: function () {
          return encodeDeployData;
        },
      });
      var d = c(771),
        m = c(12265),
        g = c(74600);
      let y = "/docs/contract/encodeDeployData";
      function encodeDeployData(e) {
        let { abi: l, args: c, bytecode: b } = e;
        if (!c || 0 === c.length) return b;
        let C = l.find((e) => "type" in e && "constructor" === e.type);
        if (!C) throw new d.fM({ docsPath: y });
        if (!("inputs" in C) || !C.inputs || 0 === C.inputs.length)
          throw new d.cO({ docsPath: y });
        let P = (0, g.E)(C.inputs, c);
        return (0, m.SM)([b, P]);
      }
    },
    28065: function (e, l, c) {
      "use strict";
      c.d(l, {
        R: function () {
          return encodeFunctionData;
        },
      });
      var d = c(12265),
        m = c(74600),
        g = c(771),
        y = c(61895),
        b = c(21283),
        C = c(38652);
      let P = "/docs/contract/encodeFunctionData";
      function encodeFunctionData(e) {
        let { args: l } = e,
          { abi: c, functionName: I } =
            1 === e.abi.length && e.functionName?.startsWith("0x")
              ? e
              : (function (e) {
                  let { abi: l, args: c, functionName: d } = e,
                    m = l[0];
                  if (d) {
                    let e = (0, C.mE)({ abi: l, args: c, name: d });
                    if (!e) throw new g.xL(d, { docsPath: P });
                    m = e;
                  }
                  if ("function" !== m.type)
                    throw new g.xL(void 0, { docsPath: P });
                  return { abi: [m], functionName: (0, y.C)((0, b.t)(m)) };
                })(e),
          B = c[0],
          N = "inputs" in B && B.inputs ? (0, m.E)(B.inputs, l ?? []) : void 0;
        return (0, d.SM)([I, N ?? "0x"]);
      }
    },
    21283: function (e, l, c) {
      "use strict";
      c.d(l, {
        h: function () {
          return formatAbiParams;
        },
        t: function () {
          return formatAbiItem;
        },
      });
      var d = c(771);
      function formatAbiItem(e, { includeName: l = !1 } = {}) {
        if ("function" !== e.type && "event" !== e.type && "error" !== e.type)
          throw new d.wM(e.type);
        return `${e.name}(${formatAbiParams(e.inputs, { includeName: l })})`;
      }
      function formatAbiParams(e, { includeName: l = !1 } = {}) {
        return e
          ? e
              .map((e) =>
                (function (e, { includeName: l }) {
                  return e.type.startsWith("tuple")
                    ? `(${formatAbiParams(e.components, {
                        includeName: l,
                      })})${e.type.slice(5)}`
                    : e.type + (l && e.name ? ` ${e.name}` : "");
                })(e, { includeName: l })
              )
              .join(l ? ", " : ",")
          : "";
      }
    },
    38652: function (e, l, c) {
      "use strict";
      c.d(l, {
        mE: function () {
          return getAbiItem;
        },
      });
      var d = c(771),
        m = c(25622),
        g = c(87874),
        y = c(90107),
        b = c(61895);
      function getAbiItem(e) {
        let l;
        let { abi: c, args: C = [], name: P } = e,
          I = (0, m.v)(P, { strict: !1 }),
          B = c.filter((e) =>
            I
              ? "function" === e.type
                ? (0, b.C)(e) === P
                : "event" === e.type && (0, y.n)(e) === P
              : "name" in e && e.name === P
          );
        if (0 !== B.length) {
          if (1 === B.length) return B[0];
          for (let e of B) {
            if (!("inputs" in e)) continue;
            if (!C || 0 === C.length) {
              if (!e.inputs || 0 === e.inputs.length) return e;
              continue;
            }
            if (
              !e.inputs ||
              0 === e.inputs.length ||
              e.inputs.length !== C.length
            )
              continue;
            let c = C.every((l, c) => {
              let d = "inputs" in e && e.inputs[c];
              return (
                !!d &&
                (function isArgOfType(e, l) {
                  let c = typeof e,
                    d = l.type;
                  switch (d) {
                    case "address":
                      return (0, g.U)(e, { strict: !1 });
                    case "bool":
                      return "boolean" === c;
                    case "function":
                    case "string":
                      return "string" === c;
                    default:
                      if ("tuple" === d && "components" in l)
                        return Object.values(l.components).every((l, c) =>
                          isArgOfType(Object.values(e)[c], l)
                        );
                      if (
                        /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(
                          d
                        )
                      )
                        return "number" === c || "bigint" === c;
                      if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(d))
                        return "string" === c || e instanceof Uint8Array;
                      if (/[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(d))
                        return (
                          Array.isArray(e) &&
                          e.every((e) =>
                            isArgOfType(e, {
                              ...l,
                              type: d.replace(/(\[[0-9]{0,}\])$/, ""),
                            })
                          )
                        );
                      return !1;
                  }
                })(l, d)
              );
            });
            if (c) {
              if (l && "inputs" in l && l.inputs) {
                let c = (function getAmbiguousTypes(e, l, c) {
                  for (let d in e) {
                    let m = e[d],
                      y = l[d];
                    if (
                      "tuple" === m.type &&
                      "tuple" === y.type &&
                      "components" in m &&
                      "components" in y
                    )
                      return getAmbiguousTypes(
                        m.components,
                        y.components,
                        c[d]
                      );
                    let b = [m.type, y.type],
                      C =
                        !!(b.includes("address") && b.includes("bytes20")) ||
                        (!!(
                          (b.includes("address") && b.includes("string")) ||
                          (b.includes("address") && b.includes("bytes"))
                        ) &&
                          (0, g.U)(c[d], { strict: !1 }));
                    if (C) return b;
                  }
                })(e.inputs, l.inputs, C);
                if (c)
                  throw new d.S4(
                    { abiItem: e, type: c[0] },
                    { abiItem: l, type: c[1] }
                  );
              }
              l = e;
            }
          }
          return l || B[0];
        }
      }
    },
    69301: function (e, l, c) {
      "use strict";
      c.d(l, {
        K: function () {
          return getAddress;
        },
        x: function () {
          return checksumAddress;
        },
      });
      var d = c(63964),
        m = c(23279),
        g = c(83223),
        y = c(94065),
        b = c(87874);
      let C = new y.k(8192);
      function checksumAddress(e, l) {
        if (C.has(`${e}.${l}`)) return C.get(`${e}.${l}`);
        let c = l ? `${l}${e.toLowerCase()}` : e.substring(2).toLowerCase(),
          d = (0, g.w)((0, m.qX)(c), "bytes"),
          y = (l ? c.substring(`${l}0x`.length) : c).split("");
        for (let e = 0; e < 40; e += 2)
          d[e >> 1] >> 4 >= 8 && y[e] && (y[e] = y[e].toUpperCase()),
            (15 & d[e >> 1]) >= 8 &&
              y[e + 1] &&
              (y[e + 1] = y[e + 1].toUpperCase());
        let b = `0x${y.join("")}`;
        return C.set(`${e}.${l}`, b), b;
      }
      function getAddress(e, l) {
        if (!(0, b.U)(e, { strict: !1 })) throw new d.b({ address: e });
        return checksumAddress(e, l);
      }
    },
    87874: function (e, l, c) {
      "use strict";
      c.d(l, {
        U: function () {
          return isAddress;
        },
      });
      var d = c(94065),
        m = c(69301);
      let g = /^0x[a-fA-F0-9]{40}$/,
        y = new d.k(8192);
      function isAddress(e, l) {
        let { strict: c = !0 } = l ?? {},
          d = `${e}.${c}`;
        if (y.has(d)) return y.get(d);
        let b =
          !!g.test(e) && (e.toLowerCase() === e || !c || (0, m.x)(e) === e);
        return y.set(d, b), b;
      }
    },
    81119: function (e, l, c) {
      "use strict";
      c.d(l, {
        E: function () {
          return isAddressEqual;
        },
      });
      var d = c(63964),
        m = c(87874);
      function isAddressEqual(e, l) {
        if (!(0, m.U)(e, { strict: !1 })) throw new d.b({ address: e });
        if (!(0, m.U)(l, { strict: !1 })) throw new d.b({ address: l });
        return e.toLowerCase() === l.toLowerCase();
      }
    },
    44717: function (e, l, c) {
      "use strict";
      c.d(l, {
        z: function () {
          return recoverAuthorizationAddress;
        },
      });
      var d = c(7921),
        m = c(12265),
        g = c(23279),
        y = c(1701),
        b = c(10673),
        C = c(83223);
      async function recoverAuthorizationAddress(e) {
        let { authorization: l, signature: c } = e;
        return (0, d.R)({
          hash: (function (e) {
            let { chainId: l, nonce: c, to: d } = e,
              P = e.contractAddress ?? e.address,
              I = (0, C.w)(
                (0, m.SM)([
                  "0x05",
                  (0, b.LV)([
                    l ? (0, y.eC)(l) : "0x",
                    P,
                    c ? (0, y.eC)(c) : "0x",
                  ]),
                ])
              );
            return "bytes" === d ? (0, g.nr)(I) : I;
          })(l),
          signature: c ?? l,
        });
      }
    },
    17806: function (e, l, c) {
      "use strict";
      c.d(l, {
        P: function () {
          return blobsToCommitments;
        },
      });
      var d = c(23279),
        m = c(1701);
      function blobsToCommitments(e) {
        let { kzg: l } = e,
          c = e.to ?? ("string" == typeof e.blobs[0] ? "hex" : "bytes"),
          g =
            "string" == typeof e.blobs[0]
              ? e.blobs.map((e) => (0, d.nr)(e))
              : e.blobs,
          y = [];
        for (let e of g) y.push(Uint8Array.from(l.blobToKzgCommitment(e)));
        return "bytes" === c ? y : y.map((e) => (0, m.ci)(e));
      }
    },
    43208: function (e, l, c) {
      "use strict";
      c.d(l, {
        y: function () {
          return blobsToProofs;
        },
      });
      var d = c(23279),
        m = c(1701);
      function blobsToProofs(e) {
        let { kzg: l } = e,
          c = e.to ?? ("string" == typeof e.blobs[0] ? "hex" : "bytes"),
          g =
            "string" == typeof e.blobs[0]
              ? e.blobs.map((e) => (0, d.nr)(e))
              : e.blobs,
          y =
            "string" == typeof e.commitments[0]
              ? e.commitments.map((e) => (0, d.nr)(e))
              : e.commitments,
          b = [];
        for (let e = 0; e < g.length; e++) {
          let c = g[e],
            d = y[e];
          b.push(Uint8Array.from(l.computeBlobKzgProof(c, d)));
        }
        return "bytes" === c ? b : b.map((e) => (0, m.ci)(e));
      }
    },
    31199: function (e, l, c) {
      "use strict";
      c.d(l, {
        C: function () {
          return commitmentsToVersionedHashes;
        },
      });
      var d = c(1701),
        m = c(15455);
      function commitmentsToVersionedHashes(e) {
        let { commitments: l, version: c } = e,
          g = e.to ?? ("string" == typeof l[0] ? "hex" : "bytes"),
          y = [];
        for (let e of l)
          y.push(
            (function (e) {
              let { commitment: l, version: c = 1 } = e,
                g = e.to ?? ("string" == typeof l ? "hex" : "bytes"),
                y = (0, m.J)(l, "bytes");
              return y.set([c], 0), "bytes" === g ? y : (0, d.ci)(y);
            })({ commitment: e, to: g, version: c })
          );
        return y;
      }
    },
    99694: function (e, l, c) {
      "use strict";
      c.d(l, {
        j: function () {
          return toBlobSidecars;
        },
      });
      var d = c(17806),
        m = c(43208),
        g = c(25003),
        y = c(34254),
        b = c(59679),
        C = c(23279),
        P = c(1701);
      function toBlobSidecars(e) {
        let { data: l, kzg: c, to: I } = e,
          B =
            e.blobs ??
            (function (e) {
              let l = e.to ?? ("string" == typeof e.data ? "hex" : "bytes"),
                c = "string" == typeof e.data ? (0, C.nr)(e.data) : e.data,
                d = (0, b.d)(c);
              if (!d) throw new g.RX();
              if (d > 761855) throw new g.m7({ maxSize: 761855, size: d });
              let m = [],
                I = !0,
                B = 0;
              for (; I; ) {
                let e = (0, y.q)(new Uint8Array(131072)),
                  l = 0;
                for (; l < 4096; ) {
                  let d = c.slice(B, B + 31);
                  if ((e.pushByte(0), e.pushBytes(d), d.length < 31)) {
                    e.pushByte(128), (I = !1);
                    break;
                  }
                  l++, (B += 31);
                }
                m.push(e);
              }
              return "bytes" === l
                ? m.map((e) => e.bytes)
                : m.map((e) => (0, P.ci)(e.bytes));
            })({ data: l, to: I }),
          N = e.commitments ?? (0, d.P)({ blobs: B, kzg: c, to: I }),
          F = e.proofs ?? (0, m.y)({ blobs: B, commitments: N, kzg: c, to: I }),
          V = [];
        for (let e = 0; e < B.length; e++)
          V.push({ blob: B[e], commitment: N[e], proof: F[e] });
        return V;
      }
    },
    19240: function (e, l, c) {
      "use strict";
      function defineChain(e) {
        return { formatters: void 0, fees: void 0, serializers: void 0, ...e };
      }
      c.d(l, {
        a: function () {
          return defineChain;
        },
      });
    },
    21376: function (e, l, c) {
      "use strict";
      c.d(l, {
        L: function () {
          return getChainContractAddress;
        },
      });
      var d = c(853);
      function getChainContractAddress({
        blockNumber: e,
        chain: l,
        contract: c,
      }) {
        let m = l?.contracts?.[c];
        if (!m) throw new d.mm({ chain: l, contract: { name: c } });
        if (e && m.blockCreated && m.blockCreated > e)
          throw new d.mm({
            blockNumber: e,
            chain: l,
            contract: { name: c, blockCreated: m.blockCreated },
          });
        return m.address;
      }
    },
    34254: function (e, l, c) {
      "use strict";
      c.d(l, {
        q: function () {
          return createCursor;
        },
      });
      var d = c(94041);
      let m = {
        bytes: new Uint8Array(),
        dataView: new DataView(new ArrayBuffer(0)),
        position: 0,
        positionReadCount: new Map(),
        recursiveReadCount: 0,
        recursiveReadLimit: Number.POSITIVE_INFINITY,
        assertReadLimit() {
          if (this.recursiveReadCount >= this.recursiveReadLimit)
            throw new d.KD({
              count: this.recursiveReadCount + 1,
              limit: this.recursiveReadLimit,
            });
        },
        assertPosition(e) {
          if (e < 0 || e > this.bytes.length - 1)
            throw new d.lQ({ length: this.bytes.length, position: e });
        },
        decrementPosition(e) {
          if (e < 0) throw new d.T_({ offset: e });
          let l = this.position - e;
          this.assertPosition(l), (this.position = l);
        },
        getReadCount(e) {
          return this.positionReadCount.get(e || this.position) || 0;
        },
        incrementPosition(e) {
          if (e < 0) throw new d.T_({ offset: e });
          let l = this.position + e;
          this.assertPosition(l), (this.position = l);
        },
        inspectByte(e) {
          let l = e ?? this.position;
          return this.assertPosition(l), this.bytes[l];
        },
        inspectBytes(e, l) {
          let c = l ?? this.position;
          return this.assertPosition(c + e - 1), this.bytes.subarray(c, c + e);
        },
        inspectUint8(e) {
          let l = e ?? this.position;
          return this.assertPosition(l), this.bytes[l];
        },
        inspectUint16(e) {
          let l = e ?? this.position;
          return this.assertPosition(l + 1), this.dataView.getUint16(l);
        },
        inspectUint24(e) {
          let l = e ?? this.position;
          return (
            this.assertPosition(l + 2),
            (this.dataView.getUint16(l) << 8) + this.dataView.getUint8(l + 2)
          );
        },
        inspectUint32(e) {
          let l = e ?? this.position;
          return this.assertPosition(l + 3), this.dataView.getUint32(l);
        },
        pushByte(e) {
          this.assertPosition(this.position),
            (this.bytes[this.position] = e),
            this.position++;
        },
        pushBytes(e) {
          this.assertPosition(this.position + e.length - 1),
            this.bytes.set(e, this.position),
            (this.position += e.length);
        },
        pushUint8(e) {
          this.assertPosition(this.position),
            (this.bytes[this.position] = e),
            this.position++;
        },
        pushUint16(e) {
          this.assertPosition(this.position + 1),
            this.dataView.setUint16(this.position, e),
            (this.position += 2);
        },
        pushUint24(e) {
          this.assertPosition(this.position + 2),
            this.dataView.setUint16(this.position, e >> 8),
            this.dataView.setUint8(this.position + 2, 255 & e),
            (this.position += 3);
        },
        pushUint32(e) {
          this.assertPosition(this.position + 3),
            this.dataView.setUint32(this.position, e),
            (this.position += 4);
        },
        readByte() {
          this.assertReadLimit(), this._touch();
          let e = this.inspectByte();
          return this.position++, e;
        },
        readBytes(e, l) {
          this.assertReadLimit(), this._touch();
          let c = this.inspectBytes(e);
          return (this.position += l ?? e), c;
        },
        readUint8() {
          this.assertReadLimit(), this._touch();
          let e = this.inspectUint8();
          return (this.position += 1), e;
        },
        readUint16() {
          this.assertReadLimit(), this._touch();
          let e = this.inspectUint16();
          return (this.position += 2), e;
        },
        readUint24() {
          this.assertReadLimit(), this._touch();
          let e = this.inspectUint24();
          return (this.position += 3), e;
        },
        readUint32() {
          this.assertReadLimit(), this._touch();
          let e = this.inspectUint32();
          return (this.position += 4), e;
        },
        get remaining() {
          return this.bytes.length - this.position;
        },
        setPosition(e) {
          let l = this.position;
          return (
            this.assertPosition(e),
            (this.position = e),
            () => (this.position = l)
          );
        },
        _touch() {
          if (this.recursiveReadLimit === Number.POSITIVE_INFINITY) return;
          let e = this.getReadCount();
          this.positionReadCount.set(this.position, e + 1),
            e > 0 && this.recursiveReadCount++;
        },
      };
      function createCursor(e, { recursiveReadLimit: l = 8192 } = {}) {
        let c = Object.create(m);
        return (
          (c.bytes = e),
          (c.dataView = new DataView(e.buffer, e.byteOffset, e.byteLength)),
          (c.positionReadCount = new Map()),
          (c.recursiveReadLimit = l),
          c
        );
      }
    },
    12265: function (e, l, c) {
      "use strict";
      function concat(e) {
        return "string" == typeof e[0]
          ? concatHex(e)
          : (function (e) {
              let l = 0;
              for (let c of e) l += c.length;
              let c = new Uint8Array(l),
                d = 0;
              for (let l of e) c.set(l, d), (d += l.length);
              return c;
            })(e);
      }
      function concatHex(e) {
        return `0x${e.reduce((e, l) => e + l.replace("0x", ""), "")}`;
      }
      c.d(l, {
        SM: function () {
          return concatHex;
        },
        zo: function () {
          return concat;
        },
      });
    },
    25622: function (e, l, c) {
      "use strict";
      function isHex(e, { strict: l = !0 } = {}) {
        return (
          !!e &&
          "string" == typeof e &&
          (l ? /^0x[0-9a-fA-F]*$/.test(e) : e.startsWith("0x"))
        );
      }
      c.d(l, {
        v: function () {
          return isHex;
        },
      });
    },
    30498: function (e, l, c) {
      "use strict";
      c.d(l, {
        gc: function () {
          return padHex;
        },
        vk: function () {
          return pad;
        },
      });
      var d = c(47118);
      function pad(e, { dir: l, size: c = 32 } = {}) {
        return "string" == typeof e
          ? padHex(e, { dir: l, size: c })
          : (function (e, { dir: l, size: c = 32 } = {}) {
              if (null === c) return e;
              if (e.length > c)
                throw new d.$s({
                  size: e.length,
                  targetSize: c,
                  type: "bytes",
                });
              let m = new Uint8Array(c);
              for (let d = 0; d < c; d++) {
                let g = "right" === l;
                m[g ? d : c - d - 1] = e[g ? d : e.length - d - 1];
              }
              return m;
            })(e, { dir: l, size: c });
      }
      function padHex(e, { dir: l, size: c = 32 } = {}) {
        if (null === c) return e;
        let m = e.replace("0x", "");
        if (m.length > 2 * c)
          throw new d.$s({
            size: Math.ceil(m.length / 2),
            targetSize: c,
            type: "hex",
          });
        return `0x${m["right" === l ? "padEnd" : "padStart"](2 * c, "0")}`;
      }
    },
    59679: function (e, l, c) {
      "use strict";
      c.d(l, {
        d: function () {
          return size;
        },
      });
      var d = c(25622);
      function size(e) {
        return (0, d.v)(e, { strict: !1 })
          ? Math.ceil((e.length - 2) / 2)
          : e.length;
      }
    },
    46548: function (e, l, c) {
      "use strict";
      c.d(l, {
        T4: function () {
          return sliceBytes;
        },
        p5: function () {
          return sliceHex;
        },
        tP: function () {
          return slice;
        },
      });
      var d = c(47118),
        m = c(25622),
        g = c(59679);
      function slice(e, l, c, { strict: d } = {}) {
        return (0, m.v)(e, { strict: !1 })
          ? sliceHex(e, l, c, { strict: d })
          : sliceBytes(e, l, c, { strict: d });
      }
      function assertStartOffset(e, l) {
        if ("number" == typeof l && l > 0 && l > (0, g.d)(e) - 1)
          throw new d.mV({ offset: l, position: "start", size: (0, g.d)(e) });
      }
      function assertEndOffset(e, l, c) {
        if (
          "number" == typeof l &&
          "number" == typeof c &&
          (0, g.d)(e) !== c - l
        )
          throw new d.mV({ offset: c, position: "end", size: (0, g.d)(e) });
      }
      function sliceBytes(e, l, c, { strict: d } = {}) {
        assertStartOffset(e, l);
        let m = e.slice(l, c);
        return d && assertEndOffset(m, l, c), m;
      }
      function sliceHex(e, l, c, { strict: d } = {}) {
        assertStartOffset(e, l);
        let m = `0x${e
          .replace("0x", "")
          .slice((l ?? 0) * 2, (c ?? e.length) * 2)}`;
        return d && assertEndOffset(m, l, c), m;
      }
    },
    83749: function (e, l, c) {
      "use strict";
      function trim(e, { dir: l = "left" } = {}) {
        let c = "string" == typeof e ? e.replace("0x", "") : e,
          d = 0;
        for (
          let e = 0;
          e < c.length - 1 &&
          "0" === c["left" === l ? e : c.length - e - 1].toString();
          e++
        )
          d++;
        return ((c = "left" === l ? c.slice(d) : c.slice(0, c.length - d)),
        "string" == typeof e)
          ? (1 === c.length && "right" === l && (c = `${c}0`),
            `0x${c.length % 2 == 1 ? `0${c}` : c}`)
          : c;
      }
      c.d(l, {
        f: function () {
          return trim;
        },
      });
    },
    3644: function (e, l, c) {
      "use strict";
      c.d(l, {
        XA: function () {
          return hexToBool;
        },
        Yf: function () {
          return assertSize;
        },
        ly: function () {
          return hexToNumber;
        },
        rR: function () {
          return hexToString;
        },
        y_: function () {
          return hexToBigInt;
        },
      });
      var d = c(43521),
        m = c(59679),
        g = c(83749),
        y = c(23279);
      function assertSize(e, { size: l }) {
        if ((0, m.d)(e) > l)
          throw new d.M6({ givenSize: (0, m.d)(e), maxSize: l });
      }
      function hexToBigInt(e, l = {}) {
        let { signed: c } = l;
        l.size && assertSize(e, { size: l.size });
        let d = BigInt(e);
        if (!c) return d;
        let m = (e.length - 2) / 2,
          g = (1n << (8n * BigInt(m) - 1n)) - 1n;
        return d <= g ? d : d - BigInt(`0x${"f".padStart(2 * m, "f")}`) - 1n;
      }
      function hexToBool(e, l = {}) {
        let c = e;
        if (
          (l.size && (assertSize(c, { size: l.size }), (c = (0, g.f)(c))),
          "0x00" === (0, g.f)(c))
        )
          return !1;
        if ("0x01" === (0, g.f)(c)) return !0;
        throw new d.Cd(c);
      }
      function hexToNumber(e, l = {}) {
        return Number(hexToBigInt(e, l));
      }
      function hexToString(e, l = {}) {
        let c = (0, y.nr)(e);
        return (
          l.size &&
            (assertSize(c, { size: l.size }),
            (c = (0, g.f)(c, { dir: "right" }))),
          new TextDecoder().decode(c)
        );
      }
    },
    23279: function (e, l, c) {
      "use strict";
      c.d(l, {
        O0: function () {
          return toBytes;
        },
        nr: function () {
          return hexToBytes;
        },
        qX: function () {
          return stringToBytes;
        },
      });
      var d = c(26456),
        m = c(25622),
        g = c(30498),
        y = c(3644),
        b = c(1701);
      let C = new TextEncoder();
      function toBytes(e, l = {}) {
        return "number" == typeof e || "bigint" == typeof e
          ? (function (e, l) {
              let c = (0, b.eC)(e, l);
              return hexToBytes(c);
            })(e, l)
          : "boolean" == typeof e
          ? (function (e, l = {}) {
              let c = new Uint8Array(1);
              return ((c[0] = Number(e)), "number" == typeof l.size)
                ? ((0, y.Yf)(c, { size: l.size }),
                  (0, g.vk)(c, { size: l.size }))
                : c;
            })(e, l)
          : (0, m.v)(e)
          ? hexToBytes(e, l)
          : stringToBytes(e, l);
      }
      let P = { zero: 48, nine: 57, A: 65, F: 70, a: 97, f: 102 };
      function charCodeToBase16(e) {
        return e >= P.zero && e <= P.nine
          ? e - P.zero
          : e >= P.A && e <= P.F
          ? e - (P.A - 10)
          : e >= P.a && e <= P.f
          ? e - (P.a - 10)
          : void 0;
      }
      function hexToBytes(e, l = {}) {
        let c = e;
        l.size &&
          ((0, y.Yf)(c, { size: l.size }),
          (c = (0, g.vk)(c, { dir: "right", size: l.size })));
        let m = c.slice(2);
        m.length % 2 && (m = `0${m}`);
        let b = m.length / 2,
          C = new Uint8Array(b);
        for (let e = 0, l = 0; e < b; e++) {
          let c = charCodeToBase16(m.charCodeAt(l++)),
            g = charCodeToBase16(m.charCodeAt(l++));
          if (void 0 === c || void 0 === g)
            throw new d.G(
              `Invalid byte sequence ("${m[l - 2]}${m[l - 1]}" in "${m}").`
            );
          C[e] = 16 * c + g;
        }
        return C;
      }
      function stringToBytes(e, l = {}) {
        let c = C.encode(e);
        return "number" == typeof l.size
          ? ((0, y.Yf)(c, { size: l.size }),
            (0, g.vk)(c, { dir: "right", size: l.size }))
          : c;
      }
    },
    1701: function (e, l, c) {
      "use strict";
      c.d(l, {
        $G: function () {
          return stringToHex;
        },
        C4: function () {
          return boolToHex;
        },
        NC: function () {
          return toHex;
        },
        ci: function () {
          return bytesToHex;
        },
        eC: function () {
          return numberToHex;
        },
      });
      var d = c(43521),
        m = c(30498),
        g = c(3644);
      let y = Array.from({ length: 256 }, (e, l) =>
        l.toString(16).padStart(2, "0")
      );
      function toHex(e, l = {}) {
        return "number" == typeof e || "bigint" == typeof e
          ? numberToHex(e, l)
          : "string" == typeof e
          ? stringToHex(e, l)
          : "boolean" == typeof e
          ? boolToHex(e, l)
          : bytesToHex(e, l);
      }
      function boolToHex(e, l = {}) {
        let c = `0x${Number(e)}`;
        return "number" == typeof l.size
          ? ((0, g.Yf)(c, { size: l.size }), (0, m.vk)(c, { size: l.size }))
          : c;
      }
      function bytesToHex(e, l = {}) {
        let c = "";
        for (let l = 0; l < e.length; l++) c += y[e[l]];
        let d = `0x${c}`;
        return "number" == typeof l.size
          ? ((0, g.Yf)(d, { size: l.size }),
            (0, m.vk)(d, { dir: "right", size: l.size }))
          : d;
      }
      function numberToHex(e, l = {}) {
        let c;
        let { signed: g, size: y } = l,
          b = BigInt(e);
        y
          ? (c = g
              ? (1n << (8n * BigInt(y) - 1n)) - 1n
              : 2n ** (8n * BigInt(y)) - 1n)
          : "number" == typeof e && (c = BigInt(Number.MAX_SAFE_INTEGER));
        let C = "bigint" == typeof c && g ? -c - 1n : 0;
        if ((c && b > c) || b < C) {
          let l = "bigint" == typeof e ? "n" : "";
          throw new d.J5({
            max: c ? `${c}${l}` : void 0,
            min: `${C}${l}`,
            signed: g,
            size: y,
            value: `${e}${l}`,
          });
        }
        let P = `0x${(g && b < 0
          ? (1n << BigInt(8 * y)) + BigInt(b)
          : b
        ).toString(16)}`;
        return y ? (0, m.vk)(P, { size: y }) : P;
      }
      let b = new TextEncoder();
      function stringToHex(e, l = {}) {
        let c = b.encode(e);
        return bytesToHex(c, l);
      }
    },
    10673: function (e, l, c) {
      "use strict";
      c.d(l, {
        LV: function () {
          return toRlp;
        },
      });
      var d = c(26456),
        m = c(34254),
        g = c(23279),
        y = c(1701);
      function toRlp(e, l = "hex") {
        let c = (function getEncodable(e) {
            return Array.isArray(e)
              ? (function (e) {
                  let l = e.reduce((e, l) => e + l.length, 0),
                    c = getSizeOfLength(l),
                    d = l <= 55 ? 1 + l : 1 + c + l;
                  return {
                    length: d,
                    encode(d) {
                      for (let { encode: m } of (l <= 55
                        ? d.pushByte(192 + l)
                        : (d.pushByte(247 + c),
                          1 === c
                            ? d.pushUint8(l)
                            : 2 === c
                            ? d.pushUint16(l)
                            : 3 === c
                            ? d.pushUint24(l)
                            : d.pushUint32(l)),
                      e))
                        m(d);
                    },
                  };
                })(e.map((e) => getEncodable(e)))
              : (function (e) {
                  let l = "string" == typeof e ? (0, g.nr)(e) : e,
                    c = getSizeOfLength(l.length),
                    d =
                      1 === l.length && l[0] < 128
                        ? 1
                        : l.length <= 55
                        ? 1 + l.length
                        : 1 + c + l.length;
                  return {
                    length: d,
                    encode(e) {
                      (1 === l.length && l[0] < 128) ||
                        (l.length <= 55
                          ? e.pushByte(128 + l.length)
                          : (e.pushByte(183 + c),
                            1 === c
                              ? e.pushUint8(l.length)
                              : 2 === c
                              ? e.pushUint16(l.length)
                              : 3 === c
                              ? e.pushUint24(l.length)
                              : e.pushUint32(l.length))),
                        e.pushBytes(l);
                    },
                  };
                })(e);
          })(e),
          d = (0, m.q)(new Uint8Array(c.length));
        return (c.encode(d), "hex" === l) ? (0, y.ci)(d.bytes) : d.bytes;
      }
      function getSizeOfLength(e) {
        if (e < 256) return 1;
        if (e < 65536) return 2;
        if (e < 16777216) return 3;
        if (e < 4294967296) return 4;
        throw new d.G("Length is too large.");
      }
    },
    35508: function (e, l, c) {
      "use strict";
      c.d(l, {
        i: function () {
          return encodedLabelToLabelhash;
        },
      });
      var d = c(25622);
      function encodedLabelToLabelhash(e) {
        if (66 !== e.length || 0 !== e.indexOf("[") || 65 !== e.indexOf("]"))
          return null;
        let l = `0x${e.slice(1, 65)}`;
        return (0, d.v)(l) ? l : null;
      }
    },
    23183: function (e, l, c) {
      "use strict";
      c.d(l, {
        c: function () {
          return isNullUniversalResolverError;
        },
      });
      var d = c(94516),
        m = c(26456),
        g = c(40955);
      function isNullUniversalResolverError(e, l) {
        if (!(e instanceof m.G)) return !1;
        let c = e.walk((e) => e instanceof g.Lu);
        return (
          c instanceof g.Lu &&
          (!!(
            c.data?.errorName === "ResolverNotFound" ||
            c.data?.errorName === "ResolverWildcardNotSupported" ||
            c.data?.errorName === "ResolverNotContract" ||
            c.data?.errorName === "ResolverError" ||
            c.data?.errorName === "HttpError" ||
            c.reason?.includes(
              "Wildcard on non-extended resolvers is not supported"
            )
          ) ||
            ("reverse" === l && c.reason === d.$[50]))
        );
      }
    },
    52288: function (e, l, c) {
      "use strict";
      c.d(l, {
        w: function () {
          return localBatchGatewayRequest;
        },
        M: function () {
          return G;
        },
      });
      var d = c(85188),
        m = c(94516),
        g = c(771),
        y = c(46548),
        b = c(61895),
        C = c(3680),
        P = c(21283),
        I = c(12265),
        B = c(74600),
        N = c(38652);
      let F = "/docs/contract/encodeErrorResult";
      function encodeErrorResult(e) {
        let { abi: l, errorName: c, args: d } = e,
          m = l[0];
        if (c) {
          let e = (0, N.mE)({ abi: l, args: d, name: c });
          if (!e) throw new g.MS(c, { docsPath: F });
          m = e;
        }
        if ("error" !== m.type) throw new g.MS(void 0, { docsPath: F });
        let y = (0, P.t)(m),
          C = (0, b.C)(y),
          V = "0x";
        if (d && d.length > 0) {
          if (!m.inputs) throw new g.Zh(m.name, { docsPath: F });
          V = (0, B.E)(m.inputs, d);
        }
        return (0, I.SM)([C, V]);
      }
      let V = "/docs/contract/encodeFunctionResult",
        G = "x-batch-gateway:true";
      async function localBatchGatewayRequest(e) {
        let { data: l, ccipRequest: c } = e,
          {
            args: [I],
          } = (function (e) {
            let { abi: l, data: c } = e,
              d = (0, y.tP)(c, 0, 4),
              m = l.find(
                (e) => "function" === e.type && d === (0, b.C)((0, P.t)(e))
              );
            if (!m)
              throw new g.eF(d, {
                docsPath: "/docs/contract/decodeFunctionData",
              });
            return {
              functionName: m.name,
              args:
                "inputs" in m && m.inputs && m.inputs.length > 0
                  ? (0, C.r)(m.inputs, (0, y.tP)(c, 4))
                  : void 0,
            };
          })({ abi: d.Yi, data: l }),
          F = [],
          G = [];
        return (
          await Promise.all(
            I.map(async (e, l) => {
              try {
                (G[l] = await c(e)), (F[l] = !1);
              } catch (e) {
                (F[l] = !0),
                  (G[l] =
                    "HttpRequestError" === e.name && e.status
                      ? encodeErrorResult({
                          abi: d.Yi,
                          errorName: "HttpError",
                          args: [e.status, e.shortMessage],
                        })
                      : encodeErrorResult({
                          abi: [m.Up],
                          errorName: "Error",
                          args: [
                            "shortMessage" in e ? e.shortMessage : e.message,
                          ],
                        }));
              }
            })
          ),
          (function (e) {
            let { abi: l, functionName: c, result: d } = e,
              m = l[0];
            if (c) {
              let e = (0, N.mE)({ abi: l, name: c });
              if (!e) throw new g.xL(c, { docsPath: V });
              m = e;
            }
            if ("function" !== m.type) throw new g.xL(void 0, { docsPath: V });
            if (!m.outputs) throw new g.MX(m.name, { docsPath: V });
            let y = (() => {
              if (0 === m.outputs.length) return [];
              if (1 === m.outputs.length) return [d];
              if (Array.isArray(d)) return d;
              throw new g.hn(d);
            })();
            return (0, B.E)(m.outputs, y);
          })({ abi: d.Yi, functionName: "query", result: [F, G] })
        );
      }
    },
    61460: function (e, l, c) {
      "use strict";
      c.d(l, {
        T: function () {
          return packetToBytes;
        },
      });
      var d = c(23279),
        m = c(1701),
        g = c(83223),
        y = c(35508);
      function packetToBytes(e) {
        let l = e.replace(/^\.|\.$/gm, "");
        if (0 === l.length) return new Uint8Array(1);
        let c = new Uint8Array((0, d.qX)(l).byteLength + 2),
          b = 0,
          C = l.split(".");
        for (let e = 0; e < C.length; e++) {
          let l = (0, d.qX)(C[e]);
          if (l.byteLength > 255) {
            var P;
            l = (0, d.qX)(
              ((P = (function (e) {
                let l = new Uint8Array(32).fill(0);
                return e ? (0, y.i)(e) || (0, g.w)((0, d.qX)(e)) : (0, m.ci)(l);
              })(C[e])),
              `[${P.slice(2)}]`)
            );
          }
          (c[b] = l.length), c.set(l, b + 1), (b += l.length + 1);
        }
        return c.byteLength !== b + 1 ? c.slice(0, b + 1) : c;
      }
    },
    23546: function (e, l, c) {
      "use strict";
      c.d(l, {
        P: function () {
          return getCallError;
        },
      });
      var d = c(40955),
        m = c(78e3),
        g = c(26852);
      function getCallError(e, { docsPath: l, ...c }) {
        let y = (() => {
          let l = (0, g.k)(e, c);
          return l instanceof m.cj ? e : l;
        })();
        return new d.cg(y, { docsPath: l, ...c });
      }
    },
    3086: function (e, l, c) {
      "use strict";
      c.d(l, {
        S: function () {
          return getContractError;
        },
      });
      var d = c(771),
        m = c(26456),
        g = c(40955),
        y = c(69699),
        b = c(42991);
      function getContractError(
        e,
        { abi: l, address: c, args: C, docsPath: P, functionName: I, sender: B }
      ) {
        let N =
            e instanceof g.VQ
              ? e
              : e instanceof m.G
              ? e.walk((e) => "data" in e) || e.walk()
              : {},
          { code: F, data: V, details: G, message: Q, shortMessage: $ } = N,
          Z =
            e instanceof d.wb
              ? new g.Dk({ functionName: I })
              : [3, b.XS.code].includes(F) && (V || G || Q || $)
              ? new g.Lu({
                  abi: l,
                  data: "object" == typeof V ? V.data : V,
                  functionName: I,
                  message: N instanceof y.bs ? G : $ ?? Q,
                })
              : e;
        return new g.uq(Z, {
          abi: l,
          args: C,
          contractAddress: c,
          docsPath: P,
          functionName: I,
          sender: B,
        });
      }
    },
    26852: function (e, l, c) {
      "use strict";
      c.d(l, {
        k: function () {
          return getNodeError;
        },
      });
      var d = c(26456),
        m = c(78e3);
      function getNodeError(e, l) {
        let c = (e.details || "").toLowerCase(),
          g = e instanceof d.G ? e.walk((e) => e?.code === m.M_.code) : e;
        return g instanceof d.G
          ? new m.M_({ cause: e, message: g.details })
          : m.M_.nodeMessage.test(c)
          ? new m.M_({ cause: e, message: e.details })
          : m.Hh.nodeMessage.test(c)
          ? new m.Hh({ cause: e, maxFeePerGas: l?.maxFeePerGas })
          : m.G$.nodeMessage.test(c)
          ? new m.G$({ cause: e, maxFeePerGas: l?.maxFeePerGas })
          : m.ZI.nodeMessage.test(c)
          ? new m.ZI({ cause: e, nonce: l?.nonce })
          : m.vU.nodeMessage.test(c)
          ? new m.vU({ cause: e, nonce: l?.nonce })
          : m.se.nodeMessage.test(c)
          ? new m.se({ cause: e, nonce: l?.nonce })
          : m.C_.nodeMessage.test(c)
          ? new m.C_({ cause: e })
          : m.WF.nodeMessage.test(c)
          ? new m.WF({ cause: e, gas: l?.gas })
          : m.dR.nodeMessage.test(c)
          ? new m.dR({ cause: e, gas: l?.gas })
          : m.pZ.nodeMessage.test(c)
          ? new m.pZ({ cause: e })
          : m.cs.nodeMessage.test(c)
          ? new m.cs({
              cause: e,
              maxFeePerGas: l?.maxFeePerGas,
              maxPriorityFeePerGas: l?.maxPriorityFeePerGas,
            })
          : new m.cj({ cause: e });
      }
    },
    20503: function (e, l, c) {
      "use strict";
      c.d(l, {
        G: function () {
          return g;
        },
        Z: function () {
          return formatBlock;
        },
      });
      var d = c(75486),
        m = c(55009);
      function formatBlock(e) {
        let l = (e.transactions ?? []).map((e) =>
          "string" == typeof e ? e : (0, m.Tr)(e)
        );
        return {
          ...e,
          baseFeePerGas: e.baseFeePerGas ? BigInt(e.baseFeePerGas) : null,
          blobGasUsed: e.blobGasUsed ? BigInt(e.blobGasUsed) : void 0,
          difficulty: e.difficulty ? BigInt(e.difficulty) : void 0,
          excessBlobGas: e.excessBlobGas ? BigInt(e.excessBlobGas) : void 0,
          gasLimit: e.gasLimit ? BigInt(e.gasLimit) : void 0,
          gasUsed: e.gasUsed ? BigInt(e.gasUsed) : void 0,
          hash: e.hash ? e.hash : null,
          logsBloom: e.logsBloom ? e.logsBloom : null,
          nonce: e.nonce ? e.nonce : null,
          number: e.number ? BigInt(e.number) : null,
          size: e.size ? BigInt(e.size) : void 0,
          timestamp: e.timestamp ? BigInt(e.timestamp) : void 0,
          transactions: l,
          totalDifficulty: e.totalDifficulty ? BigInt(e.totalDifficulty) : null,
        };
      }
      let g = (0, d.$)("block", formatBlock);
    },
    8383: function (e, l, c) {
      "use strict";
      function extract(e, { format: l }) {
        if (!l) return {};
        let c = {},
          d = l(e || {});
        return (
          !(function extract_(l) {
            let d = Object.keys(l);
            for (let m of d)
              m in e && (c[m] = e[m]),
                l[m] &&
                  "object" == typeof l[m] &&
                  !Array.isArray(l[m]) &&
                  extract_(l[m]);
          })(d),
          c
        );
      }
      c.d(l, {
        K: function () {
          return extract;
        },
      });
    },
    75486: function (e, l, c) {
      "use strict";
      function defineFormatter(e, l) {
        return ({ exclude: c, format: d }) => ({
          exclude: c,
          format: (e) => {
            let m = l(e);
            if (c) for (let e of c) delete m[e];
            return { ...m, ...d(e) };
          },
          type: e,
        });
      }
      c.d(l, {
        $: function () {
          return defineFormatter;
        },
      });
    },
    51036: function (e, l, c) {
      "use strict";
      function formatLog(e, { args: l, eventName: c } = {}) {
        return {
          ...e,
          blockHash: e.blockHash ? e.blockHash : null,
          blockNumber: e.blockNumber ? BigInt(e.blockNumber) : null,
          logIndex: e.logIndex ? Number(e.logIndex) : null,
          transactionHash: e.transactionHash ? e.transactionHash : null,
          transactionIndex: e.transactionIndex
            ? Number(e.transactionIndex)
            : null,
          ...(c ? { args: l, eventName: c } : {}),
        };
      }
      c.d(l, {
        U: function () {
          return formatLog;
        },
      });
    },
    55009: function (e, l, c) {
      "use strict";
      c.d(l, {
        Tr: function () {
          return formatTransaction;
        },
        c8: function () {
          return g;
        },
        y_: function () {
          return y;
        },
      });
      var d = c(3644),
        m = c(75486);
      let g = {
        "0x0": "legacy",
        "0x1": "eip2930",
        "0x2": "eip1559",
        "0x3": "eip4844",
        "0x4": "eip7702",
      };
      function formatTransaction(e) {
        let l = {
          ...e,
          blockHash: e.blockHash ? e.blockHash : null,
          blockNumber: e.blockNumber ? BigInt(e.blockNumber) : null,
          chainId: e.chainId ? (0, d.ly)(e.chainId) : void 0,
          gas: e.gas ? BigInt(e.gas) : void 0,
          gasPrice: e.gasPrice ? BigInt(e.gasPrice) : void 0,
          maxFeePerBlobGas: e.maxFeePerBlobGas
            ? BigInt(e.maxFeePerBlobGas)
            : void 0,
          maxFeePerGas: e.maxFeePerGas ? BigInt(e.maxFeePerGas) : void 0,
          maxPriorityFeePerGas: e.maxPriorityFeePerGas
            ? BigInt(e.maxPriorityFeePerGas)
            : void 0,
          nonce: e.nonce ? (0, d.ly)(e.nonce) : void 0,
          to: e.to ? e.to : null,
          transactionIndex: e.transactionIndex
            ? Number(e.transactionIndex)
            : null,
          type: e.type ? g[e.type] : void 0,
          typeHex: e.type ? e.type : void 0,
          value: e.value ? BigInt(e.value) : void 0,
          v: e.v ? BigInt(e.v) : void 0,
        };
        return (
          e.authorizationList &&
            (l.authorizationList = e.authorizationList.map((e) => ({
              address: e.address,
              chainId: Number(e.chainId),
              nonce: Number(e.nonce),
              r: e.r,
              s: e.s,
              yParity: Number(e.yParity),
            }))),
          (l.yParity = (() => {
            if (e.yParity) return Number(e.yParity);
            if ("bigint" == typeof l.v) {
              if (0n === l.v || 27n === l.v) return 0;
              if (1n === l.v || 28n === l.v) return 1;
              if (l.v >= 35n) return l.v % 2n === 0n ? 1 : 0;
            }
          })()),
          "legacy" === l.type &&
            (delete l.accessList,
            delete l.maxFeePerBlobGas,
            delete l.maxFeePerGas,
            delete l.maxPriorityFeePerGas,
            delete l.yParity),
          "eip2930" === l.type &&
            (delete l.maxFeePerBlobGas,
            delete l.maxFeePerGas,
            delete l.maxPriorityFeePerGas),
          "eip1559" === l.type && delete l.maxFeePerBlobGas,
          l
        );
      }
      let y = (0, m.$)("transaction", formatTransaction);
    },
    46134: function (e, l, c) {
      "use strict";
      c.d(l, {
        dI: function () {
          return C;
        },
        fA: function () {
          return formatTransactionReceipt;
        },
      });
      var d = c(3644),
        m = c(75486),
        g = c(51036),
        y = c(55009);
      let b = { "0x0": "reverted", "0x1": "success" };
      function formatTransactionReceipt(e) {
        let l = {
          ...e,
          blockNumber: e.blockNumber ? BigInt(e.blockNumber) : null,
          contractAddress: e.contractAddress ? e.contractAddress : null,
          cumulativeGasUsed: e.cumulativeGasUsed
            ? BigInt(e.cumulativeGasUsed)
            : null,
          effectiveGasPrice: e.effectiveGasPrice
            ? BigInt(e.effectiveGasPrice)
            : null,
          gasUsed: e.gasUsed ? BigInt(e.gasUsed) : null,
          logs: e.logs ? e.logs.map((e) => (0, g.U)(e)) : null,
          to: e.to ? e.to : null,
          transactionIndex: e.transactionIndex
            ? (0, d.ly)(e.transactionIndex)
            : null,
          status: e.status ? b[e.status] : null,
          type: e.type ? y.c8[e.type] || e.type : null,
        };
        return (
          e.blobGasPrice && (l.blobGasPrice = BigInt(e.blobGasPrice)),
          e.blobGasUsed && (l.blobGasUsed = BigInt(e.blobGasUsed)),
          l
        );
      }
      let C = (0, m.$)("transactionReceipt", formatTransactionReceipt);
    },
    36666: function (e, l, c) {
      "use strict";
      c.d(l, {
        iy: function () {
          return y;
        },
        tG: function () {
          return formatTransactionRequest;
        },
      });
      var d = c(1701),
        m = c(75486);
      let g = {
        legacy: "0x0",
        eip2930: "0x1",
        eip1559: "0x2",
        eip4844: "0x3",
        eip7702: "0x4",
      };
      function formatTransactionRequest(e) {
        let l = {};
        return (
          void 0 !== e.authorizationList &&
            (l.authorizationList = e.authorizationList.map((e) => ({
              address: e.address,
              r: e.r ? (0, d.eC)(BigInt(e.r)) : e.r,
              s: e.s ? (0, d.eC)(BigInt(e.s)) : e.s,
              chainId: (0, d.eC)(e.chainId),
              nonce: (0, d.eC)(e.nonce),
              ...(void 0 !== e.yParity
                ? { yParity: (0, d.eC)(e.yParity) }
                : {}),
              ...(void 0 !== e.v && void 0 === e.yParity
                ? { v: (0, d.eC)(e.v) }
                : {}),
            }))),
          void 0 !== e.accessList && (l.accessList = e.accessList),
          void 0 !== e.blobVersionedHashes &&
            (l.blobVersionedHashes = e.blobVersionedHashes),
          void 0 !== e.blobs &&
            ("string" != typeof e.blobs[0]
              ? (l.blobs = e.blobs.map((e) => (0, d.ci)(e)))
              : (l.blobs = e.blobs)),
          void 0 !== e.data && (l.data = e.data),
          void 0 !== e.from && (l.from = e.from),
          void 0 !== e.gas && (l.gas = (0, d.eC)(e.gas)),
          void 0 !== e.gasPrice && (l.gasPrice = (0, d.eC)(e.gasPrice)),
          void 0 !== e.maxFeePerBlobGas &&
            (l.maxFeePerBlobGas = (0, d.eC)(e.maxFeePerBlobGas)),
          void 0 !== e.maxFeePerGas &&
            (l.maxFeePerGas = (0, d.eC)(e.maxFeePerGas)),
          void 0 !== e.maxPriorityFeePerGas &&
            (l.maxPriorityFeePerGas = (0, d.eC)(e.maxPriorityFeePerGas)),
          void 0 !== e.nonce && (l.nonce = (0, d.eC)(e.nonce)),
          void 0 !== e.to && (l.to = e.to),
          void 0 !== e.type && (l.type = g[e.type]),
          void 0 !== e.value && (l.value = (0, d.eC)(e.value)),
          l
        );
      }
      let y = (0, m.$)("transactionRequest", formatTransactionRequest);
    },
    59351: function (e, l, c) {
      "use strict";
      function getAction(e, l, c) {
        let d = e[l.name];
        if ("function" == typeof d) return d;
        let m = e[c];
        return "function" == typeof m ? m : (c) => l(e, c);
      }
      c.d(l, {
        s: function () {
          return getAction;
        },
      });
    },
    83223: function (e, l, c) {
      "use strict";
      c.d(l, {
        w: function () {
          return keccak256;
        },
      });
      var d = c(79439),
        m = c(25622),
        g = c(23279),
        y = c(1701);
      function keccak256(e, l) {
        let c = (0, d.fr)((0, m.v)(e, { strict: !1 }) ? (0, g.O0)(e) : e);
        return "bytes" === (l || "hex") ? c : (0, y.NC)(c);
      }
    },
    15455: function (e, l, c) {
      "use strict";
      c.d(l, {
        J: function () {
          return sha256;
        },
      });
      var d = c(8088),
        m = c(25622),
        g = c(23279),
        y = c(1701);
      function sha256(e, l) {
        let c = (0, d.JQ)((0, m.v)(e, { strict: !1 }) ? (0, g.O0)(e) : e);
        return "bytes" === (l || "hex") ? c : (0, y.NC)(c);
      }
    },
    90107: function (e, l, c) {
      "use strict";
      c.d(l, {
        n: function () {
          return m;
        },
      });
      var d = c(46082);
      let m = d.r;
    },
    61895: function (e, l, c) {
      "use strict";
      c.d(l, {
        C: function () {
          return toFunctionSelector;
        },
      });
      var d = c(46548),
        m = c(46082);
      let toFunctionSelector = (e) => (0, d.tP)((0, m.r)(e), 0, 4);
    },
    46082: function (e, l, c) {
      "use strict";
      c.d(l, {
        r: function () {
          return toSignatureHash;
        },
      });
      var d = c(23279),
        m = c(83223);
      let hash = (e) => (0, m.w)((0, d.O0)(e));
      var g = c(95253),
        y = c(26456);
      let toSignature = (e) => {
        let l = "string" == typeof e ? e : (0, g.t)(e);
        return (function (e) {
          let l = !0,
            c = "",
            d = 0,
            m = "",
            g = !1;
          for (let y = 0; y < e.length; y++) {
            let b = e[y];
            if (
              (["(", ")", ","].includes(b) && (l = !0),
              "(" === b && d++,
              ")" === b && d--,
              l)
            ) {
              if (0 === d) {
                if (" " === b && ["event", "function", ""].includes(m)) m = "";
                else if (((m += b), ")" === b)) {
                  g = !0;
                  break;
                }
                continue;
              }
              if (" " === b) {
                "," !== e[y - 1] &&
                  "," !== c &&
                  ",(" !== c &&
                  ((c = ""), (l = !1));
                continue;
              }
              (m += b), (c += b);
            }
          }
          if (!g) throw new y.G("Unable to normalize signature.");
          return m;
        })(l);
      };
      function toSignatureHash(e) {
        return hash(toSignature(e));
      }
    },
    94065: function (e, l, c) {
      "use strict";
      c.d(l, {
        k: function () {
          return LruMap;
        },
      });
      let LruMap = class LruMap extends Map {
        constructor(e) {
          super(),
            Object.defineProperty(this, "maxSize", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            }),
            (this.maxSize = e);
        }
        get(e) {
          let l = super.get(e);
          return (
            super.has(e) && void 0 !== l && (this.delete(e), super.set(e, l)), l
          );
        }
        set(e, l) {
          if ((super.set(e, l), this.maxSize && this.size > this.maxSize)) {
            let e = this.keys().next().value;
            e && this.delete(e);
          }
          return this;
        }
      };
    },
    29951: function (e, l, c) {
      "use strict";
      c.d(l, {
        N7: function () {
          return observe;
        },
      });
      let d = new Map(),
        m = new Map(),
        g = 0;
      function observe(e, l, c) {
        let y = ++g,
          getListeners = () => d.get(e) || [],
          unsubscribe = () => {
            let l = getListeners();
            d.set(
              e,
              l.filter((e) => e.id !== y)
            );
          },
          unwatch = () => {
            let l = getListeners();
            if (!l.some((e) => e.id === y)) return;
            let c = m.get(e);
            1 === l.length && c && c(), unsubscribe();
          },
          b = getListeners();
        if ((d.set(e, [...b, { id: y, fns: l }]), b && b.length > 0))
          return unwatch;
        let C = {};
        for (let e in l)
          C[e] = (...l) => {
            let c = getListeners();
            if (0 !== c.length) for (let d of c) d.fns[e]?.(...l);
          };
        let P = c(C);
        return "function" == typeof P && m.set(e, P), unwatch;
      }
    },
    9075: function (e, l, c) {
      "use strict";
      c.d(l, {
        $: function () {
          return poll;
        },
      });
      var d = c(84779);
      function poll(e, { emitOnBegin: l, initialWaitTime: c, interval: m }) {
        let g = !0,
          unwatch = () => (g = !1),
          watch = async () => {
            let y;
            l && (y = await e({ unpoll: unwatch }));
            let b = (await c?.(y)) ?? m;
            await (0, d.D)(b);
            let poll = async () => {
              g && (await e({ unpoll: unwatch }), await (0, d.D)(m), poll());
            };
            poll();
          };
        return watch(), unwatch;
      }
    },
    92283: function (e, l, c) {
      "use strict";
      c.d(l, {
        S: function () {
          return createBatchScheduler;
        },
      });
      var d = c(22408);
      let m = new Map();
      function createBatchScheduler({
        fn: e,
        id: l,
        shouldSplitBatch: c,
        wait: g = 0,
        sort: y,
      }) {
        let exec = async () => {
            let l = getScheduler();
            flush();
            let c = l.map(({ args: e }) => e);
            0 !== c.length &&
              e(c)
                .then((e) => {
                  y && Array.isArray(e) && e.sort(y);
                  for (let c = 0; c < l.length; c++) {
                    let { resolve: d } = l[c];
                    d?.([e[c], e]);
                  }
                })
                .catch((e) => {
                  for (let c = 0; c < l.length; c++) {
                    let { reject: d } = l[c];
                    d?.(e);
                  }
                });
          },
          flush = () => m.delete(l),
          getBatchedArgs = () => getScheduler().map(({ args: e }) => e),
          getScheduler = () => m.get(l) || [],
          setScheduler = (e) => m.set(l, [...getScheduler(), e]);
        return {
          flush,
          async schedule(e) {
            let { promise: l, resolve: m, reject: y } = (0, d.n)(),
              b = c?.([...getBatchedArgs(), e]);
            b && exec();
            let C = getScheduler().length > 0;
            return (
              C
                ? setScheduler({ args: e, resolve: m, reject: y })
                : (setScheduler({ args: e, resolve: m, reject: y }),
                  setTimeout(exec, g)),
              l
            );
          },
        };
      }
    },
    22408: function (e, l, c) {
      "use strict";
      function withResolvers() {
        let resolve = () => void 0,
          reject = () => void 0,
          e = new Promise((e, l) => {
            (resolve = e), (reject = l);
          });
        return { promise: e, resolve, reject };
      }
      c.d(l, {
        n: function () {
          return withResolvers;
        },
      });
    },
    21339: function (e, l, c) {
      "use strict";
      c.d(l, {
        J: function () {
          return withRetry;
        },
      });
      var d = c(84779);
      function withRetry(
        e,
        { delay: l = 100, retryCount: c = 2, shouldRetry: m = () => !0 } = {}
      ) {
        return new Promise((g, y) => {
          let attemptRetry = async ({ count: b = 0 } = {}) => {
            let retry = async ({ error: e }) => {
              let c = "function" == typeof l ? l({ count: b, error: e }) : l;
              c && (await (0, d.D)(c)), attemptRetry({ count: b + 1 });
            };
            try {
              let l = await e();
              g(l);
            } catch (e) {
              if (b < c && (await m({ count: b, error: e })))
                return retry({ error: e });
              y(e);
            }
          };
          attemptRetry();
        });
      }
    },
    24770: function (e, l, c) {
      "use strict";
      function withTimeout(
        e,
        { errorInstance: l = Error("timed out"), timeout: c, signal: d }
      ) {
        return new Promise((m, g) => {
          (async () => {
            let y;
            try {
              let b = new AbortController();
              c > 0 &&
                (y = setTimeout(() => {
                  d ? b.abort() : g(l);
                }, c)),
                m(await e({ signal: b?.signal || null }));
            } catch (e) {
              e?.name === "AbortError" && g(l), g(e);
            } finally {
              clearTimeout(y);
            }
          })();
        });
      }
      c.d(l, {
        F: function () {
          return withTimeout;
        },
      });
    },
    13429: function (e, l, c) {
      "use strict";
      c.d(l, {
        eL: function () {
          return d;
        },
        lh: function () {
          return m;
        },
      });
      let d = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/,
        m =
          /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
    },
    420: function (e, l, c) {
      "use strict";
      c.d(l, {
        r: function () {
          return hashMessage;
        },
      });
      var d = c(83223),
        m = c(12265),
        g = c(59679),
        y = c(1701);
      function hashMessage(e, l) {
        return (0, d.w)(
          (function (e) {
            let l =
                "string" == typeof e
                  ? (0, y.$G)(e)
                  : "string" == typeof e.raw
                  ? e.raw
                  : (0, y.ci)(e.raw),
              c = (0, y.$G)(`Ethereum Signed Message:
${(0, g.d)(l)}`);
            return (0, m.zo)([c, l]);
          })(e),
          l
        );
      }
    },
    31668: function (e, l, c) {
      "use strict";
      c.d(l, {
        Jv: function () {
          return hashTypedData;
        },
      });
      var d = c(74600),
        m = c(12265),
        g = c(1701),
        y = c(83223),
        b = c(771),
        C = c(63964),
        P = c(32836),
        I = c(26456);
      let InvalidDomainError = class InvalidDomainError extends I.G {
        constructor({ domain: e }) {
          super(`Invalid domain "${(0, P.P)(e)}".`, {
            metaMessages: ["Must be a valid EIP-712 domain."],
          });
        }
      };
      let InvalidPrimaryTypeError = class InvalidPrimaryTypeError extends I.G {
        constructor({ primaryType: e, types: l }) {
          super(
            `Invalid primary type \`${e}\` must be one of \`${JSON.stringify(
              Object.keys(l)
            )}\`.`,
            {
              docsPath: "/api/glossary/Errors#typeddatainvalidprimarytypeerror",
              metaMessages: [
                "Check that the primary type is a key in `types`.",
              ],
            }
          );
        }
      };
      let InvalidStructTypeError = class InvalidStructTypeError extends I.G {
        constructor({ type: e }) {
          super(`Struct type "${e}" is invalid.`, {
            metaMessages: ["Struct type must not be a Solidity type."],
            name: "InvalidStructTypeError",
          });
        }
      };
      var B = c(87874),
        N = c(59679),
        F = c(13429);
      function hashTypedData(e) {
        let { domain: l = {}, message: c, primaryType: d } = e,
          P = {
            EIP712Domain: (function ({ domain: e }) {
              return [
                "string" == typeof e?.name && { name: "name", type: "string" },
                e?.version && { name: "version", type: "string" },
                ("number" == typeof e?.chainId ||
                  "bigint" == typeof e?.chainId) && {
                  name: "chainId",
                  type: "uint256",
                },
                e?.verifyingContract && {
                  name: "verifyingContract",
                  type: "address",
                },
                e?.salt && { name: "salt", type: "bytes32" },
              ].filter(Boolean);
            })({ domain: l }),
            ...e.types,
          };
        !(function (e) {
          let { domain: l, message: c, primaryType: d, types: m } = e,
            validateData = (e, l) => {
              for (let c of e) {
                let { name: e, type: d } = c,
                  y = l[e],
                  P = d.match(F.lh);
                if (P && ("number" == typeof y || "bigint" == typeof y)) {
                  let [e, l, c] = P;
                  (0, g.eC)(y, {
                    signed: "int" === l,
                    size: Number.parseInt(c) / 8,
                  });
                }
                if ("address" === d && "string" == typeof y && !(0, B.U)(y))
                  throw new C.b({ address: y });
                let I = d.match(F.eL);
                if (I) {
                  let [e, l] = I;
                  if (l && (0, N.d)(y) !== Number.parseInt(l))
                    throw new b.KY({
                      expectedSize: Number.parseInt(l),
                      givenSize: (0, N.d)(y),
                    });
                }
                let V = m[d];
                V &&
                  ((function (e) {
                    if (
                      "address" === e ||
                      "bool" === e ||
                      "string" === e ||
                      e.startsWith("bytes") ||
                      e.startsWith("uint") ||
                      e.startsWith("int")
                    )
                      throw new InvalidStructTypeError({ type: e });
                  })(d),
                  validateData(V, y));
              }
            };
          if (m.EIP712Domain && l) {
            if ("object" != typeof l)
              throw new InvalidDomainError({ domain: l });
            validateData(m.EIP712Domain, l);
          }
          if ("EIP712Domain" !== d) {
            if (m[d]) validateData(m[d], c);
            else
              throw new InvalidPrimaryTypeError({ primaryType: d, types: m });
          }
        })({ domain: l, message: c, primaryType: d, types: P });
        let I = ["0x1901"];
        return (
          l &&
            I.push(
              (function ({ domain: e, types: l }) {
                return hashStruct({
                  data: e,
                  primaryType: "EIP712Domain",
                  types: l,
                });
              })({ domain: l, types: P })
            ),
          "EIP712Domain" !== d &&
            I.push(hashStruct({ data: c, primaryType: d, types: P })),
          (0, y.w)((0, m.zo)(I))
        );
      }
      function hashStruct({ data: e, primaryType: l, types: c }) {
        let m = (function encodeData({ data: e, primaryType: l, types: c }) {
          let m = [{ type: "bytes32" }],
            b = [
              (function ({ primaryType: e, types: l }) {
                let c = (0, g.NC)(
                  (function ({ primaryType: e, types: l }) {
                    let c = "",
                      d = (function findTypeDependencies(
                        { primaryType: e, types: l },
                        c = new Set()
                      ) {
                        let d = e.match(/^\w*/u),
                          m = d?.[0];
                        if (c.has(m) || void 0 === l[m]) return c;
                        for (let e of (c.add(m), l[m]))
                          findTypeDependencies(
                            { primaryType: e.type, types: l },
                            c
                          );
                        return c;
                      })({ primaryType: e, types: l });
                    d.delete(e);
                    let m = [e, ...Array.from(d).sort()];
                    for (let e of m)
                      c += `${e}(${l[e]
                        .map(({ name: e, type: l }) => `${l} ${e}`)
                        .join(",")})`;
                    return c;
                  })({ primaryType: e, types: l })
                );
                return (0, y.w)(c);
              })({ primaryType: l, types: c }),
            ];
          for (let C of c[l]) {
            let [l, P] = (function encodeField({
              types: e,
              name: l,
              type: c,
              value: m,
            }) {
              if (void 0 !== e[c])
                return [
                  { type: "bytes32" },
                  (0, y.w)(encodeData({ data: m, primaryType: c, types: e })),
                ];
              if ("bytes" === c) {
                let e = m.length % 2 ? "0" : "";
                return (
                  (m = `0x${e + m.slice(2)}`),
                  [{ type: "bytes32" }, (0, y.w)(m)]
                );
              }
              if ("string" === c)
                return [{ type: "bytes32" }, (0, y.w)((0, g.NC)(m))];
              if (c.lastIndexOf("]") === c.length - 1) {
                let g = c.slice(0, c.lastIndexOf("[")),
                  b = m.map((c) =>
                    encodeField({ name: l, type: g, types: e, value: c })
                  );
                return [
                  { type: "bytes32" },
                  (0, y.w)(
                    (0, d.E)(
                      b.map(([e]) => e),
                      b.map(([, e]) => e)
                    )
                  ),
                ];
              }
              return [{ type: c }, m];
            })({ types: c, name: C.name, type: C.type, value: e[C.name] });
            m.push(l), b.push(P);
          }
          return (0, d.E)(m, b);
        })({ data: e, primaryType: l, types: c });
        return (0, y.w)(m);
      }
    },
    7921: function (e, l, c) {
      "use strict";
      c.d(l, {
        R: function () {
          return recoverAddress;
        },
      });
      var d = c(69301),
        m = c(83223),
        g = c(25622),
        y = c(3644),
        b = c(1701);
      async function recoverPublicKey({ hash: e, signature: l }) {
        let d = (0, g.v)(e) ? e : (0, b.NC)(e),
          { secp256k1: m } = await Promise.resolve().then(c.bind(c, 83708)),
          C = (() => {
            if ("object" == typeof l && "r" in l && "s" in l) {
              let { r: e, s: c, v: d, yParity: g } = l,
                b = Number(g ?? d),
                C = toRecoveryBit(b);
              return new m.Signature((0, y.y_)(e), (0, y.y_)(c)).addRecoveryBit(
                C
              );
            }
            let e = (0, g.v)(l) ? l : (0, b.NC)(l),
              c = (0, y.ly)(`0x${e.slice(130)}`),
              d = toRecoveryBit(c);
            return m.Signature.fromCompact(e.substring(2, 130)).addRecoveryBit(
              d
            );
          })(),
          P = C.recoverPublicKey(d.substring(2)).toHex(!1);
        return `0x${P}`;
      }
      function toRecoveryBit(e) {
        if (0 === e || 1 === e) return e;
        if (27 === e) return 0;
        if (28 === e) return 1;
        throw Error("Invalid yParityOrV value");
      }
      async function recoverAddress({ hash: e, signature: l }) {
        return (function (e) {
          let l = (0, m.w)(`0x${e.substring(4)}`).substring(26);
          return (0, d.x)(`0x${l}`);
        })(await recoverPublicKey({ hash: e, signature: l }));
      }
    },
    68916: function (e, l, c) {
      "use strict";
      c.d(l, {
        mF: function () {
          return serializeStateOverride;
        },
      });
      var d = c(63964),
        m = c(47118),
        g = c(76366),
        y = c(87874),
        b = c(1701);
      function serializeStateMapping(e) {
        if (e && 0 !== e.length)
          return e.reduce((e, { slot: l, value: c }) => {
            if (66 !== l.length)
              throw new m.W_({ size: l.length, targetSize: 66, type: "hex" });
            if (66 !== c.length)
              throw new m.W_({ size: c.length, targetSize: 66, type: "hex" });
            return (e[l] = c), e;
          }, {});
      }
      function serializeStateOverride(e) {
        if (!e) return;
        let l = {};
        for (let { address: c, ...m } of e) {
          if (!(0, y.U)(c, { strict: !1 })) throw new d.b({ address: c });
          if (l[c]) throw new g.Nc({ address: c });
          l[c] = (function (e) {
            let { balance: l, nonce: c, state: d, stateDiff: m, code: y } = e,
              C = {};
            if (
              (void 0 !== y && (C.code = y),
              void 0 !== l && (C.balance = (0, b.eC)(l)),
              void 0 !== c && (C.nonce = (0, b.eC)(c)),
              void 0 !== d && (C.state = serializeStateMapping(d)),
              void 0 !== m)
            ) {
              if (C.state) throw new g.Z8();
              C.stateDiff = serializeStateMapping(m);
            }
            return C;
          })(m);
        }
        return l;
      }
    },
    32836: function (e, l, c) {
      "use strict";
      c.d(l, {
        P: function () {
          return stringify;
        },
      });
      let stringify = (e, l, c) =>
        JSON.stringify(
          e,
          (e, c) => {
            let d = "bigint" == typeof c ? c.toString() : c;
            return "function" == typeof l ? l(e, d) : d;
          },
          c
        );
    },
    21233: function (e, l, c) {
      "use strict";
      c.d(l, {
        F: function () {
          return assertRequest;
        },
      });
      var d = c(40362),
        m = c(46010),
        g = c(63964),
        y = c(78e3),
        b = c(39751),
        C = c(87874);
      function assertRequest(e) {
        let {
            account: l,
            gasPrice: c,
            maxFeePerGas: P,
            maxPriorityFeePerGas: I,
            to: B,
          } = e,
          N = l ? (0, d.T)(l) : void 0;
        if (N && !(0, C.U)(N.address)) throw new g.b({ address: N.address });
        if (B && !(0, C.U)(B)) throw new g.b({ address: B });
        if (void 0 !== c && (void 0 !== P || void 0 !== I)) throw new b.xY();
        if (P && P > m.zL) throw new y.Hh({ maxFeePerGas: P });
        if (I && P && I > P)
          throw new y.cs({ maxFeePerGas: P, maxPriorityFeePerGas: I });
      }
    },
    48187: function (e, l, c) {
      "use strict";
      c.d(l, {
        l: function () {
          return getTransactionType;
        },
      });
      var d = c(39751);
      function getTransactionType(e) {
        if (e.type) return e.type;
        if (void 0 !== e.authorizationList) return "eip7702";
        if (
          void 0 !== e.blobs ||
          void 0 !== e.blobVersionedHashes ||
          void 0 !== e.maxFeePerBlobGas ||
          void 0 !== e.sidecars
        )
          return "eip4844";
        if (void 0 !== e.maxFeePerGas || void 0 !== e.maxPriorityFeePerGas)
          return "eip1559";
        if (void 0 !== e.gasPrice)
          return void 0 !== e.accessList ? "eip2930" : "legacy";
        throw new d.j3({ transaction: e });
      }
    },
    67170: function (e, l, c) {
      "use strict";
      c.d(l, {
        D: function () {
          return serializeTransaction;
        },
        d: function () {
          return toYParitySignatureArray;
        },
      });
      var d = c(39751),
        m = c(1701),
        g = c(17806),
        y = c(43208),
        b = c(31199),
        C = c(99694),
        P = c(12265),
        I = c(83749),
        B = c(10673),
        N = c(83204),
        F = c(46010),
        V = c(63964),
        G = c(26456),
        Q = c(25003),
        $ = c(853),
        Z = c(78e3),
        Y = c(87874),
        et = c(59679),
        en = c(46548),
        er = c(3644);
      function assertTransactionEIP1559(e) {
        let { chainId: l, maxPriorityFeePerGas: c, maxFeePerGas: d, to: m } = e;
        if (l <= 0) throw new $.hJ({ chainId: l });
        if (m && !(0, Y.U)(m)) throw new V.b({ address: m });
        if (d && d > F.zL) throw new Z.Hh({ maxFeePerGas: d });
        if (c && d && c > d)
          throw new Z.cs({ maxFeePerGas: d, maxPriorityFeePerGas: c });
      }
      var ei = c(48187);
      function serializeAccessList(e) {
        if (!e || 0 === e.length) return [];
        let l = [];
        for (let c = 0; c < e.length; c++) {
          let { address: m, storageKeys: g } = e[c];
          for (let e = 0; e < g.length; e++)
            if (g[e].length - 2 != 64) throw new d.JC({ storageKey: g[e] });
          if (!(0, Y.U)(m, { strict: !1 })) throw new V.b({ address: m });
          l.push([m, g]);
        }
        return l;
      }
      function serializeTransaction(e, l) {
        let c = (0, ei.l)(e);
        return "eip1559" === c
          ? (function (e, l) {
              let {
                chainId: c,
                gas: d,
                nonce: g,
                to: y,
                value: b,
                maxFeePerGas: C,
                maxPriorityFeePerGas: I,
                accessList: N,
                data: F,
              } = e;
              assertTransactionEIP1559(e);
              let V = serializeAccessList(N),
                G = [
                  (0, m.NC)(c),
                  g ? (0, m.NC)(g) : "0x",
                  I ? (0, m.NC)(I) : "0x",
                  C ? (0, m.NC)(C) : "0x",
                  d ? (0, m.NC)(d) : "0x",
                  y ?? "0x",
                  b ? (0, m.NC)(b) : "0x",
                  F ?? "0x",
                  V,
                  ...toYParitySignatureArray(e, l),
                ];
              return (0, P.SM)(["0x02", (0, B.LV)(G)]);
            })(e, l)
          : "eip2930" === c
          ? (function (e, l) {
              let {
                chainId: c,
                gas: d,
                data: g,
                nonce: y,
                to: b,
                value: C,
                accessList: I,
                gasPrice: N,
              } = e;
              !(function (e) {
                let {
                  chainId: l,
                  maxPriorityFeePerGas: c,
                  gasPrice: d,
                  maxFeePerGas: m,
                  to: g,
                } = e;
                if (l <= 0) throw new $.hJ({ chainId: l });
                if (g && !(0, Y.U)(g)) throw new V.b({ address: g });
                if (c || m)
                  throw new G.G(
                    "`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute."
                  );
                if (d && d > F.zL) throw new Z.Hh({ maxFeePerGas: d });
              })(e);
              let Q = serializeAccessList(I),
                et = [
                  (0, m.NC)(c),
                  y ? (0, m.NC)(y) : "0x",
                  N ? (0, m.NC)(N) : "0x",
                  d ? (0, m.NC)(d) : "0x",
                  b ?? "0x",
                  C ? (0, m.NC)(C) : "0x",
                  g ?? "0x",
                  Q,
                  ...toYParitySignatureArray(e, l),
                ];
              return (0, P.SM)(["0x01", (0, B.LV)(et)]);
            })(e, l)
          : "eip4844" === c
          ? (function (e, l) {
              let {
                chainId: c,
                gas: d,
                nonce: I,
                to: F,
                value: V,
                maxFeePerBlobGas: G,
                maxFeePerGas: $,
                maxPriorityFeePerGas: Z,
                accessList: Y,
                data: ei,
              } = e;
              !(function (e) {
                let { blobVersionedHashes: l } = e;
                if (l) {
                  if (0 === l.length) throw new Q.RX();
                  for (let e of l) {
                    let l = (0, et.d)(e),
                      c = (0, er.ly)((0, en.tP)(e, 0, 1));
                    if (32 !== l) throw new Q.xd({ hash: e, size: l });
                    if (c !== N.l) throw new Q.cJ({ hash: e, version: c });
                  }
                }
                assertTransactionEIP1559(e);
              })(e);
              let eo = e.blobVersionedHashes,
                ea = e.sidecars;
              if (e.blobs && (void 0 === eo || void 0 === ea)) {
                let l =
                    "string" == typeof e.blobs[0]
                      ? e.blobs
                      : e.blobs.map((e) => (0, m.ci)(e)),
                  c = e.kzg,
                  d = (0, g.P)({ blobs: l, kzg: c });
                if (
                  (void 0 === eo && (eo = (0, b.C)({ commitments: d })),
                  void 0 === ea)
                ) {
                  let e = (0, y.y)({ blobs: l, commitments: d, kzg: c });
                  ea = (0, C.j)({ blobs: l, commitments: d, proofs: e });
                }
              }
              let es = serializeAccessList(Y),
                el = [
                  (0, m.NC)(c),
                  I ? (0, m.NC)(I) : "0x",
                  Z ? (0, m.NC)(Z) : "0x",
                  $ ? (0, m.NC)($) : "0x",
                  d ? (0, m.NC)(d) : "0x",
                  F ?? "0x",
                  V ? (0, m.NC)(V) : "0x",
                  ei ?? "0x",
                  es,
                  G ? (0, m.NC)(G) : "0x",
                  eo ?? [],
                  ...toYParitySignatureArray(e, l),
                ],
                ec = [],
                eu = [],
                ed = [];
              if (ea)
                for (let e = 0; e < ea.length; e++) {
                  let { blob: l, commitment: c, proof: d } = ea[e];
                  ec.push(l), eu.push(c), ed.push(d);
                }
              return (0, P.SM)([
                "0x03",
                ea ? (0, B.LV)([el, ec, eu, ed]) : (0, B.LV)(el),
              ]);
            })(e, l)
          : "eip7702" === c
          ? (function (e, l) {
              let {
                authorizationList: c,
                chainId: d,
                gas: g,
                nonce: y,
                to: b,
                value: C,
                maxFeePerGas: I,
                maxPriorityFeePerGas: N,
                accessList: F,
                data: G,
              } = e;
              !(function (e) {
                let { authorizationList: l } = e;
                if (l)
                  for (let e of l) {
                    let { chainId: l } = e,
                      c = e.address;
                    if (!(0, Y.U)(c)) throw new V.b({ address: c });
                    if (l < 0) throw new $.hJ({ chainId: l });
                  }
                assertTransactionEIP1559(e);
              })(e);
              let Q = serializeAccessList(F),
                Z = (function (e) {
                  if (!e || 0 === e.length) return [];
                  let l = [];
                  for (let c of e) {
                    let { chainId: e, nonce: d, ...g } = c,
                      y = c.address;
                    l.push([
                      e ? (0, m.NC)(e) : "0x",
                      y,
                      d ? (0, m.NC)(d) : "0x",
                      ...toYParitySignatureArray({}, g),
                    ]);
                  }
                  return l;
                })(c);
              return (0, P.SM)([
                "0x04",
                (0, B.LV)([
                  (0, m.NC)(d),
                  y ? (0, m.NC)(y) : "0x",
                  N ? (0, m.NC)(N) : "0x",
                  I ? (0, m.NC)(I) : "0x",
                  g ? (0, m.NC)(g) : "0x",
                  b ?? "0x",
                  C ? (0, m.NC)(C) : "0x",
                  G ?? "0x",
                  Q,
                  Z,
                  ...toYParitySignatureArray(e, l),
                ]),
              ]);
            })(e, l)
          : (function (e, l) {
              let {
                chainId: c = 0,
                gas: g,
                data: y,
                nonce: b,
                to: C,
                value: P,
                gasPrice: N,
              } = e;
              !(function (e) {
                let {
                  chainId: l,
                  maxPriorityFeePerGas: c,
                  gasPrice: d,
                  maxFeePerGas: m,
                  to: g,
                } = e;
                if (g && !(0, Y.U)(g)) throw new V.b({ address: g });
                if (void 0 !== l && l <= 0) throw new $.hJ({ chainId: l });
                if (c || m)
                  throw new G.G(
                    "`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute."
                  );
                if (d && d > F.zL) throw new Z.Hh({ maxFeePerGas: d });
              })(e);
              let Q = [
                b ? (0, m.NC)(b) : "0x",
                N ? (0, m.NC)(N) : "0x",
                g ? (0, m.NC)(g) : "0x",
                C ?? "0x",
                P ? (0, m.NC)(P) : "0x",
                y ?? "0x",
              ];
              if (l) {
                let e = (() => {
                    if (l.v >= 35n) {
                      let e = (l.v - 35n) / 2n;
                      return e > 0 ? l.v : 27n + (35n === l.v ? 0n : 1n);
                    }
                    if (c > 0) return BigInt(2 * c) + BigInt(35n + l.v - 27n);
                    let e = 27n + (27n === l.v ? 0n : 1n);
                    if (l.v !== e) throw new d.vl({ v: l.v });
                    return e;
                  })(),
                  g = (0, I.f)(l.r),
                  y = (0, I.f)(l.s);
                Q = [
                  ...Q,
                  (0, m.NC)(e),
                  "0x00" === g ? "0x" : g,
                  "0x00" === y ? "0x" : y,
                ];
              } else c > 0 && (Q = [...Q, (0, m.NC)(c), "0x", "0x"]);
              return (0, B.LV)(Q);
            })(e, l);
      }
      function toYParitySignatureArray(e, l) {
        let c = l ?? e,
          { v: d, yParity: g } = c;
        if (void 0 === c.r || void 0 === c.s || (void 0 === d && void 0 === g))
          return [];
        let y = (0, I.f)(c.r),
          b = (0, I.f)(c.s),
          C =
            "number" == typeof g
              ? g
                ? (0, m.NC)(1)
                : "0x"
              : 0n === d
              ? "0x"
              : 1n === d
              ? (0, m.NC)(1)
              : 27n === d
              ? "0x"
              : (0, m.NC)(1);
        return [C, "0x00" === y ? "0x" : y, "0x00" === b ? "0x" : b];
      }
    },
    40130: function (e, l, c) {
      "use strict";
      let d;
      c.d(l, {
        h: function () {
          return uid;
        },
      });
      let m = 256;
      function uid(e = 11) {
        if (!d || m + e > 512) {
          (d = ""), (m = 0);
          for (let e = 0; e < 256; e++)
            d += ((256 + 256 * Math.random()) | 0).toString(16).substring(1);
        }
        return d.substring(m, m++ + e);
      }
    },
    61180: function (e, l, c) {
      "use strict";
      c.d(l, {
        d: function () {
          return formatEther;
        },
      });
      var d = c(43778),
        m = c(51055);
      function formatEther(e, l = "wei") {
        return (0, m.b)(e, d.ez[l]);
      }
    },
    41926: function (e, l, c) {
      "use strict";
      c.d(l, {
        o: function () {
          return formatGwei;
        },
      });
      var d = c(43778),
        m = c(51055);
      function formatGwei(e, l = "wei") {
        return (0, m.b)(e, d.Zn[l]);
      }
    },
    51055: function (e, l, c) {
      "use strict";
      function formatUnits(e, l) {
        let c = e.toString(),
          d = c.startsWith("-");
        d && (c = c.slice(1));
        let [m, g] = [
          (c = c.padStart(l, "0")).slice(0, c.length - l),
          c.slice(c.length - l),
        ];
        return (
          (g = g.replace(/(0+)$/, "")),
          `${d ? "-" : ""}${m || "0"}${g ? `.${g}` : ""}`
        );
      }
      c.d(l, {
        b: function () {
          return formatUnits;
        },
      });
    },
    84779: function (e, l, c) {
      "use strict";
      async function wait(e) {
        return new Promise((l) => setTimeout(l, e));
      }
      c.d(l, {
        D: function () {
          return wait;
        },
      });
    },
    16902: function (e, l, c) {
      "use strict";
      c.d(l, {
        V: function () {
          return g;
        },
        F: function () {
          return WagmiProvider;
        },
      });
      var d = c(50959);
      let m = !1;
      async function reconnect(e, l = {}) {
        let c;
        if (m) return [];
        (m = !0),
          e.setState((e) => ({
            ...e,
            status: e.current ? "reconnecting" : "connecting",
          }));
        let d = [];
        if (l.connectors?.length)
          for (let c of l.connectors) {
            let l;
            (l = "function" == typeof c ? e._internal.connectors.setup(c) : c),
              d.push(l);
          }
        else d.push(...e.connectors);
        try {
          c = await e.storage?.getItem("recentConnectorId");
        } catch {}
        let g = {};
        for (let [, l] of e.state.connections) g[l.connector.id] = 1;
        c && (g[c] = 0);
        let y =
            Object.keys(g).length > 0
              ? [...d].sort((e, l) => (g[e.id] ?? 10) - (g[l.id] ?? 10))
              : d,
          b = !1,
          C = [],
          P = [];
        for (let l of y) {
          let c = await l.getProvider().catch(() => void 0);
          if (!c || P.some((e) => e === c)) continue;
          let d = await l.isAuthorized();
          if (!d) continue;
          let m = await l.connect({ isReconnecting: !0 }).catch(() => null);
          m &&
            (l.emitter.off("connect", e._internal.events.connect),
            l.emitter.on("change", e._internal.events.change),
            l.emitter.on("disconnect", e._internal.events.disconnect),
            e.setState((e) => {
              let c = new Map(b ? e.connections : new Map()).set(l.uid, {
                accounts: m.accounts,
                chainId: m.chainId,
                connector: l,
              });
              return { ...e, current: b ? e.current : l.uid, connections: c };
            }),
            C.push({ accounts: m.accounts, chainId: m.chainId, connector: l }),
            P.push(c),
            (b = !0));
        }
        return (
          ("reconnecting" === e.state.status ||
            "connecting" === e.state.status) &&
            (b
              ? e.setState((e) => ({ ...e, status: "connected" }))
              : e.setState((e) => ({
                  ...e,
                  connections: new Map(),
                  current: null,
                  status: "disconnected",
                }))),
          (m = !1),
          C
        );
      }
      function Hydrate(e) {
        let {
            children: l,
            config: c,
            initialState: m,
            reconnectOnMount: g = !0,
          } = e,
          { onMount: y } = (function (e, l) {
            let { initialState: c, reconnectOnMount: d } = l;
            return (
              c &&
                !e._internal.store.persist.hasHydrated() &&
                e.setState({
                  ...c,
                  chainId: e.chains.some((e) => e.id === c.chainId)
                    ? c.chainId
                    : e.chains[0].id,
                  connections: d ? c.connections : new Map(),
                  status: d ? "reconnecting" : "disconnected",
                }),
              {
                async onMount() {
                  e._internal.ssr &&
                    (await e._internal.store.persist.rehydrate(),
                    e._internal.mipd &&
                      e._internal.connectors.setState((l) => {
                        let c = new Set();
                        for (let e of l ?? [])
                          if (e.rdns) {
                            let l = Array.isArray(e.rdns) ? e.rdns : [e.rdns];
                            for (let e of l) c.add(e);
                          }
                        let d = [],
                          m = e._internal.mipd?.getProviders() ?? [];
                        for (let l of m) {
                          if (c.has(l.info.rdns)) continue;
                          let m =
                              e._internal.connectors.providerDetailToConnector(
                                l
                              ),
                            g = e._internal.connectors.setup(m);
                          d.push(g);
                        }
                        return [...l, ...d];
                      })),
                    d
                      ? reconnect(e)
                      : e.storage &&
                        e.setState((e) => ({ ...e, connections: new Map() }));
                },
              }
            );
          })(c, { initialState: m, reconnectOnMount: g });
        c._internal.ssr || y();
        let b = (0, d.useRef)(!0);
        return (
          (0, d.useEffect)(() => {
            if (b.current && c._internal.ssr)
              return (
                y(),
                () => {
                  b.current = !1;
                }
              );
          }, []),
          l
        );
      }
      let g = (0, d.createContext)(void 0);
      function WagmiProvider(e) {
        let { children: l, config: c } = e;
        return (0, d.createElement)(
          Hydrate,
          e,
          (0, d.createElement)(g.Provider, { value: c }, l)
        );
      }
    },
    42561: function (e, l, c) {
      "use strict";
      c.d(l, {
        m: function () {
          return useAccount;
        },
      });
      var d = c(53156),
        m = c(75055),
        g = c(16396),
        y = c(54692),
        b = c(50959),
        C = c(63236);
      let isPlainObject = (e) => "object" == typeof e && !Array.isArray(e);
      function useAccount(e = {}) {
        let l = (0, g.Z)(e);
        return (function (e, l, c = l, d = y.v) {
          let m = (0, b.useRef)([]),
            g = (0, C.useSyncExternalStoreWithSelector)(
              e,
              l,
              c,
              (e) => e,
              (e, l) => {
                if (isPlainObject(e) && isPlainObject(l) && m.current.length) {
                  for (let c of m.current) {
                    let m = d(e[c], l[c]);
                    if (!m) return !1;
                  }
                  return !0;
                }
                return d(e, l);
              }
            );
          return (0, b.useMemo)(() => {
            if (isPlainObject(g)) {
              let e = { ...g },
                l = {};
              for (let [c, d] of Object.entries(e))
                l = {
                  ...l,
                  [c]: {
                    configurable: !1,
                    enumerable: !0,
                    get: () => (m.current.includes(c) || m.current.push(c), d),
                  },
                };
              return Object.defineProperties(e, l), e;
            }
            return g;
          }, [g]);
        })(
          (e) => (0, d.u)(l, { onChange: e }),
          () => (0, m.D)(l)
        );
      }
    },
    87360: function (e, l, c) {
      "use strict";
      function getChainId(e) {
        return e.state.chainId;
      }
      c.d(l, {
        x: function () {
          return useChainId;
        },
      });
      var d = c(50959),
        m = c(16396);
      function useChainId(e = {}) {
        let l = (0, m.Z)(e);
        return (0, d.useSyncExternalStore)(
          (e) =>
            (function (e, l) {
              let { onChange: c } = l;
              return e.subscribe((e) => e.chainId, c);
            })(l, { onChange: e }),
          () => getChainId(l),
          () => getChainId(l)
        );
      }
    },
    16396: function (e, l, c) {
      "use strict";
      c.d(l, {
        Z: function () {
          return useConfig;
        },
      });
      var d = c(50959),
        m = c(16902),
        g = c(28300);
      let getVersion = () => "wagmi@2.15.0";
      let BaseError = class BaseError extends g.G {
        constructor() {
          super(...arguments),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "WagmiError",
            });
        }
        get docsBaseUrl() {
          return "https://wagmi.sh/react";
        }
        get version() {
          return getVersion();
        }
      };
      let WagmiProviderNotFoundError = class WagmiProviderNotFoundError extends BaseError {
        constructor() {
          super("`useConfig` must be used within `WagmiProvider`.", {
            docsPath: "/api/WagmiProvider",
          }),
            Object.defineProperty(this, "name", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: "WagmiProviderNotFoundError",
            });
        }
      };
      function useConfig(e = {}) {
        let l = e.config ?? (0, d.useContext)(m.V);
        if (!l) throw new WagmiProviderNotFoundError();
        return l;
      }
    },
    88644: function (e, l, c) {
      "use strict";
      c.d(l, {
        q: function () {
          return useDisconnect;
        },
      });
      var d = c(19086);
      async function disconnect(e, l = {}) {
        let c;
        if (l.connector) c = l.connector;
        else {
          let { connections: l, current: d } = e.state,
            m = l.get(d);
          c = m?.connector;
        }
        let d = e.state.connections;
        c &&
          (await c.disconnect(),
          c.emitter.off("change", e._internal.events.change),
          c.emitter.off("disconnect", e._internal.events.disconnect),
          c.emitter.on("connect", e._internal.events.connect),
          d.delete(c.uid)),
          e.setState((e) => {
            if (0 === d.size)
              return {
                ...e,
                connections: new Map(),
                current: null,
                status: "disconnected",
              };
            let l = d.values().next().value;
            return { ...e, connections: new Map(d), current: l.connector.uid };
          });
        {
          let l = e.state.current;
          if (!l) return;
          let c = e.state.connections.get(l)?.connector;
          if (!c) return;
          await e.storage?.setItem("recentConnectorId", c.id);
        }
      }
      var m = c(16396),
        g = c(54692);
      let y = [];
      function getConnections(e) {
        let l = [...e.state.connections.values()];
        return "reconnecting" === e.state.status || (0, g.v)(y, l)
          ? y
          : ((y = l), l);
      }
      var b = c(50959);
      function useDisconnect(e = {}) {
        let { mutation: l } = e,
          c = (0, m.Z)(e),
          {
            mutate: y,
            mutateAsync: C,
            ...P
          } = (0, d.D)({
            ...l,
            mutationFn: (e) => disconnect(c, e),
            mutationKey: ["disconnect"],
          });
        return {
          ...P,
          connectors: (function (e = {}) {
            let l = (0, m.Z)(e);
            return (0, b.useSyncExternalStore)(
              (e) =>
                (function (e, l) {
                  let { onChange: c } = l;
                  return e.subscribe(() => getConnections(e), c, {
                    equalityFn: g.v,
                  });
                })(l, { onChange: e }),
              () => getConnections(l),
              () => getConnections(l)
            );
          })({ config: c }).map((e) => e.connector),
          disconnect: y,
          disconnectAsync: C,
        };
      }
    },
    28378: function (e, l, c) {
      "use strict";
      c.d(l, {
        F: function () {
          return useEnsName;
        },
      });
      var d = c(13227),
        m = c(32223),
        g = c(35116),
        y = c(39460),
        b = c(87360),
        C = c(16396);
      function useEnsName(e = {}) {
        let { address: l, query: c = {} } = e,
          P = (0, C.Z)(e),
          I = (0, b.x)({ config: P }),
          B = (function (e, l = {}) {
            return {
              async queryFn({ queryKey: l }) {
                let { address: c, scopeKey: g, ...y } = l[1];
                if (!c) throw Error("address is required");
                return (function (e, l) {
                  let { chainId: c, ...g } = l,
                    y = e.getClient({ chainId: c }),
                    b = (0, m.s)(y, d.w, "getEnsName");
                  return b(g);
                })(e, { ...y, address: c });
              },
              queryKey: (function (e = {}) {
                return ["ensName", (0, g.OP)(e)];
              })(l),
            };
          })(P, { ...e, chainId: e.chainId ?? I }),
          N = !!(l && (c.enabled ?? !0));
        return (0, y.aM)({ ...c, ...B, enabled: N });
      }
    },
    45266: function (e, l, c) {
      "use strict";
      c.d(l, {
        N: function () {
          return useReadContracts;
        },
      });
      var d = c(40906),
        m = c(35116),
        g = c(50959),
        y = c(39460),
        b = c(87360),
        C = c(16396);
      function useReadContracts(e = {}) {
        let { contracts: l = [], query: c = {} } = e,
          P = (0, C.Z)(e),
          I = (0, b.x)({ config: P }),
          B = (function (e, l = {}) {
            return {
              async queryFn({ queryKey: c }) {
                let m = [],
                  g = c[1].contracts.length;
                for (let e = 0; e < g; e++) {
                  let d = c[1].contracts[e],
                    g = l.contracts?.[e].abi;
                  m.push({ ...d, abi: g });
                }
                let { scopeKey: y, ...b } = c[1];
                return (0, d.J)(e, { ...b, contracts: m });
              },
              queryKey: (function (e = {}) {
                let l = [];
                for (let c of e.contracts ?? []) {
                  let { abi: d, ...m } = c;
                  l.push({ ...m, chainId: m.chainId ?? e.chainId });
                }
                return ["readContracts", (0, m.OP)({ ...e, contracts: l })];
              })(l),
            };
          })(P, { ...e, chainId: I }),
          N = (0, g.useMemo)(() => {
            let e = !1;
            for (let c of l) {
              let { abi: l, address: d, functionName: m } = c;
              if (!l || !d || !m) {
                e = !1;
                break;
              }
              e = !0;
            }
            return !!(e && (c.enabled ?? !0));
          }, [l, c.enabled]);
        return (0, y.aM)({
          ...B,
          ...c,
          enabled: N,
          structuralSharing: c.structuralSharing ?? m.if,
        });
      }
    },
    41038: function (e, l, c) {
      "use strict";
      c.d(l, {
        Q: function () {
          return useSignMessage;
        },
      });
      var d = c(19086),
        m = c(40362),
        g = c(68311),
        y = c(1701);
      async function signMessage(e, { account: l = e.account, message: c }) {
        if (!l) throw new g.o({ docsPath: "/docs/actions/wallet/signMessage" });
        let d = (0, m.T)(l);
        if (d.signMessage) return d.signMessage({ message: c });
        let b =
          "string" == typeof c
            ? (0, y.$G)(c)
            : c.raw instanceof Uint8Array
            ? (0, y.NC)(c.raw)
            : c.raw;
        return e.request(
          { method: "personal_sign", params: [b, d.address] },
          { retryCount: 0 }
        );
      }
      var b = c(32223),
        C = c(78907),
        P = c(54022),
        I = c(69301),
        B = c(99228);
      async function getConnectorClient(e, l = {}) {
        let c;
        if (l.connector) {
          let { connector: d } = l;
          if (
            "reconnecting" === e.state.status &&
            !d.getAccounts &&
            !d.getChainId
          )
            throw new B.$S({ connector: d });
          let [m, g] = await Promise.all([
            d.getAccounts().catch((e) => {
              if (null === l.account) return [];
              throw e;
            }),
            d.getChainId(),
          ]);
          c = { accounts: m, chainId: g, connector: d };
        } else c = e.state.connections.get(e.state.current);
        if (!c) throw new B.aH();
        let d = l.chainId ?? c.chainId,
          g = await c.connector.getChainId();
        if (g !== c.chainId)
          throw new B.XZ({ connectionChainId: c.chainId, connectorChainId: g });
        let y = c.connector;
        if (y.getClient) return y.getClient({ chainId: d });
        let b = (0, m.T)(l.account ?? c.accounts[0]);
        if (
          (b && (b.address = (0, I.K)(b.address)),
          l.account &&
            !c.accounts.some(
              (e) => e.toLowerCase() === b.address.toLowerCase()
            ))
        )
          throw new B.JK({ address: b.address, connector: y });
        let N = e.chains.find((e) => e.id === d),
          F = await c.connector.getProvider({ chainId: d });
        return (0, C.e)({
          account: b,
          chain: N,
          name: "Connector Client",
          transport: (e) => (0, P.P)(F)({ ...e, retryCount: 0 }),
        });
      }
      async function signMessage_signMessage(e, l) {
        let c;
        let { account: d, connector: m, ...g } = l;
        c =
          "object" == typeof d && "local" === d.type
            ? e.getClient()
            : await getConnectorClient(e, { account: d, connector: m });
        let y = (0, b.s)(c, signMessage, "signMessage");
        return y({ ...g, ...(d ? { account: d } : {}) });
      }
      var N = c(16396);
      function useSignMessage(e = {}) {
        let { mutation: l } = e,
          c = (0, N.Z)(e),
          {
            mutate: m,
            mutateAsync: g,
            ...y
          } = (0, d.D)({
            ...l,
            mutationFn: (e) => signMessage_signMessage(c, e),
            mutationKey: ["signMessage"],
          });
        return { ...y, signMessage: m, signMessageAsync: g };
      }
    },
    29002: function (e, l, c) {
      "use strict";
      c.d(l, {
        o: function () {
          return useSwitchChain;
        },
      });
      var d = c(19086),
        m = c(99228),
        g = c(90687);
      async function switchChain(e, l) {
        let { addEthereumChainParameter: c, chainId: d } = l,
          y = e.state.connections.get(l.connector?.uid ?? e.state.current);
        if (y) {
          let e = y.connector;
          if (!e.switchChain) throw new g.O({ connector: e });
          let l = await e.switchChain({
            addEthereumChainParameter: c,
            chainId: d,
          });
          return l;
        }
        let b = e.chains.find((e) => e.id === d);
        if (!b) throw new m.X4();
        return e.setState((e) => ({ ...e, chainId: d })), b;
      }
      var y = c(54692);
      let b = [];
      function getChains(e) {
        let l = e.chains;
        return (0, y.v)(b, l) ? b : ((b = l), l);
      }
      var C = c(50959),
        P = c(16396);
      function useSwitchChain(e = {}) {
        let { mutation: l } = e,
          c = (0, P.Z)(e),
          {
            mutate: m,
            mutateAsync: g,
            ...y
          } = (0, d.D)({
            ...l,
            mutationFn: (e) => switchChain(c, e),
            mutationKey: ["switchChain"],
          });
        return {
          ...y,
          chains: (function (e = {}) {
            let l = (0, P.Z)(e);
            return (0, C.useSyncExternalStore)(
              (e) =>
                (function (e, l) {
                  let { onChange: c } = l;
                  return e._internal.chains.subscribe((e, l) => {
                    c(e, l);
                  });
                })(l, { onChange: e }),
              () => getChains(l),
              () => getChains(l)
            );
          })({ config: c }),
          switchChain: m,
          switchChainAsync: g,
        };
      }
    },
    39460: function (e, l, c) {
      "use strict";
      c.d(l, {
        aM: function () {
          return useQuery;
        },
      });
      var d = c(68823),
        m = c(35116);
      function useQuery(e) {
        let l = (0, d.a)({ ...e, queryKeyHashFn: m.kq });
        return (l.queryKey = e.queryKey), l;
      }
    },
    51021: function (e) {
      "use strict";
      e.exports = JSON.parse(
        '[{"type":"constructor","inputs":[{"name":"_name","type":"string","internalType":"string"},{"name":"_symbol","type":"string","internalType":"string"},{"name":"_baseTokenAddress","type":"address","internalType":"address"},{"name":"_registry","type":"address","internalType":"contract PositionRegistry"},{"name":"_valueOracle","type":"address","internalType":"address"},{"name":"_vaultId","type":"uint256","internalType":"uint256"},{"name":"_managementFeeReceiver","type":"address","internalType":"address"},{"name":"_performanceFeeReceiver","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"FEE_PRECISION","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"TVL","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"amountAskedForWithdraw","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"asset","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"baseToken","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IERC20"}],"stateMutability":"view"},{"type":"function","name":"burnShares","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"calculateDepositShares","inputs":[{"name":"maxIterations","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"calculateWithdrawShares","inputs":[{"name":"maxIterations","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"changeDepositWaitingTime","inputs":[{"name":"_depositWaitingTime","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"changeWithdrawWaitingTime","inputs":[{"name":"_withdrawWaitingTime","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"checkIfTVLHasDroped","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"collectManagementFees","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"collectPerformanceFees","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"convertToAssets","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"convertToShares","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"currentWithdrawGroup","inputs":[],"outputs":[{"name":"lastId","type":"uint256","internalType":"uint256"},{"name":"totalCBAmount","type":"uint256","internalType":"uint256"},{"name":"totalCBAmountFullfilled","type":"uint256","internalType":"uint256"},{"name":"totalABAmount","type":"uint256","internalType":"uint256"},{"name":"isStarted","type":"bool","internalType":"bool"},{"name":"isFullfilled","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"deposit","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"referrer","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"deposit","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"depositLimitPerTransaction","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"depositLimitTotalAmount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"depositQueue","inputs":[],"outputs":[{"name":"first","type":"uint256","internalType":"uint256"},{"name":"middle","type":"uint256","internalType":"uint256"},{"name":"last","type":"uint256","internalType":"uint256"},{"name":"totalAWFDeposit","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"depositWaitingTime","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"emergencyStop","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"executeDeposit","inputs":[{"name":"maxI","type":"uint256","internalType":"uint256"},{"name":"connector","type":"address","internalType":"address"},{"name":"addLPdata","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"executeWithdraw","inputs":[{"name":"maxIterations","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fulfillCurrentWithdrawGroup","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getPositionTVL","inputs":[{"name":"position","type":"tuple","internalType":"struct HoldingPI","components":[{"name":"calculatorConnector","type":"address","internalType":"address"},{"name":"ownerConnector","type":"address","internalType":"address"},{"name":"positionId","type":"bytes32","internalType":"bytes32"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"additionalData","type":"bytes","internalType":"bytes"},{"name":"positionTimestamp","type":"uint256","internalType":"uint256"}]},{"name":"base","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getProfit","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getQueueItems","inputs":[{"name":"depositOrWithdraw","type":"bool","internalType":"bool"},{"name":"items","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"depositData","type":"tuple[]","internalType":"struct DepositRequest[]","components":[{"name":"receiver","type":"address","internalType":"address"},{"name":"recordTime","type":"uint256","internalType":"uint256"},{"name":"calculationTime","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"shares","type":"uint256","internalType":"uint256"}]},{"name":"withdrawData","type":"tuple[]","internalType":"struct WithdrawRequest[]","components":[{"name":"owner","type":"address","internalType":"address"},{"name":"receiver","type":"address","internalType":"address"},{"name":"recordTime","type":"uint256","internalType":"uint256"},{"name":"calculationTime","type":"uint256","internalType":"uint256"},{"name":"shares","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getUnderlyingTokens","inputs":[{"name":"positionTypeId","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"lastFeeDistributionTime","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"managementFee","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"managementFeeReceiver","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"maxDeposit","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"maxMint","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"maxRedeem","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"maxWithdraw","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"mint","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"neededAssetsForWithdraw","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"paused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"performanceFee","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"performanceFeeReceiver","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"preformanceFeeSharesWaitingForDistribution","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"previewDeposit","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"previewMint","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"previewRedeem","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"previewWithdraw","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"profitStoredTime","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"recordProfitForFee","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"redeem","inputs":[{"name":"shares","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"},{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"registry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract PositionRegistry"}],"stateMutability":"view"},{"type":"function","name":"rescue","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"resetMiddle","inputs":[{"name":"newMiddle","type":"uint256","internalType":"uint256"},{"name":"depositOrWithdraw","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"retrieveTokensForWithdraw","inputs":[{"name":"retrieveData","type":"tuple[]","internalType":"struct RetrieveData[]","components":[{"name":"withdrawAmount","type":"uint256","internalType":"uint256"},{"name":"connectorAddress","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"sendTokensToTrustedAddress","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"","type":"address","internalType":"address"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"setDepositLimits","inputs":[{"name":"_depositLimitPerTransaction","type":"uint256","internalType":"uint256"},{"name":"_depositTotalAmount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setFeeReceivers","inputs":[{"name":"_withdrawFeeReceiver","type":"address","internalType":"address"},{"name":"_performanceFeeReceiver","type":"address","internalType":"address"},{"name":"_managementFeeReceiver","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setFees","inputs":[{"name":"_withdrawFee","type":"uint256","internalType":"uint256"},{"name":"_performanceFee","type":"uint256","internalType":"uint256"},{"name":"_managementFee","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"startCurrentWithdrawGroup","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"storedProfitForFee","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"totalAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalDepositedAmount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalProfitCalculated","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalWithdrawnAmount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"unpause","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateValueOracle","inputs":[{"name":"_valueOracle","type":"address","internalType":"contract INoyaValueOracle"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"valueOracle","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract INoyaValueOracle"}],"stateMutability":"view"},{"type":"function","name":"vaultId","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"withdraw","inputs":[{"name":"share","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdraw","inputs":[{"name":"assets","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"},{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"withdrawFee","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"withdrawFeeReceiver","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"withdrawQueue","inputs":[],"outputs":[{"name":"first","type":"uint256","internalType":"uint256"},{"name":"middle","type":"uint256","internalType":"uint256"},{"name":"last","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"withdrawRequestsByAddress","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"withdrawWaitingTime","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"CalculateDeposit","inputs":[{"name":"depositId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"receiver","type":"address","indexed":false,"internalType":"address"},{"name":"recordTime","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"sharePrice","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"CalculateWithdraw","inputs":[{"name":"withdrawId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"owner","type":"address","indexed":false,"internalType":"address"},{"name":"receiver","type":"address","indexed":false,"internalType":"address"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"calculatedAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"recordTime","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Deposit","inputs":[{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"assets","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ExecuteDeposit","inputs":[{"name":"depositId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"receiver","type":"address","indexed":false,"internalType":"address"},{"name":"recordTime","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"sharePrice","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ExecuteWithdraw","inputs":[{"name":"withdrawId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"owner","type":"address","indexed":false,"internalType":"address"},{"name":"receiver","type":"address","indexed":false,"internalType":"address"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"calculatedAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"sendedAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"recordTime","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"FeeRatesChanged","inputs":[{"name":"","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"FeeRecepientsChanged","inputs":[{"name":"","type":"address","indexed":false,"internalType":"address"},{"name":"","type":"address","indexed":false,"internalType":"address"},{"name":"","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"MoveTheMiddle","inputs":[{"name":"newMiddle","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"depositOrWithdraw","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"Paused","inputs":[{"name":"account","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RecordDeposit","inputs":[{"name":"depositId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"receiver","type":"address","indexed":false,"internalType":"address"},{"name":"recordTime","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"referrer","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RecordWithdraw","inputs":[{"name":"withdrawId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"owner","type":"address","indexed":false,"internalType":"address"},{"name":"receiver","type":"address","indexed":false,"internalType":"address"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"recordTime","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SetDepositLimits","inputs":[{"name":"depositLimitPerTransaction","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"depositTotalAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SetDepositWaitingTime","inputs":[{"name":"depositWaitingTime","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SetWithdrawWaitingTime","inputs":[{"name":"withdrawWaitingTime","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Unpaused","inputs":[{"name":"account","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ValueOracleUpdated","inputs":[{"name":"valueOracle","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Withdraw","inputs":[{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"assets","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"WithdrawGroupFulfilled","inputs":[{"name":"lastId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalCBAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalABAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"WithdrawGroupStarted","inputs":[{"name":"lastId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalCBAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"AddressEmptyCode","inputs":[{"name":"target","type":"address","internalType":"address"}]},{"type":"error","name":"AddressInsufficientBalance","inputs":[{"name":"account","type":"address","internalType":"address"}]},{"type":"error","name":"ERC20InsufficientAllowance","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"allowance","type":"uint256","internalType":"uint256"},{"name":"needed","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"ERC20InsufficientBalance","inputs":[{"name":"sender","type":"address","internalType":"address"},{"name":"balance","type":"uint256","internalType":"uint256"},{"name":"needed","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"ERC20InvalidApprover","inputs":[{"name":"approver","type":"address","internalType":"address"}]},{"type":"error","name":"ERC20InvalidReceiver","inputs":[{"name":"receiver","type":"address","internalType":"address"}]},{"type":"error","name":"ERC20InvalidSender","inputs":[{"name":"sender","type":"address","internalType":"address"}]},{"type":"error","name":"ERC20InvalidSpender","inputs":[{"name":"spender","type":"address","internalType":"address"}]},{"type":"error","name":"ERC4626ExceededMaxDeposit","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"assets","type":"uint256","internalType":"uint256"},{"name":"max","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"ERC4626ExceededMaxMint","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"shares","type":"uint256","internalType":"uint256"},{"name":"max","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"ERC4626ExceededMaxRedeem","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"shares","type":"uint256","internalType":"uint256"},{"name":"max","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"ERC4626ExceededMaxWithdraw","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"assets","type":"uint256","internalType":"uint256"},{"name":"max","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"EnforcedPause","inputs":[]},{"type":"error","name":"ExpectedPause","inputs":[]},{"type":"error","name":"FailedInnerCall","inputs":[]},{"type":"error","name":"MathOverflowedMulDiv","inputs":[]},{"type":"error","name":"NoyaAccounting_DepositLimitPerTransactionExceeded","inputs":[]},{"type":"error","name":"NoyaAccounting_INSUFFICIENT_FUNDS","inputs":[{"name":"balance","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"amountForWithdraw","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"NoyaAccounting_INVALID_AMOUNT","inputs":[]},{"type":"error","name":"NoyaAccounting_InvalidPositionType","inputs":[]},{"type":"error","name":"NoyaAccounting_InvalidTimeForCalculation","inputs":[]},{"type":"error","name":"NoyaAccounting_NOT_READY_TO_FULFILL","inputs":[]},{"type":"error","name":"NoyaAccounting_RequestIsNotCalculated","inputs":[]},{"type":"error","name":"NoyaAccounting_ThereIsAnActiveWithdrawGroup","inputs":[]},{"type":"error","name":"NoyaAccounting_TotalDepositLimitExceeded","inputs":[]},{"type":"error","name":"NoyaAccounting_banalceAfterIsNotEnough","inputs":[]},{"type":"error","name":"NoyaGovernance_Unauthorized","inputs":[{"name":"sender","type":"address","internalType":"address"}]},{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]},{"type":"error","name":"SafeERC20FailedOperation","inputs":[{"name":"token","type":"address","internalType":"address"}]}]'
      );
    },
    41398: function (e) {
      "use strict";
      e.exports = JSON.parse(
        '[{"inputs":[{"internalType":"contract IERC20","name":"underlyingToken","type":"address"},{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"BondingDurationIsNotFinished","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"ERC20InvalidUnderlying","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidDepositId","type":"error"},{"inputs":[],"name":"NotTheOwner","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"depositId","type":"uint256"}],"name":"Restaked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"depositId","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"depositId","type":"uint256"}],"name":"Unbonded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"_recover","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"depositFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"depositId","type":"uint256"},{"internalType":"uint256","name":"newDuration","type":"uint256"}],"name":"restake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"underlying","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"userStakes","outputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"unbondTimestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256[]","name":"depositIds","type":"uint256[]"}],"name":"withdrawMultiple","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]'
      );
    },
  },
  function (e) {
    var __webpack_exec__ = function (l) {
      return e((e.s = l));
    };
    e.O(0, [9774, 179], function () {
      return __webpack_exec__(69329), __webpack_exec__(22298);
    }),
      (_N_E = e.O());
  },
]);
